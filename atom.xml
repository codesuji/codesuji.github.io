<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codesuji</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codesuji.com/"/>
  <updated>2017-12-27T14:32:42.775Z</updated>
  <id>http://codesuji.com/</id>
  
  <author>
    <name>codesuji.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Power of the Forward Pipe</title>
    <link href="http://codesuji.com/2017/12/26/The-Power-of-the-Forward-Pipe/"/>
    <id>http://codesuji.com/2017/12/26/The-Power-of-the-Forward-Pipe/</id>
    <published>2017-12-27T03:52:52.000Z</published>
    <updated>2017-12-27T14:32:42.775Z</updated>
    
    <content type="html"><![CDATA[<p>… or <code>(* Why I &lt;3 the |&gt; *)</code> …</p><p>This is a light post, but I wanted to provide some advocacy for the <code>|&gt;</code> (forward pipe).  To F# developers, it is a well-known operator.  It hardly needs introduction or promotion for heavier use.  With that said, it can be underappreciated that F# provides native tooling for easy data processing development models.  If F# is the ETL language, then <code>|&gt;</code> is the glue that holds all of the processing components together.</p><a id="more"></a><p>When talking to people about F#, a recurring theme is readability.  It is worth leveraging this strength.  Using <code>|&gt;</code> to implement data transformations and processing is an intuitive way to enhance readability.  It encourages a natural reading of the flow of data through the application.  It can be simply described as: the data flows from top to bottom, being pushed through the pipes as directed.  F#’s indentation aids in calling out sub-processing when necessary.  Admittedly, this concept isn’t unique to F#.  But the contructs of the language make this a natural approach.  Most languages would be hard pressed to match such a clean and readable syntax for such common, and sometimes involved, tasks.  In the end, it is not just about accomplishing a goal, but ensuring that future developers can easily decipher the intent.  I believe <code>|&gt;</code> assists in that result.  With all that said, it is time to show some code.</p><p>First, I’ll make an arbitrary dataset.  To keep things simple, it is a sequence of tuples (x, y), where x is random values between 0 and 10, and y is cosine(x).  See, I’m using it already :) It truly is a workhorse of pushing data, but this is hardly exciting.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">let</span> rows =</span><br><span class="line">  <span class="keyword">let</span> r = <span class="keyword">new</span> System.Random()</span><br><span class="line">  [<span class="number">0</span> .. <span class="number">10000</span>]</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> _ -&gt; </span><br><span class="line">    <span class="keyword">let</span> x = r.NextDouble() * <span class="number">10.</span></span><br><span class="line">    (x, Math.Cos(x)))</span><br></pre></td></tr></table></figure><p>Any good ETL process needs some transformation and filtering functions. In a real program, these would be the main blocks of business logic.  For here, filtering will only include evens, and transformations will be <code>y&#39; = (y + x) + 2</code>.  I also use this as an opportunity to use composition to chain transformations.  F#’s function composition operator shares a linguistic theme, the <code>&gt;&gt;</code> shows an underlying movement of data.  I realize function composition isn’t typically described in such terms, but ultimately a similar intent is being accomplished.   Additionally I make a functional version of <code>floor</code> because, to my functional sensiblities, it feels cleaner.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floor (x:float) = Math.Floor(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isEven (x:float) = (floor x) % <span class="number">2.</span> = <span class="number">0.</span></span><br><span class="line"><span class="keyword">let</span> filterRow (x:float, y:float) = isEven y</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xPlusY (x:float, y:float) = (x, y + x)</span><br><span class="line"><span class="keyword">let</span> yPlus2 (x:float, y:float) = (x, y + <span class="number">2.</span>)</span><br><span class="line"><span class="keyword">let</span> transformRow = (xPlusY &gt;&gt; yPlus2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> averageYs (x:float, items:seq&lt;float*float&gt;) = </span><br><span class="line">  <span class="keyword">let</span> avg = </span><br><span class="line">    items </span><br><span class="line">    |&gt; Seq.averageBy (<span class="keyword">fun</span> (_, y) -&gt; y)</span><br><span class="line">  (x,avg)</span><br></pre></td></tr></table></figure><p>Now it is time to process the dataset.  I use a series of filtering, transforms, and grouping.  This is a simple example, but what I enjoy is how clean it is to reason about.  The data flows from top to bottom.  <code>filter</code> and <code>map</code> perform row-level processing while data-set level grouping is just as easy.  The syntax is light enough to get out of the way, but descriptive enough to be instructive. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> transformedRows = </span><br><span class="line">  rows </span><br><span class="line">  <span class="comment">// Filter</span></span><br><span class="line">  |&gt; Seq.filter filterRow</span><br><span class="line">  <span class="comment">// Transform</span></span><br><span class="line">  |&gt; Seq.map transformRow</span><br><span class="line">  <span class="comment">// Dataset-level grouping</span></span><br><span class="line">  |&gt; Seq.groupBy (<span class="keyword">fun</span> (x, _) -&gt; floor x)</span><br><span class="line">  |&gt; Seq.sortBy (<span class="keyword">fun</span> (x, _) -&gt; x)</span><br><span class="line">  <span class="comment">// Results (x, avg(y))</span></span><br><span class="line">  |&gt; Seq.map averageYs</span><br></pre></td></tr></table></figure><p>Since it is always helpful to see the data, here is what my test set and results look like.  Have I mentioned how useful F#’s repl is when doing data processing?</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; rows</span><br><span class="line">- ;;</span><br><span class="line"><span class="keyword">val</span> it : seq&lt;float * float&gt; =</span><br><span class="line">  seq</span><br><span class="line">    [(<span class="number">6.769300023</span>, <span class="number">0.88415471</span>); (<span class="number">2.243308668</span>, <span class="number">-0.6229532528</span>);</span><br><span class="line">     (<span class="number">0.623326558</span>, <span class="number">0.8119411099</span>); (<span class="number">9.159116824</span>, <span class="number">-0.9649191321</span>); ...]</span><br><span class="line"></span><br><span class="line">&gt; transformedRows |&gt; Seq.iter (printfn <span class="string">"%A"</span>)</span><br><span class="line">- ;;</span><br><span class="line">(<span class="number">0.0</span>, <span class="number">3.34397848</span>)</span><br><span class="line">(<span class="number">1.0</span>, <span class="number">3.563359213</span>)</span><br><span class="line">(<span class="number">4.0</span>, <span class="number">6.996100278</span>)</span><br><span class="line">(<span class="number">5.0</span>, <span class="number">8.178838086</span>)</span><br><span class="line">(<span class="number">6.0</span>, <span class="number">9.440792772</span>)</span><br><span class="line">(<span class="number">7.0</span>, <span class="number">9.827865885</span>)</span><br></pre></td></tr></table></figure><p>This is all well and good, not even really that exciting (is cleaniness anticlimatic?).  But I can take this a little further.  Let’s say I want to introduce parallelism, but don’t want to sacrifice readablity.  Conveniently <code>async</code> is provided natively.  First, deciding what to parallelize. For sake of this post, filtering and row transformation will be done in parallel.  Second, make an async transform function.  This requires a minor adaptation of the code.  Extract the part of the process, and wrap it in an <code>async { ... }</code>.  Well, that was easy.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> transformRowsAsync (rows) = async &#123;</span><br><span class="line">  <span class="keyword">return</span> </span><br><span class="line">    rows</span><br><span class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> (x, _) -&gt; isEven x)</span><br><span class="line">    |&gt; Seq.map transformRow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once that is in place, the data needs to be broken into segments that can be run in parallel.  Luckily <code>Seq.chunkBySize</code> does exactly what I need.  It converts a sequence into a sequence of sequences (of equal length, so the load is balanced).  I then feed these sub-sequences into <code>Async.Parallel</code>, and wait for them to complete.  Once they are done processing, <code>concat</code> them back into a single sequence for dataset-level processing.  As you can imagine, expensive transforms would benefit from this parallelism.  And the dataflow hardly changes. It’s still easy to read and reason about.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> transformedRowsAsync = </span><br><span class="line">  rows</span><br><span class="line">  <span class="comment">// Split into subsets</span></span><br><span class="line">  |&gt; Seq.chunkBySize <span class="number">10</span></span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> subList -&gt; transformRowsAsync subList)</span><br><span class="line">  <span class="comment">// Parallel processinng</span></span><br><span class="line">  |&gt; Async.Parallel</span><br><span class="line">  |&gt; Async.RunSynchronously </span><br><span class="line">  <span class="comment">// Put back together</span></span><br><span class="line">  |&gt; Seq.concat</span><br><span class="line">  <span class="comment">// Do set-level processing</span></span><br><span class="line">  |&gt; Seq.groupBy (<span class="keyword">fun</span> (x, _) -&gt; floor x)</span><br><span class="line">  |&gt; Seq.sortBy (<span class="keyword">fun</span> (x, _) -&gt; x)</span><br><span class="line">  <span class="comment">// Results (x, avg(y))</span></span><br><span class="line">  |&gt; Seq.map averageYs</span><br></pre></td></tr></table></figure><p>These are just some of the native ways data flows can be represented.  To work with real data, pair this with <a href="http://fsharp.github.io/FSharp.Data/" target="_blank" rel="noopener">F#’s Data Type Providers</a>, and this can be a strong, but simple paradigm for data processing.  I think this can take most people a long way.  But what if you need more.  Then you can take the extra step to use frameworks like <a href="http://mbrace.io/" target="_blank" rel="noopener">MBrace</a> and <a href="http://getakka.net/" target="_blank" rel="noopener">Akka.NET</a>.  Hopefully this provides a bit of inspiration to embrace the <code>|&gt;</code> and leverage the power of F# for ETL in the future.  Until next year…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;… or &lt;code&gt;(* Why I &amp;lt;3 the |&amp;gt; *)&lt;/code&gt; …&lt;/p&gt;
&lt;p&gt;This is a light post, but I wanted to provide some advocacy for the &lt;code&gt;|&amp;gt;&lt;/code&gt; (forward pipe).  To F# developers, it is a well-known operator.  It hardly needs introduction or promotion for heavier use.  With that said, it can be underappreciated that F# provides native tooling for easy data processing development models.  If F# is the ETL language, then &lt;code&gt;|&amp;gt;&lt;/code&gt; is the glue that holds all of the processing components together.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
  </entry>
  
  <entry>
    <title>K-Means Clustering with F#</title>
    <link href="http://codesuji.com/2017/08/27/K-Means-Clustering-with-F/"/>
    <id>http://codesuji.com/2017/08/27/K-Means-Clustering-with-F/</id>
    <published>2017-08-27T09:53:01.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>The topic for today is leveraging K-Means clustering to perform simple Las Vegas hotel data analysis.  This will be done using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="http://accord-framework.net/" target="_blank" rel="noopener">Accord.NET</a>.</p><a id="more"></a><p>K-Means clustering can be a useful tool when performing data analysis, and F# is an obvious tool for some quick transforms and reporting.  This post will use customer satisfaction survey data for several Las Vegas hotels.  I will focus on hotel similarity based on available ammenties.  Based on this similarity I will then compare hotels against their relative counterparts.  The data was obtained from the <a href="https://archive.ics.uci.edu/ml/datasets/Las+Vegas+Strip" target="_blank" rel="noopener">UCI Machine Learning Repository</a>.  This data is from “Stripping customers’ feedback on hotels through data mining: The case of Las Vegas Strip. Tourism Management Perspectives”<sub>[1]</sub>.  If you want to follow along, go out and grab the data.  Now, without further delay.</p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is the paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line">nuget Accord</span><br><span class="line">nuget Accord.MachineLearning</span><br><span class="line">nuget Accord.Math</span><br><span class="line">nuget FSharp.Data</span><br><span class="line">nuget FSharp.Charting</span><br></pre></td></tr></table></figure><p>First, setup the libraries and defaults.  <code>k</code> will be the number of clusters, which is 5.  I’ll go into more detail later why that is my magic number.  The datafile is a <code>;</code> delimited file, and the <code>CSVProvider</code> from <code>FSharp.Data</code> makes loading the data easy money. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">System.IO.Directory.SetCurrentDirectory(__SOURCE_DIRECTORY__)</span><br><span class="line"></span><br><span class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></span><br><span class="line">#r <span class="string">"../packages/FSharp.Charting/lib/net45/FSharp.Charting.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord/lib/net45/Accord.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.MachineLearning/lib/net45/Accord.MachineLearning.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.Core.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Statistics/lib/net45/Accord.Statistics.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FSharp.Data</span><br><span class="line"><span class="keyword">open</span> Accord</span><br><span class="line"><span class="keyword">open</span> Accord.MachineLearning</span><br><span class="line"><span class="keyword">open</span> Accord.Math</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> k = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> VegasDataFilename = <span class="string">"../data/LasVegasTripAdvisorReviews-Dataset.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">VegasData</span> </span>= CsvProvider&lt;VegasDataFilename, <span class="string">";"</span>&gt;</span><br></pre></td></tr></table></figure><p>The data is structured as multiple review instances per hotel.  To get the data in the desired format, some quick transformation steps are required.  For the First step, group data by Hotel into <code>allData</code>.  Second, grab a distinct record for each hotel.  For this I use <code>(snd &gt;&gt; Array.head)</code> to extract the first record from each hotel group.  Third, aggregate each hotel’s specific scores so an average can be calculated into <code>hotelScores</code>.  Finally, grab a list of hotel names for later reporting.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> allData = </span><br><span class="line">  VegasData.Load(VegasDataFilename).Rows</span><br><span class="line">  |&gt; Seq.toArray</span><br><span class="line">  |&gt; Array.groupBy (<span class="keyword">fun</span> x -&gt; x.``Hotel name``)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hotelAmmenities =</span><br><span class="line">  allData </span><br><span class="line">  |&gt; Array.map (snd &gt;&gt; Array.head)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hotelScores = </span><br><span class="line">  allData</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> (hotelName, rows) -&gt; </span><br><span class="line">    hotelName, </span><br><span class="line">    (rows |&gt; Array.averageBy (<span class="keyword">fun</span> x -&gt; float x.Score)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataNames = </span><br><span class="line">  hotelAmmenities </span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.``Hotel name``)</span><br></pre></td></tr></table></figure><p>There is one final transformation.  The Accord.NET K-Means object expects data as an array of arrays of floats.  Here I pull out the ammenities that I care about.  Does it have a pool, gym, tennis court, spa, casino <em>(you can have a hotel in vegas without a casino?)</em>, free internet, and it’s star rating.  From the dataset provided, these are the most interesting.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> boolToFloat x = <span class="keyword">if</span> x <span class="keyword">then</span> <span class="number">1.</span> <span class="keyword">else</span> <span class="number">0.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataValues = </span><br><span class="line"> hotelAmmenities </span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> row -&gt; </span><br><span class="line">    [|</span><br><span class="line">      boolToFloat row.Pool;</span><br><span class="line">      boolToFloat row.Gym;</span><br><span class="line">      boolToFloat row.``Tennis court``;</span><br><span class="line">      boolToFloat row.Spa;</span><br><span class="line">      boolToFloat row.Casino;</span><br><span class="line">      boolToFloat row.``Free internet``;</span><br><span class="line">      float row.``Hotel stars``</span><br><span class="line">    |]) </span><br></pre></td></tr></table></figure><p>Accord.NET makes the calls pretty easy.  Setup a <code>KMeans</code> object with a specified number of clusters, then learn based on the data provided.  Since I’m peforming analysis on existing data, I then obtain the cluster labels for my data.  If the problem was a prediction problem, <code>clusters</code> would be the object I could use elsewhere for predicting what future hotels are similar to existing hotels.  Additionally, the <code>KMeans</code> class provides functionality to evaluate cluster details, such as centroids and error.  I’ll dig into these more toward the end.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> kmeans = KMeans(k)</span><br><span class="line"><span class="keyword">let</span> clusters = kmeans.Learn(dataValues)</span><br><span class="line"><span class="keyword">let</span> labels = clusters.Decide(dataValues)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Model analysis</span></span><br><span class="line">clusters.Centroids</span><br><span class="line">clusters.Clusters</span><br><span class="line">kmeans.Error</span><br></pre></td></tr></table></figure><p>Once the cluster labeling is complete I combine my earlier generated <code>hotelScores</code> with the cluster label for each hotel.  Since I kept the data in the same order, it can simply be zipped together as a <code>(&lt;hotelScore&gt;, &lt;cluster #&gt;)</code> tuple. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> combinedData = </span><br><span class="line">  (hotelScores, labels)</span><br><span class="line">  ||&gt; Array.zip</span><br></pre></td></tr></table></figure><p>For comparative analysis, the average hotel review score for each cluster must be obtained.  It is a matter of taking the newly created <code>combinedData</code>, grouping by cluster, then averaging the score of each hotel in the cluster.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> avgClusterScore = </span><br><span class="line"> combinedData </span><br><span class="line">  |&gt; Array.groupBy (<span class="keyword">fun</span> (scores, cluster) -&gt; cluster)</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> (cluster, scores) -&gt; </span><br><span class="line">    cluster, </span><br><span class="line">    (scores |&gt; Array.map (fst&gt;&gt;snd) |&gt; Array.average)) </span><br><span class="line">  |&gt; Map  </span><br></pre></td></tr></table></figure><p>This code deserves a bit of an explanation.  In my defense, this is a small exercise.  In production I try to avoid tuples of tuples of tuples all the way down. This is currently at the border of reasonable readability.  Below is a deeper breakdown into what is going on.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Source</span></span><br><span class="line">combinedData </span><br><span class="line"></span><br><span class="line"><span class="comment">// Groups by cluster</span></span><br><span class="line">|&gt; Array.groupBy (<span class="keyword">fun</span> (scores, cluster) -&gt; cluster)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gives something that looks like this: </span></span><br><span class="line">[|(<span class="number">3</span>,</span><br><span class="line">    [|((<span class="string">"Circus Circus Hotel &amp; Casino Las Vegas"</span>, <span class="number">3.208333333</span>), <span class="number">3</span>);</span><br><span class="line">      ((<span class="string">"Hilton Grand Vacations at the Flamingo"</span>, <span class="number">3.958333333</span>), <span class="number">3</span>)|]);</span><br><span class="line">   (<span class="number">4</span>,</span><br><span class="line">    [|((<span class="string">"Excalibur Hotel &amp; Casino"</span>, <span class="number">3.708333333</span>), <span class="number">4</span>);</span><br><span class="line">      ((<span class="string">"Tuscany Las Vegas Suites &amp; Casino"</span>, <span class="number">4.208333333</span>), <span class="number">4</span>)|]);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a tuple of (&lt;cluster #&gt;, &lt;average cluster score&gt;)</span></span><br><span class="line">|&gt; Array.map (<span class="keyword">fun</span> (cluster, scores) -&gt; </span><br><span class="line">  <span class="comment">// Cluster #</span></span><br><span class="line">  cluster, </span><br><span class="line">  <span class="comment">// Extracts the score from ((&lt;hotel name&gt;, &lt;score&gt;), &lt;cluster#&gt;) </span></span><br><span class="line">  <span class="comment">// fst&gt;&gt;snd navigates to the first tuple, second item</span></span><br><span class="line">  (scores |&gt; Array.map (fst&gt;&gt;snd) |&gt; Array.average)) </span><br><span class="line"></span><br><span class="line"><span class="comment">// Turns it all into a map so I can do average score lookups based on cluster.</span></span><br><span class="line">|&gt; Map  </span><br></pre></td></tr></table></figure><p>Whew, now that is done.  Time to see some results.  The report is sorted by cluster number and hotel score (descending).  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printfn <span class="string">"%7s %-55s %5s %s"</span> <span class="string">"Cluster"</span> <span class="string">"Hotel"</span> <span class="string">"Score"</span> <span class="string">"ClusterScore"</span></span><br><span class="line">combinedData</span><br><span class="line">|&gt; Array.sortBy (<span class="keyword">fun</span> (x, cluster) -&gt; cluster, (snd x) * <span class="number">-1.</span>)</span><br><span class="line">|&gt; Array.iter (<span class="keyword">fun</span> (x, cluster ) -&gt; printfn <span class="string">"%7d %-55s  %0.2f         %0.2f"</span> cluster (fst x) (snd x) (avgClusterScore.Item cluster))</span><br></pre></td></tr></table></figure><p>Based on relative ammenties (and 5 clusters), here are the results.  With a small bit of code I’ve gone from data file to cluster score hotel comparisons.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Cluster Hotel                                                   Score ClusterScore</span><br><span class="line">      <span class="number">0</span> Wynn Las Vegas                                           <span class="number">4.63</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> The Venetian Las Vegas Hotel                             <span class="number">4.58</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Encore at wynn Las Vegas                                 <span class="number">4.54</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> The Palazzo Resort Hotel Casino                          <span class="number">4.38</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Trump International Hotel Las Vegas                      <span class="number">4.38</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> The Cosmopolitan Las Vegas                               <span class="number">4.25</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Bellagio Las Vegas                                       <span class="number">4.21</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Caesars Palace                                           <span class="number">4.13</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Tropicana Las Vegas - A Double Tree by Hilton Hotel      <span class="number">4.04</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Paris Las Vegas                                          <span class="number">4.04</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Treasure Island- TI Hotel &amp; Casino                       <span class="number">3.96</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> The Westin las Vegas Hotel Casino &amp; Spa                  <span class="number">3.92</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Monte Carlo Resort&amp;Casino                                <span class="number">3.29</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">1</span> Marriott's Grand Chateau                                 <span class="number">4.54</span>         <span class="number">4.36</span></span><br><span class="line">      <span class="number">1</span> Wyndham Grand Desert                                     <span class="number">4.38</span>         <span class="number">4.36</span></span><br><span class="line">      <span class="number">1</span> Hilton Grand Vacations on the Boulevard                  <span class="number">4.17</span>         <span class="number">4.36</span></span><br><span class="line">      <span class="number">2</span> The Cromwell                                             <span class="number">4.08</span>         <span class="number">4.08</span></span><br><span class="line">      <span class="number">3</span> Hilton Grand Vacations at the Flamingo                   <span class="number">3.96</span>         <span class="number">3.58</span></span><br><span class="line">      <span class="number">3</span> Circus Circus Hotel &amp; Casino Las Vegas                   <span class="number">3.21</span>         <span class="number">3.58</span></span><br><span class="line">      <span class="number">4</span> Tuscany Las Vegas Suites &amp; Casino                        <span class="number">4.21</span>         <span class="number">3.96</span></span><br><span class="line">      <span class="number">4</span> Excalibur Hotel &amp; Casino                                 <span class="number">3.71</span>         <span class="number">3.96</span></span><br></pre></td></tr></table></figure><p>I want to backtrack now, and investigate the cluster details.</p><p>Where are the centroids for each cluster?</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clusters.Centroids</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it : float [] [] =</span><br><span class="line">  [|[|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.2307692308</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.9230769231</span>; <span class="number">4.615384615</span>|];</span><br><span class="line">    [|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.3333333333</span>; <span class="number">0.3333333333</span>; <span class="number">0.6666666667</span>; <span class="number">1.0</span>; <span class="number">35.0</span>|];</span><br><span class="line">    [|<span class="number">1.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">45.0</span>|];</span><br><span class="line">    [|<span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">3.0</span>|];</span><br><span class="line">    [|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">3.0</span>|]|]</span><br></pre></td></tr></table></figure><p>What are the cluster details?</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">clusters.Clusters</span><br><span class="line">|&gt; Array.iter(<span class="keyword">fun</span> cluster -&gt;</span><br><span class="line">  printfn <span class="string">"%d %0.2f"</span> cluster.Index cluster.Proportion <span class="comment">// Index and proportion of data</span></span><br><span class="line">  printfn <span class="string">"   %A"</span> cluster.Centroid                    <span class="comment">// Centroids (like above)</span></span><br><span class="line">  printfn <span class="string">"   %A"</span> cluster.Covariance                  <span class="comment">// Covariances  </span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0.62</span></span><br><span class="line">   [|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.2307692308</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.9230769231</span>; <span class="number">4.615384615</span>|]</span><br><span class="line">   [|[|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; [|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; ...|]</span><br><span class="line"><span class="number">1</span> <span class="number">0.14</span></span><br><span class="line">   [|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.3333333333</span>; <span class="number">0.3333333333</span>; <span class="number">0.6666666667</span>; <span class="number">1.0</span>; <span class="number">35.0</span>|]</span><br><span class="line">   [|[|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; [|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; ...|]</span><br><span class="line"><span class="number">2</span> <span class="number">0.05</span></span><br><span class="line">   [|<span class="number">1.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">45.0</span>|]</span><br><span class="line">   [|[|nan; nan; nan; nan; nan; nan; nan|]; [|nan; nan; nan; nan; nan; nan; nan|]; ...|]</span><br><span class="line"><span class="number">3</span> <span class="number">0.10</span></span><br><span class="line">   [|<span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">3.0</span>|]</span><br><span class="line">   [|[|<span class="number">0.5</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">-0.5</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; [|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; ...]|]</span><br><span class="line"><span class="number">4</span> <span class="number">0.10</span></span><br><span class="line">   [|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">3.0</span>|]</span><br><span class="line">   [|[|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; [|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; ...|]</span><br></pre></td></tr></table></figure><p>What is the calculated error?</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kmeans.Error</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it : float = <span class="number">0.467032967</span></span><br></pre></td></tr></table></figure><p>Taking this a little further.  How many clusters should be used?  What are the clustering dynamics?  There are 21 hotels with 7 dimensions.  My gut feeling is somewhere between 3 and 7 clusters probably makes sense.  That should be enough to provide some distinction, but allow for large enough groupings to be useful.  When generating the clusters, the initial centroids are random.  This means the data could be clustered differently depending on starting points.  To test this I’ll look at between 2 and 15 clusters.  I’ll also run 100 trials per cluster size, and average the error score for that cluster.  This should give a reasonable view into the clustering performance.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2.</span><span class="number">.15</span>]</span><br><span class="line">|&gt; List.map (<span class="keyword">fun</span> k -&gt;</span><br><span class="line">  <span class="keyword">let</span> error =</span><br><span class="line">    [<span class="number">0.</span><span class="number">.100</span>]</span><br><span class="line">    |&gt; List.map (<span class="keyword">fun</span> trial -&gt;</span><br><span class="line">      <span class="keyword">let</span> kmeans = <span class="keyword">new</span> KMeans(k)</span><br><span class="line">      <span class="keyword">let</span> clusters = kmeans.Learn(dataValues)</span><br><span class="line">      <span class="keyword">let</span> labels = clusters.Decide(dataValues)</span><br><span class="line">      kmeans.Error)</span><br><span class="line">    |&gt; List.average</span><br><span class="line">  k, error)</span><br><span class="line">|&gt; List.map (<span class="keyword">fun</span> (k, error) -&gt; </span><br><span class="line">  printfn <span class="string">"%2d %0.2f"</span> k error</span><br><span class="line">  (k,error))</span><br><span class="line">|&gt; Chart.Line</span><br><span class="line">|&gt; Chart.WithXAxis(Title = <span class="string">"Clusters (k)"</span>)</span><br><span class="line">|&gt; Chart.WithYAxis(Title = <span class="string">"Error"</span>)</span><br><span class="line">|&gt; Chart.Show</span><br><span class="line"></span><br><span class="line"><span class="comment">// Results</span></span><br><span class="line"> <span class="number">2</span> <span class="number">4.61</span></span><br><span class="line"> <span class="number">3</span> <span class="number">1.62</span></span><br><span class="line"> <span class="number">4</span> <span class="number">0.85</span></span><br><span class="line"> <span class="number">5</span> <span class="number">0.45</span></span><br><span class="line"> <span class="number">6</span> <span class="number">0.35</span></span><br><span class="line"> <span class="number">7</span> <span class="number">0.28</span></span><br><span class="line"> <span class="number">8</span> <span class="number">0.21</span></span><br><span class="line"> <span class="number">9</span> <span class="number">0.17</span></span><br><span class="line"><span class="number">10</span> <span class="number">0.11</span></span><br><span class="line"><span class="number">11</span> <span class="number">0.07</span></span><br><span class="line"><span class="number">12</span> <span class="number">0.03</span></span><br><span class="line"><span class="number">13</span> <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span> <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span> <span class="number">0.00</span></span><br></pre></td></tr></table></figure><p><img src="/images/km1/ErrorChart.png" alt="Error Chart"></p><p>Looking at the results, error goes down as k goes up.  This makes sense, with only 7 ammenity dimensions, most of them being standard, distinction completely falling off at around 12 clusters.  But that’s not useful.  So I can’t just take the smallest error.  The most dramatic error reduction happens at 4 clusters, but the slope seems to really level off after k=5.  From these results 4 or 5 seem like reasonable bets.  I choose 5 because it provides a bit more separation, and it’s a prime number. :)  </p><p>With all this done.  I have a reasonable expectation that I’m clustering properly.  I can now go back to the original report and see how similar hotels compare.  This post has just been one example of how you can use K-Means clustering.  I hope you found it useful.  Until next time…</p><p><strong>References</strong><br>[1] ref: Moro, S., Rita, P., &amp; Coelho, J. (2017). Stripping customers’ feedback on hotels through data mining: The case of Las Vegas Strip. Tourism Management Perspectives, 23, 41-52.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The topic for today is leveraging K-Means clustering to perform simple Las Vegas hotel data analysis.  This will be done using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://accord-framework.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Accord.NET&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Accord.NET" scheme="http://codesuji.com/tags/Accord-NET/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Statistics" scheme="http://codesuji.com/tags/Statistics/"/>
    
      <category term="Analytics" scheme="http://codesuji.com/tags/Analytics/"/>
    
  </entry>
  
  <entry>
    <title>F# and Serilog</title>
    <link href="http://codesuji.com/2017/08/20/F-and-Serilog/"/>
    <id>http://codesuji.com/2017/08/20/F-and-Serilog/</id>
    <published>2017-08-20T19:12:47.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Today I’ll discuss two topics.  The primary topic is implementing logging by leveraging <a href="https://serilog.net/" target="_blank" rel="noopener">Serilog</a> with <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>.  The secondary topic is <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.0</a>.  Due to the recent release of .NET Core 2.0 (now with better F# support), I thought this would be a good time to show how to implement an F# .NET Core project.</p><a id="more"></a><p>Going forward I’ll assume you have .NET Core 2.0 installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>Getting started, create the project.  For this post, the example will be a console app.  I also have a preference for the <a href="https://fsprojects.github.io/Paket/" target="_blank" rel="noopener">Paket</a> package manager.  This isn’t strictly necessary, but the benefits are worth the adjustment.  To do this I need to convert the project to use Paket.  If you want to stick with the default nuget, that’s fine, you’ll just need to do ignore a couple commands and mentally map <code>paket add</code> to <code>nuget install</code>. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name SerilogExample</span><br><span class="line">cd SerilogExample</span><br><span class="line">paket convert-from-nuget</span><br></pre></td></tr></table></figure><p>Next, add the required packages for configuration and logging.  Since I will use config file based configuration, I use the <code>ConfigurationBuilder</code> that .NET Core apps commonly use.  At this point I should note that Serilog has additional Sinks as logging targets.  Check them out if you want more than plain logfiles.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">paket add Microsoft.Extensions.ConfigurationBuilder --project SerilogExample.fsproj</span><br><span class="line">paket add Microsoft.Extensions.ConfigurationBuilder.Json --project SerilogExample.fsproj</span><br><span class="line">paket add Serilog --project SerilogExample.fsproj</span><br><span class="line">paket add Serilog.Settings.Configuration --project SerilogExample.fsproj</span><br><span class="line">paket add Serilog.Sinks.Literate --project SerilogExample.fsproj</span><br><span class="line">paket add Serilog.Sinks.RollingFile --project SerilogExample.fsproj</span><br></pre></td></tr></table></figure><p>Time to open up <code>Program.fs</code> and get to work.  First, add the necessary namespaces.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Configuration</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> Serilog</span><br><span class="line"><span class="keyword">open</span> Serilog.Configuration</span><br><span class="line"><span class="keyword">open</span> Serilog.Events</span><br><span class="line"><span class="keyword">open</span> Serilog.Formatting.Json</span><br><span class="line"><span class="keyword">open</span> Serilog.Sinks</span><br></pre></td></tr></table></figure><p>The logger object can be created in a couple different ways.  The first way I’ll examine is being entirely configuration file driven.  To do this I need a Configuration object loaded from a json formatted file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> configuration = </span><br><span class="line">    ConfigurationBuilder()</span><br><span class="line">      .AddJsonFile(<span class="string">"config.json"</span>)</span><br><span class="line">      .Build();</span><br></pre></td></tr></table></figure><p>Before going any further, the configuration file needs created.  Add a <code>config.json</code> file to the root of the project and populate as below.  Other application-specific configuration can be in here as well, but the Serilog settings need to be under the <code>Serilog</code> section.  This example will only log messages with a log level of <code>Information</code> and higher.  The Serilog <code>LiterateConsole</code> is used for outputting to STDOUT.  <code>RollingFile</code> is used for the logfile creation (including a templated name, max file size, and max file count).   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Serilog"</span>: &#123;</span><br><span class="line">    <span class="attr">"MinimumLevel"</span>: <span class="string">"Information"</span>,</span><br><span class="line">    <span class="attr">"WriteTo"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"Name"</span>: <span class="string">"LiterateConsole"</span>,</span><br><span class="line">        <span class="attr">"Args:"</span>: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"Name"</span>: <span class="string">"RollingFile"</span>,</span><br><span class="line">        <span class="attr">"Args"</span>: &#123;</span><br><span class="line">          <span class="attr">"pathFormat"</span>: <span class="string">"log-&#123;Date&#125;.log"</span>,</span><br><span class="line">          <span class="attr">"fileSizeLimitBytes"</span>: <span class="number">10000000</span>,</span><br><span class="line">          <span class="attr">"retainedFileCountLimit"</span>: <span class="number">100</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now that a configuration file is created, there is an additional need to address.  By default the config file does not get copied to the bin directory on compilation.  To ensure the config file ends up where desired (and needed), the <code>.fsproj</code> file needs modified.  Adding <code>config.json</code> as a content file, copies it to the output directory when building the project. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ItemGroup&gt;</span><br><span class="line">  &lt;Compile Include=<span class="string">"Program.fs"</span> /&gt;</span><br><span class="line">  &lt;Content Include=<span class="string">"config.json"</span>&gt;</span><br><span class="line">    &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;</span><br><span class="line">  &lt;/Content&gt;</span><br><span class="line">&lt;/ItemGroup&gt;</span><br></pre></td></tr></table></figure><p>By this point, most of the work has been done.  All that is left to do is feed the configuration object to the Serilog constructor.  Logger created.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> logger = </span><br><span class="line">  LoggerConfiguration()</span><br><span class="line">    .ReadFrom.Configuration(configuration)</span><br><span class="line">    .CreateLogger()</span><br></pre></td></tr></table></figure><p>Using the logger is straight forward.  If you haven’t used Serilog before, it also supports string interpolation. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">"bar"</span></span><br><span class="line"></span><br><span class="line">logger.Debug(<span class="string">"A debug message."</span>)</span><br><span class="line">logger.Information(<span class="string">"An info message. Details: &#123;foo&#125;"</span>, foo)</span><br><span class="line">logger.Error(<span class="string">"An error message."</span>)</span><br><span class="line">logger.Warning(<span class="string">"A warning message."</span>)</span><br></pre></td></tr></table></figure><p>Note, the logging level is set to <code>Information</code> in the config file, so the debug message doesn’t display.  Here is how it looks in the console and logfile.</p><p><img src="/images/sl1/output_stdout1.png" alt="Logger console output"></p><p><img src="/images/sl1/output_logfile1.png" alt="Logger logfile output"></p><p>Done, right?  Not so fast.  Serilog does not need to be entirely config file driven.  I’m going to replace the previous logger creation with the below code. There are a couple difference.  First, I make the log level <code>Debug</code>.  More interestly I leverage Serilog’s ability for structured logging.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> logger = </span><br><span class="line">  LoggerConfiguration()</span><br><span class="line">    .MinimumLevel.Debug()</span><br><span class="line">    .WriteTo.LiterateConsole()</span><br><span class="line">    .WriteTo.RollingFile(<span class="keyword">new</span> JsonFormatter(), <span class="string">"log-&#123;Date&#125;.log"</span>)</span><br><span class="line">    .CreateLogger()</span><br></pre></td></tr></table></figure><p>Now I run the same logger calls, and here is how it looks in the console and logfile. You can see the debug messages, but more importantly, the log file now has structured events.</p><p><img src="/images/sl1/output_stdout2.png" alt="Logger console output"></p><p><img src="/images/sl1/output_logfile2.png" alt="Logger logfile output"></p><p>Hopefully you have found these Serilog examples useful when integrating logging into your new .NET Core F# applications.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I’ll discuss two topics.  The primary topic is implementing logging by leveraging &lt;a href=&quot;https://serilog.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Serilog&lt;/a&gt; with &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  The secondary topic is &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://www.microsoft.com/net/download/core&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;.NET Core version 2.0&lt;/a&gt;.  Due to the recent release of .NET Core 2.0 (now with better F# support), I thought this would be a good time to show how to implement an F# .NET Core project.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Logging" scheme="http://codesuji.com/tags/Logging/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>F# and Dapper</title>
    <link href="http://codesuji.com/2017/07/29/F-and-Dapper/"/>
    <id>http://codesuji.com/2017/07/29/F-and-Dapper/</id>
    <published>2017-07-29T10:15:42.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Continuing with the database theme, here is a quick example of using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> with <a href="https://github.com/StackExchange/Dapper" target="_blank" rel="noopener">Dapper</a>.</p><a id="more"></a><p>For comparison sake,  I will continue to use <a href="https://sqlite.org/" target="_blank" rel="noopener">SQLite</a> and Bitcoin trade data as I did in the <a href="/2017/07/28/F-and-SQLite/">previous post</a>.  Since Dapper is a light-weight ORM that leverages classes, it makes data access much cleaner than just using a raw SqlReader.  Its implementation also facilitates building some functional wrappers around the database calls.  Note, there will be some repetive setup code in the beginning of the post, since the basic database creation and setup has not changed.</p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is the paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget System.Data.SQLite</span><br><span class="line">nuget Dapper</span><br></pre></td></tr></table></figure><p>The initial setup is similar to the previous post, with the major addition of Dapper references.  The code is identical to the previous post.  I will use the same <code>TradeData</code> record type and sample data.  Dapper extends the sql connection object, so I perform database creation and connection opening as I did before.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/System.Data.SQLite.Core/lib/net46/System.Data.SQLite.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Dapper/lib/net451/Dapper.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Collections.Generic</span><br><span class="line"><span class="keyword">open</span> System.Data.SQLite</span><br><span class="line"><span class="keyword">open</span> Dapper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">TradeData</span> </span>= &#123; </span><br><span class="line">    Symbol:string; </span><br><span class="line">    Timestamp:DateTime; </span><br><span class="line">    Price:float;</span><br><span class="line">    TradeSize:float &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sample Data</span></span><br><span class="line"><span class="keyword">let</span> trades = [</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">33</span>); Price = <span class="number">2751.20</span>; TradeSize = <span class="number">0.01000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.20</span>; TradeSize = <span class="number">0.01000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.40000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.55898959</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">03</span>); Price = <span class="number">2750.00</span>; TradeSize = <span class="number">0.86260000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">03</span>); Price = <span class="number">2750.00</span>; TradeSize = <span class="number">0.03000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">43</span>, <span class="number">31</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.44120000</span> &#125; </span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize connectionstring</span></span><br><span class="line"><span class="keyword">let</span> databaseFilename = <span class="string">"sample.sqlite"</span></span><br><span class="line"><span class="keyword">let</span> connectionStringFile = sprintf <span class="string">"Data Source=%s;Version=3;"</span> databaseFilename  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Create database</span></span><br><span class="line">SQLiteConnection.CreateFile(databaseFilename)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open connection</span></span><br><span class="line"><span class="keyword">let</span> connection = <span class="keyword">new</span> SQLiteConnection(connectionStringFile)</span><br><span class="line">connection.Open()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create table structure</span></span><br><span class="line"><span class="keyword">let</span> structureSql =</span><br><span class="line">    <span class="string">"create table Trades ("</span> +</span><br><span class="line">    <span class="string">"Symbol varchar(20), "</span> +</span><br><span class="line">    <span class="string">"Timestamp datetime, "</span> + </span><br><span class="line">    <span class="string">"Price float, "</span> + </span><br><span class="line">    <span class="string">"TradeSize float)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> structureCommand = <span class="keyword">new</span> SQLiteCommand(structureSql, connection)</span><br><span class="line">structureCommand.ExecuteNonQuery() </span><br></pre></td></tr></table></figure><p>Now, the new stuff.  I will look at inserting first.  Dapper passes parameters as anonymous classes.  This has several implications.  For my purpose, this means I can use the <code>TradeData</code> type and its fields will auto-map to the parameters in the <code>connection.Execute</code> call.  As before, I use <code>map</code> and <code>sum</code> to total up the records inserted.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> insertTradeSql = </span><br><span class="line">    <span class="string">"insert into trades(symbol, timestamp, price, tradesize) "</span> + </span><br><span class="line">    <span class="string">"values (@symbol, @timestamp, @price, @tradesize)"</span></span><br><span class="line"></span><br><span class="line">trades</span><br><span class="line">|&gt; List.map (<span class="keyword">fun</span> x -&gt; connection.Execute(insertTradeSql, x))</span><br><span class="line">|&gt; List.sum</span><br><span class="line">|&gt; (<span class="keyword">fun</span> recordsAdded -&gt; printfn <span class="string">"Records added  : %d"</span> recordsAdded)</span><br></pre></td></tr></table></figure><p>This works, but it would be nice to have a more functional interface.  To do that, I create a <code>dbExecute</code> that takes a connection, sql string, and data object.  Before I run more inserts, I delete the previously added records, just to keep things clean.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Clear out records from insert1, so I don't end up with duplicate records</span></span><br><span class="line"><span class="keyword">let</span> deleteCount = connection.Execute(<span class="string">"delete from trades"</span>)</span><br><span class="line">printfn <span class="string">"Records deleted: %A"</span> deleteCount</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dbExecute (connection:SQLiteConnection) (sql:string) (data:_) = </span><br><span class="line">    connection.Execute(sql, data)</span><br><span class="line"></span><br><span class="line">trades</span><br><span class="line">|&gt; List.map (dbExecute connection insertTradeSql)</span><br><span class="line">|&gt; List.sum</span><br><span class="line">|&gt; (<span class="keyword">fun</span> recordsAdded -&gt; printfn <span class="string">"Records added  : %d"</span> recordsAdded)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Now that there are records in the database, it is time to perform a parameterized select.  Dapper’s <code>Query</code> uses generics to return a sequence of the specified class type, or in this case, F# type <code>TradeData</code>.  This is a convenient method to access the results. As before, I could pass a type in for the parameters, but I would need to custom build a type for any query.  A more dynamic alternative is to use an <code>IDictionary&lt;string, obj&gt;</code> for the key/value pairs, where key is the parameter name and value is the value of the parameter. The big note is the value must be an object, and it must be boxed.  This isn’t a problem, more of a syntax annoyance.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> filteredSql = </span><br><span class="line">    <span class="string">"select symbol, timestamp, price, tradesize From trades "</span> +</span><br><span class="line">    <span class="string">"where symbol = @symbol and tradesize &gt;= @mintradesize"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> results1 = </span><br><span class="line">    connection.Query&lt;TradeData&gt;(</span><br><span class="line">        filteredSql, </span><br><span class="line">        dict [ <span class="string">"symbol"</span>, box <span class="string">"BTC/USD"</span>; <span class="string">"mintradesize"</span>, box <span class="number">0.4</span> ])</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"Query (1):"</span></span><br><span class="line">results1 </span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> x -&gt; </span><br><span class="line">    printfn <span class="string">"%-7s %-19s %.2f [%.8f]"</span> x.Symbol (x.Timestamp.ToString(<span class="string">"s"</span>)) x.Price x.TradeSize)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This is all well and good, but it doesn’t feel very idiomatic.  It can better; for this I add two supporting components.  First, the fat arrow provides a cleaner syntax for building the key/value pair.  Second, a <code>dbQuery</code> function similar to the previous <code>dbExecute</code> function. To make it flexible, the output type is a generic, and the input parameters are optional.  After all this, the end result is the same, but the code just feels cleaner.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">inline</span> (=&gt;) k v = k, box v</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dbQuery&lt;<span class="symbol">'T</span>&gt; (connection:SQLiteConnection) (sql:string) (parameters:IDictionary&lt;string, obj&gt; option) = </span><br><span class="line">    <span class="keyword">match</span> parameters <span class="keyword">with</span></span><br><span class="line">    | Some(p) -&gt; connection.Query&lt;<span class="symbol">'T</span>&gt;(sql, p)</span><br><span class="line">    | None    -&gt; connection.Query&lt;<span class="symbol">'T</span>&gt;(sql)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> results2 = dbQuery&lt;TradeData&gt; connection filteredSql (Some (dict [ <span class="string">"symbol"</span> =&gt; <span class="string">"BTC/USD"</span>; </span><br><span class="line">                                                                       <span class="string">"mintradesize"</span> =&gt; <span class="number">0.4</span> ]))</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"Query (2):"</span></span><br><span class="line">results2 </span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> x -&gt; </span><br><span class="line">    printfn <span class="string">"%-7s %-19s %.2f [%.8f]"</span> x.Symbol (x.Timestamp.ToString(<span class="string">"s"</span>)) x.Price x.TradeSize)</span><br></pre></td></tr></table></figure><p>Now that I’m done, close the connection.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.Close()</span><br></pre></td></tr></table></figure><p>Here is the output from the above actions.</p><p><img src="/images/db2/output.png" alt="Insert and query output"></p><p>As you can see, leveraging Dapper not only provides a cleaner interface, but facilitates a more functional approach to database interaction.  Hopefully you have found this short exploration into F# and Dapper useful.  Until next time.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Continuing with the database theme, here is a quick example of using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; with &lt;a href=&quot;https://github.com/StackExchange/Dapper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dapper&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Database" scheme="http://codesuji.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>F# and SQLite</title>
    <link href="http://codesuji.com/2017/07/28/F-and-SQLite/"/>
    <id>http://codesuji.com/2017/07/28/F-and-SQLite/</id>
    <published>2017-07-28T11:25:33.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Today I have a quick example of using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> with <a href="https://sqlite.org/" target="_blank" rel="noopener">SQLite</a>.  </p><a id="more"></a><p>Using Bitcoin trade data from <a href="https://www.gdax.com" target="_blank" rel="noopener">GDAX</a> I will show a simple SQLite example.  As fair warning, the SQLite interface is a raw sql connection targeted generically at the .NET Framework.  As a quick introduction this is fine.  Future posts will investigate a more F# idiomatic way of doing things. <em>[Edit from the future: <a href="/2017/07/29/F-and-Dapper/">F# and Dapper</a>]</em></p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is the paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget System.Data.SQLite</span><br></pre></td></tr></table></figure><p>As usual there is some initial setup.  First, include references. Second, create the recordtype for the Bitcoin trade data.  Third, create the sample data to be used for this exercise.   </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/System.Data.SQLite.Core/lib/net46/System.Data.SQLite.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Data.SQLite</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">TradeData</span> </span>= &#123; </span><br><span class="line">    Symbol:string; </span><br><span class="line">    Timestamp:DateTime; </span><br><span class="line">    Price:float;</span><br><span class="line">    TradeSize:float &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sample Data</span></span><br><span class="line"><span class="keyword">let</span> trades = [</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">33</span>); Price = <span class="number">2751.20</span>; TradeSize = <span class="number">0.01000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.20</span>; TradeSize = <span class="number">0.01000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.40000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.55898959</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">03</span>); Price = <span class="number">2750.00</span>; TradeSize = <span class="number">0.86260000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">03</span>); Price = <span class="number">2750.00</span>; TradeSize = <span class="number">0.03000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">43</span>, <span class="number">31</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.44120000</span> &#125; </span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>Now it is time to create the database.  I need a filename for creation, the <code>connectionString</code> is for later.  As you can see, creating a database is straightforward.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> databaseFilename = <span class="string">"sample.sqlite"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> connectionString = sprintf <span class="string">"Data Source=%s;Version=3;"</span> databaseFilename  </span><br><span class="line"></span><br><span class="line">SQLiteConnection.CreateFile(databaseFilename)</span><br></pre></td></tr></table></figure><p>Once created, I open the connection for future use.  As a note, this example is just a single fsx script. Because of this, I use let.  In a real implementation I would most likely have this in a function somewhere.  In cases like that, I use <code>use</code> instead of <code>let</code> when creating connections and commands.  That way the connection properly disposes when it goes out of scope.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> connection = <span class="keyword">new</span> SQLiteConnection(connectionString)</span><br><span class="line">connection.Open()</span><br></pre></td></tr></table></figure><p>As an aside, perhaps I want my instance to be an in-memory database.  Instead of doing the above <code>CreateFile</code> and connect, I can use SQLite’s <code>:memory:</code> datasource to spin this up in memory.  For particular use-cases, this can be a nice option, so I thought it was worth mentioning.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> connectionStringMemory = sprintf <span class="string">"Data Source=:memory:;Version=3;New=True;"</span> </span><br><span class="line"><span class="keyword">let</span> connection = <span class="keyword">new</span> SQLiteConnection(connectionStringMemory)</span><br><span class="line">connection.Open()</span><br></pre></td></tr></table></figure><p>Time to give the database some structure. A simple table will suffice.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> structureSql =</span><br><span class="line">    <span class="string">"create table Trades ("</span> +</span><br><span class="line">    <span class="string">"Symbol varchar(20), "</span> +</span><br><span class="line">    <span class="string">"Timestamp datetime, "</span> + </span><br><span class="line">    <span class="string">"Price float, "</span> + </span><br><span class="line">    <span class="string">"TradeSize float)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> structureCommand = <span class="keyword">new</span> SQLiteCommand(structureSql, connection)</span><br><span class="line">structureCommand.ExecuteNonQuery() </span><br></pre></td></tr></table></figure><p>Once the structure is created, I can start to do more interesting things.  First I need to insert some records. Since <code>ExecuteNonQuery()</code> returns records impacted, I can leverage <code>map</code> and <code>sum</code> to count the number of records added.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add records</span></span><br><span class="line"><span class="keyword">let</span> insertSql = </span><br><span class="line">    <span class="string">"insert into trades(symbol, timestamp, price, tradesize) "</span> + </span><br><span class="line">    <span class="string">"values (@symbol, @timestamp, @price, @tradesize)"</span></span><br><span class="line"></span><br><span class="line">trades</span><br><span class="line">|&gt; List.map(<span class="keyword">fun</span> x -&gt;</span><br><span class="line">    <span class="keyword">use</span> command = <span class="keyword">new</span> SQLiteCommand(insertSql, connection)</span><br><span class="line">    command.Parameters.AddWithValue(<span class="string">"@symbol"</span>, x.Symbol) |&gt; ignore</span><br><span class="line">    command.Parameters.AddWithValue(<span class="string">"@timestamp"</span>, x.Timestamp) |&gt; ignore</span><br><span class="line">    command.Parameters.AddWithValue(<span class="string">"@price"</span>, x.Price) |&gt; ignore</span><br><span class="line">    command.Parameters.AddWithValue(<span class="string">"@tradesize"</span>, x.TradeSize) |&gt; ignore</span><br><span class="line"></span><br><span class="line">    command.ExecuteNonQuery())</span><br><span class="line">|&gt; List.sum</span><br><span class="line">|&gt; (<span class="keyword">fun</span> recordsAdded -&gt; printfn <span class="string">"Records added: %d"</span> recordsAdded)</span><br></pre></td></tr></table></figure><p>Once the records are inserted, it is trival to query them.  Below is a simple select and iteration through the recordset.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> selectSql = <span class="string">"select * from trades order by timestamp desc"</span></span><br><span class="line"><span class="keyword">let</span> selectCommand = <span class="keyword">new</span> SQLiteCommand(selectSql, connection)</span><br><span class="line"><span class="keyword">let</span> reader = selectCommand.ExecuteReader()</span><br><span class="line"><span class="keyword">while</span> reader.Read() <span class="keyword">do</span></span><br><span class="line">    printfn <span class="string">"%-7s %-19s %.2f [%.8f]"</span> </span><br><span class="line">        (reader.[<span class="string">"symbol"</span>].ToString()) </span><br><span class="line">        (System.Convert.ToDateTime(reader.[<span class="string">"timestamp"</span>]).ToString(<span class="string">"s"</span>))</span><br><span class="line">        (System.Convert.ToDouble(reader.[<span class="string">"price"</span>])) </span><br><span class="line">        (System.Convert.ToDouble(reader.[<span class="string">"tradesize"</span>])) </span><br></pre></td></tr></table></figure><p>Finally, the connection cleanup.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.Close()</span><br></pre></td></tr></table></figure><p>Here is the output from the above actions.</p><p><img src="/images/db1/output.png" alt="Insert and query output"></p><p>Hopefully you found this simple SQLite example useful.  In future posts I will discuss more idiomatic methods of interacting with the database.    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I have a quick example of using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; with &lt;a href=&quot;https://sqlite.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SQLite&lt;/a&gt;.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Database" scheme="http://codesuji.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Facial Recognition using F# and EmguCV</title>
    <link href="http://codesuji.com/2017/05/20/F-and-EmguCV/"/>
    <id>http://codesuji.com/2017/05/20/F-and-EmguCV/</id>
    <published>2017-05-21T00:32:04.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>As the future rushes upon us, there is the growing desire to have a more integrated interaction with our computers.  One way is to have our computers recognize us; enter facial recognition.  Often this can be done with complex tools, but it is encouraging to be able to do it with something as simple as <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="http://www.emgu.com" target="_blank" rel="noopener">EmguCV</a>.  With these tools in hand, facial recognition can be built into personal projects with ease.</p><a id="more"></a><p>For those not familiar, EmguCV is a one of the available <a href="http://opencv.org/" target="_blank" rel="noopener">OpenCV</a> .NET wrapper packages.  OpenCV has facial recognition built in, so this post will mostly devolve into the details of wiring it up using F#.  But once complete, this is a good integration point for additional functionality.  Time to get started.</p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget EmguCV</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> This project requires an additional step.  I prefer Paket for package management, but that has it’s own set of implications.  For this project there is a manual step after Paket has downloaded the packages.  To get all things to work, the native dlls must be copied into the same directory as the EmguCV dlls.  For me, the command looked like:</p><p><code>cp packages\EmguCV\build\native\x64\* packages\EmguCV\lib\net30</code></p><p>If you don’t do this, you’re likely to get an error that looks like this:</p><p><code>System.TypeInitializationException: The type initializer for &#39;Emgu.CV.CvInvoke&#39; threw an exception. ---&gt; System.DllNotFoundException: cvextern ...</code></p><p>Once package installation is complete, it is time to link up the library references.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">System.IO.Directory.SetCurrentDirectory(__SOURCE_DIRECTORY__)</span><br><span class="line"></span><br><span class="line">#I <span class="string">"../packages"</span></span><br><span class="line">#r <span class="string">"../packages/EmguCV/lib/net30/Emgu.CV.UI.dll"</span></span><br><span class="line">#r <span class="string">"../packages/EmguCV/lib/net30/Emgu.CV.World.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Drawing</span><br><span class="line"><span class="keyword">open</span> System.Drawing.Imaging</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Emgu</span><br><span class="line"><span class="keyword">open</span> Emgu.CV</span><br><span class="line"><span class="keyword">open</span> Emgu.CV.CvEnum</span><br><span class="line"><span class="keyword">open</span> Emgu.CV.Structure</span><br><span class="line"><span class="keyword">open</span> Emgu.CV.UI</span><br><span class="line"><span class="keyword">open</span> Emgu.Util</span><br></pre></td></tr></table></figure><p>Aiming toward my goal of higher interactivity, I put together a little starter app that uses the webcam to see who is sitting at the computer.  If it doesn’t recognize the person, it prompts to add them to its database so they can be recognized in the future.  Once it knows who they are, it just says hi.  There are also some exploratory commands.  I know, it isn’t much, but its a nice start to a larger, long-term project.</p><p>Building from the ground up, the first part is interacting with the camera.  A simple <code>capture.QueryFrame().Bitmap</code> pulls a bitmap.  I use a couple wrapper functions to support returning an image appropriate (<code>Image&lt;Gray,Byte&gt;</code>) for the FacialRecognition calls as well as the ability to save a single and series of images from the camera.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Camera/photo code</span></span><br><span class="line"><span class="keyword">module</span> Camera =</span><br><span class="line">    <span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Capture image from webcam as a bitmap </span></span><br><span class="line">    <span class="keyword">let</span> captureImageBitmap () =</span><br><span class="line">        <span class="keyword">let</span> (capture:Capture) = <span class="keyword">new</span> Capture() </span><br><span class="line">        <span class="keyword">let</span> (imageBitmap:Bitmap) = capture.QueryFrame().Bitmap </span><br><span class="line">        imageBitmap </span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Capture image from webcam and return a FacialRecognition image</span></span><br><span class="line">    <span class="keyword">let</span> captureImage () = </span><br><span class="line">        <span class="keyword">let</span> (image:Image&lt;Gray,Byte&gt;) = <span class="keyword">new</span> Emgu.CV.Image&lt;Gray,Byte&gt;(captureImageBitmap())</span><br><span class="line">        image</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Capture image from webcam and save as jpg</span></span><br><span class="line">    <span class="keyword">let</span> captureAndSaveImage (filename:string) = </span><br><span class="line">        <span class="keyword">let</span> imageBitmap = captureImageBitmap()</span><br><span class="line">        imageBitmap.Save(filename, ImageFormat.Jpeg)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take photos of person and return list of result photo files</span></span><br><span class="line">    <span class="keyword">let</span> takePhotos count (delayMs:int) dir person =</span><br><span class="line">        [<span class="number">1.</span>.count]</span><br><span class="line">        |&gt; List.map (<span class="keyword">fun</span> i -&gt; </span><br><span class="line">            <span class="keyword">let</span> filename = Path.Combine(dir, (sprintf <span class="string">"%s_%d.jpg"</span> person (rand.Next(<span class="number">1000000000</span>))))</span><br><span class="line">            captureAndSaveImage filename</span><br><span class="line">            System.Threading.Thread.Sleep(delayMs)</span><br><span class="line">            filename)</span><br></pre></td></tr></table></figure><p><em>Note: One extra take-away from the above code is that F# supports triple slash comments that show up in tooltips.</em></p><p><img src="/images/emgu1/tooltip-captureimagebitmap.png" alt="Triple-slash Tooltip"></p><p>Next, I setup a simple database of photos and people.  There are two components to the database module.  The first is general db-ish type things.  This includes person id/name lookup (person.txt), as well as a list of all photos taken (photos.txt).  I wrap a couple lookup functions using <code>Map</code> as well as the ability to add to the files.  In the future, these will be refactored into a real database, but simple text files work well for a demo.  The second component is the OpenCV trained facial recognizer.  It consists of the ability to train, as well as save the training results (trained.txt).</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Recognition database</span></span><br><span class="line"><span class="keyword">module</span> Db =</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Number of photos during image capture</span></span><br><span class="line">    <span class="keyword">let</span> photosToTake = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Delay (ms) between photos during image capture</span></span><br><span class="line">    <span class="keyword">let</span> delayMs = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Data directory</span></span><br><span class="line">    <span class="keyword">let</span> dataDir = <span class="string">"../data/"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Lookup table filename: Person id, name</span></span><br><span class="line">    <span class="keyword">let</span> personFilename = Path.Combine(dataDir, <span class="string">"person.txt"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Lookup table filename: Photos id, path</span></span><br><span class="line">    <span class="keyword">let</span> photosFilename = Path.Combine(dataDir,  <span class="string">"photos.txt"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Trained data filename</span></span><br><span class="line">    <span class="keyword">let</span> trainedFilename = Path.Combine(dataDir, <span class="string">"trained.txt"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Person-level summary of prediction match v total result</span></span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">ValidationResult</span> </span>= &#123; name:string; matchCount:int; totalCount:int &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Create a map from a lookup file</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> makeMap filename fn = </span><br><span class="line">        <span class="keyword">if</span> File.Exists(filename) </span><br><span class="line">        <span class="keyword">then</span> </span><br><span class="line">            File.ReadAllLines(filename)</span><br><span class="line">            |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Split [| '|' |])</span><br><span class="line">            |&gt; Array.map fn</span><br><span class="line">            |&gt; Map.ofArray</span><br><span class="line">        <span class="keyword">else</span> Map.ofList []</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/// Lookup person's id (using name)</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> lookupId () = makeMap personFilename (<span class="keyword">fun</span> x -&gt; (x.[<span class="number">1</span>], int x.[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Lookup person's name (using id)</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> lookupName () = makeMap personFilename (<span class="keyword">fun</span> x -&gt; (int x.[<span class="number">0</span>], x.[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Get a new id for a person</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> getNewId () = </span><br><span class="line">        <span class="keyword">let</span> ids = </span><br><span class="line">            Map.toArray (lookupName())</span><br><span class="line">            |&gt; Array.map fst</span><br><span class="line">        <span class="keyword">if</span> Array.length ids = <span class="number">0</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> (Array.max ids) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Get person's id (by name)</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> getPersonId (map:Collections.Map&lt;string,int&gt;) (name:string) =</span><br><span class="line">        <span class="keyword">if</span> map.ContainsKey name <span class="keyword">then</span> Some (map.Item name) <span class="keyword">else</span> None</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Get person's name (by id)</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> getPersonName (map:Collections.Map&lt;int,string&gt;) (id:int) =</span><br><span class="line">        <span class="keyword">if</span> map.ContainsKey id <span class="keyword">then</span> Some (map.Item id) <span class="keyword">else</span> None</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Append to new entries to photo db</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> appendPhotosLines photosFilename lines =</span><br><span class="line">        IO.File.AppendAllLines(photosFilename, lines)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Add a person to the person lookup file</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> addPersonId filename person id = </span><br><span class="line">        File.AppendAllLines(filename, [| sprintf <span class="string">"%d|%s"</span> id person |])</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Add new photos just taken to photos file</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> appendToPhotosFile dbFilename imageNames person = </span><br><span class="line">        <span class="keyword">let</span> id =</span><br><span class="line">            <span class="keyword">match</span> getPersonId (lookupId()) person <span class="keyword">with</span></span><br><span class="line">            | Some(x) -&gt; x</span><br><span class="line">            | None    -&gt;</span><br><span class="line">                        <span class="keyword">let</span> id' = getNewId()</span><br><span class="line">                        addPersonId personFilename person id' |&gt; ignore</span><br><span class="line">                        id'</span><br><span class="line"></span><br><span class="line">        imageNames</span><br><span class="line">        |&gt; List.map (<span class="keyword">fun</span> x -&gt; sprintf <span class="string">"%d|%s"</span> id x)</span><br><span class="line">        |&gt; appendPhotosLines dbFilename  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/// ... Face Detection Functions (see below) ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// List of people in the db</span></span><br><span class="line">    <span class="keyword">let</span> PersonList () =</span><br><span class="line">        lookupId() </span><br><span class="line">        |&gt; Map.toSeq </span><br><span class="line">        |&gt; Seq.map fst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take a photo and lookup person's name</span></span><br><span class="line">    <span class="comment">/// Return their name</span></span><br><span class="line">    <span class="keyword">let</span> lookupPerson () =</span><br><span class="line">        <span class="comment">// take photo</span></span><br><span class="line">        <span class="keyword">let</span> image = Camera.captureImage()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Lookup in db</span></span><br><span class="line">        <span class="comment">// if found, return name, else return none</span></span><br><span class="line">        <span class="keyword">let</span> trainer = getTrainer()</span><br><span class="line">        <span class="keyword">match</span> trainer <span class="keyword">with</span></span><br><span class="line">        | Some(trainer) -&gt; getPersonName (lookupName()) (trainer.Predict(image).Label)</span><br><span class="line">        | _             -&gt; None</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take photos and add person to database</span></span><br><span class="line">    <span class="keyword">let</span> addPerson name =</span><br><span class="line">        <span class="comment">// take photos</span></span><br><span class="line">        <span class="keyword">let</span> photoList = Camera.takePhotos photosToTake delayMs dataDir name </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add to photosfile</span></span><br><span class="line">        appendToPhotosFile photosFilename photoList name </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Train with new photos</span></span><br><span class="line">        <span class="keyword">let</span> trainer = trainFaceDetector photosFilename trainedFilename</span><br><span class="line">        trainer.Save trainedFilename</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Create a blank user (with a smiley face photo)</span></span><br><span class="line">    <span class="keyword">let</span> createBlankUser () =</span><br><span class="line">        <span class="keyword">let</span> blankUserId = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> blankUserName = <span class="string">"blank"</span></span><br><span class="line">        <span class="keyword">let</span> blankImageName = Path.Combine(dataDir, <span class="string">"blank.jpg"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> createBlankImage (filename:string) =</span><br><span class="line">            <span class="keyword">let</span> blankImage = <span class="keyword">new</span> Bitmap(<span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">            <span class="keyword">let</span> g = Graphics.FromImage(blankImage)</span><br><span class="line">            g.FillEllipse(<span class="keyword">new</span> SolidBrush(Color.Yellow), <span class="number">220</span>, <span class="number">140</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">            g.FillEllipse(<span class="keyword">new</span> SolidBrush(Color.White), <span class="number">260</span>, <span class="number">180</span>, <span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">            g.FillEllipse(<span class="keyword">new</span> SolidBrush(Color.White), <span class="number">340</span>, <span class="number">180</span>, <span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">            g.DrawArc(<span class="keyword">new</span> Pen(Color.White, <span class="number">5.</span>F), <span class="keyword">new</span> Rectangle(<span class="number">260</span>, <span class="number">230</span>, <span class="number">120</span>, <span class="number">70</span>), <span class="number">10.</span>F, <span class="number">160.</span>F)</span><br><span class="line">            blankImage.Save(filename, ImageFormat.Jpeg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> not (File.Exists(personFilename)) </span><br><span class="line">        <span class="keyword">then</span> </span><br><span class="line">            addPersonId personFilename blankUserName blankUserId</span><br><span class="line">            createBlankImage blankImageName</span><br><span class="line">            appendPhotosLines photosFilename [ sprintf <span class="string">"%d|%s"</span> blankUserId blankImageName ]</span><br><span class="line">        <span class="keyword">else</span> ()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Db initial setup</span></span><br><span class="line">    <span class="keyword">let</span> init() = </span><br><span class="line">        createBlankUser()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The application is a fun way to demonstrate functionality, but the really interesting parts (the OpenCV calls) can get lost of big blocks of code. I’ve pulled them out to make scanning for the interesting bits easier.  Training turns out to be pretty easy.  I’ve opted to use the <code>FisherFace</code> model, but Emgu also supports <code>EigenFace</code> and <code>LBPHFace</code> models.  To train, call the <code>CV.Face.FischerFaceRecognizer.Train</code> function. It takes two arrays; one of images, and a corresponding one of int labels.  It also assumes you have multiple classes, which makes sense, since what would you be training otherwise?  To accomodate always having at least two classes, I created a Db.init() function that creates a blank user with a single smiley face image.  Hopefully I don’t get classified as a &#9786;. Currently the training is one big pass, a future refactor will include iterative training.  </p><p>Once trained, face prediction is done with the <code>CV.Face.FischerFaceRecognizer.Predict</code> call.  It returns the predicted int label of the face.  This maps to id, so its a simple lookup at that point for the name.  All of the other stuff is boilerplate to load images and return results.  The last part of this puzzle is loading saved predictions, using <code>CV.Face.FisherFaceRecognizer.Load</code>. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Train face detector</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> trainFaceDetector photosFilename trainedFilename =</span><br><span class="line">    <span class="comment">// Get labels and photos for training</span></span><br><span class="line">    <span class="keyword">let</span> (ids, photos) = </span><br><span class="line">        IO.File.ReadAllLines(photosFilename)</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> x -&gt; </span><br><span class="line">            <span class="keyword">let</span> columns = x.Split [| '|' |]</span><br><span class="line">            (int columns.[<span class="number">0</span>], columns.[<span class="number">1</span>]))</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> (id, photoFilename) -&gt;</span><br><span class="line">            <span class="keyword">let</span> image = <span class="keyword">new</span> Image&lt;Gray, Byte&gt;(photoFilename)</span><br><span class="line">            (id, image))</span><br><span class="line">        |&gt; Array.unzip </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Train based on photos</span></span><br><span class="line">    <span class="keyword">let</span> trainer = <span class="keyword">new</span> CV.Face.FisherFaceRecognizer() </span><br><span class="line">    trainer.Train&lt;Gray, Byte&gt;(photos, ids)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save trained data</span></span><br><span class="line">    trainer.Save(trainedFilename)</span><br><span class="line"></span><br><span class="line">    trainer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Perform prediction validation for a set of photos and trainer</span></span><br><span class="line"><span class="keyword">let</span> validatePredictions photosFilename (trainer:Face.FisherFaceRecognizer) =</span><br><span class="line">        File.ReadAllLines(photosFilename)</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Split [| '|' |])</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> x -&gt;</span><br><span class="line">            <span class="keyword">let</span> image = <span class="keyword">new</span> Image&lt;Gray, Byte&gt;(x.[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">let</span> predicted = trainer.Predict(image)</span><br><span class="line">            &#123; </span><br><span class="line">                ValidationResult.name = lookupName().Item predicted.Label;</span><br><span class="line">                matchCount = (<span class="keyword">if</span> int x.[<span class="number">0</span>] = predicted.Label <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>);</span><br><span class="line">                totalCount = <span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">        |&gt; Array.groupBy (<span class="keyword">fun</span> x -&gt; x.name)</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> x -&gt; </span><br><span class="line">            &#123; </span><br><span class="line">                ValidationResult.name = fst x;</span><br><span class="line">                matchCount = snd x |&gt; Array.map (<span class="keyword">fun</span> y -&gt; y.matchCount) |&gt; Array.sum;</span><br><span class="line">                totalCount = snd x |&gt; Array.map (<span class="keyword">fun</span> y -&gt; y.totalCount) |&gt; Array.sum</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Load the trained face recognizer</span></span><br><span class="line"><span class="keyword">let</span> getTrainer () =</span><br><span class="line">    <span class="keyword">let</span> trainer = <span class="keyword">new</span> CV.Face.FisherFaceRecognizer()</span><br><span class="line">    <span class="keyword">if</span> File.Exists(trainedFilename) </span><br><span class="line">    <span class="keyword">then</span> </span><br><span class="line">        trainer.Load(trainedFilename)</span><br><span class="line">        Some trainer</span><br><span class="line">    <span class="keyword">else</span> None</span><br></pre></td></tr></table></figure><p>Next, putting it all together.  By this point the interesting things are already complete, all that’s left is wrapper code.  In the <code>App</code> module I build out the commands as well as the main loop.  I also have a small Db.init() call to create the blank image that I mentioned earlier.  Beyond that, the functions speak for themselves (and there are comments), so I won’t go into detail here.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Application</span></span><br><span class="line"><span class="keyword">module</span> App = </span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Add a person to the photo db</span></span><br><span class="line">    <span class="keyword">let</span> addPerson () = </span><br><span class="line">        printfn <span class="string">"Name to add (ensure person is in front of the camera): "</span></span><br><span class="line">        <span class="keyword">let</span> name = Console.ReadLine()</span><br><span class="line">        printfn <span class="string">"Taking photos and training..."</span></span><br><span class="line">        Db.addPerson name</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Lookup person currently in front of camera</span></span><br><span class="line">    <span class="keyword">let</span> whoAmI () =</span><br><span class="line">        <span class="keyword">let</span> person = Db.lookupPerson()</span><br><span class="line">        <span class="keyword">match</span> person <span class="keyword">with</span> </span><br><span class="line">        | Some(person) -&gt;</span><br><span class="line">            printfn <span class="string">"You are %s"</span> person</span><br><span class="line">        | None -&gt; </span><br><span class="line">            printfn <span class="string">"I don't recognize you.  Sorry."</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Display a list of known people in the db</span></span><br><span class="line">    <span class="keyword">let</span> reportPeople () =</span><br><span class="line">        printfn <span class="string">"People"</span></span><br><span class="line">        printfn <span class="string">"------"</span></span><br><span class="line">        Db.PersonList()</span><br><span class="line">        |&gt; Seq.iter (printfn <span class="string">"%s"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Display a validation report for recognition</span></span><br><span class="line">    <span class="keyword">let</span> reportValidation () =</span><br><span class="line">        <span class="comment">// run validation against existing photos</span></span><br><span class="line">        <span class="keyword">let</span> trainer = Db.getTrainer()</span><br><span class="line">        <span class="keyword">match</span> trainer <span class="keyword">with</span></span><br><span class="line">        | Some(trainer) -&gt; </span><br><span class="line">            Db.validatePredictions Db.photosFilename trainer</span><br><span class="line">            |&gt; Array.iter (<span class="keyword">fun</span> x -&gt; printfn <span class="string">"%10s %5d %5d %5.2f"</span> x.name x.matchCount x.totalCount ((float x.matchCount) / (float x.totalCount)))</span><br><span class="line">        | _             -&gt; printfn <span class="string">"No training data"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Show available commands</span></span><br><span class="line">    <span class="keyword">let</span> showHelp() =</span><br><span class="line">        printfn <span class="string">"Commands: [addperson|whoami|people|validate|help|exit]"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Execute provided command</span></span><br><span class="line">    <span class="comment">/// Return true to keep processing, false to exit</span></span><br><span class="line">    <span class="keyword">let</span> doCommand (command:string) = </span><br><span class="line">        <span class="keyword">match</span> command.ToLower() <span class="keyword">with</span></span><br><span class="line">        | <span class="string">"addperson"</span>   -&gt; addPerson(); <span class="keyword">true</span></span><br><span class="line">        | <span class="string">"whoami"</span>      -&gt; whoAmI(); <span class="keyword">true</span></span><br><span class="line">        | <span class="string">"people"</span>      -&gt; reportPeople(); <span class="keyword">true</span></span><br><span class="line">        | <span class="string">"validate"</span>    -&gt; reportValidation(); <span class="keyword">true</span></span><br><span class="line">        | <span class="string">"help"</span>        -&gt; showHelp(); <span class="keyword">true</span></span><br><span class="line">        | <span class="string">"exit"</span>        -&gt; <span class="keyword">false</span></span><br><span class="line">        | _             -&gt; printfn <span class="string">"unknown command"</span>; <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Get a person's name (by lookup or prompt to add to db)</span></span><br><span class="line">    <span class="keyword">let</span> getName() =</span><br><span class="line">        <span class="keyword">let</span> person = Db.lookupPerson()</span><br><span class="line">        <span class="keyword">match</span> person <span class="keyword">with</span> </span><br><span class="line">        | Some(person) -&gt;</span><br><span class="line">            printfn <span class="string">"Hi %s"</span> person</span><br><span class="line">            Some person</span><br><span class="line">        | None -&gt; </span><br><span class="line">            printfn <span class="string">"I don't recognize you. What is your name? "</span></span><br><span class="line">            <span class="keyword">let</span> name = Console.ReadLine()</span><br><span class="line">            printfn <span class="string">"Taking photos and training..."</span></span><br><span class="line">            Db.addPerson name</span><br><span class="line">            <span class="comment">// Note: Could return name, but I want to explicitly force a lookup</span></span><br><span class="line">            <span class="comment">//Some name    </span></span><br><span class="line">            None</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Main</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> main name = </span><br><span class="line">        <span class="keyword">match</span> name <span class="keyword">with</span></span><br><span class="line">        | Some(name) -&gt;</span><br><span class="line">            Console.Write(<span class="string">"&gt; "</span>)</span><br><span class="line">            <span class="keyword">let</span> line = Console.ReadLine()</span><br><span class="line">            <span class="keyword">let</span> keepGoing = doCommand line</span><br><span class="line">            <span class="keyword">if</span> keepGoing <span class="keyword">then</span> main (Some name) <span class="keyword">else</span> ()</span><br><span class="line">        | None       -&gt;</span><br><span class="line">            <span class="keyword">let</span> name = getName()</span><br><span class="line">            main name</span><br><span class="line"></span><br><span class="line">Db.init()</span><br><span class="line">App.main None</span><br></pre></td></tr></table></figure><p>The code is all together, it’s time to take the application for a test drive.  </p><p><img src="/images/emgu1/demo.png" alt="Application Execution"></p><p>Great! It can tell the difference between people. <em>(Sidebar: the detection isn’t perfect; but more, and better quality, data often helps with accuracy.)</em> But I can’t leave well enough alone.  It feels too impersonal, if only it knew how I was feeling.  Lucky for me, Amazon’s <a href="https://aws.amazon.com/rekognition/" target="_blank" rel="noopener">Rekognition</a> api holds the key to some fun bits.  The TLDR; the api provides, among other things, its prediction of how a person in a picture is feeling.  Other interesting components are: age range, gender, do they have glasses, and feature location.</p><p>Before I get into the code, the first requirement is an AWS account.  Second, an IAM must be created with Rekognition service permissions.  Third, add the IAM credentials to the credentials file, <code>~/.aws/credentials</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">aws_access_key_id = &lt;your id here&gt;</span><br><span class="line">aws_secret_access_key = &lt;your key here&gt;</span><br></pre></td></tr></table></figure><p><em>Note: I’ll make a quick mention here about SSL certs.  There was an easy to overcome snag when making the AWS call.  When running the code in VSCode/Ionide, it ran fine.  When running it from the commandline using <code>fsharpi</code>, I got an error.  Specifically this: <code>Amazon.Runtime.AmazonServiceException: A WebException with status TrustFailure was thrown. ---&gt; System.Net.WebException:    Error: TrustFailure (The authentication or decryption has failed.) ---&gt; System.IO.IOException: The authentication or decryption has failed. ---&gt; System.IO.IOException: The authentication or decryption has failed. ---&gt; Mono.Security.Protocol.Tls.TlsException: Invalid certificate received from server. Error code: 0xffffffff800b010a at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord (System.IAsyncResult asyncResult) ...</code>.  There are several ways to resolve this error.  I opt’d to solve this by importing the mozilla certs for mono using <code>mozroots.exe</code>.  Other options can be found at (<a href="http://www.mono-project.com/docs/faq/security/" target="_blank" rel="noopener">http://www.mono-project.com/docs/faq/security/</a>); your mileage may vary.</em></p><p>Once these components are in place, a couple small modifications are required.  First, add a new package to my package.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget AWSSDK.Rekognition </span><br></pre></td></tr></table></figure><p>Next, add the Rekognition dll’s and namespace.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/AWSSDK.Core/lib/net45/AWSSDK.Core.dll"</span></span><br><span class="line">#r <span class="string">"../packages/AWSSDK.Rekognition/lib/net45/AWSSDK.Rekognition.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> Amazon</span><br><span class="line"><span class="keyword">open</span> Amazon.Rekognition</span><br></pre></td></tr></table></figure><p>I’m going to put all the code into a new module.  To get what we need out of the api, the basic workflow is:</p><ol><li>Take photo as Bitmap.</li><li>Create a request object (with the image attached).</li><li>Call the Rekognition api with the request object.</li><li>Grab the attributes of the response object I care about.</li></ol><p>For details on the api, I recommend looking at the <a href="http://docs.aws.amazon.com/rekognition/latest/dg/API_DetectFaces.html" target="_blank" rel="noopener">Rekognition DetectFaces Documentation</a>.  There are a couple small details for my implementation I want to mention.  The api grabs all faces it can find, so FaceDetail is an array.  My use case presumes one person, or if more, it just takes the first one it finds.  The api emotion is a list of possible emotions with their probabilities.  This isn’t very friendly looking, so I only show the highest probability emotion.  The <code>whoAmI</code> function provides some addition interesting reporting from the image.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Additional face analysis features</span></span><br><span class="line"><span class="keyword">module</span> FaceExtra = </span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take an image and return an aws Model.Image</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> bitmapToModelImage (image:Bitmap) = </span><br><span class="line">        <span class="comment">// Load image into memorystream</span></span><br><span class="line">        <span class="keyword">let</span> ms = <span class="keyword">new</span> MemoryStream()</span><br><span class="line">        image.Save(ms, ImageFormat.Jpeg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Convert memorystream to aws' Model.Image</span></span><br><span class="line">        <span class="keyword">let</span> modelImage = <span class="keyword">new</span> Model.Image()</span><br><span class="line">        modelImage.Bytes &lt;- ms</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return model image</span></span><br><span class="line">        modelImage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take an image filename and return an aws DetectFacesRequest </span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> buildRequest (image:Bitmap) = </span><br><span class="line">        <span class="keyword">let</span> request = <span class="keyword">new</span> Model.DetectFacesRequest()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get all attributes back from api</span></span><br><span class="line">        <span class="keyword">let</span> attributeList = <span class="keyword">new</span> Collections.Generic.List&lt;string&gt;()</span><br><span class="line">        attributeList.Add(<span class="string">"ALL"</span>)</span><br><span class="line">        request.Attributes &lt;- attributeList</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set Image</span></span><br><span class="line">        request.Image &lt;- bitmapToModelImage image</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return request</span></span><br><span class="line">        request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Given a list of emotions, return the highest confidence one (in tuple form)</span></span><br><span class="line">    <span class="keyword">let</span> getMainEmotion (emotions:Collections.Generic.List&lt;Model.Emotion&gt;) = </span><br><span class="line">        <span class="keyword">if</span> emotions.Count &lt;&gt; <span class="number">0</span> </span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            emotions</span><br><span class="line">            |&gt; Seq.sortByDescending (<span class="keyword">fun</span> x -&gt; x.Confidence)</span><br><span class="line">            |&gt; Seq.head</span><br><span class="line">            |&gt; (<span class="keyword">fun</span> e -&gt; (e.Type.Value, e.Confidence))</span><br><span class="line">        <span class="keyword">else</span> (<span class="string">"Unknown"</span>, float32 <span class="number">0.</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Query the rekognition api using the provided bitmap image</span></span><br><span class="line">    <span class="keyword">let</span> getFaceDetails (image:Bitmap) = </span><br><span class="line">        <span class="keyword">let</span> request = buildRequest image</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> rekognition = <span class="keyword">new</span> Amazon.Rekognition.AmazonRekognitionClient(Amazon.RegionEndpoint.USEast1)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> detectedFaces = rekognition.DetectFaces(request)</span><br><span class="line"></span><br><span class="line">        detectedFaces</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take a snapshot and determine the person's emotional state.</span></span><br><span class="line">    <span class="keyword">let</span> getCurrentEmotion () =</span><br><span class="line">        <span class="keyword">let</span> details = getFaceDetails (Camera.captureImageBitmap())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> details.FaceDetails.Count &lt;&gt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">then</span> Some ((fst (getMainEmotion details.FaceDetails.[<span class="number">0</span>].Emotions)).ToLower())</span><br><span class="line">        <span class="keyword">else</span> None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Make a friendly description string for showing if face has an attribute</span></span><br><span class="line">    <span class="keyword">let</span> attributeDisplay (value:bool) (description:string) =</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">then</span> sprintf <span class="string">"Has %s"</span> description <span class="keyword">else</span> sprintf <span class="string">"No %s"</span> description </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Build a simple report string</span></span><br><span class="line">    <span class="keyword">let</span> getFaceReport () = </span><br><span class="line">        <span class="keyword">let</span> details = getFaceDetails (Camera.captureImageBitmap())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> details.FaceDetails.Count &lt;&gt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">let</span> face = details.FaceDetails.[<span class="number">0</span>]</span><br><span class="line">            sprintf </span><br><span class="line">                <span class="string">"Gender: %s\r\nAge: %d - %d\r\nEmotions: %s\r\n%s\r\n%s\r\n%s\r\n%s"</span> </span><br><span class="line">                face.Gender.Value.Value </span><br><span class="line">                face.AgeRange.Low </span><br><span class="line">                face.AgeRange.High</span><br><span class="line">                (String.Join(<span class="string">", "</span>, face.Emotions |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; sprintf <span class="string">"%s (%f)"</span> x.Type.Value x.Confidence)))</span><br><span class="line">                (attributeDisplay face.Beard.Value <span class="string">"beard"</span>)</span><br><span class="line">                (attributeDisplay face.Mustache.Value <span class="string">"mustache"</span>)</span><br><span class="line">                (attributeDisplay face.Eyeglasses.Value <span class="string">"glasses"</span>)</span><br><span class="line">                (attributeDisplay face.Sunglasses.Value <span class="string">"sunglasses"</span>)</span><br><span class="line">        <span class="keyword">else</span> <span class="string">""</span></span><br></pre></td></tr></table></figure><p>The additional functionality gets wired into the <code>whoAmI</code> and <code>getName</code> calls.  This is a pretty simple add.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Lookup person currently in front of camera</span></span><br><span class="line"><span class="keyword">let</span> whoAmI () =</span><br><span class="line">    <span class="keyword">let</span> person = Db.lookupPerson()</span><br><span class="line">    <span class="keyword">match</span> person <span class="keyword">with</span> </span><br><span class="line">    | Some(person) -&gt;</span><br><span class="line">        <span class="keyword">let</span> report = FaceExtra.getFaceReport()</span><br><span class="line">        printfn <span class="string">"You are %s\r\n%s"</span> person report </span><br><span class="line">    | None -&gt; </span><br><span class="line">        printfn <span class="string">"I don't recognize you.  Sorry."</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Get a person's name (by lookup or prompt to add to db)</span></span><br><span class="line"><span class="keyword">let</span> getName() =</span><br><span class="line">    <span class="keyword">let</span> person = Db.lookupPerson()</span><br><span class="line">    <span class="keyword">match</span> person <span class="keyword">with</span> </span><br><span class="line">    | Some(person) -&gt;</span><br><span class="line">        <span class="keyword">let</span> emotion = FaceExtra.getCurrentEmotion()</span><br><span class="line">        <span class="keyword">match</span> emotion <span class="keyword">with</span></span><br><span class="line">        | Some(emotion) -&gt; printfn <span class="string">"Hi %s, you seem %s"</span> person emotion</span><br><span class="line">        | None          -&gt; printfn <span class="string">"Hi %s"</span> person</span><br><span class="line">        Some person</span><br><span class="line">    | None -&gt; </span><br><span class="line">        printfn <span class="string">"I don't recognize you. What is your name? "</span></span><br><span class="line">        <span class="keyword">let</span> name = Console.ReadLine()</span><br><span class="line">        printfn <span class="string">"Taking photos and training..."</span></span><br><span class="line">        Db.addPerson name</span><br><span class="line">        <span class="comment">// Note: Could return name, but I want to explicitly force a lookup</span></span><br><span class="line">        <span class="comment">//Some name    </span></span><br><span class="line">        None</span><br></pre></td></tr></table></figure><p>Time to checkout how the new functionality looks.</p><p><img src="/images/emgu1/demo-emotion.png" alt="With Emotion"></p><p>Cool.  It did a pretty good job.  The great thing is, this kind of technology will only get better.  This has been fun, but the post has already gone longer than intended, so I’ll end it here.  I hope you enjoyed this little glimpse into facial recognition and information extraction.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As the future rushes upon us, there is the growing desire to have a more integrated interaction with our computers.  One way is to have our computers recognize us; enter facial recognition.  Often this can be done with complex tools, but it is encouraging to be able to do it with something as simple as &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://www.emgu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EmguCV&lt;/a&gt;.  With these tools in hand, facial recognition can be built into personal projects with ease.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Images" scheme="http://codesuji.com/tags/Images/"/>
    
      <category term="EmguCV" scheme="http://codesuji.com/tags/EmguCV/"/>
    
      <category term="OpenCV" scheme="http://codesuji.com/tags/OpenCV/"/>
    
      <category term="Computer Vision" scheme="http://codesuji.com/tags/Computer-Vision/"/>
    
      <category term="Faces" scheme="http://codesuji.com/tags/Faces/"/>
    
      <category term="Rekognition" scheme="http://codesuji.com/tags/Rekognition/"/>
    
  </entry>
  
  <entry>
    <title>BF Compiler Part 4 - Optimization</title>
    <link href="http://codesuji.com/2017/03/13/bf-compiler-part4-optimization/"/>
    <id>http://codesuji.com/2017/03/13/bf-compiler-part4-optimization/</id>
    <published>2017-03-14T01:47:39.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Now that the BF compiler is together, it’s time to add some obvious optimizations.</p><a id="more"></a><p><strong>Series:</strong><br><a href="/2017/02/19/bf-compiler-part1-parsing">Part 1 (Parsing)</a><br><a href="/2017/02/26/bf-compiler-part2-msil">Part 2 (IL Generation)</a><br><a href="/2017/03/04/bf-compiler-part3-compiler">Part 3 (Compiler)</a><br>Part 4 (Optimization)</p><p>I’m going to approach this post a bit differently than most before it.  Typically a post’s code stands on its own, but this post is largely a refactor of Part 3.  I’ll focus on the diffs necessary to implement the desired optimizations.  Along the way I’ll add some handy debugging code.  Before I get started, this post assumes knowledge from the previous posts (especially post 3), so feel free to go back and peruse earlier posts in this series.  Getting started, I want optimizations to be optional.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> optimizationsEnabled = <span class="keyword">true</span> </span><br></pre></td></tr></table></figure><p>First up, the internal BF language representation as F#’s discriminated unions.  I add addtional the intermediate representation (IR) ops to support my optimizations and debugging support.  There are a multitude of optimizations that can be done.  For this post I’m only going to focus on folding contiguous pointer shifts, contiguous data increment/decrements, setting a cell to zero.  In addition to these optimizations, I add a debug print <strong>?</strong> that works like <strong>.</strong>, but prints the int value instead of the standard char.  It is mildly controversial to extend BF, but I find this is a minimally helpful tool for debugging.</p><p>I’ve decided, for demonstrative purposes, to extend the IR instead of replace existing operators.  Where you see operators such as <em>Gtx</em>  or <em>Plusx</em>, I could have just as easily rewired the existing <em>Gt</em> and <em>Plus</em>, respectively.  In a more formal setting, I would’ve most likely refactored the existing operators.  It makes for a cleaner codebase, but this method allows me to show a couple more F#isms.</p><p><strong>Extended Examples:</strong></p><p><strong>&gt;&gt;&gt;&gt;</strong> : Compresses to <strong>Gtx 4</strong></p><p><strong>&lt;&lt;&lt;&gt;</strong> : Compresses to <strong>Ltx 3</strong></p><p><strong>++++</strong> : Compresses to <strong>Plusx 4</strong></p><p><strong>++- -</strong> : Compresses to <strong>Nop</strong> (Since they cancel out, there isn’t anything to do.)</p><p><strong>[-]</strong> : Compresses to <strong>Set0</strong> (This is a common way to set a cell to 0.  I can do a direct set without looping.)</p><p>Once I create the extended operators, I add them to <em>AllOps</em> DU.  I also add a “No Op” operator (<em>Nop</em>) for cases where my folds zero out.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ExtendedOps</span> </span>= </span><br><span class="line">    | Gtx <span class="keyword">of</span> int </span><br><span class="line">    | Ltx <span class="keyword">of</span> int </span><br><span class="line">    | Plusx <span class="keyword">of</span> int </span><br><span class="line">    | Minusx <span class="keyword">of</span> int</span><br><span class="line">    | Set0 </span><br><span class="line">    | DebugPrint</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">AllOps</span> </span>= </span><br><span class="line">    | Op <span class="keyword">of</span> ActionOps </span><br><span class="line">    | Loop <span class="keyword">of</span> AllOps list</span><br><span class="line">    | Program <span class="keyword">of</span> AllOps list</span><br><span class="line">    | Comment</span><br><span class="line">    | Extended <span class="keyword">of</span> ExtendedOps</span><br><span class="line">    | Nop</span><br></pre></td></tr></table></figure><p>Here is one of the places where F# shines, code correctness.  Now that I’ve added these types, my code doesn’t compile anymore.  The error message is this: <strong>Incomplete pattern matches on this expression. For example, the value ‘Extended (_)’ may indicate a case not covered by the pattern(s).</strong> Looking at the code below you can see I have a match expression against the <em>AllOps</em> type, but I clearly don’t handle all cases, namely the ones I just added.  I knew this was the case, but I’m happy when the compiler can figure out these cases.  In a larger codebase that might not even be mine, this is a powerful dynamic.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> processAst (ilGenerator:ILGenerator) (data:MemArray) (dataPointer:DpPointer) (ast:AllOps) =</span><br><span class="line">    <span class="keyword">match</span> ast <span class="keyword">with</span></span><br><span class="line">    | Op op         -&gt; emitOp ilGenerator op data dataPointer</span><br><span class="line">    | Loop block    -&gt; emitLoop ilGenerator data dataPointer block</span><br><span class="line">    | Program block -&gt; emitOpList ilGenerator data dataPointer block</span><br><span class="line">    | Comment       -&gt; ()</span><br></pre></td></tr></table></figure><p>Here is the new version of the match, problem solved.  This obviously causes it’s own cascading effect, now I need a <em>emitExtendedOp</em> function.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> processAst (ilGenerator:ILGenerator) (data:MemArray) (dataPointer:DpPointer) (ast:AllOps) =</span><br><span class="line">    <span class="keyword">match</span> ast <span class="keyword">with</span></span><br><span class="line">    | Op op         -&gt; emitOp ilGenerator op data dataPointer</span><br><span class="line">    | Loop block    -&gt; emitLoop ilGenerator data dataPointer block</span><br><span class="line">    | Program block -&gt; emitOpList ilGenerator data dataPointer block</span><br><span class="line">    | Comment       -&gt; ()</span><br><span class="line">    | Nop           -&gt; ()</span><br><span class="line">    | Extended op   -&gt; emitExtendedOp ilGenerator op data dataPointer</span><br></pre></td></tr></table></figure><p>I handle the extended operators in a similar fashion to normal operators.  This also a prime time for a minor refactor. Pointer shifts and data increment/decrements for the extended versions are identical to the orignal ones except for the amount.  As a result I will make the <em>emit[Gt|Lt|Plus|Minus]</em> to be more generic, and take a modifer amount.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Generate IL for an operator</span></span><br><span class="line"><span class="keyword">let</span> emitOp (ilGenerator:ILGenerator) (op:ActionOps) (data:MemArray) (dataPointer:DpPointer) =</span><br><span class="line">    <span class="keyword">match</span> op <span class="keyword">with</span> </span><br><span class="line">    | Gt    -&gt; emitGt ilGenerator dataPointer <span class="number">1</span></span><br><span class="line">    | Lt    -&gt; emitLt ilGenerator dataPointer <span class="number">1</span></span><br><span class="line">    | Plus  -&gt; emitPlus ilGenerator data dataPointer <span class="number">1</span></span><br><span class="line">    | Minus -&gt; emitMinus ilGenerator data dataPointer <span class="number">1</span></span><br><span class="line">    | Read  -&gt; emitComma ilGenerator data dataPointer</span><br><span class="line">    | Write -&gt; emitPeriod ilGenerator data dataPointer</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> emitExtendedOp (ilGenerator:ILGenerator) (op:ExtendedOps) (data:MemArray) (dataPointer:DpPointer) =</span><br><span class="line">    <span class="keyword">match</span> op <span class="keyword">with</span></span><br><span class="line">    | Gtx i      -&gt; emitGt ilGenerator dataPointer i </span><br><span class="line">    | Ltx i      -&gt; emitLt ilGenerator dataPointer i </span><br><span class="line">    | Plusx i    -&gt; emitPlus ilGenerator data dataPointer i </span><br><span class="line">    | Minusx i   -&gt; emitMinus ilGenerator data dataPointer i </span><br><span class="line">    | Set0       -&gt; emitSetx ilGenerator data dataPointer <span class="number">0</span></span><br><span class="line">    | DebugPrint -&gt; emitDebugPrint ilGenerator data dataPointer</span><br></pre></td></tr></table></figure><p>Continuing the cascading changes, I refactor the operator-specific emit functions.  These all have the same refactor to include the parameter and use that instead of the fixed value of 1:</p><ol><li><p>Add <em>(i:int)</em> as a parameter</p></li><li><p>Replace <em>ilGenerator.Emit(OpCodes.Ldc_I4_1)</em> with <em>ilGenerator.Emit(OpCodes.Ldc_I4, i)</em></p></li></ol><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Increment dataPointer</span></span><br><span class="line"><span class="keyword">let</span> emitGt (ilGenerator:ILGenerator) (DP(dataPointer):DpPointer) (i:int) = </span><br><span class="line">    addLocalInt ilGenerator dataPointer i</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decrement dataPointer</span></span><br><span class="line"><span class="keyword">let</span> emitLt (ilGenerator:ILGenerator) (DP(dataPointer):DpPointer) (i:int) = </span><br><span class="line">    subLocalInt ilGenerator dataPointer i</span><br><span class="line"></span><br><span class="line"><span class="comment">// Increment value in data[dataPointer]</span></span><br><span class="line"><span class="keyword">let</span> emitPlus (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) (i:int) =  </span><br><span class="line">    <span class="comment">// Load array reference for setting</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load value of array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldelem_I4)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add i to value</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldc_I4, i)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Add)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save back into array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Stelem_I4)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decrement value in data[dataPointer]</span></span><br><span class="line"><span class="keyword">let</span> emitMinus (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) (i:int) =  </span><br><span class="line">    <span class="comment">// Load array reference for setting</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load value of array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldelem_I4)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Subtract i to value</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldc_I4, i)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Sub)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save back into array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Stelem_I4)</span><br></pre></td></tr></table></figure><p>Implementing <em>emitSetx</em> takes a value and does an explict value set to <em>data[dataPointer]</em>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set value at data[dataPointer]</span></span><br><span class="line"><span class="keyword">let</span> emitSetx (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) (i:int) =  </span><br><span class="line">    <span class="comment">// Load array reference for setting</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Value to set</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldc_I4, i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save into array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Stelem_I4)</span><br></pre></td></tr></table></figure><p>The debug print provides two pieces of information, the current dataPointer value and the integer value at data[dataPointer].  <code>String.Format</code> is a bit more involved than some of the other function calls.  I need to load the format string, and box the corresponding integer values.  Then I can do a <code>Console.WriteLine</code> of the formatted string with the variable values injected.   </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Print decimal value at data[dataPointer] &amp; index value to stdout</span></span><br><span class="line"><span class="keyword">let</span> emitDebugPrint (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) =</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldstr, <span class="string">"[&#123;0&#125;]  &#123;1&#125;"</span>)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Box, typeof&lt;int&gt;)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldelem_I4)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Box, typeof&lt;int&gt;)</span><br><span class="line">    ilGenerator.EmitCall(OpCodes.Call,typeof&lt;String&gt;.GetMethod(<span class="string">"Format"</span>, [| typeof&lt;string&gt;; typeof&lt;Object&gt;; typeof&lt;Object&gt; |]), <span class="keyword">null</span>); </span><br><span class="line">    ilGenerator.EmitCall(OpCodes.Call,typeof&lt;Console&gt;.GetMethod(<span class="string">"WriteLine"</span>, [| typeof&lt;string&gt; |]), <span class="keyword">null</span>); </span><br></pre></td></tr></table></figure><p>Now that I have addressed the compilation issues and all the new emitting code, it’s time to look at the parsing code.  I would typically separate parsing from optimization, making it a secondary step in the compilation.  But BF is so simple, plus I can tie this back to the original goal, leverage FParsec.</p><p>The parser changes leverage existing parsers and then implement additional logic on top.  <em>pGreaterLesser</em> reads any number of consecutive <em>&gt;</em> and <em>&lt;</em>, then it counts them and determines the difference.  This results in the optimized operator <em>Gtx</em>, <em>Ltx</em>, or <em>Nop</em>.  <em>pPlusMinus</em> works the same way.  <em>pSet</em> matches “[-]” (loop at current position until data[dataPointer] = 0), it a straightforward match, but you may notice this is a pstring, versus pchar match. <em>pDebugPrint</em> is a character match.  After adding the new parsers, it’s a matter of just wiring them into their respective parser groups.  This is also where I check to see if optimizations are enabled or not. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">let</span> commentChar c =</span><br><span class="line">       c &lt;&gt; '&gt;' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '&lt;' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '+' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '-' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '[' &amp;&amp; </span><br><span class="line">       c &lt;&gt; ']' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '.' &amp;&amp; </span><br><span class="line">       c &lt;&gt; ',' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '?'</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> pComment:Parser&lt;_&gt; =         </span><br><span class="line">       many1Satisfy commentChar |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Comment</span><br><span class="line">   </span><br><span class="line"><span class="keyword">let</span> pGreaterLesser:Parser&lt;_&gt; = </span><br><span class="line">       many1 (pGreater &lt;|&gt; pLesser) |&gt;&gt; <span class="keyword">fun</span> x -&gt; </span><br><span class="line">           <span class="keyword">let</span> gCount = (x |&gt; List.filter (<span class="keyword">fun</span> y -&gt; y = Op Gt)) |&gt; List.length</span><br><span class="line">           <span class="keyword">let</span> lCount = (x |&gt; List.filter (<span class="keyword">fun</span> y -&gt; y = Op Lt)) |&gt; List.length</span><br><span class="line">           <span class="keyword">if</span> gCount = lCount <span class="keyword">then</span> Nop </span><br><span class="line">           <span class="keyword">elif</span> gCount &gt; lCount <span class="keyword">then</span> Extended (Gtx (gCount - lCount)) </span><br><span class="line">           <span class="keyword">else</span> Extended (Ltx (lCount - gCount))</span><br><span class="line">       </span><br><span class="line">   <span class="keyword">let</span> pPlusMinus:Parser&lt;_&gt; = </span><br><span class="line">       many1 (pPlus &lt;|&gt; pMinus) |&gt;&gt; <span class="keyword">fun</span> x -&gt; </span><br><span class="line">           <span class="keyword">let</span> pCount = (x |&gt; List.filter (<span class="keyword">fun</span> y -&gt; y = Op Plus)) |&gt; List.length</span><br><span class="line">           <span class="keyword">let</span> mCount = (x |&gt; List.filter (<span class="keyword">fun</span> y -&gt; y = Op Minus)) |&gt; List.length</span><br><span class="line">           <span class="keyword">if</span> pCount = mCount <span class="keyword">then</span> Nop </span><br><span class="line">           <span class="keyword">elif</span> pCount &gt; mCount <span class="keyword">then</span> Extended (Plusx (pCount - mCount)) </span><br><span class="line">           <span class="keyword">else</span> Extended (Minusx (mCount - pCount))</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> pSet0:Parser&lt;_&gt; = </span><br><span class="line">       pstring <span class="string">"[-]"</span> |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Extended Set0    </span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> pDebugPrint:Parser&lt;_&gt; = </span><br><span class="line">       pchar '?' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Extended DebugPrint    </span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> pCommands =</span><br><span class="line">       <span class="keyword">if</span> optimizationsEnabled</span><br><span class="line">       <span class="keyword">then</span> pGreaterLesser &lt;|&gt; pPlusMinus &lt;|&gt; pSet0 &lt;|&gt; pGreater &lt;|&gt; pLesser &lt;|&gt; pPlus &lt;|&gt; pMinus &lt;|&gt; pPeriod &lt;|&gt; pComma </span><br><span class="line">       <span class="keyword">else</span> pGreater &lt;|&gt; pLesser &lt;|&gt; pPlus &lt;|&gt; pMinus &lt;|&gt; pPeriod &lt;|&gt; pComma </span><br><span class="line"></span><br><span class="line">   <span class="keyword">do</span> pLoopImpl := pLBracket &gt;&gt;. (many (pCommands &lt;|&gt; pLoop &lt;|&gt; pComment &lt;|&gt; pDebugPrint)) .&gt;&gt; pRBracket |&gt;&gt; <span class="keyword">fun</span> x -&gt; </span><br><span class="line">       Loop x</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Build ast from source code</span></span><br><span class="line">   <span class="keyword">let</span> buildAst code = </span><br><span class="line">       run (many (pCommands &lt;|&gt; pLoop &lt;|&gt; pComment &lt;|&gt; pDebugPrint)) code </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>With refactoring complete, I look at the Hello World program from the last post.  First, debug prints.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code  = <span class="string">"++++++++++++?[&gt;++++++&gt;++++++++&gt;+++&lt;&lt;&lt;-]&gt;?&gt;?&gt;?&lt;&lt;.&gt;+++++.+++++++..+++.&gt;----.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+."</span> </span><br></pre></td></tr></table></figure><p><img src="/images/bf1/helloworld_debug_execute.png" alt="Hello World - Debug"></p><p>Second, a look at the optimizations.  I perform two compilations; one normal, one optimized.  The results are what I’d expect to see.  This sample is so short there isn’t really a peformance gain, the code is is just cleaner.  On a more intense application, it’s easy to see how this code compression could add up to at least a minimal performance boost.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code  = <span class="string">"++++++++++++[&gt;++++++&gt;++++++++&gt;+++&lt;&lt;&lt;-]&gt;.&gt;+++++.+++++++..+++.&gt;----.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+."</span> </span><br></pre></td></tr></table></figure><p>Below shows the compilation differences of the normal versus optimized compilation.<br><img src="/images/bf1/decompiled_helloworld.png" alt="Hello World - Optimization"></p><p>There is it.  A simple refactor to add debugging and minor optimizations.  I didn’t expect this to be much work, but it is nice how F# can guide me along the refactor, once I have my intentions defined.  I hope you found this post to be at least a mildly useful example of the power of F# and FParsec.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Now that the BF compiler is together, it’s time to add some obvious optimizations.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Compiler" scheme="http://codesuji.com/tags/Compiler/"/>
    
      <category term="FParsec" scheme="http://codesuji.com/tags/FParsec/"/>
    
      <category term="Parsing" scheme="http://codesuji.com/tags/Parsing/"/>
    
      <category term="MSIL" scheme="http://codesuji.com/tags/MSIL/"/>
    
  </entry>
  
  <entry>
    <title>BF Compiler Part 3 - Compiler</title>
    <link href="http://codesuji.com/2017/03/04/bf-compiler-part3-compiler/"/>
    <id>http://codesuji.com/2017/03/04/bf-compiler-part3-compiler/</id>
    <published>2017-03-05T01:04:45.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>This is the third installment in creating a brainfuck (BF) compiler using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="http://www.quanttec.com/fparsec/" target="_blank" rel="noopener">FParsec</a>.  Previous posts discussed the parsing and the IL generation.  Now it it time to pull it all together into something useful.  </p><a id="more"></a><p><strong>Series:</strong><br><a href="/2017/02/19/bf-compiler-part1-parsing">Part 1 (Parsing)</a><br><a href="/2017/02/26/bf-compiler-part2-msil">Part 2 (IL Generation)</a><br>Part 3 (Compiler)<br><a href="/2017/03/11/bf-compiler-part4-optimization">Part 4 (Optimization)</a></p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget FParsec </span><br></pre></td></tr></table></figure><p>Here is the standard boilerplate for loading assemblies and generally getting ready to go.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">System.IO.Directory.SetCurrentDirectory(__SOURCE_DIRECTORY__)</span><br><span class="line">#r <span class="string">"../packages/FParsec/lib/net40-client/FParsecCS.dll"</span></span><br><span class="line">#r <span class="string">"../packages/FParsec/lib/net40-client/FParsec.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> System.Runtime</span><br><span class="line"><span class="keyword">open</span> System.Reflection</span><br><span class="line"><span class="keyword">open</span> System.Reflection.Emit</span><br><span class="line"><span class="keyword">open</span> System.Text.RegularExpressions</span><br><span class="line"><span class="keyword">open</span> FParsec</span><br></pre></td></tr></table></figure><p>I’ll start with the parsing code.  I include it here for completeness sake, but there isn’t much new here.  From a logic perspective, I added <em>Comment</em> support into the parser (basically any char that isn’t a valid character).  I also wrapped the parsing code in a module for organizational purposes.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Language operators (used in parsing and emitting)</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ActionOps</span> </span>= Gt | Lt | Plus | Minus | Read | Write</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">AllOps</span> </span>= </span><br><span class="line">    | Op <span class="keyword">of</span> ActionOps </span><br><span class="line">    | Loop <span class="keyword">of</span> AllOps list</span><br><span class="line">    | Program <span class="keyword">of</span> AllOps list</span><br><span class="line">    | Comment</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////</span></span><br><span class="line"><span class="comment">// Parsing code</span></span><br><span class="line"><span class="keyword">module</span> Parser = </span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">UserState</span> </span>= unit</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Parser</span>&lt;<span class="title">'t</span>&gt; </span>= Parser&lt;<span class="symbol">'t</span>, UserState&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pGreater:Parser&lt;_&gt; = </span><br><span class="line">        pchar '&gt;' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Gt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pLesser:Parser&lt;_&gt; = </span><br><span class="line">        pchar '&lt;' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Lt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pPlus:Parser&lt;_&gt; = </span><br><span class="line">        pchar '+' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Plus</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pMinus:Parser&lt;_&gt; = </span><br><span class="line">        pchar '-' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Minus</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pPeriod:Parser&lt;_&gt; = </span><br><span class="line">        pchar '.' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Write</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">let</span> pComma:Parser&lt;_&gt; = </span><br><span class="line">        pchar ',' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Read</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pLBracket:Parser&lt;_&gt; = </span><br><span class="line">        pchar '[' |&gt;&gt; ignore </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pRBracket:Parser&lt;_&gt; = </span><br><span class="line">        pchar ']' |&gt;&gt; ignore</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pCommands = pGreater &lt;|&gt; pLesser &lt;|&gt; pPlus &lt;|&gt; pMinus &lt;|&gt; pPeriod &lt;|&gt; pComma </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (pLoop:Parser&lt;AllOps&gt;), (pLoopImpl:Parser&lt;AllOps&gt; ref) = createParserForwardedToRef()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> pLoopImpl := pLBracket &gt;&gt;. (many (pCommands &lt;|&gt; pLoop)) .&gt;&gt; pRBracket |&gt;&gt; <span class="keyword">fun</span> x -&gt; </span><br><span class="line">        Loop x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> commentChar c =</span><br><span class="line">        c &lt;&gt; '&gt;' &amp;&amp; </span><br><span class="line">        c &lt;&gt; '&lt;' &amp;&amp; </span><br><span class="line">        c &lt;&gt; '+' &amp;&amp; </span><br><span class="line">        c &lt;&gt; '-' &amp;&amp; </span><br><span class="line">        c &lt;&gt; '[' &amp;&amp; </span><br><span class="line">        c &lt;&gt; ']' &amp;&amp; </span><br><span class="line">        c &lt;&gt; '.' &amp;&amp; </span><br><span class="line">        c &lt;&gt; ','</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> pComment:Parser&lt;_&gt; =         </span><br><span class="line">        many1Satisfy commentChar |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Comment</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Build ast from source code</span></span><br><span class="line">    <span class="keyword">let</span> buildAst code = </span><br><span class="line">        run (many (pCommands &lt;|&gt; pLoop &lt;|&gt; pComment)) code </span><br></pre></td></tr></table></figure><p>This is the start of the new IL emitting code.  Sticking with the standard definition, the memory array will be of size 30,000.  <code>LocalBuilder</code> is an IL local variable object.  To protect me from myself, I leverage F# types to ensure that I’m using the correct variable in the correct place.  For those not familar with F#, this will become more obvious where the variables are used.  Simply, the type safety this brings is immensely useful and offers me a piece of mind.  As a sidenote, BF defines the use of a program counter.  I don’t actually need a program counter to keep track of where I am, so it’s excluded from my implementation.  It’s here, but commented out primarily for reference-sake.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Emitter = </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Size of memory (data[])</span></span><br><span class="line">    <span class="keyword">let</span> memorySize = <span class="number">30000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// IL Variable types</span></span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">MemArray</span> </span>= MEM <span class="keyword">of</span> LocalBuilder</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">DpPointer</span> </span>= DP <span class="keyword">of</span> LocalBuilder</span><br><span class="line">    <span class="comment">//type PcPointer = PC of LocalBuilder</span></span><br></pre></td></tr></table></figure><p>There will some variable creation along the way.  To be consistent I create some functions to consistently implement that process. <em>ilGenerator</em> is basically the function the code is attached to.  Creating a scalar is straight forward.  Creating an array is a bit more involved.  I need to create the variable, then call <code>Newarr</code> with the element type and array size to initialize the array.  Once complete, I return the created variable</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create IL local variable</span></span><br><span class="line"><span class="keyword">let</span> createLocal (ilGenerator:ILGenerator) (t:Type) =</span><br><span class="line">    ilGenerator.DeclareLocal(t)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create IL local array variable</span></span><br><span class="line"><span class="keyword">let</span> createLocalArray (ilGenerator:ILGenerator) (t:Type) (size:int) =</span><br><span class="line">    <span class="keyword">let</span> regex = <span class="keyword">new</span> Regex(<span class="string">@"\[\]$"</span>)</span><br><span class="line">    <span class="keyword">let</span> tElement = Type.GetType(regex.Replace(t.FullName, <span class="string">""</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> var = createLocal ilGenerator t</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldc_I4, size)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Newarr, tElement)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Stloc, var)</span><br><span class="line">    var</span><br></pre></td></tr></table></figure><p>Both the add and sub perform similar actions, add a value to a local variable.  As a quick refresher, there will be lots of pushing onto the stack, performing actions, and popping results off a stack.  As a result, these functions follow a pattern that will show up repeatably in this post.  <code>LdLoc</code> pushes a local variable value onto the stack. <code>Ldc_I4</code> pushes a 32bit int onto the stack; in this case the amount to be added/subtracted to/from the local variable value.  <code>Add</code> and <code>Sub</code> pop the top 2 values off the top of the stack, perform their respective actions, and push the result onto the stack.  <code>StLoc</code> pops a value off the stack and stores it in the local variable.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add int to IL local variable</span></span><br><span class="line"><span class="keyword">let</span> addLocalInt (ilGenerator:ILGenerator) (var:LocalBuilder) (i:int) =</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, var)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldc_I4, i)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Add)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Stloc, var)</span><br><span class="line"></span><br><span class="line"><span class="comment">// subtract int from IL local variable</span></span><br><span class="line"><span class="keyword">let</span> subLocalInt (ilGenerator:ILGenerator) (var:LocalBuilder) (i:int) =</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, var)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldc_I4, i)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Sub)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Stloc, var)</span><br></pre></td></tr></table></figure><p>The functions <em>emitGt</em> and <em>emitLt</em> increment and decrement the data pointer by leveraging the previously defined add/sub functions.  This is also an important place to mention type safety (See, I said I’d get back to that).  I can ensure that I don’t ever accidently send anything other than the data pointer into these functions.  That can simply be done with a <code>(dataPointer:DpPointer)</code>, but I want to do a bit more; I want to use the <code>LocalBuilder</code> value within the type.  If you’re not familar with the syntax, <code>(DP(dataPointer):DpPointer)</code> effectively ensures that <em>dataPointer</em> is of type <em>DpPointer</em>, and extracts the <em>LocalBuilder</em> instance into the <em>dataPointer</em> variable.  This is a nice construct to not only ensure I send in a <em>LocalBuilder</em>, but that I send in the correct <em>LocalBuilder</em>.  The additional level of security is one of the strengths type safety brings to the table.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Increment dataPointer</span></span><br><span class="line"><span class="keyword">let</span> emitGt (ilGenerator:ILGenerator) (DP(dataPointer):DpPointer) = </span><br><span class="line">    addLocalInt ilGenerator dataPointer <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Decrement dataPointer</span></span><br><span class="line"><span class="keyword">let</span> emitLt (ilGenerator:ILGenerator) (DP(dataPointer):DpPointer) = </span><br><span class="line">    subLocalInt ilGenerator dataPointer <span class="number">1</span></span><br></pre></td></tr></table></figure><p><em>emitPlus</em> and <em>emitMinus</em> increment and decrement the value at data[dataPointer], respectively.  This is similar to before, the primary difference is how to get/set an array value.  Also note that again I use F# types to ensure I am only ever working with the <em>data[]</em> and <em>dataPointer</em> variables.  To get a value from an array onto the stack I push the array variable reference on the stack <code>Ldloc &lt;array variable&gt;</code>, then the index <code>Ldloc &lt;index&gt;</code>, then a command to push the value at array[index] onto the stack <code>Ldelem_I4</code>.  To set a value of an array the process is similar.  Push the array reference, index, and value on the stack, then call a command to pop the top value of the stack into array[index], <code>Stelem_I4</code>.  Beyond getting values in and out of arrays, I just have to do the appropriate add/subtract to the value before doing the set.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Increment value in data[dataPointer]</span></span><br><span class="line"><span class="keyword">let</span> emitPlus (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) =  </span><br><span class="line">    <span class="comment">// Load array reference for setting</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load value of array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldelem_I4)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add 1 to value</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldc_I4_1)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Add)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save back into array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Stelem_I4)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decrement value in data[dataPointer]</span></span><br><span class="line"><span class="keyword">let</span> emitMinus (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) =  </span><br><span class="line">    <span class="comment">// Load array reference for setting</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load value of array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldelem_I4)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Subtract 1 to value</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldc_I4_1)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Sub)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save back into array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Stelem_I4)</span><br></pre></td></tr></table></figure><p>Now it is time to tackle the IO portion of BF.  <em>emitComma</em> reads a character from stdin and saves it into <em>data[dataPointer]</em>.  To do this, I need to read the keypress from the console and convert it to a char.  In F# I would do <code>let (keypressChar:char) = Console.ReadKey().KeyChar</code>.  Using straight IL, I call the <code>ReadKey</code> and <code>get_KeyChar</code> functions.  After that, it is a matter of saving the value into the data array as an int. <em>emitPeriod</em> displays the value at <em>data[dataPointer]</em> to stdout as a char.  There isn’t a lot new here, push the value from the array onto the stack, then call <code>Console.Write</code>.  Of possible interest here is the parameter type char.  If I make the parameter type be <code>typeof&lt;int&gt;</code>, it would instead print the actual int value in the data array.  Although not what I want as final output, its a useful note for debugging.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Read char from stdin into data[dataPointer]</span></span><br><span class="line"><span class="keyword">let</span> emitComma (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) =</span><br><span class="line">    <span class="comment">// Read keypress and extract char value</span></span><br><span class="line">    <span class="keyword">let</span> consoleReadKey = createLocal ilGenerator typeof&lt;System.ConsoleKeyInfo&gt;</span><br><span class="line">    ilGenerator.EmitCall(OpCodes.Call, typeof&lt;Console&gt;.GetMethod(<span class="string">"ReadKey"</span>, [| |]), [| typeof&lt;ConsoleKeyInfo&gt; |])</span><br><span class="line">    ilGenerator.Emit(OpCodes.Stloc, consoleReadKey)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> keypressChar = createLocal ilGenerator typeof&lt;char&gt;</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloca_S, consoleReadKey)</span><br><span class="line">    ilGenerator.EmitCall(OpCodes.Call, typeof&lt;ConsoleKeyInfo&gt;.GetMethod(<span class="string">"get_KeyChar"</span>, [| |]), [| typeof&lt;char&gt; |])</span><br><span class="line">    ilGenerator.Emit(OpCodes.Stloc, keypressChar)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save into data[dataPointer]</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, keypressChar)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Stelem_I4)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print char at data[dataPointer] to stdout</span></span><br><span class="line"><span class="keyword">let</span> emitPeriod (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) =</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldelem_I4)</span><br><span class="line">    ilGenerator.EmitCall(OpCodes.Call,typeof&lt;Console&gt;.GetMethod(<span class="string">"Write"</span>, [| typeof&lt;char&gt; |]), <span class="keyword">null</span>); </span><br></pre></td></tr></table></figure><p>Now that all the <em>ActionOps</em> are implemented, I make a generic <em>emitOp</em> function.  There isn’t anything particularly exciting here.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Generate IL for an operator</span></span><br><span class="line"><span class="keyword">let</span> emitOp (ilGenerator:ILGenerator) (op:ActionOps) (data:MemArray) (dataPointer:DpPointer) =</span><br><span class="line">    <span class="keyword">match</span> op <span class="keyword">with</span> </span><br><span class="line">    | Gt    -&gt; emitGt ilGenerator dataPointer</span><br><span class="line">    | Lt    -&gt; emitLt ilGenerator dataPointer</span><br><span class="line">    | Plus  -&gt; emitPlus ilGenerator data dataPointer</span><br><span class="line">    | Minus -&gt; emitMinus ilGenerator data dataPointer</span><br><span class="line">    | Read  -&gt; emitComma ilGenerator data dataPointer</span><br><span class="line">    | Write -&gt; emitPeriod ilGenerator data dataPointer</span><br></pre></td></tr></table></figure><p>Time to implement loop blocks, program, and ast processor.  These are mutually recursive functions.  For those new to F#, this is accomplished by <code>let rec foo = &lt;foo code&gt; and bar &lt;bar code&gt;</code> syntax.  It is a necessary construct when foo needs to call bar, and vice versa.</p><p>The loop is a list of operators, with an associated predicate to determine if the list should continue to execute.  To do this the loop leverages labels for jumping between sections of code (the predicate section and the end of loop).  This is done in a two step process.  One, call <code>DefineLabel()</code> to create the label, this allows it to be referenced.  Two, <code>MarkLabel</code> says where in the code the label belongs.  As you can imagine, I put the predicate label at the begining of the predicate, and the loop-end label after the loop’s block of code.  </p><p>Tackling the predicate logic; the looping works as follows, “Continue loop as long as data[dataPointer] != 0”.  To test this, I push the value from the array onto the stack, then a 0.  <code>Ceq</code> does the compare, pushing the result onto the stack and <code>Brtrue</code> branches out of the loop if the value equals 0.</p><p>Once the branching logic is complete, all that’s left is processing the list of ops.  This is a good segue to <em>emitOpList</em>.  Both a loop and program are a list of operators.  This is simply a matter of iterating over the list and feeding each one into <em>processAst</em>.</p><p>Even though <em>processAst</em> is the controlling function for the emitting of the AST -&gt; IL, it looks pretty tame to everything else so far.  But that’s because the hard stuff has already been done.  <em>processAst</em> provides a match that handles the 3 types of operators; and their respective functions take care of the rest of the work.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Generate IL for a loop</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">rec</span> emitLoop (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) (block:AllOps list) =</span><br><span class="line">      <span class="keyword">let</span> ilLoopPredicate = ilGenerator.DefineLabel()</span><br><span class="line">      <span class="keyword">let</span> ilLoopStart = ilGenerator.DefineLabel()</span><br><span class="line">      <span class="keyword">let</span> ilLoopEnd = ilGenerator.DefineLabel()</span><br><span class="line">      </span><br><span class="line">      <span class="comment">////////////</span></span><br><span class="line">      <span class="comment">// predicate</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// push data[dataPointer]</span></span><br><span class="line">      ilGenerator.MarkLabel(ilLoopPredicate)</span><br><span class="line">      ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">      ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">      ilGenerator.Emit(OpCodes.Ldelem_I4)</span><br><span class="line">      <span class="comment">// push 0</span></span><br><span class="line">      ilGenerator.Emit(OpCodes.Ldc_I4, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// if true (data[dataPointer]==0), exit loop</span></span><br><span class="line">      ilGenerator.Emit(OpCodes.Ceq)</span><br><span class="line">      ilGenerator.Emit(OpCodes.Brtrue, ilLoopEnd)</span><br><span class="line"></span><br><span class="line">      <span class="comment">/////////////</span></span><br><span class="line">      <span class="comment">// loop block</span></span><br><span class="line">      ilGenerator.MarkLabel(ilLoopStart)</span><br><span class="line">      emitOpList ilGenerator (MEM data) (DP dataPointer) block</span><br><span class="line"></span><br><span class="line">      <span class="comment">//////////////</span></span><br><span class="line">      <span class="comment">// End of loop</span></span><br><span class="line">      ilGenerator.Emit(OpCodes.Br, ilLoopPredicate)</span><br><span class="line">      ilGenerator.MarkLabel(ilLoopEnd)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Generate IL for list of Ops</span></span><br><span class="line">  <span class="keyword">and</span> emitOpList (ilGenerator:ILGenerator) (data:MemArray) (dataPointer:DpPointer) (ast:AllOps list) =</span><br><span class="line">      ast |&gt; List.iter (processAst ilGenerator data dataPointer)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Generate IL for ast</span></span><br><span class="line">  <span class="keyword">and</span> processAst (ilGenerator:ILGenerator) (data:MemArray) (dataPointer:DpPointer) (ast:AllOps) =</span><br><span class="line">      <span class="keyword">match</span> ast <span class="keyword">with</span></span><br><span class="line">      | Op op         -&gt; emitOp ilGenerator op data dataPointer</span><br><span class="line">      | Loop block    -&gt; emitLoop ilGenerator data dataPointer block</span><br><span class="line">      | Program block -&gt; emitOpList ilGenerator data dataPointer block</span><br><span class="line">| Comment       -&gt; () <span class="comment">// do nothing</span></span><br></pre></td></tr></table></figure><p>Taking a breather from all that new stuff, I head back into familiar territory.  This is the code from my second post in the series; emitting an IL program.  The only change of significance is that I now insert the BF logic.  This consists of creating the necessary variables and generating IL based on the AST.  First, the variables: <em>data</em>, <em>dataPointer</em>, and <em>programCounter</em>.  As mentioned above I don’t need <em>programCounter</em>, so it’s here for reference only.  I use my previously defined “create variable” functions for this.  I also wrap each variable in it’s respective type (MEM, DP, PC).  This ensures that as I use them, I don’t send the wrong variable to the wrong function.  Second, the IL generation with <em>processAst</em>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Remove non-alphanumeric, to avoid object naming issues</span></span><br><span class="line"><span class="keyword">let</span> cleanName name = </span><br><span class="line">    <span class="keyword">let</span> regEx = <span class="keyword">new</span> Regex(<span class="string">"[^A-Z0-9]"</span>, RegexOptions.IgnoreCase)</span><br><span class="line">    regEx.Replace(name, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create and save exe, emits IL inside application "shell"</span></span><br><span class="line"><span class="keyword">let</span> createProgram (appName:string) (ast:AllOps list) =</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> appName' = cleanName appName</span><br><span class="line">    <span class="keyword">let</span> exeName = sprintf <span class="string">"%s.exe"</span> appName</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> appDomain = AppDomain.CurrentDomain</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> assemblyName = <span class="keyword">new</span> AssemblyName()</span><br><span class="line">    assemblyName.Name &lt;- appName'</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> assembly = appDomain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Save)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> programModule = assembly.DefineDynamicModule(appName', exeName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> appClass = sprintf <span class="string">"%s.Program"</span> appName'</span><br><span class="line">    <span class="keyword">let</span> programType = programModule.DefineType(appClass, TypeAttributes.Public)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mainMethod = programType.DefineMethod(<span class="string">"Main"</span>, MethodAttributes.Static)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Define starting method for assembly</span></span><br><span class="line">    assembly.SetEntryPoint(mainMethod)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mainIl = mainMethod.GetILGenerator()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Contents of function: Main</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// IL Variable initialization</span></span><br><span class="line">    <span class="keyword">let</span> data = MEM(createLocalArray mainIl typeof&lt;int[]&gt; memorySize)</span><br><span class="line">    <span class="keyword">let</span> dataPointer = DP(createLocal mainIl typeof&lt;int&gt;)</span><br><span class="line">    <span class="comment">//let programCounter = PC(createLocal mainIl typeof&lt;int&gt;)</span></span><br><span class="line"></span><br><span class="line">    processAst mainIl data dataPointer (Program ast)</span><br><span class="line"></span><br><span class="line">    mainIl.Emit(OpCodes.Ret)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Creates the Foo.Program class </span></span><br><span class="line">    programType.CreateType() |&gt; ignore</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save exe</span></span><br><span class="line">    assembly.Save(exeName)</span><br></pre></td></tr></table></figure><p>Tying the parser and emitter is done in the compile function.  FParsec provides a Success/Failure when parsing a string.  In this case, if success I emit a compiled program, otherwise I display the parsing error.  I also filter out the comments prior to sending it to emitter.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Compiler = </span><br><span class="line">    <span class="keyword">let</span> compile appName code = </span><br><span class="line">        <span class="keyword">let</span> ast = Parser.buildAst code</span><br><span class="line">        <span class="keyword">match</span> ast <span class="keyword">with</span></span><br><span class="line">        | Success(x, _, _) -&gt; Emitter.createProgram appName (x |&gt; List.filter (<span class="keyword">fun</span> x' -&gt; x' &lt;&gt; Comment))</span><br><span class="line">        | Failure(e, _, _) -&gt; printfn <span class="string">"Error: %A"</span> e</span><br></pre></td></tr></table></figure><p>Here is a compilation of a Hello World program.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> programName = <span class="string">"HelloWorld"</span></span><br><span class="line"><span class="keyword">let</span> code = <span class="string">"++++++++++++[&gt;++++++&gt;++++++++&gt;+++&lt;&lt;&lt;-]&gt;.&gt;+++++.+++++++..+++.&gt;----.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+."</span> </span><br><span class="line"></span><br><span class="line">Compiler.compile programName code</span><br></pre></td></tr></table></figure><p>Quite exciting, it worked!</p><p><img src="/images/bf1/helloworld_execute.png" alt="Hello World"></p><p>Taking it a bit further, I can compile bf files from the commandline.  To support this I remove the <em>programName</em> and <em>code</em> variables, and replace them with the below block.  This will compile all *.bf files provided as arguments.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Environment.GetCommandLineArgs()   </span><br><span class="line">|&gt; Array.filter (<span class="keyword">fun</span> (x:string) -&gt; x.EndsWith(<span class="string">".bf"</span>))</span><br><span class="line">|&gt; Array.iter (<span class="keyword">fun</span> x -&gt;</span><br><span class="line">     printfn <span class="string">"compiling %s ..."</span> x</span><br><span class="line">     Compiler.compile x (File.ReadAllText x))</span><br></pre></td></tr></table></figure><p>The primary goal is complete.  I can now compile BF to run in the CLR.  There are a couple directions I could follow at this point.  Next time, going deeper down the rabbit hole: optimization.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the third installment in creating a brainfuck (BF) compiler using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://www.quanttec.com/fparsec/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FParsec&lt;/a&gt;.  Previous posts discussed the parsing and the IL generation.  Now it it time to pull it all together into something useful.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Compiler" scheme="http://codesuji.com/tags/Compiler/"/>
    
      <category term="FParsec" scheme="http://codesuji.com/tags/FParsec/"/>
    
      <category term="Parsing" scheme="http://codesuji.com/tags/Parsing/"/>
    
      <category term="MSIL" scheme="http://codesuji.com/tags/MSIL/"/>
    
  </entry>
  
  <entry>
    <title>BF Compiler Part 2 - MSIL</title>
    <link href="http://codesuji.com/2017/02/26/bf-compiler-part2-msil/"/>
    <id>http://codesuji.com/2017/02/26/bf-compiler-part2-msil/</id>
    <published>2017-02-27T03:14:09.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Continuing with the BF compiler, it’s time to look at how to create code targeting the CLR.  As before, I will be using <a href="http://www.fsharp.org" target="_blank" rel="noopener">F#</a> to generate the target MSIL.</p><a id="more"></a><p><strong>Series:</strong><br><a href="/2017/02/19/bf-compiler-part1-parsing">Part 1 (Parsing)</a><br>Part 2 (IL Generation)<br><a href="/2017/03/04/bf-compiler-part3-compiler">Part 3 (Compiler)</a><br><a href="/2017/03/11/bf-compiler-part4-optimization">Part 4 (Optimization)</a></p><p>There are a couple aspects regarding IL generation.  First, the how. <code>System.Reflection</code> and <code>System.Reflection.Emit</code> are the namespaces that contain the functionality of interest.  Second, the what. A basic application shell is a good place to start.  Once that’s in place, I’ll discuss the third part, the what inside the what.  F# can be used to to emit IL into the sample application for expanded functionality.</p><p>The ultimate goal is it compile BF into MSIL.  Before doing the fun stuff, it’s a good idea to step back and see what is involved in creating a basic application.  Without any of the fancy things, what is the bare minimum I need to get something that runs.  To do that my short-term target is to get a basic application that executes.  Once this is in place I can start looking at custom IL code.  The base application that I generate has the general structure:</p><ul><li><p>Application Domain</p><ul><li><p>Assembly</p><ul><li><p>Module</p><ul><li><p>Class (Program)</p><ul><li><p>Method (Main)</p><ul><li>Code for main</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>The application generation code is short, so I’m just going to put it all together below.  For now I bootstrap AppDomain creation by just using the current domain.  Then I create the assembly and module.  When I define the main class <em>Program</em> I want it to be in the <em>Foo</em> namespace.  This is done by using the fully qualified name in the <code>DefineType</code> call.  For the sample, I will have just one method, <em>Main</em>.  If I wanted to create multiple methods in the <em>Program</em> class, I could make additional <code>MethodBuilder</code> instances attached to <em>programType</em>.  Now that <em>Main</em> is created, I make that the entry point for the assembly.  <code>GetILGenerator</code> is a glimpse of things to come.  This is how the IL creation happens.  Since the generator is attached to the MethodBuilder for <em>Main</em>, the code is injected into that method definition.  For the example it is a simple <code>WriteLine</code> and return.  Now that the <em>Program</em> class is completed, I create it.  All that is left is to write the code to the file. Well, that was easy.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">System.IO.Directory.SetCurrentDirectory(__SOURCE_DIRECTORY__)</span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Reflection</span><br><span class="line"><span class="keyword">open</span> System.Reflection.Emit</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> programName = <span class="string">"Foo"</span></span><br><span class="line"><span class="keyword">let</span> exeName = sprintf <span class="string">"%s.exe"</span> programName</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> appDomain = AppDomain.CurrentDomain</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> assemblyName = <span class="keyword">new</span> AssemblyName()</span><br><span class="line">assemblyName.Name &lt;- <span class="string">"Foo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> assembly = appDomain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Save)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> programModule = assembly.DefineDynamicModule(<span class="string">"Foo"</span>, exeName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> programType = programModule.DefineType(<span class="string">"Foo.Program"</span>, TypeAttributes.Public)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mainMethod = programType.DefineMethod(<span class="string">"Main"</span>, MethodAttributes.Static)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define starting method for assembly</span></span><br><span class="line">assembly.SetEntryPoint(mainMethod)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mainIl = mainMethod.GetILGenerator()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Contents of function: Main</span></span><br><span class="line">mainIl.EmitWriteLine(<span class="string">"A small program"</span>)</span><br><span class="line">mainIl.Emit(OpCodes.Ret)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates the Foo.Program class </span></span><br><span class="line">programType.CreateType()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save exe</span></span><br><span class="line">assembly.Save(exeName)</span><br></pre></td></tr></table></figure><p>And here is the program running.  It’s not much to look at, but it is good for a starting framework.</p><p><img src="/images/bf1/foo_execute.png" alt="Running the executable"></p><p>Now that I’ve seen it run, it’s time to take a look into what was generated.  For this I use <a href="https://www.jetbrains.com/" target="_blank" rel="noopener">JetBrains’</a> <strong>dotPeek</strong> decompiler.  Below is a screen shot of the decompilation. The application is about as minimal as it gets, but the code is as expected.  This is also pretty close to a bare C# console application.  It has a <em>Program</em> class in the <em>Foo</em> namespace.  There is a <em>Main</em> function with the WriteLine.  Looks like things have worked as planned.</p><p><img src="/images/bf1/decompile_foo.png" alt="Decompiled Foo.exe"></p><p>Time to take things up a small notch.  I now want to add 5 + 37 and display the results.  Before I get started I’m going to include a reference to the IL <a href="https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes%28v=vs.110%29.aspx" target="_blank" rel="noopener">OpCodes</a>.  I also want to mention, this isn’t meant to be a deep dive into the CLR internals; it’s just a basic starter.  But you should fine if you know that the you push things onto a stack to use them, and they get popped off as they are used.  You also have access to local variables for more “persistent” storage.  Remember those old Assembler classes from school?  It’s kind of like that.</p><p>All of the following code will be inserted between the existing lines <code>mainIl.EmitWriteLine(&quot;A small program&quot;)</code> and <code>mainIl.Emit(OpCodes.Ret)</code> of the above code.  The goal is to insert additional functionality to the <em>Main</em> method call.</p><p>First, push the numbers 5 and 37 onto the stack.  Second, add the top two values of the stack (5 &amp; 37) and push the result onto the stack (42).</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mainIl.Emit(OpCodes.Ldc_I4, <span class="number">5</span>)</span><br><span class="line">mainIl.Emit(OpCodes.Ldc_I4, <span class="number">37</span>)</span><br><span class="line">mainIl.Emit(OpCodes.Add)</span><br></pre></td></tr></table></figure><p>Important to remember, when something uses a value off the stack, it’s popped and gone forever.  I want to do two things with my resulting 42, so I’ll emit a <code>Dup</code> call.  Now I have 2 42s at the top of my stack.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainIl.Emit(OpCodes.Dup)</span><br></pre></td></tr></table></figure><p>Now for the result, I’m going to pop the first 42 off the stack and print it’s integer representation.  Then I’ll pop the second 42 off the stack and print it’s ASCII char representation (decimal 42 = *).  When printing, the distinction is made by parameter type of the call.  To parse the emit in more detail, what is happening?  <code>EmitCall(OpCodes.Call</code>: going to make a function call.  <code>typeof&lt;Console&gt;.GetMethod(&quot;Write&quot;, [| typeof&lt;int&gt; |])</code>: The function to call is <code>Console.Write</code>, which has 1 input parameter (an int in this case).  <code>null</code>: the call has no output parameters.  This matches with my understanding of the call when used in C#.  Since the call takes 1 parameter, it will pop 1 value off the stack to meet it’s needs.  This is the general pattern for function calling.  You’ll see more of this in future posts.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Print the numeric value on the top of the stack (42)</span></span><br><span class="line">mainIl.EmitCall(OpCodes.Call, typeof&lt;Console&gt;.GetMethod(<span class="string">"Write"</span>, [| typeof&lt;int&gt; |]), <span class="keyword">null</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the char representation of the value on the top of the stack ('*')</span></span><br><span class="line">mainIl.EmitCall(OpCodes.Call, typeof&lt;Console&gt;.GetMethod(<span class="string">"Write"</span>, [| typeof&lt;char&gt; |]), <span class="keyword">null</span>); </span><br></pre></td></tr></table></figure><p>Take two, now with more awesomeness.</p><p><img src="/images/bf1/foo2_execute.png" alt="Running the executable"></p><p>Taking a look at this decompiled version, the results are a bit more interesting.  The middle panel shows the C# representation, 5 + 37 into a variable, then two <code>Console.Write</code>s, one with a char cast.  The right panel shows the IL, which looks remarkably like what I emitted.  Again, it looks like things are working as planned.</p><p><img src="/images/bf1/decompile_foo2.png" alt="Decompiled Foo.exe"></p><p>This concludes part 2 of the series.  I can now parse BF source code, generate IL, and create an exe.  Next time I start putting these pieces together into something more interesting.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Continuing with the BF compiler, it’s time to look at how to create code targeting the CLR.  As before, I will be using &lt;a href=&quot;http://www.fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; to generate the target MSIL.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Compiler" scheme="http://codesuji.com/tags/Compiler/"/>
    
      <category term="MSIL" scheme="http://codesuji.com/tags/MSIL/"/>
    
  </entry>
  
  <entry>
    <title>BF Compiler Part 1 - Parsing</title>
    <link href="http://codesuji.com/2017/02/19/bf-compiler-part1-parsing/"/>
    <id>http://codesuji.com/2017/02/19/bf-compiler-part1-parsing/</id>
    <published>2017-02-20T02:16:14.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>So I thought to myself, what does the world need? Obviously another <a href="https://en.wikipedia.org/wiki/Brainfuck" target="_blank" rel="noopener">brainfuck</a> (BF) compiler.  In this series I will use <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="http://www.quanttec.com/fparsec/" target="_blank" rel="noopener">FParsec</a> to compile BF source code into MSIL to run in Microsoft’s CLR.  Honestly, this isn’t a particularly ground-breaking task, but it serves as a fun opportunity to showcase a popular parsing library.  Beyond that, it shows how easy it is for F# to leverage various parts of the .NET ecosystem.  </p><a id="more"></a><p>Since there are a couple subtopics, this process is best addressed as a series.  This first post will address FParsec and parsing the BF source code.  The goal is intentionally restricted, so I will have placeholders with no functionality for the Ops as they are parsed.  In later posts these will be expanded upon.  The second post addresses IL generation and program generation.  The third post will put the pieces together into something interesting.  In the end, I’ll have a BF compiler.</p><p><strong>Series:</strong><br>Part 1 (Parsing)<br><a href="/2017/02/26/bf-compiler-part2-msil">Part 2 (IL Generation)</a><br><a href="/2017/03/04/bf-compiler-part3-compiler">Part 3 (Compiler)</a><br><a href="/2017/03/11/bf-compiler-part4-optimization">Part 4 (Optimization)</a></p><p>Before I get into the code, here is a quick synopsis of the BF functionality that needs to be supported.</p><p><strong>Constructs:</strong><br>Memory (data[30000]) - Array of ints<br>Data Pointer (data_pointer) - Current pointer position of data array<br>Instruction Pointer (instruction_pointer) - Position of current program operation</p><p><strong>Operators:</strong><br><strong>&gt;</strong> &nbsp;&nbsp;Increment data_pointer<br><strong>&lt;</strong> &nbsp;&nbsp;Decrement data_pointer<br><strong>&#43;</strong> &nbsp;&nbsp;Increment value at data[data_pointer]<br><strong>&#45;</strong> &nbsp;&nbsp;Decrement value at data[data_pointer]<br><strong>&#91;</strong> &nbsp;&nbsp;Loop Start - Start of loop where predicate is: data[data_pointer] == 0<br><strong>&#93;</strong> &nbsp;&nbsp;Loop End - End of loop<br><strong>,</strong> &nbsp;&nbsp;Read char from stdin into value at data[data_pointer]<br><strong>.</strong> &nbsp;&nbsp;Print value at data[data_pointer] to stdout (as char)</p><p><strong>Implementation Notes:</strong><br>For those familar with BF, there are variants that auto-grow memory or wrap overflows/underflows of the pointers.  To keep things simple, I will not implement those for this series.</p><p>Example program that prints: 42<br><code>+++++[&gt;++++++++++&lt;-]&gt;++.--.</code></p><p>With that brief introduction, I can begin to address how I will parse a BF program.  The language syntax is so simple, I could easily iterate and use F#’s <code>match</code>.  Instead, I’ll use FParsec, a powerful parsing library modeled after the <a href="https://www.haskell.org/" target="_blank" rel="noopener">Haskell</a> <a href="https://wiki.haskell.org/Parsec" target="_blank" rel="noopener">Parsec</a> library.  What I have to parse here won’t do its power justice, but it works as an easily digestible introduction. Now to the code.</p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget FParsec </span><br></pre></td></tr></table></figure><p>Time to load modules.  Note the need for <em>FParsecCS.dll</em> and <em>FParsec.dll</em>, order of inclusion matters.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.IO.Directory.SetCurrentDirectory(__SOURCE_DIRECTORY__)</span><br><span class="line">#I <span class="string">"../packages/FParsec/lib/net40-client/"</span></span><br><span class="line">#r <span class="string">"../packages/FParsec/lib/net40-client/FParsecCS.dll"</span></span><br><span class="line">#r <span class="string">"../packages/FParsec/lib/net40-client/FParsec.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FParsec</span><br></pre></td></tr></table></figure><p>I leverage F#’s Discriminated Unions to represent the operators.  In BF there are basically two types of operators.  Those that do an immediate action (like increment, decrement, read/print char), and the while loop (a list of instructions to loop over).  F# allows this description to be modeled easily. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">actionOps</span> </span>= Gt | Lt | Plus | Minus | Read | Write</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">allOps</span> </span>= </span><br><span class="line">    | Op <span class="keyword">of</span> actionOps </span><br><span class="line">    | Loop <span class="keyword">of</span> allOps list</span><br></pre></td></tr></table></figure><p>Next are the my parser specific types.  UserState can be used to keep state as the parser progresses, and <code>Parser&lt;&#39;t&gt;</code> is a returned value as well as current state.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">UserState</span> </span>= unit</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Parser</span>&lt;<span class="title">'t</span>&gt; </span>= Parser&lt;<span class="symbol">'t</span>, UserState&gt;</span><br></pre></td></tr></table></figure><p>Before I go too much deeper, how does a parser work?  Below is a quick example.  Parsers can get pretty advanced, and my introduction here won’t cover nearly all of the details.  I highly recommend checking out the <a href="http://www.quanttec.com/fparsec/tutorial.html" target="_blank" rel="noopener">FParsec Tutorial</a> to learn more (although it won’t be necessary for this post).  <em>pGreater</em> looks for the char ‘&gt;’, when found it executes the attached closure.  For illustrative purposes I added a print statement, but it ultimately returns the appropriate <code>Op</code> value.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pGreater:Parser&lt;_&gt; = </span><br><span class="line">    pchar '&gt;' |&gt;&gt; <span class="keyword">fun</span> x -&gt; </span><br><span class="line">        printfn <span class="string">"found: %A"</span> x</span><br><span class="line">        Op Gt</span><br></pre></td></tr></table></figure><p>Here is a sample execution using <code>run</code>.  It finds the ‘&gt;’, prints it, and returns a successful parsing object.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; run pGreater <span class="string">"&gt;&gt;--"</span></span><br><span class="line">found: '&gt;'</span><br><span class="line"><span class="keyword">val</span> it : ParserResult&lt;allOps,unit&gt; = Success: Op Gt</span><br></pre></td></tr></table></figure><p>Taking this a bit further, it only matched one of the ‘&gt;’.  To match multiple instances, I apply the <code>many</code> combinator.  Note how this time it matches 2 ‘&gt;’, and returns a list of its matches.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; run (many pGreater) <span class="string">"&gt;&gt;--"</span></span><br><span class="line">found: '&gt;'</span><br><span class="line">found: '&gt;'</span><br><span class="line"><span class="keyword">val</span> it : ParserResult&lt;allOps list,unit&gt; = Success: [Op Gt; Op Gt]</span><br></pre></td></tr></table></figure><p>What happens if there isn’t a match? Notice how this isn’t currently a wildcard search, it starts parsing at the beginning of the string and fails if it’s a non-match.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; run pGreater <span class="string">"&lt;&gt;--"</span></span><br><span class="line"><span class="keyword">val</span> it : ParserResult&lt;allOps,unit&gt; =</span><br><span class="line">  Failure:</span><br><span class="line">Error <span class="keyword">in</span> Ln: <span class="number">1</span> Col: <span class="number">1</span></span><br><span class="line">&lt;&gt;--</span><br><span class="line">^</span><br><span class="line">Expecting: '&gt;'</span><br></pre></td></tr></table></figure><p>Now I introduce a Parser for the ‘&lt;’.  I also want to to match multiple instances using <code>many</code> of either ‘&gt;’ or ‘&lt;’; this is done with the <code>&lt;|&gt;</code> operator.  You can see the results of running this slightly more advanced search.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pLesser:Parser&lt;_&gt; = </span><br><span class="line">    pchar '&lt;' |&gt;&gt; <span class="keyword">fun</span> x -&gt; </span><br><span class="line">        printfn <span class="string">"found: %A"</span> x</span><br><span class="line">        Op Lt</span><br><span class="line"></span><br><span class="line">&gt; run (many (pLesser &lt;|&gt; pGreater)) <span class="string">"&gt;&lt;&lt;&lt;--"</span></span><br><span class="line">found: '&gt;'</span><br><span class="line">found: '&lt;'</span><br><span class="line">found: '&lt;'</span><br><span class="line">found: '&lt;'</span><br><span class="line"><span class="keyword">val</span> it : ParserResult&lt;allOps list,unit&gt; =</span><br><span class="line">  Success: [Op Gt; Op Lt; Op Lt; Op Lt]</span><br></pre></td></tr></table></figure><p>Going a bit further down the rabbithole.  Temporarily I make a Letter op, just so the sample parse looks more logical.  I make a letter parser that accepts an ‘a’ or ‘b’, this part isn’t new.  Then I do a search for multiple a’s and b’s surrounded by angle brackets.  The combinators <code>&gt;&gt;.</code> and <code>.&gt;&gt;</code> link a sequence of parsers and indicate which side of the parse to capture (hint, capture on the <strong>.</strong> side of the operator).  In the below output you can see how each character is matched, but only the letters are returned in the parsing result, the brackets are discarded.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Letter is temporary for demonstration</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">actionOps</span> </span>= Gt | Lt | Plus | Minus | Read | Write | Letter</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pLetter:Parser&lt;_&gt; = </span><br><span class="line">    pchar <span class="symbol">'a</span>' &lt;|&gt; pchar <span class="symbol">'b</span>' |&gt;&gt; <span class="keyword">fun</span> x -&gt; </span><br><span class="line">        printfn <span class="string">"found: %A"</span> x</span><br><span class="line">        Op Letter</span><br><span class="line"></span><br><span class="line">&gt; run (pLesser &gt;&gt;. (many pLetter) .&gt;&gt; pGreater) <span class="string">"&lt;aabb&gt;"</span></span><br><span class="line">found: '&lt;'</span><br><span class="line">found: <span class="symbol">'a</span>'</span><br><span class="line">found: <span class="symbol">'a</span>'</span><br><span class="line">found: <span class="symbol">'b</span>'</span><br><span class="line">found: <span class="symbol">'b</span>'</span><br><span class="line">found: '&gt;'</span><br><span class="line"><span class="keyword">val</span> it : ParserResult&lt;allOps list,unit&gt; =</span><br><span class="line">  Success: [Op Letter; Op Letter; Op Letter; Op Letter]</span><br></pre></td></tr></table></figure><p>I could go on for ages, but hopefully this is a basic enough start to how parsers work to get us through the post.  Now to the BF parsers.  Some of these will look familar.  There is a character parser for each valid BF character/operator.  For my purposes, its enough to convert the char to a specific type.  This type information will be used later for generating the desired IL. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pGreater:Parser&lt;_&gt; = </span><br><span class="line">    pchar '&gt;' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Gt</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pLesser:Parser&lt;_&gt; = </span><br><span class="line">    pchar '&lt;' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Lt</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pPlus:Parser&lt;_&gt; = </span><br><span class="line">    pchar '+' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Plus</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pMinus:Parser&lt;_&gt; = </span><br><span class="line">    pchar '-' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Minus</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pPeriod:Parser&lt;_&gt; = </span><br><span class="line">    pchar '.' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Write</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> pComma:Parser&lt;_&gt; = </span><br><span class="line">    pchar ',' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Op Read</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pLBracket:Parser&lt;_&gt; = </span><br><span class="line">    pchar '[' |&gt;&gt; ignore </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pRBracket:Parser&lt;_&gt; = </span><br><span class="line">    pchar ']' |&gt;&gt; ignore</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pCommands = pGreater &lt;|&gt; pLesser &lt;|&gt; pPlus &lt;|&gt; pMinus &lt;|&gt; pPeriod &lt;|&gt; pComma </span><br></pre></td></tr></table></figure><p>The action operators are pretty straight forward.  Parsing loops is a bit more complicated.  I need to not only parse blocks of operators, but allow embedded loops as well.  This reference to something prior to being created causes a complication.  What I effectively need is the ability to call loop recursively.  Normal F# style would use <code>let rec</code>, but that isn’t an option here.  So I leverage FParsec’s <code>createParserForwardedToRef()</code>.  This allows me to use a parser <em>pLoop</em> as I normally would.  I then have to inject the <em>pLoop</em> logic into the <em>pLoopImpl</em> reference.  Implementing the parsing of a loop is basically find matching ‘[‘ and ‘]’, and capture any commands or embedded loops within them, recursively parsing the internal loops as necessary.  Then return the result as a Loop.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (pLoop:Parser&lt;allOps&gt;), (pLoopImpl:Parser&lt;allOps&gt; ref) = createParserForwardedToRef()</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> pLoopImpl := pLBracket &gt;&gt;. (many (pCommands &lt;|&gt; pLoop)) .&gt;&gt; pRBracket |&gt;&gt; <span class="keyword">fun</span> x -&gt; </span><br><span class="line">    Loop x</span><br></pre></td></tr></table></figure><p>There is one more parser to implement, the overarching program parser.  As you can see, a program is just many instances of operators or loops.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pProgram = (many (pCommands &lt;|&gt; pLoop))</span><br></pre></td></tr></table></figure><p>Now that the parsing component is complete, I need a consumer of the resulting AST generated.  Since BF is a list of operators, I iterate through the AST and handle each op as I approach it.  Note, this is one of the placeholder functions I mentioned earlier.  Here my “handle op” is just an sprintf the op (prefixing operators with ‘O:’ and wrapping loops in ‘[[…]]’).  When the real compiler is built, this function will be replaced with something that emits IL.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> ProcessAst (ast:allOps) =</span><br><span class="line">    <span class="keyword">match</span> ast <span class="keyword">with</span></span><br><span class="line">    | Op op     -&gt; sprintf <span class="string">"O:%A"</span> op</span><br><span class="line">    | Loop loop -&gt; </span><br><span class="line">        loop </span><br><span class="line">        |&gt; List.map ProcessAst</span><br><span class="line">        |&gt; List.fold (<span class="keyword">fun</span> a b -&gt; a + <span class="string">" "</span> + b) <span class="string">""</span></span><br><span class="line">        |&gt; sprintf <span class="string">"[[%s]]"</span></span><br></pre></td></tr></table></figure><p>The <em>parseCode</em> function pulls it all together.  Given program source code, the function parses it and then processes the resulting AST.  I also use a success/failure match in case the parsing fails.  Again, this function will be expanded once I start emiting IL.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> parseCode code = </span><br><span class="line">    <span class="keyword">let</span> ast = run pProgram code</span><br><span class="line">    <span class="keyword">match</span> ast <span class="keyword">with</span></span><br><span class="line">    | Success(x, _, _) -&gt; </span><br><span class="line">        printfn <span class="string">"%A"</span> x |&gt; ignore</span><br><span class="line">        ProcessAst (Loop x)</span><br><span class="line">    | Failure(e, _, _) -&gt; </span><br><span class="line">        sprintf <span class="string">"Error: %A"</span> e</span><br></pre></td></tr></table></figure><p>All of the pieces are in place, so it is time to look at processing program code.  First, a look into the intermediate parsing step.  <code>run pProgram code</code> takes code and returns the AST.  Below it shows the operator parsing and the loops embedded in the list of resulting operators.  Second, the psuedo-compile is done with <em>parseCode</em>.  Again the operator parsing is shown as well, and the result is a a string of ops.     </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code = <span class="string">"&gt;[++&gt;+[-]+&lt;]&gt;."</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example intermediate step </span></span><br><span class="line">&gt; run pProgram code</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it : ParserResult&lt;allOps list,unit&gt; =</span><br><span class="line">  Success: [Op Gt; Loop [Op Plus; Op Plus; Op Gt; Op Plus; Loop [Op Minus]; Op Plus; Op Lt];</span><br><span class="line"> Op Gt; Op Write]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example processed program</span></span><br><span class="line">&gt; parseCode code</span><br><span class="line"></span><br><span class="line">[Op Gt; Loop [Op Plus; Op Plus; Op Gt; Op Plus; Loop [Op Minus]; Op Plus; Op Lt];</span><br><span class="line"> Op Gt; Op Write]</span><br><span class="line"><span class="keyword">val</span> it : string =</span><br><span class="line">  <span class="string">"[[ O:Gt [[ O:Plus O:Plus O:Gt O:Plus [[ O:Minus]] O:Plus O:Lt]] O:Gt O:Write]]"</span></span><br></pre></td></tr></table></figure><p>I can now parse BF source code using Fparsec and have it stored in convenient structure for further processing.  With phase one of this series complete, this is a good place to pause.  Next will be looking at what it takes to generate IL in F#.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;So I thought to myself, what does the world need? Obviously another &lt;a href=&quot;https://en.wikipedia.org/wiki/Brainfuck&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;brainfuck&lt;/a&gt; (BF) compiler.  In this series I will use &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://www.quanttec.com/fparsec/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FParsec&lt;/a&gt; to compile BF source code into MSIL to run in Microsoft’s CLR.  Honestly, this isn’t a particularly ground-breaking task, but it serves as a fun opportunity to showcase a popular parsing library.  Beyond that, it shows how easy it is for F# to leverage various parts of the .NET ecosystem.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Compiler" scheme="http://codesuji.com/tags/Compiler/"/>
    
      <category term="FParsec" scheme="http://codesuji.com/tags/FParsec/"/>
    
      <category term="Parsing" scheme="http://codesuji.com/tags/Parsing/"/>
    
  </entry>
  
  <entry>
    <title>Simple Analysis with F#</title>
    <link href="http://codesuji.com/2017/01/26/Simple-Analysis-with-F/"/>
    <id>http://codesuji.com/2017/01/26/Simple-Analysis-with-F/</id>
    <published>2017-01-27T03:10:36.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>This post is a follow up to my previous look into <a href="/2017/01/20/F-and-Text-Analytics/">Text Analytics</a>.  It will provide additional examples of how data can be pulled and processed in <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>.  I’ll also use this as an opportunity to draw more charts.  For all this to happen, I’ll be doing light analysis of the full text of Mary Shelley’s “Frankenstein”.</p><a id="more"></a><p>Like last time, if you want to follow along, you’ll need to first get a free account from <a href="https://www.microsoft.com/cognitive-services/en-us/" target="_blank" rel="noopener">Cognitive Services</a>.  Then request the api access you want, for this post it is “Text Analytics”.  The apikey they provide can be used in the upcoming code if you want to make your own calls.  Microsoft offers a nice amount of free calls, providing plenty of room to play in the environment.  </p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget FSharp.Charting</span><br><span class="line">nuget FSharp.Core</span><br><span class="line">nuget FSharp.Data</span><br><span class="line">nuget Deedle</span><br><span class="line">nuget Newtonsoft.Json</span><br></pre></td></tr></table></figure><p>Again, here is the mostly boilerplate code.  It’s where I load libraries, set the Cognitive Services apikey, and the url for the Frankenstein text on the Gutenberg site.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/FSharp.Charting/lib/net40/FSharp.Charting.dll"</span></span><br><span class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></span><br><span class="line">#r <span class="string">"../packages/NewtonSoft.Json/lib/net40/Newtonsoft.Json.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Deedle/lib/net40/Deedle.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Text.RegularExpressions</span><br><span class="line"><span class="keyword">open</span> Deedle</span><br><span class="line"><span class="keyword">open</span> FSharp.Core</span><br><span class="line"><span class="keyword">open</span> FSharp.Charting</span><br><span class="line"><span class="keyword">open</span> FSharp.Data</span><br><span class="line"><span class="keyword">open</span> Newtonsoft.Json</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> apiKey = <span class="string">"&lt;your api key here&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Frankenstein</span></span><br><span class="line"><span class="keyword">let</span> bookUrl = <span class="string">"http://www.gutenberg.org/cache/epub/84/pg84.txt"</span></span><br></pre></td></tr></table></figure><p>The below code is mostly a copy of the Sentiment module and supporting functions from my <a href="/2017/01/20/F-and-Text-Analytics/">previous post</a>, modified to handle multiple documents.  As promised, the modification to handle multiple documents in <code>TextToRequestJson</code> was an easy adjustment.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Sentiment =</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">"https://westus.api.cognitive.microsoft.com/text/analytics/v2.0/sentiment"</span></span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Document</span> </span>= &#123; language: string; id: string; text: string &#125;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Request</span> </span>= &#123; documents: Document list &#125;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Score</span> </span>= &#123; score: float; id: string &#125;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">ResponseError</span> </span>= &#123; id: string; message: string &#125;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Response</span> </span>= &#123; documents: Score list; errors: ResponseError list &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> Sentiment</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert text documents into request body in json format</span></span><br><span class="line"><span class="keyword">let</span> TextToRequestJson texts =</span><br><span class="line">    <span class="keyword">let</span> documents = </span><br><span class="line">        texts</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> t -&gt;</span><br><span class="line">            &#123; language = <span class="string">"en"</span>;</span><br><span class="line">              id = string (fst t);</span><br><span class="line">              text = snd t&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> request = &#123; Request.documents = (documents |&gt; Array.toList) &#125;</span><br><span class="line">    JsonConvert.SerializeObject(request)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perform http call</span></span><br><span class="line"><span class="keyword">let</span> AnalyticsHttp url apiKey body =</span><br><span class="line">    Http.RequestString(</span><br><span class="line">        url,</span><br><span class="line">        httpMethod = <span class="string">"POST"</span>,</span><br><span class="line">        headers = [</span><br><span class="line">            <span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>;</span><br><span class="line">            <span class="string">"Ocp-Apim-Subscription-Key"</span>, apiKey],</span><br><span class="line">        body = TextRequest body)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wrapper so I can call it F#-style</span></span><br><span class="line"><span class="keyword">let</span> JsonDeserialize&lt;<span class="symbol">'T</span>&gt; s = JsonConvert.DeserializeObject&lt;<span class="symbol">'T</span>&gt;(s)</span><br></pre></td></tr></table></figure><p>Here is where some special data knowledge is required.  As is typically the case, it is important to know what the data looks like.  Examining the text at the url, its nicely formatted for easy reading. The result is there are line feeds mid paragraph (I’ll need to remove those), and double spacing between paragraphs (I use these to do the paragraph splitting).  Additionally, the webpage has header and footer information that isn’t the text of the book.  The actual text is designated by the <code>*** START OF...</code> and <code>*** END OF...</code> lines.  I use them to extract the section of book text from the page.  This naive method may not be perfect, but I think it’s pretty good.  It is certainly good enough for my current purpose.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Take a string and convert into list of paragraphs</span></span><br><span class="line"><span class="comment">// Assumption is paragraphs are split by 2 linefeeds</span></span><br><span class="line"><span class="comment">// Then remove mid-paragraph line breaks</span></span><br><span class="line"><span class="keyword">let</span> MakeParagraphs bookText =</span><br><span class="line">    <span class="keyword">let</span> paragraphBreak = <span class="keyword">new</span> Regex(<span class="string">@"\r\n\s*\r\n"</span>)</span><br><span class="line">    paragraphBreak.Split(bookText)</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Replace(<span class="string">"\r\n"</span>, <span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Finds a text in an array and returns its index</span></span><br><span class="line"><span class="keyword">let</span> getMarkerIndex (m:string) (p:string array) =</span><br><span class="line">    [<span class="number">0.</span>.(Array.length p) - <span class="number">1</span>]</span><br><span class="line">    |&gt; List.filter (<span class="keyword">fun</span> i -&gt; p.[i].StartsWith(m))</span><br><span class="line">    |&gt; List.exactlyOne</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extracts only book text from full text</span></span><br><span class="line"><span class="keyword">let</span> ExtractBook a =</span><br><span class="line">    <span class="keyword">let</span> bookStart = getMarkerIndex <span class="string">"*** START OF THIS PROJECT GUTENBERG EBOOK"</span> a</span><br><span class="line">    <span class="keyword">let</span> bookEnd = getMarkerIndex <span class="string">"*** END OF THIS PROJECT GUTENBERG EBOOK"</span> a</span><br><span class="line">    Array.sub a (bookStart + <span class="number">1</span>) (bookEnd - bookStart)</span><br></pre></td></tr></table></figure><p>The below functions leverage the previously built utility functions to extract the raw text and transform it into paragraph form. Something kind of cool, its easy to miss, <code>Http.RequestString</code> grabs the plain text of url and drops it into a string. After dealing with so many verbose and heavy frameworks its a joy to use something so terse.  Once the text is downloaded and transformed, I perform sentiment and word count analysis of each paragraph.  I will confess, it’s temping to jam it all into a big pipeline of functions that do: <code>url -&gt; (sentiment, wordcount)[]</code>.  For current purposes, I prefer to have intermediate values more accessible.  Also, the process is clean, but at times like these I wish F# had <a href="https://www.haskell.org/" target="_blank" rel="noopener">Haskell’s</a> lazy infinite sequences as a built-in (see the <code>paragraph</code> variants below).  I know F# has it’s ways to do this; but they’re not as clean as Haskell.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Take list of id/text tuples and get sentiment by paragraph</span></span><br><span class="line"><span class="keyword">let</span> GetSentiment texts =</span><br><span class="line">    <span class="keyword">let</span> sentimentResponse = </span><br><span class="line">        texts</span><br><span class="line">        |&gt; TextToRequestJson</span><br><span class="line">        |&gt; (AnalyticsHttp Sentiment.url apiKey)</span><br><span class="line">        |&gt; JsonDeserialize&lt;Sentiment.Response&gt;</span><br><span class="line"></span><br><span class="line">    sentimentResponse.documents</span><br><span class="line">    |&gt; List.map (<span class="keyword">fun</span> x -&gt; (x.id, x.score))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Take a gutenberg url and return a book as an array of paragraphs</span></span><br><span class="line"><span class="keyword">let</span> GetBookParagraphs url =</span><br><span class="line">    url</span><br><span class="line">    |&gt; Http.RequestString</span><br><span class="line">    |&gt; MakeParagraphs</span><br><span class="line">    |&gt; ExtractBook</span><br><span class="line"></span><br><span class="line"><span class="comment">// Take paragraphs and add an id for future usage.</span></span><br><span class="line"><span class="keyword">let</span> paragraphs =</span><br><span class="line">    <span class="keyword">let</span> temp = GetBookParagraphs bookUrl</span><br><span class="line">    ([|<span class="number">1.</span>.Array.length temp|], temp)</span><br><span class="line">    ||&gt; Array.zip</span><br><span class="line"></span><br><span class="line"><span class="comment">// I'd rather write:</span></span><br><span class="line"><span class="keyword">let</span> paragraphs' = </span><br><span class="line">([|<span class="number">1.</span>.|], GetBookParagraphs bookUrl) </span><br><span class="line">||&gt; Array.zip</span><br><span class="line"></span><br><span class="line"><span class="comment">// If I wrote GetBookParagraphs to return a Seq, I could do this:</span></span><br><span class="line"><span class="keyword">let</span> paragraphs'' =</span><br><span class="line">    (Seq.initInfinite (<span class="keyword">fun</span> i -&gt; i), GetBookParagraphs bookUrl)</span><br><span class="line">    ||&gt; Seq.zip</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get sentiment for paragraphs</span></span><br><span class="line"><span class="keyword">let</span> sentiment = </span><br><span class="line">    paragraphs</span><br><span class="line">    |&gt; GetSentiment</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get wordcount for paragraphs</span></span><br><span class="line"><span class="keyword">let</span> wordCounts = </span><br><span class="line">    paragraphs</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> (id, p) -&gt; </span><br><span class="line">        (id, p.Split([| ' '|]).Length)) </span><br><span class="line">    |&gt; Array.toList</span><br></pre></td></tr></table></figure><p>Now that I have my sentiment and wordcount lists, it’s time to do some quick analysis.  Leveraging <a href="https://fslab.org/FSharp.Charting/" target="_blank" rel="noopener">FSharp.Charting</a>, its easy to put some simple reports together.  A warning, the graphs are fun to look at, but there aren’t grand insights into the book.  This is just a fun exercise.  As a reminder sentiment is a scale 0 to 1, where 0 is very negative and 1 is very positive.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sentiment through book</span></span><br><span class="line">Chart.Column(sentiment)</span><br><span class="line">|&gt; Chart.WithXAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"Paragraph number"</span>)</span><br><span class="line">|&gt; Chart.WithYAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"Sentiment"</span>)</span><br><span class="line">|&gt; Chart.WithTitle(<span class="string">"Paragraph Sentiment"</span>)</span><br><span class="line">|&gt; Chart.Show</span><br></pre></td></tr></table></figure><p>This data is almost too noisy to be useful</p><p><img src="/images/sa1/sentiment1.png" alt="Paragraph Sentiment"></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Paragraph wordcount through book</span></span><br><span class="line">Chart.Column(wordCounts)</span><br><span class="line">|&gt; Chart.WithXAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"Paragraph number"</span>)</span><br><span class="line">|&gt; Chart.WithYAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"Word Count"</span>)</span><br><span class="line">|&gt; Chart.WithTitle(<span class="string">"Words per Paragraph"</span>)</span><br><span class="line">|&gt; Chart.Show</span><br></pre></td></tr></table></figure><p>This chart shows a couple of crazy long paragraph outliers.</p><p><img src="/images/sa1/wordcount1.png" alt="Paragraph WordCount"></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Histogram of paragraph sentiments</span></span><br><span class="line">Chart.Histogram(sentiment |&gt; List.map snd, Intervals=<span class="number">20.</span>)</span><br><span class="line">|&gt; Chart.WithXAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"Sentiment"</span>)</span><br><span class="line">|&gt; Chart.WithYAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"Paragraph Count"</span>)</span><br><span class="line">|&gt; Chart.WithTitle(<span class="string">"Sentiment Histogram"</span>)</span><br><span class="line">|&gt; Chart.Show</span><br></pre></td></tr></table></figure><p>Here we see better breakdown on paragraph sentiment.</p><p><img src="/images/sa1/sentiment2.png" alt="Sentiment Histogram"></p><p>I configure the histogram to use 20 buckets.  With some trial and error, this seemed like a good balance.</p><p><em>Note: Partially applied infix operators.  For better or worse, I prefer avoiding the extra lambda syntax.  If I can get away from it without obscuring intent, I do.  Here is a place where I partially apply <code>&lt;</code>, saving me like 13 precious keystrokes: <code>|&gt; List.filter ((&gt;)500)</code>. It’s a fun trick; I think it’s more readable, but it could also be my <a href="https://www.perl.org" target="_blank" rel="noopener">Perl</a> golfing tendancies emerging.</em></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wordcount histogram (filter out paragraphs &gt; 500 words)</span></span><br><span class="line">Chart.Histogram(</span><br><span class="line">    wordCounts </span><br><span class="line">    |&gt; List.map snd </span><br><span class="line">    |&gt; List.filter ((&gt;)<span class="number">500</span>),</span><br><span class="line">    Intervals=<span class="number">20.</span>)</span><br><span class="line">|&gt; Chart.WithXAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"WordCount"</span>)</span><br><span class="line">|&gt; Chart.WithYAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"Paragraph Count"</span>)</span><br><span class="line">|&gt; Chart.WithTitle(<span class="string">"WordCount Histogram"</span>)</span><br><span class="line">|&gt; Chart.Show</span><br></pre></td></tr></table></figure><p>Most paragraphs are under 200 words, with the lionshare being less than 100 words.<br><img src="/images/sa1/wordcount2.png" alt="Wordcount Histogram"></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wordcount/Sentiment graph</span></span><br><span class="line">(wordCounts    |&gt; List.map snd, </span><br><span class="line"> sentiment     |&gt; List.map snd)</span><br><span class="line">||&gt; List.zip</span><br><span class="line">|&gt; Chart.Point</span><br><span class="line">|&gt; Chart.WithXAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"Words per Paragraph"</span>)</span><br><span class="line">|&gt; Chart.WithYAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"Sentiment"</span>)</span><br><span class="line">|&gt; Chart.WithTitle(<span class="string">"WordCount and Sentiment"</span>)</span><br><span class="line">|&gt; Chart.Show</span><br></pre></td></tr></table></figure><p>Here we see if there is any trend with respect to paragraph wordcount and sentiment.  I don’t really see one.</p><p><img src="/images/sa1/wordcount_sentiment.png" alt="Wordcount and Sentiment"></p><p>This is post is primarily about about using stock F#, and watching the data flow.  With that said, I would be remiss if I didn’t mention <a href="https://github.com/BlueMountainCapital/Deedle" target="_blank" rel="noopener">Deedle</a>.  To do serious data analysis, Deedle is a powerful tool.  It’s ability to manage and manipulate dataframes and series is extremely useful.  The below tidbits don’t do the library justice, but they do provide a small taste of what can be accomplished easily.</p><p>Below I convert the data into a series, allowing more advanced reporting.  Then I generate a moving average, using 30 paragraphs as the window.  If you remember from above, the raw data was interesting, but I don’t believe overly insightful.  A moving average helps to soften peaks and display trends better.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Turn sentiment into a Deedle series</span></span><br><span class="line"><span class="keyword">let</span> sentimentSeries = sentiment |&gt; series</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chart a moving average</span></span><br><span class="line">Stats.movingMean <span class="number">30</span> sentimentSeries</span><br><span class="line">|&gt; Series.observations</span><br><span class="line">|&gt; Chart.Line</span><br><span class="line">|&gt; Chart.WithXAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"Paragraph Number"</span>)</span><br><span class="line">|&gt; Chart.WithYAxis(Enabled=<span class="keyword">true</span>, Title=<span class="string">"Sentiment"</span>)</span><br><span class="line">|&gt; Chart.WithTitle(<span class="string">"Sentiment Moving Average"</span>)</span><br><span class="line">|&gt; Chart.Show</span><br></pre></td></tr></table></figure><p>This shows a easier to read sentiment trend.  The periods of the book that use darker tones are easier to see now.  </p><p><img src="/images/sa1/sentiment3.png" alt="Sentiment Moving Average"></p><p>Series provide a mechanism for basic series statistics.  There is no need to calculate these yourself.  This is not the full range of functionality, again it is just a view into the type of calculations readily available.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sentiment stats</span></span><br><span class="line">printfn <span class="string">"Mean: %.2f Median: %.2f Min: %.2f Max: %.2f StdDev: %.2f Variance: %.2f"</span> </span><br><span class="line">    (sentimentSeries.Mean())</span><br><span class="line">    (sentimentSeries.Median())</span><br><span class="line">    (sentimentSeries.Min())</span><br><span class="line">    (sentimentSeries.Max())</span><br><span class="line">    (Stats.stdDev sentimentSeries)</span><br><span class="line">    (Stats.variance sentimentSeries)</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Mean: <span class="number">0.58</span> Median: <span class="number">0.67</span> Min: <span class="number">0.00</span> Max: <span class="number">1.00</span> StdDev: <span class="number">0.36</span> Variance: <span class="number">0.13</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// WordCount Stats</span></span><br><span class="line"><span class="keyword">let</span> wordCountsSeries = wordCounts |&gt; List.map (<span class="keyword">fun</span> (a,b) -&gt; (a, float b)) |&gt; series</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"Mean: %.2f Median: %.2f Min: %.2f Max: %.2f StdDev: %.2f Variance: %.2f"</span> </span><br><span class="line">    (wordCountsSeries.Mean())</span><br><span class="line">    (wordCountsSeries.Median())</span><br><span class="line">    (wordCountsSeries.Min())</span><br><span class="line">    (wordCountsSeries.Max())</span><br><span class="line">    (Stats.stdDev wordCountsSeries)</span><br><span class="line">    (Stats.variance wordCountsSeries)</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Mean: <span class="number">106.98</span> Median: <span class="number">85.50</span> Min: <span class="number">1.00</span> Max: <span class="number">884.00</span> StdDev: <span class="number">94.90</span> Variance: <span class="number">9006.50</span></span><br></pre></td></tr></table></figure><p>I hope you enjoyed this slightly deeper examination into sentiment analysis and F#.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post is a follow up to my previous look into &lt;a href=&quot;/2017/01/20/F-and-Text-Analytics/&quot;&gt;Text Analytics&lt;/a&gt;.  It will provide additional examples of how data can be pulled and processed in &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  I’ll also use this as an opportunity to draw more charts.  For all this to happen, I’ll be doing light analysis of the full text of Mary Shelley’s “Frankenstein”.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="Statistics" scheme="http://codesuji.com/tags/Statistics/"/>
    
      <category term="Text" scheme="http://codesuji.com/tags/Text/"/>
    
      <category term="Cognitive Services" scheme="http://codesuji.com/tags/Cognitive-Services/"/>
    
      <category term="Webapi" scheme="http://codesuji.com/tags/Webapi/"/>
    
      <category term="Http" scheme="http://codesuji.com/tags/Http/"/>
    
      <category term="Analytics" scheme="http://codesuji.com/tags/Analytics/"/>
    
      <category term="Deedle" scheme="http://codesuji.com/tags/Deedle/"/>
    
  </entry>
  
  <entry>
    <title>F# and Text Analytics</title>
    <link href="http://codesuji.com/2017/01/20/F-and-Text-Analytics/"/>
    <id>http://codesuji.com/2017/01/20/F-and-Text-Analytics/</id>
    <published>2017-01-21T00:48:09.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Today I look at leveraging <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> to perform text analysis using Microsoft&#x2019;s <a href="https://www.microsoft.com/cognitive-services/en-us/" target="_blank" rel="noopener">Cognitive Services</a>.  </p><a id="more"></a><p>If you want to follow along, you&#x2019;ll need to first get a free account from <a href="https://www.microsoft.com/cognitive-services/en-us/" target="_blank" rel="noopener">Cognitive Services</a>.  Then request the api access you want, for this post it is &#x201C;Text Analytics&#x201D;.  The apikey they provide can be used in the upcoming code if you want to make your own calls.  Microsoft offers a nice amount of free calls, providing plenty of room to play in the environment.  Time to get started.</p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line">nuget FSharp.Data</span><br><span class="line">nuget Newtonsoft.Json</span><br></pre></td></tr></table></figure><p>Below is the library loading code.  This is also where I put my Cognitive Services apikey.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">&quot;../packages/FSharp.Data/lib/net40/FSharp.Data.dll&quot;</span></span><br><span class="line">#r <span class="string">&quot;../packages/NewtonSoft.Json/lib/net40/Newtonsoft.Json.dll&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> FSharp.Data</span><br><span class="line"><span class="keyword">open</span> Newtonsoft.Json</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> apiKey = <span class="string">&quot;your apikey here&quot;</span></span><br></pre></td></tr></table></figure><p>For this experiment I leverage just two of the available Text Analytics capabilties, sentiment analysis and key phrase extraction.  In the spirit of organizing my code, I create modules to compartmentalize structure.  In a normal project I would structure code slightly differently and put these modules into their own respective files, but for a quick demo I can get away with throwing them in the same file.  I&#x2019;ve also found making some of these concessions can help the setup process be a little easier to follow.</p><p>I leverage F#&#x2019;s types to specify the webapi interface.  The sentiment webapi expects a request object that contains a list of documents.  It returns a response object that has a list of scores (one per document), and a list of errors (if any).  The KeyPhrases api also expects a request with a list of documents.  It returns a response object with a list of phrases per document, and a list of errors (if any).  The <code>Document</code>, <code>Request</code>, and <code>ResponseError</code> types are identical between sentiment and keyphrases.  The <code>Response</code> object is nearly identical; the list of results <code>Score</code> versus <code>KeyPhrases</code> being the only difference.   </p><p><em>Note: For those not familiar with F#, modules are a common method to organize code into logical components.  They are often broken into one module per file, but as obvious by this code, don&#x2019;t necessarily need to be.</em></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Sentiment =</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">&quot;https://westus.api.cognitive.microsoft.com/text/analytics/v2.0/sentiment&quot;</span></span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Document</span> </span>= { language: string; id: string; text: string }</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Request</span> </span>= { documents: Document list }</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Score</span> </span>= { score: float; id: string }</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">ResponseError</span> </span>= { id: string; message: string }</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Response</span> </span>= { documents: Score list; errors: ResponseError list }</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> KeyPhrases =</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">&quot;https://westus.api.cognitive.microsoft.com/text/analytics/v2.0/keyPhrases&quot;</span></span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Document</span> </span>= { language: string; id: string; text: string }</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Request</span> </span>= { documents: Document list }</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">KeyPhrases</span> </span>= { keyPhrases: string list; id: string }</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">ResponseError</span> </span>= { id: string; message: string }</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Response</span> </span>= { documents: KeyPhrases list; errors: ResponseError list }</span><br></pre></td></tr></table></figure><p>I put together a couple helper functions.  First is <code>TextToRequestJson</code> which converts a string into the complext json that the api expects.  The api accepts a list of documents, but for this little test I just send one text block.  This code is easy enough modify if I wanted to process multiple documents at once.  Second, I make an webapi call wrapper <code>AnalyticsHttp</code> to handle standard headers, etc.  The .NET libraries have several ways to make Http calls.  I&#x2019;m using <a href="https://fsharp.github.io/FSharp.Data/library/Http.html" target="_blank" rel="noopener">FSharp.Data Http</a> to make the api call.  It&#x2019;s interface is really simple to use, which is a good argument for a quick iteration. Third is a wrapper around Newtonsoft&#x2019;s JsonConvert, this is just so I can call it in F# style later.  Fourth, is <code>KeyPhraseReplace</code>, a recursive function that marks keyphrases in a string.</p><p><em>Note: F#&#x2019;s match: <code>[]</code> matches an empty list (<code>words</code> in this case) to return the given string.  It matches <code>x::xs</code> where <code>x</code> is head of the list and <code>xs</code> is the tail of the list.  The marking is done by wrapping keyphrases.</em></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Sentiment</span><br><span class="line"><span class="keyword">open</span> KeyPhrases</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert text document into request body in json format</span></span><br><span class="line"><span class="keyword">let</span> TextToRequestJson text =</span><br><span class="line">    <span class="keyword">let</span> document = {</span><br><span class="line">        language = <span class="string">&quot;en&quot;</span>;</span><br><span class="line">        id = Guid.NewGuid().ToString();</span><br><span class="line">        text = text}</span><br><span class="line">    <span class="keyword">let</span> request = { Request.documents = [ document ] }</span><br><span class="line">    JsonConvert.SerializeObject(request)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perform http call</span></span><br><span class="line"><span class="keyword">let</span> AnalyticsHttp url apiKey body =</span><br><span class="line">    Http.RequestString(</span><br><span class="line">        url,</span><br><span class="line">        httpMethod = <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        headers = [</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">            <span class="string">&quot;Ocp-Apim-Subscription-Key&quot;</span>, apiKey],</span><br><span class="line">        body = TextRequest body)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wrapper so I can call it F#-style</span></span><br><span class="line"><span class="keyword">let</span> JsonDeserialize&lt;<span class="symbol">&apos;T</span>&gt; s = JsonConvert.DeserializeObject&lt;<span class="symbol">&apos;T</span>&gt;(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mark key phrases in the originally provided text</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> KeyPhraseReplace (text:string) (words:list&lt;string&gt;) =</span><br><span class="line">    <span class="keyword">match</span> words <span class="keyword">with</span></span><br><span class="line">    | [] -&gt; text</span><br><span class="line">    | x::xs -&gt; (KeyPhraseReplace text xs).Replace(<span class="string">&quot; &quot;</span> + x, <span class="string">&quot; *&quot;</span> + x + <span class="string">&quot;*&quot;</span>)</span><br></pre></td></tr></table></figure><p>Once the helper functions are setup, getting sentiment and keyphrases functions are pretty simple pipeline processes.  Take a string, convert to a json string, send it to the analytics api call, take the response string and convert into it&#x2019;s appropriate type.</p><p><em>Note: Partial Function Application, one of the joys of F#, and other functional languages, is partial application.  This allows me to apply some of the parameters to a function, making another function.  In the case below, it allows me to apply the first two parameters to the function <code>AnalyticsHttp</code>, resulting in a new anonymous function <code>(AnalyticsHttp Sentiment.url apiKey)</code>.  I can then pipe directly into this sentiment-specific function, like any other function that takes 1 parameter.</em></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get sentiment score for text</span></span><br><span class="line"><span class="keyword">let</span> GetSentiment text =</span><br><span class="line">    text</span><br><span class="line">    |&gt; TextToRequestJson</span><br><span class="line">    |&gt; (AnalyticsHttp Sentiment.url apiKey)</span><br><span class="line">    |&gt; JsonDeserialize&lt;Sentiment.Response&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get keyphrases from text</span></span><br><span class="line"><span class="keyword">let</span> GetKeyPhrases text =</span><br><span class="line">    text</span><br><span class="line">    |&gt; TextToRequestJson</span><br><span class="line">    |&gt; (AnalyticsHttp KeyPhrases.url apiKey)</span><br><span class="line">    |&gt; JsonDeserialize&lt;KeyPhrases.Response&gt;</span><br></pre></td></tr></table></figure><p>Once all of the components are in place, it&#x2019;s time to do some analytics.  I capture the results of sentiment in <code>s</code> and the key phrases in <code>kp</code>.  All that&#x2019;s left to do is print out the basic stats and mark the keyphrases.  The target of interest is the beginning of Mary Shelley&#x2019;s &#x201C;Frankenstein&#x201D;.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Source: &quot;Frankenstein, or the Modern Prometheus&quot;, Mary Wollstonecraft (Godwin) Shelley</span></span><br><span class="line"><span class="comment">// Url   : http://www.gutenberg.org/cache/epub/84/pg84.txt</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;You will rejoice to hear that no disaster has accompanied the commencement of an enterprise which you have regarded with such evil forebodings.  I arrived here yesterday, and my first task is to assure my dear sister of my welfare and increasing confidence in the success of my undertaking.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = </span><br><span class="line">    text</span><br><span class="line">    |&gt; GetSentiment</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> kp = </span><br><span class="line">    text</span><br><span class="line">    |&gt; GetKeyPhrases</span><br><span class="line"></span><br><span class="line">printfn <span class="string">&quot;\nScore (0 = very negative, 1 = very positive):&quot;</span></span><br><span class="line">s </span><br><span class="line">|&gt; (<span class="keyword">fun</span> x -&gt;</span><br><span class="line">    x.documents</span><br><span class="line">    |&gt; List.iter (<span class="keyword">fun</span> d -&gt; printfn <span class="string">&quot;Score: %f&quot;</span> d.score))</span><br><span class="line"></span><br><span class="line">printfn <span class="string">&quot;\nKeyphrases:&quot;</span></span><br><span class="line">kp</span><br><span class="line">|&gt; (<span class="keyword">fun</span> d -&gt;</span><br><span class="line">    d.documents</span><br><span class="line">    |&gt; List.iter (<span class="keyword">fun</span> d -&gt;</span><br><span class="line">        d.keyPhrases</span><br><span class="line">        |&gt; List.iter (printfn <span class="string">&quot;%s&quot;</span>)))</span><br><span class="line"></span><br><span class="line">KeyPhraseReplace text kp.documents.[<span class="number">0</span>].keyPhrases</span><br></pre></td></tr></table></figure><p>Below are the results. If the first paragraph is any indication, this should be a delightfully cheery book. Perhaps it&#x2019;s not fair to judge a book by it&#x2019;s first paragraph, but I think the analysis of the text provided is correct.  Not only is a positive score correlated to the input text, we can also see the breakdown of key phrases and their relationship within the text itself.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Score (0 = very negative, 1 = very positive):</span><br><span class="line">Score: 0.947906</span><br><span class="line"></span><br><span class="line">Keyphrases:</span><br><span class="line">commencement</span><br><span class="line">increasing confidence</span><br><span class="line">sister</span><br><span class="line">success</span><br><span class="line">welfare</span><br><span class="line">evil forebodings</span><br><span class="line">disaster</span><br><span class="line">enterprise</span><br><span class="line">undertaking</span><br><span class="line">task</span><br><span class="line"></span><br><span class="line">// Source: &quot;Frankenstein, or the Modern Prometheus&quot;, Mary Wollstonecraft (Godwin) Shelley</span><br><span class="line">// Url   : http://www.gutenberg.org/cache/epub/84/pg84.txt</span><br><span class="line">You will rejoice to hear that no *disaster* has accompanied the *commencement* </span><br><span class="line">of an *enterprise* which you have regarded with such *evil forebodings*.  I </span><br><span class="line">arrived here yesterday, and my first *task* is to assure my dear *sister* of </span><br><span class="line">my *welfare* and *increasing confidence* in the *success* of my *undertaking*.</span><br></pre></td></tr></table></figure><p>Spoiler alert, here is the sentiment score: <span class="spoiler">0.398727</span> of the last paragraph.</p><p>Hopefully you have found this useful.  With very little code it&#x2019;s easy to get started with text analytics.  There is much more to the Microsoft Cognitive Services, but this is a good template to use as a jumping point.  Since it&#x2019;s accessible through a webapi you can get to it using about anything, but there is something about F# that just feels right.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I look at leveraging &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; to perform text analysis using Microsoft&amp;#x2019;s &lt;a href=&quot;https://www.microsoft.com/cognitive-services/en-us/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cognitive Services&lt;/a&gt;.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="Text" scheme="http://codesuji.com/tags/Text/"/>
    
      <category term="Cognitive Services" scheme="http://codesuji.com/tags/Cognitive-Services/"/>
    
      <category term="Webapi" scheme="http://codesuji.com/tags/Webapi/"/>
    
      <category term="Http" scheme="http://codesuji.com/tags/Http/"/>
    
      <category term="Analytics" scheme="http://codesuji.com/tags/Analytics/"/>
    
  </entry>
  
  <entry>
    <title>Linear Regression and F#</title>
    <link href="http://codesuji.com/2017/01/12/Linear-Regression-and-F/"/>
    <id>http://codesuji.com/2017/01/12/Linear-Regression-and-F/</id>
    <published>2017-01-13T02:39:24.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Today I look into performing linear regression using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>.  The implementations of interest will be the <a href="https://numerics.mathdotnet.com/" target="_blank" rel="noopener">MathNet</a> and <a href="http://accord-framework.net/" target="_blank" rel="noopener">Accord.NET</a> libraries.  I assume you already know what linear regression is, but in can you need a refresher: <a href="https://en.wikipedia.org/wiki/Linear_regression" target="_blank" rel="noopener">Linear Regression</a>.  My goal is to provide a simple explanation of how to leverage some existing F# accessible libraries.  Once you know some of the basic calling functions, you can go crazy with some of the other options these libraries have to offer.</p><a id="more"></a><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line">nuget Accord</span><br><span class="line">nuget Accord.Math</span><br><span class="line">nuget Accord.Statistics</span><br><span class="line">nuget Accord.MachineLearning</span><br><span class="line">nuget FSharp.Charting</span><br><span class="line">nuget MathNet.Numerics</span><br><span class="line">nuget MathNet.Numerics.FSharp</span><br></pre></td></tr></table></figure><p>Here is the library loading. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/FSharp.Charting/lib/net40/FSharp.Charting.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord/lib/net45/Accord.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Statistics/lib/net45/Accord.Statistics.dll"</span></span><br><span class="line">#r <span class="string">"../packages/MathNet.Numerics/lib/net40/MathNet.Numerics.dll"</span></span><br><span class="line">#r <span class="string">"../packages/MathNet.Numerics.FSharp/lib/net40/MathNet.Numerics.FSharp.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FSharp.Charting</span><br><span class="line"><span class="keyword">open</span> Accord</span><br><span class="line"><span class="keyword">open</span> Accord.Math</span><br><span class="line"><span class="keyword">open</span> Accord.Math.Distances</span><br><span class="line"><span class="keyword">open</span> Accord.Statistics</span><br><span class="line"><span class="keyword">open</span> Accord.Statistics.Models.Regression.Linear</span><br><span class="line"><span class="keyword">open</span> MathNet</span><br><span class="line"><span class="keyword">open</span> MathNet.Numerics</span><br><span class="line"><span class="keyword">open</span> MathNet.Numerics.LinearAlgebra</span><br><span class="line"><span class="keyword">open</span> MathNet.Numerics.LinearRegression</span><br></pre></td></tr></table></figure><p>First I need to create some data. For this example, the formula is y =  x^2 + noise + occasional outlier.  The method is create 3 arrays representing x, noise, and outliers.  It is a bit convoluted, but it allows me to show off a couple bits of functionality from F# and MathNet.  The MathNet library includes methods to generate datasets, for the noise dataset <code>Generate.Normal</code> creates an array of numbers with a normal distribution.  It is worth checking out the other diverse <a href="https://numerics.mathdotnet.com/Generate.html" target="_blank" rel="noopener">generation</a> capabilities available.  For outliers, I define an arbitrary 30% chance of a big spike in the data, as defined by pct and range variables.  Then I use <code>|||&gt;</code> and <code>Array.zip3</code> to combine the 3 element tuple of arrays into an array of 3 element tuples.  Once in this format, a map is used to calculate the formula mentioned at the start.</p><p><em>Sidenote: If you’ve coded any F#, you know <code>|&gt;</code>.  But did you know there are other, similar operators: <code>||&gt;</code> passes a tuple as two arguments, <code>|||&gt;</code> passes a 3-tuple as 3 arguments.</em></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xData = [| <span class="number">1.</span> .. <span class="number">0.25</span> .. <span class="number">50.</span> |]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Args: length, mean, stddev</span></span><br><span class="line"><span class="keyword">let</span> noise = Generate.Normal(Array.length xData, <span class="number">500.</span>, <span class="number">200.</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> makeOutliers len pct range =</span><br><span class="line">    <span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</span><br><span class="line">    [|<span class="number">1.</span>.len|]</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> _ -&gt;</span><br><span class="line">        <span class="keyword">if</span> rand.NextDouble() &lt; pct</span><br><span class="line">        <span class="keyword">then</span> range * rand.NextDouble() - (range / <span class="number">2.</span>)</span><br><span class="line">        <span class="keyword">else</span> <span class="number">0.</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> outliers = makeOutliers (Array.length xData) <span class="number">0.3</span> <span class="number">2000.</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> yData = </span><br><span class="line">    (xData, noise, outliers) </span><br><span class="line">    |||&gt; Array.zip3 </span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> (x, n, o) -&gt; x**<span class="number">2.</span> + n + o)</span><br></pre></td></tr></table></figure><h3 id="MathNet"><a href="#MathNet" class="headerlink" title="MathNet"></a>MathNet</h3><p>Starting with the MathNet implementation, it is time for the regression fitting.  The first option is <code>Fit.Line</code>, this takes the x and y data, fits a line and returns the associated intercept and slope that can be plugged into a y = mx + b formula.  The second option is to use <code>Fit.LineFunc</code>.  It also takes the x and y data to fit a line.  The difference is it creates a delegate function that can be used to directly calculate.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mathnetIntercept, mathnetSlope = Fit.Line (xData, yData)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regressionFunc = Fit.LineFunc(xData, yData)</span><br></pre></td></tr></table></figure><p>Now it’s time to generate data based on the regression result.  <strong>pData1</strong> is calculated manually using the slope and intercept from the <code>Fit.Line</code> call.  <strong>pData2</strong> leverages the function delegate from <code>Fit.LineFunc</code>.  I need to use <code>.Invoke</code> for performing the calculation.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pData1 =</span><br><span class="line">    xData</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; mathnetSlope * x + mathnetIntercept)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pData2 =</span><br><span class="line">    xData</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; regressionFunc.Invoke(x))</span><br></pre></td></tr></table></figure><p>The below code combines 3 charts; the original data, plus the regression lines.  Some of the effect is lost, since the lines are ontop of each other, but you hopefully get the point.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Chart actual versus linear regression predictions</span></span><br><span class="line">Chart.Combine([</span><br><span class="line">    (xData, yData)  ||&gt; Array.zip |&gt; Chart.Point;</span><br><span class="line">    (xData, pData1) ||&gt; Array.zip |&gt; Chart.Line;</span><br><span class="line">    (xData, pData2) ||&gt; Array.zip |&gt; Chart.Line])</span><br><span class="line">|&gt; Chart.Show</span><br></pre></td></tr></table></figure><p><img src="/images/lr1/lr1_mathnet.png" alt="Regression Comparison (MathNet)"></p><h3 id="Accord-NET"><a href="#Accord-NET" class="headerlink" title="Accord.NET"></a>Accord.NET</h3><p>Now it is time to look at the Accord.NET implementation.  Here,<code>OrdinaryLeastSquares</code> + <code>Learn</code> are used to determine line fitting.  The result is a <a href="http://accord-framework.net/docs/html/Methods_T_Accord_Statistics_Models_Regression_Linear_SimpleLinearRegression.htm" target="_blank" rel="noopener">SimpleLinearRegression</a> object.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ols = <span class="keyword">new</span> OrdinaryLeastSquares();</span><br><span class="line"><span class="keyword">let</span> accordRegression = ols.Learn(xData, yData)</span><br><span class="line"><span class="keyword">let</span> accordSlope = accordRegression.Slope</span><br><span class="line"><span class="keyword">let</span> accordIntercept = accordRegression.Intercept</span><br></pre></td></tr></table></figure><p>Now it’s time to generate data based on the regression result.  <strong>pData3</strong> is calculated manually using the slope and intercept.  <strong>pData4</strong> is calculated directly by leveraging Accord’s <code>Transform()</code> function.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pData3 =</span><br><span class="line">    xData</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; accordSlope * x + accordIntercept)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pData4 =</span><br><span class="line">    xData</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; accordRegression.Transform(x))</span><br></pre></td></tr></table></figure><p>Again, the below code combines 3 charts; the original data, plus the regression lines.  As expected, these graphs are identical.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Chart.Combine([</span><br><span class="line">    (xData, yData)  ||&gt; Array.zip |&gt; Chart.Point;</span><br><span class="line">    (xData, pData3) ||&gt; Array.zip |&gt; Chart.Line;</span><br><span class="line">    (xData, pData4) ||&gt; Array.zip |&gt; Chart.Line])</span><br><span class="line">|&gt; Chart.Show</span><br></pre></td></tr></table></figure><p><img src="/images/lr1/lr1_accordnet.png" alt="Regression Comparison (Accord.NET)"></p><p>So, there it is.  A couple ways to do linear regression, but there is more.  What good is the regression model if you can’t perform scoring against the result.  Luckily, MathNet and Accord.NET have several methods of comparing datasets.  There are too many options to show them all here, but here are a couple examples scoring predicted data (pData1) versus actual data (yData).  For reference: <a href="https://numerics.mathdotnet.com/Distance.html" target="_blank" rel="noopener">MathNet Distances</a> and <a href="http://accord-framework.net/docs/html/N_Accord_Math_Distances.htm" target="_blank" rel="noopener">Accord.NET Distances</a>.  I recommend digging deeper to find the scoring method appropriate for your specific needs.  </p><p>MathNet: </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">printfn <span class="string">"Scoring: R2=%.2f R=%.2f PSE=%.2f SE=%.2f SAD=%.2f SSD=%.2f MAE=%.2f MSE=%.2f"</span></span><br><span class="line">    (GoodnessOfFit.RSquared(pData1, yData))</span><br><span class="line">    (GoodnessOfFit.R(pData1, yData))</span><br><span class="line">    (GoodnessOfFit.PopulationStandardError(pData1, yData))</span><br><span class="line">    (GoodnessOfFit.StandardError(pData1, yData, <span class="number">2</span>)) <span class="comment">// 2 degrees freedom</span></span><br><span class="line">    (Distance.SAD(pData1, yData))</span><br><span class="line">    (Distance.SSD(pData1, yData))</span><br><span class="line">    (Distance.MAE(pData1, yData))</span><br><span class="line">    (Distance.MSE(pData1, yData))</span><br><span class="line"></span><br><span class="line">Scoring: R2=<span class="number">0.75</span> R=<span class="number">0.87</span> PSE=<span class="number">427.23</span> SE=<span class="number">429.41</span> SAD=<span class="number">61878.78</span> SSD=<span class="number">35957245.48</span> MAE=<span class="number">314.11</span> MSE=<span class="number">182524.09</span></span><br></pre></td></tr></table></figure><p>Accord.NET:</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">printfn <span class="string">"Scoring SE: %.2f E: %.2f E2:%.2f M:%.2f PC:%.2f"</span></span><br><span class="line">    (accordRegression.GetStandardError(xData, yData))</span><br><span class="line">    (Euclidean().Distance(pData1, yData))</span><br><span class="line">    (SquareEuclidean().Distance(pData1, yData))</span><br><span class="line">    (Manhattan().Distance(pData1, yData))</span><br><span class="line">    (PearsonCorrelation().Similarity(pData1, yData))</span><br><span class="line"></span><br><span class="line">Scoring SE: <span class="number">429.41</span> E: <span class="number">5996.44</span> E2:<span class="number">35957245.48</span> M:<span class="number">61878.78</span> PC:<span class="number">0.87</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Confidence Intervals</span></span><br><span class="line">xData</span><br><span class="line">|&gt; Array.map (<span class="keyword">fun</span> x -&gt; </span><br><span class="line">    (x, accordRegression.GetConfidenceInterval(x, xData, yData)))</span><br><span class="line">|&gt; Array.iter (<span class="keyword">fun</span> (x, ci) -&gt; </span><br><span class="line">    printfn <span class="string">"x: %5.2f min: %7.2f max: %7.2f len:%7.2f"</span> x ci.Min ci.Max ci.Length)</span><br><span class="line"></span><br><span class="line">x:  <span class="number">1.00</span> min:  <span class="number">-90.80</span> max:  <span class="number">149.64</span> len: <span class="number">240.44</span></span><br><span class="line">x:  <span class="number">1.25</span> min:  <span class="number">-76.85</span> max:  <span class="number">161.76</span> len: <span class="number">238.61</span></span><br><span class="line">x:  <span class="number">1.50</span> min:  <span class="number">-62.90</span> max:  <span class="number">173.88</span> len: <span class="number">236.78</span></span><br><span class="line">x:  <span class="number">1.75</span> min:  <span class="number">-48.95</span> max:  <span class="number">186.00</span> len: <span class="number">234.95</span></span><br><span class="line">x:  <span class="number">2.00</span> min:  <span class="number">-35.01</span> max:  <span class="number">198.13</span> len: <span class="number">233.14</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>I hope this has been helpful if you’re venturing into F# and regression.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I look into performing linear regression using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  The implementations of interest will be the &lt;a href=&quot;https://numerics.mathdotnet.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MathNet&lt;/a&gt; and &lt;a href=&quot;http://accord-framework.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Accord.NET&lt;/a&gt; libraries.  I assume you already know what linear regression is, but in can you need a refresher: &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_regression&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linear Regression&lt;/a&gt;.  My goal is to provide a simple explanation of how to leverage some existing F# accessible libraries.  Once you know some of the basic calling functions, you can go crazy with some of the other options these libraries have to offer.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Accord.NET" scheme="http://codesuji.com/tags/Accord-NET/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="Statistics" scheme="http://codesuji.com/tags/Statistics/"/>
    
      <category term="MathNet" scheme="http://codesuji.com/tags/MathNet/"/>
    
      <category term="Regression" scheme="http://codesuji.com/tags/Regression/"/>
    
      <category term="Delegate" scheme="http://codesuji.com/tags/Delegate/"/>
    
      <category term="Scoring" scheme="http://codesuji.com/tags/Scoring/"/>
    
  </entry>
  
  <entry>
    <title>Site transition complete</title>
    <link href="http://codesuji.com/2017/01/09/Site-transition-complete/"/>
    <id>http://codesuji.com/2017/01/09/Site-transition-complete/</id>
    <published>2017-01-10T02:24:34.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>No tech talk today.  This is a milestone post.  After more hiccups than I’d prefer, the site transition is complete.  There has been some minor refactoring with more to follow. Happy prime number new year!   </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;No tech talk today.  This is a milestone post.  After more hiccups than I’d prefer, the site transition is complete.  There has been some
      
    
    </summary>
    
    
      <category term="admin" scheme="http://codesuji.com/tags/admin/"/>
    
  </entry>
  
  <entry>
    <title>F# Morse Coder</title>
    <link href="http://codesuji.com/2016/12/23/F-Morse-Coder/"/>
    <id>http://codesuji.com/2016/12/23/F-Morse-Coder/</id>
    <published>2016-12-24T01:49:34.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="In-other-words-–-–-…-…-–"><a href="#In-other-words-–-–-…-…-–" class="headerlink" title="In other words: -.– .- -.– / ..-. / … …. .- .-. .–."></a>In other words: -.– .- -.– / ..-. / … …. .- .-. .–.</h2><p>As I was explaining <a href="https://en.wikipedia.org/wiki/Morse_code" target="_blank" rel="noopener">Morse Code</a> to a young mind, I started thinking.  It is fine to explain the encoding and uses, but experiencing the audial component makes the lessons stick better.  Enter <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>.  Yes, I know I could use any of a hundred phone apps or websites that produce sound, but what’s the fun in that?  For me, this is the perfect opportunity to hack out a quick text to morse code translator.  </p><a id="more"></a><p>Getting started, I setup a <code>Map</code> as the codebook for letter/number to morse code translation.  It’s not meant to be comprehensive, but enough to play with.  Then I code in some constants and helpers to make my life easier later. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> codebook = </span><br><span class="line">    Map [ </span><br><span class="line">        (' ', <span class="string">" "</span>); </span><br><span class="line">        (<span class="symbol">'a</span>', <span class="string">".-"</span>);</span><br><span class="line">        (<span class="symbol">'b</span>', <span class="string">"-..."</span>);</span><br><span class="line">        (<span class="symbol">'c</span>', <span class="string">"-.-."</span>);</span><br><span class="line">        (<span class="symbol">'d</span>', <span class="string">"-.."</span>);</span><br><span class="line">        (<span class="symbol">'e</span>', <span class="string">"."</span>);</span><br><span class="line">        (<span class="symbol">'f</span>', <span class="string">"..-."</span>);</span><br><span class="line">        (<span class="symbol">'g</span>', <span class="string">"--."</span>);</span><br><span class="line">        (<span class="symbol">'h</span>', <span class="string">"...."</span>);</span><br><span class="line">        (<span class="symbol">'i</span>', <span class="string">".."</span>);</span><br><span class="line">        (<span class="symbol">'j</span>', <span class="string">".---"</span>);</span><br><span class="line">        (<span class="symbol">'k</span>', <span class="string">"-.-"</span>);</span><br><span class="line">        (<span class="symbol">'l</span>', <span class="string">".-.."</span>);</span><br><span class="line">        (<span class="symbol">'m</span>', <span class="string">"--"</span>);</span><br><span class="line">        (<span class="symbol">'n</span>', <span class="string">"-."</span>);</span><br><span class="line">        (<span class="symbol">'o</span>', <span class="string">"---"</span>);</span><br><span class="line">        (<span class="symbol">'p</span>', <span class="string">".--."</span>);</span><br><span class="line">        (<span class="symbol">'q</span>', <span class="string">"--.-"</span>);</span><br><span class="line">        (<span class="symbol">'r</span>', <span class="string">".-."</span>);</span><br><span class="line">        (<span class="symbol">'s</span>', <span class="string">"..."</span>);</span><br><span class="line">        (<span class="symbol">'t</span>', <span class="string">"-"</span>);</span><br><span class="line">        (<span class="symbol">'u</span>', <span class="string">"..-"</span>);</span><br><span class="line">        (<span class="symbol">'v</span>', <span class="string">"...-"</span>);</span><br><span class="line">        (<span class="symbol">'w</span>', <span class="string">".--"</span>);</span><br><span class="line">        (<span class="symbol">'x</span>', <span class="string">"-..-"</span>);</span><br><span class="line">        (<span class="symbol">'y</span>', <span class="string">"-.--"</span>);</span><br><span class="line">        (<span class="symbol">'z</span>', <span class="string">"--.."</span>);</span><br><span class="line">        ('<span class="number">1</span>',<span class="string">".----"</span>);</span><br><span class="line">        ('<span class="number">2</span>',<span class="string">"..---"</span>);</span><br><span class="line">        ('<span class="number">3</span>',<span class="string">"...--"</span>);</span><br><span class="line">        ('<span class="number">4</span>',<span class="string">"....-"</span>);</span><br><span class="line">        ('<span class="number">5</span>',<span class="string">"....."</span>);</span><br><span class="line">        ('<span class="number">6</span>',<span class="string">"-...."</span>);</span><br><span class="line">        ('<span class="number">7</span>',<span class="string">"--..."</span>);</span><br><span class="line">        ('<span class="number">8</span>',<span class="string">"---.."</span>);</span><br><span class="line">        ('<span class="number">9</span>',<span class="string">"----."</span>);</span><br><span class="line">        ('<span class="number">0</span>',<span class="string">"-----"</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dotDuration = <span class="number">200</span></span><br><span class="line"><span class="keyword">let</span> dashDuration = dotDuration * <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> letterTrailDuration = dotDuration</span><br><span class="line"><span class="keyword">let</span> charTrailDuration = dotDuration * <span class="number">2</span> <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">let</span> wordTrailDuration = dotDuration * <span class="number">6</span> <span class="comment">// 7</span></span><br><span class="line"><span class="keyword">let</span> frequency = <span class="number">700</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sleep wrapper</span></span><br><span class="line"><span class="keyword">let</span> sleep (ms:int) = System.Threading.Thread.Sleep(ms)</span><br></pre></td></tr></table></figure><p>This is the translation and audio portion.  The approach is basically: string -&gt; char -&gt; code -&gt; dot/dash -&gt; sound. I do lookups in the codebook with <code>TryFind</code>.  This allows me to leverage <code>Some</code> and <code>None</code>.  For illustrative purposes, the character is displayed as its going audio.  Then the character’s code is fed into the morseToSound function.  Here the code is broken apart and the dots (.) and dashes (-) are translated into audio sounds.  Luckily I can just just use <code>Console.Beep</code> for easy tone creation.  I code spaces as a word seperator and visibilty display unknown characters and patterns with a ‘!’.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Convert the dot/dash to sound</span></span><br><span class="line"><span class="keyword">let</span> dotDashToSound dd = </span><br><span class="line">    <span class="keyword">match</span> dd <span class="keyword">with</span></span><br><span class="line">    | '.' -&gt; Console.Beep(frequency, dotDuration)</span><br><span class="line">    | '-' -&gt; Console.Beep(frequency, dashDuration)</span><br><span class="line">    | ' ' -&gt; sleep wordTrailDuration</span><br><span class="line">    | _   -&gt; Console.Write(<span class="string">"!"</span>)</span><br><span class="line">    sleep dotDuration</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert morsecode char to sound representation</span></span><br><span class="line"><span class="keyword">let</span> morseToSound mc = </span><br><span class="line">    <span class="keyword">match</span> mc <span class="keyword">with</span> </span><br><span class="line">    | Some(c) -&gt;</span><br><span class="line">        c |&gt; Seq.iter dotDashToSound</span><br><span class="line">        sleep letterTrailDuration</span><br><span class="line">    | None -&gt; Console.Write(<span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert char to sound</span></span><br><span class="line"><span class="keyword">let</span> charToSound (c:char) =</span><br><span class="line">    Console.Write(<span class="string">"&#123;0&#125;"</span>, c)</span><br><span class="line">    morseToSound (codebook.TryFind c)</span><br></pre></td></tr></table></figure><p>This is a test snippet to make sure it all works.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = <span class="string">"Hello World"</span></span><br><span class="line">input.ToLower() |&gt; Seq.iter charToSound</span><br></pre></td></tr></table></figure><p>I want to allow this experience to be more interactive.  It doesn’t have to be anything fancy so I just set up a loop that takes a line at a time and does translations.  An empty line exits the program.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> main() = </span><br><span class="line">    <span class="keyword">match</span> Console.ReadLine() <span class="keyword">with</span></span><br><span class="line">    | <span class="string">""</span>    -&gt; ()</span><br><span class="line">    | input -&gt; </span><br><span class="line">        input.ToLower() |&gt; Seq.iter charToSound</span><br><span class="line">        printfn <span class="string">""</span></span><br><span class="line">        main()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>This mini project is pretty basic.  But it was a quick and fun way to whip up an experimentation tool, and use F# in the process.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;In-other-words-–-–-…-…-–&quot;&gt;&lt;a href=&quot;#In-other-words-–-–-…-…-–&quot; class=&quot;headerlink&quot; title=&quot;In other words: -.– .- -.– / ..-. / … …. .- .-. .–.&quot;&gt;&lt;/a&gt;In other words: -.– .- -.– / ..-. / … …. .- .-. .–.&lt;/h2&gt;&lt;p&gt;As I was explaining &lt;a href=&quot;https://en.wikipedia.org/wiki/Morse_code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Morse Code&lt;/a&gt; to a young mind, I started thinking.  It is fine to explain the encoding and uses, but experiencing the audial component makes the lessons stick better.  Enter &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  Yes, I know I could use any of a hundred phone apps or websites that produce sound, but what’s the fun in that?  For me, this is the perfect opportunity to hack out a quick text to morse code translator.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Morse Code" scheme="http://codesuji.com/tags/Morse-Code/"/>
    
      <category term="Sound" scheme="http://codesuji.com/tags/Sound/"/>
    
      <category term="Audio" scheme="http://codesuji.com/tags/Audio/"/>
    
      <category term="Translation" scheme="http://codesuji.com/tags/Translation/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Time Warping, an F# Implementation</title>
    <link href="http://codesuji.com/2016/12/17/Dynamic-Time-Warping-an-F-Implementation/"/>
    <id>http://codesuji.com/2016/12/17/Dynamic-Time-Warping-an-F-Implementation/</id>
    <published>2016-12-18T03:34:13.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>My recent post about <a href="/2016/12/13/F-and-Dynamic-Time-Warping/">Dynamic Time Warping</a> used an external library.  It inspired me to implement the algorithm in <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>.  This is mostly just to see it in F#.  My last implementation was in <a href="http://racket-lang.org/" target="_blank" rel="noopener">Racket</a>, and I’m interested in the different language implementations. I use a pretty basic <a href="https://en.wikipedia.org/wiki/Dynamic_time_warping#Implementation" target="_blank" rel="noopener">Algorithm</a>, nothing fancy. As part of this process I’ll be doing comparisons between <a href="https://github.com/doblak/ndtw" target="_blank" rel="noopener">NDtw</a> and my code.  To be upfront, its not a perfect comparison.  NDtw has additional options and tracking that will reduce it’s max performance capabilities.  But for hacking around, the implementations will be close enough for alittle fun.  For anyone interested, unless otherwise specified, all of my results will be from the REPL in <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a> + <a href="http://ionide.io/" target="_blank" rel="noopener">Ionide</a> using <a href="http://www.mono-project.com/" target="_blank" rel="noopener">Mono</a> version 4.6.2.</p><a id="more"></a><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line">nuget FSharp.Data</span><br><span class="line">nuget NDtw</span><br></pre></td></tr></table></figure><p>Here is the basic setup stuff.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#time</span><br><span class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></span><br><span class="line">#r <span class="string">"../packages/ndtw/lib/net40/ndtw.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FSharp.Data</span><br><span class="line"><span class="keyword">open</span> NDtw</span><br></pre></td></tr></table></figure><p>First, I need to get some data.  I’m in the mood for some stock data.  That should give me simple signals with lots of data points.  I also decide to pull it into local files.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://ichart.finance.yahoo.com/table.csv?s=IBM -o stock_ibm.csv</span><br><span class="line"></span><br><span class="line">curl http://ichart.finance.yahoo.com/table.csv?s=F -o stock_f.csv</span><br></pre></td></tr></table></figure><p>Here is the code to load the csv data into arrays.  I only pull 5,000 records, and the signal of interest will the “Open” value.  This will be enough data to run long enough, but not too long.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Stock</span> </span>= CsvProvider&lt;<span class="string">"../data/stocks/stock_ibm.csv"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ibm = Stock.Load(<span class="string">"../data/stocks/stock_ibm.csv"</span>)</span><br><span class="line"><span class="keyword">let</span> ford = Stock.Load(<span class="string">"../data/stocks/stock_f.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ibmData = ibm.Rows |&gt; Seq.take <span class="number">5000</span> |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; float(x.Open)) |&gt; Seq.toArray</span><br><span class="line"><span class="keyword">let</span> fordData = ford.Rows |&gt; Seq.take <span class="number">5000</span> |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; float(x.Open)) |&gt; Seq.toArray</span><br></pre></td></tr></table></figure><p>Before I get started, I want to get a baseline for the NDtw implementation.  I ran this a couple times, and the below results are representative.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dtw = <span class="keyword">new</span> Dtw(ibmData, fordData)</span><br><span class="line"><span class="keyword">let</span> cost = dtw.GetCost()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Real: 00:00:01.762, CPU: 00:00:01.781, GC gen0: 128, gen1: 67, gen2: 2</span></span><br></pre></td></tr></table></figure><p>Now it is time to implement the algorithm.  This is mostly a copy paste directly off of the wikipedia page.  I just need to do minor F# translation.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Distance calculation between 2 points</span></span><br><span class="line"><span class="keyword">let</span> distance (a:float) (b:float) = Math.Abs(a - b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDtwArray2D_A (d1:float[]) (d2:float[]) =</span><br><span class="line">    <span class="keyword">let</span> n = Array.length d1</span><br><span class="line">    <span class="keyword">let</span> m = Array.length d2</span><br><span class="line">    <span class="keyword">let</span> path = Array2D.init (n+<span class="number">1</span>) (m+<span class="number">1</span>) (<span class="keyword">fun</span> _ _ -&gt; <span class="number">0.</span>)</span><br><span class="line">    [<span class="number">1.</span>.n] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[x,<span class="number">0</span>] &lt;- Double.PositiveInfinity)</span><br><span class="line">    [<span class="number">1.</span>.m] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[<span class="number">0</span>,x] &lt;- Double.PositiveInfinity)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1.</span>.n] <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">1.</span>.m] <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">let</span> cost = distance d1.[i<span class="number">-1</span>] d2.[j<span class="number">-1</span>]</span><br><span class="line">            path.[i,j] &lt;- cost + (List.min</span><br><span class="line">                [path.[i<span class="number">-1</span>,j];</span><br><span class="line">                path.[i,j<span class="number">-1</span>];</span><br><span class="line">                path.[i<span class="number">-1</span>,j<span class="number">-1</span>]])</span><br><span class="line"></span><br><span class="line">    path.[n,m]</span><br></pre></td></tr></table></figure><p>Here is my first pass.  Again, I ran this multiple times, and this is a representative result. And ouch.  I know functional languages have a reputation for slower performance, but I need to be able to do better.  Not ony is it slower, but the GC #s are 10x worse than my baseline. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cost = myDtwArray2D_A ibmData fordData</span><br><span class="line"></span><br><span class="line"><span class="comment">// Real: 00:00:10.189, CPU: 00:00:10.234, GC gen0: 1536, gen1: 461, gen2: 1</span></span><br></pre></td></tr></table></figure><p>Take 2: When I initially wrote the function I decided to leverage built-ins as much as possible.  As a result I used <code>List.min</code> when determining which step in the path to take next.  List construction seems like a possible expensive process.  So I’ll take that out and see how that does.  The below code is identical to above except for the <code>path.[i,j] &lt;- cost + (min path.[i-1,j] path.[i,j-1] path.[i-1,j-1])</code> call.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Min of three values</span></span><br><span class="line"><span class="keyword">let</span> min (a:float) (b:float) (c:float) =</span><br><span class="line">    <span class="keyword">if</span> a &lt; b</span><br><span class="line">        <span class="keyword">then</span> <span class="keyword">if</span> a &lt; c <span class="keyword">then</span> a <span class="keyword">else</span> <span class="keyword">if</span> b &lt; c <span class="keyword">then</span> b <span class="keyword">else</span> c</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> b &lt; c <span class="keyword">then</span> b <span class="keyword">else</span> <span class="keyword">if</span> a &lt; c <span class="keyword">then</span> a <span class="keyword">else</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDtwArray2D_B (d1:float[]) (d2:float[]) =</span><br><span class="line">    <span class="keyword">let</span> n = Array.length d1</span><br><span class="line">    <span class="keyword">let</span> m = Array.length d2</span><br><span class="line">    <span class="keyword">let</span> path = Array2D.init (n+<span class="number">1</span>) (m+<span class="number">1</span>) (<span class="keyword">fun</span> _ _ -&gt; <span class="number">0.</span>)</span><br><span class="line">    [<span class="number">1.</span>.n] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[x,<span class="number">0</span>] &lt;- Double.PositiveInfinity)</span><br><span class="line">    [<span class="number">1.</span>.m] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[<span class="number">0</span>,x] &lt;- Double.PositiveInfinity)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1.</span>.n] <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">1.</span>.m] <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">let</span> cost = distance d1.[i<span class="number">-1</span>] d2.[j<span class="number">-1</span>]</span><br><span class="line">            path.[i,j] &lt;- cost + (min</span><br><span class="line">                path.[i<span class="number">-1</span>,j]</span><br><span class="line">                path.[i,j<span class="number">-1</span>]</span><br><span class="line">                path.[i<span class="number">-1</span>,j<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    path.[n,m]</span><br></pre></td></tr></table></figure><p>Well, this is alot better.  The performance is even close to NDtw.  This is decent for a small amount effort.  Taking a closer look, the GC numbers are troubling.  My implementation numbers are high in comparison.  Maybe there is something I can do about that.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cost = myDtwArray2D_B ibmData fordData</span><br><span class="line"></span><br><span class="line"><span class="comment">// Real: 00:00:01.769, CPU: 00:00:01.781, GC gen0: 327, gen1: 57, gen2: 1</span></span><br></pre></td></tr></table></figure><p>What can I do?  Well, F# is a functional language with optimized <a href="https://en.wikipedia.org/wiki/Tail_recursion" target="_blank" rel="noopener">tail calls</a>.  For those not familar, the TLDR version is to write a recursive call in such a way that the last operation in the function is the return value.  When written in such a way it allows the compiler to effectively unwrap the recursion as a loop with no additional stack frames being allocated.  This is a brief, and unperfect, explanation, so it’s worth investigating further.  It is a really powerful construct.  In this particular case my hope is reduced stack allocations means less object creation, so less to garbage collect.  That means it is time to rework the function to be recursive, and more to the point, leverage tail call optimization.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myDtwArray2DRecursive (d1:float[]) (d2:float[]) =</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> myDtwArray2DRecursive' i j n m (path:float[,]) (d1:float[]) (d2:float[]) =</span><br><span class="line">        <span class="keyword">if</span> i &gt; n <span class="keyword">then</span></span><br><span class="line">            path.[n,m]</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> j &gt; m <span class="keyword">then</span></span><br><span class="line">            myDtwArray2DRecursive' (i + <span class="number">1</span>) <span class="number">1</span> n m path d1 d2</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">let</span> cost = distance d1.[i<span class="number">-1</span>] d2.[j<span class="number">-1</span>]</span><br><span class="line">            path.[i,j] &lt;- cost + (min</span><br><span class="line">                path.[i<span class="number">-1</span>,j]</span><br><span class="line">                path.[i,j<span class="number">-1</span>]</span><br><span class="line">                path.[i<span class="number">-1</span>,j<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">            myDtwArray2DRecursive' (i) (j+<span class="number">1</span>) n m path d1 d2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> n = Array.length d1</span><br><span class="line">    <span class="keyword">let</span> m = Array.length d2</span><br><span class="line">    <span class="keyword">let</span> path = Array2D.init (n+<span class="number">1</span>) (m+<span class="number">1</span>) (<span class="keyword">fun</span> _ _ -&gt; <span class="number">0.</span>)</span><br><span class="line">    [<span class="number">1.</span>.n] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[x,<span class="number">0</span>] &lt;- Double.PositiveInfinity)</span><br><span class="line">    [<span class="number">1.</span>.m] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[<span class="number">0</span>,x] &lt;- Double.PositiveInfinity)</span><br><span class="line"></span><br><span class="line">    myDtwArray2DRecursive' <span class="number">1</span> <span class="number">1</span> n m path d1 d2</span><br></pre></td></tr></table></figure><p>This is exciting.  The code is flying now (over 5x faster).  Also note the GC numbers, it appears this last modification worked like a charm.  The code is even running significantly faster than the NDtw code.  To be fair, that isn’t an apples to apples comparison, but it is a very encouraging result.  The important take away from this is a minor replace of loops for optimized tail calls can give a pretty satisifying performance boost.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cost = myDtwArray2DRecursion ibmData fordData</span><br><span class="line"></span><br><span class="line"><span class="comment">// Real: 00:00:00.367, CPU: 00:00:00.375, GC gen0: 0, gen1: 0, gen2: 0</span></span><br></pre></td></tr></table></figure><p>I like to cut numbers a couple different ways.  Now I build a mini framework to run each algorithm and report its Stopwatch time.  I store these in a list and then report on average performance.  Just to make sure my datasets and calls don’t accidently get memoized or cached, I modify the datasets on each iteration run.  It probably isn’t necessary, but its an easy way to protected against black magics trying to help me when I don’t want the performance help.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test algorithm, time with stopwatch, add to performance results</span></span><br><span class="line"><span class="keyword">let</span> testAlgorithm description fn perfResults =</span><br><span class="line">    <span class="keyword">let</span> stopWatch = System.Diagnostics.Stopwatch.StartNew()</span><br><span class="line">    <span class="keyword">let</span> cost = fn()</span><br><span class="line">    stopWatch.Stop()</span><br><span class="line">    printfn <span class="string">"%20s = %f Time: %f"</span> description cost stopWatch.Elapsed.TotalMilliseconds</span><br><span class="line">    List.Cons((description, stopWatch.Elapsed.TotalMilliseconds), perfResults)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run multiple trials</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> perfResults:(string * float) list = []</span><br><span class="line"><span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</span><br><span class="line">[<span class="number">0.</span><span class="number">.10</span>]</span><br><span class="line">|&gt; List.iter (<span class="keyword">fun</span> _ -&gt;    </span><br><span class="line">    <span class="keyword">let</span> ibmData' = ibmData |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x + rand.NextDouble() * <span class="number">5.</span>)</span><br><span class="line">    <span class="keyword">let</span> fordData' = fordData |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x + rand.NextDouble() * <span class="number">5.</span>)</span><br><span class="line"></span><br><span class="line">    perfResults &lt;- testAlgorithm <span class="string">"NDtw"</span> (<span class="keyword">fun</span> () -&gt;</span><br><span class="line">        <span class="keyword">let</span> dtw = <span class="keyword">new</span> Dtw(ibmData', fordData')</span><br><span class="line">        dtw.GetCost()) perfResults</span><br><span class="line"></span><br><span class="line">    perfResults &lt;- testAlgorithm <span class="string">"Array2D_A"</span> (<span class="keyword">fun</span> () -&gt;</span><br><span class="line">        myDtwArray2D_A ibmData' fordData') perfResults</span><br><span class="line"></span><br><span class="line">    perfResults &lt;- testAlgorithm <span class="string">"Array2D_B"</span> (<span class="keyword">fun</span> () -&gt;</span><br><span class="line">        myDtwArray2D_B ibmData' fordData') perfResults</span><br><span class="line"></span><br><span class="line">    perfResults &lt;- testAlgorithm <span class="string">"Array2DRecursive"</span> (<span class="keyword">fun</span> () -&gt;</span><br><span class="line">        myDtwArray2DRecursive ibmData' fordData') perfResults</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">// Show aggregate results</span></span><br><span class="line">printfn <span class="string">"%20s %8s %8s %8s"</span> <span class="string">"algo"</span> <span class="string">"avg"</span> <span class="string">"min"</span> <span class="string">"max"</span></span><br><span class="line">perfResults</span><br><span class="line">|&gt; List.groupBy fst</span><br><span class="line">|&gt; List.map (<span class="keyword">fun</span> (k,v) -&gt; </span><br><span class="line">    (k, </span><br><span class="line">     List.averageBy snd v, </span><br><span class="line">     (List.min (List.map snd v)),</span><br><span class="line">     (List.max (List.map snd v))))</span><br><span class="line">|&gt; List.sortBy (<span class="keyword">fun</span> (_, avg, _, _) -&gt; avg)</span><br><span class="line">|&gt; List.iter (<span class="keyword">fun</span> (k, avg, min, max) -&gt; </span><br><span class="line">    printfn <span class="string">"%20s %8.1f %8.1f %8.1f"</span> k avg min max)</span><br></pre></td></tr></table></figure><p>Here are the average/min/max runtimes for each function.  I like to keep an eye on differences in run environments, so I run a couple different iterations using the REPL, fsharpi (Mono), and fsi (.NET CLR).  The results are below.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// REPL</span></span><br><span class="line">                algo      avg      min      max</span><br><span class="line">    Array2DRecursive    <span class="number">353.2</span>    <span class="number">329.1</span>    <span class="number">498.8</span> <span class="comment">// TCO!</span></span><br><span class="line">           Array2D_B   <span class="number">1750.2</span>   <span class="number">1681.5</span>   <span class="number">1966.7</span> <span class="comment">// Using custom min function</span></span><br><span class="line">                NDtw   <span class="number">1975.5</span>   <span class="number">1713.1</span>   <span class="number">2322.1</span> <span class="comment">// Baseline</span></span><br><span class="line">           Array2D_A  <span class="number">11874.8</span>  <span class="number">11627.4</span>  <span class="number">12141.0</span> <span class="comment">// Using List.min</span></span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fsharpi dtwcompare.fsx</span></span><br><span class="line">                algo      avg      min      max        </span><br><span class="line">    Array2DRecursive    <span class="number">547.5</span>    <span class="number">507.0</span>    <span class="number">592.4</span>        </span><br><span class="line">                NDtw   <span class="number">1055.8</span>    <span class="number">999.8</span>   <span class="number">1317.1</span>        </span><br><span class="line">           Array2D_B   <span class="number">1552.8</span>   <span class="number">1522.3</span>   <span class="number">1633.7</span>        </span><br><span class="line">           Array2D_A   <span class="number">6581.2</span>   <span class="number">4409.3</span>   <span class="number">8533.6</span>        </span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fsi dtwcompare.fsx (fsi version 4.40.23020.0)</span></span><br><span class="line">                algo      avg      min      max</span><br><span class="line">    Array2DRecursive    <span class="number">659.4</span>    <span class="number">556.6</span>    <span class="number">757.3</span></span><br><span class="line">                NDtw   <span class="number">1964.3</span>   <span class="number">1819.1</span>   <span class="number">2097.0</span></span><br><span class="line">           Array2D_B   <span class="number">2903.6</span>   <span class="number">2821.2</span>   <span class="number">3046.9</span></span><br><span class="line">           Array2D_A  <span class="number">13808.5</span>  <span class="number">13061.0</span>  <span class="number">14632.9</span></span><br></pre></td></tr></table></figure><p>The comparative performance is similar, although NDtw and version B flip flop positions.  Those two seem to run about the same, so that probably has more to do with what’s going on my machine at the time.  I did expect faster performance with fsi than fsharpi, so that is a bit of surprise.  It is just a reminder that assumptions should always be tested.  Investigating that further may be worthy of a blog post itself.  This has been an interesting examination into implementing a DTW algorithm.  It turned into more of an optimization exercise than I expected, which was a pleasant turn of events.  I hope this has been useful, and inspired more F# algorithm implementations, more dynamic time warping, and more tail calls! </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My recent post about &lt;a href=&quot;/2016/12/13/F-and-Dynamic-Time-Warping/&quot;&gt;Dynamic Time Warping&lt;/a&gt; used an external library.  It inspired me to implement the algorithm in &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  This is mostly just to see it in F#.  My last implementation was in &lt;a href=&quot;http://racket-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Racket&lt;/a&gt;, and I’m interested in the different language implementations. I use a pretty basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_time_warping#Implementation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Algorithm&lt;/a&gt;, nothing fancy. As part of this process I’ll be doing comparisons between &lt;a href=&quot;https://github.com/doblak/ndtw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NDtw&lt;/a&gt; and my code.  To be upfront, its not a perfect comparison.  NDtw has additional options and tracking that will reduce it’s max performance capabilities.  But for hacking around, the implementations will be close enough for alittle fun.  For anyone interested, unless otherwise specified, all of my results will be from the REPL in &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VS Code&lt;/a&gt; + &lt;a href=&quot;http://ionide.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ionide&lt;/a&gt; using &lt;a href=&quot;http://www.mono-project.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mono&lt;/a&gt; version 4.6.2.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="DTW" scheme="http://codesuji.com/tags/DTW/"/>
    
      <category term="Dynamic Time Warping" scheme="http://codesuji.com/tags/Dynamic-Time-Warping/"/>
    
      <category term="Signals" scheme="http://codesuji.com/tags/Signals/"/>
    
      <category term="Similarity" scheme="http://codesuji.com/tags/Similarity/"/>
    
      <category term="Optimization" scheme="http://codesuji.com/tags/Optimization/"/>
    
      <category term="Tail calls" scheme="http://codesuji.com/tags/Tail-calls/"/>
    
      <category term="Racket" scheme="http://codesuji.com/tags/Racket/"/>
    
      <category term="VS Code" scheme="http://codesuji.com/tags/VS-Code/"/>
    
      <category term="Ionide" scheme="http://codesuji.com/tags/Ionide/"/>
    
      <category term="Mono" scheme="http://codesuji.com/tags/Mono/"/>
    
  </entry>
  
  <entry>
    <title>F# and Dynamic Time Warping</title>
    <link href="http://codesuji.com/2016/12/13/F-and-Dynamic-Time-Warping/"/>
    <id>http://codesuji.com/2016/12/13/F-and-Dynamic-Time-Warping/</id>
    <published>2016-12-14T02:07:21.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Today I look at using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> with the <a href="https://github.com/doblak/ndtw" target="_blank" rel="noopener">NDtw</a> package.  This is so I can play with some <a href="https://en.wikipedia.org/wiki/Dynamic_time_warping" target="_blank" rel="noopener">dynamic time warping</a>.  In case you’re not familar with DTW, the TLDR version is that it is a method to compare timeseries data that can differ in frequency.  This allows for a more nuanced data comparison that can capture shifted, compressed, and extended patterns.  It’s a fun little algorithm to use and worth reading more about.</p><a id="more"></a><p>Onto the data. I’ve pulled an <a href="https://www.kaggle.com/wanghaohan/eeg-brain-wave-for-confusion" target="_blank" rel="noopener">EEG</a> dataset from Kaggle.  I’ve also included a copy <a href="/data/EEG_data.zip">here</a> for posterity sake.  It contains EEG data of subjects watching short videos.  The goal of the dataset is mental state classification.  I won’t be doing that here, but I can see using DTW as a method to facilitate classification based on channel smiliarties.</p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line">nuget FSharp.Charting</span><br><span class="line">nuget FSharp.Data</span><br><span class="line">nuget NDtw</span><br></pre></td></tr></table></figure><p>Here is my standard boilerplate code, along with the VideoId that I will be using for testing.  As a note, all of the data columns are floats, including the subject and video ids.  If I was doing something more serious I’d be inclined to convert these, but do do something quick I’ll deal with it.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/FSharp.Charting/lib/net40/FSharp.Charting.dll"</span></span><br><span class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></span><br><span class="line">#r <span class="string">"../packages/ndtw/lib/net40/ndtw.dll"</span></span><br><span class="line">#load <span class="string">"../packages/FSharp.Charting/FSharp.Charting.fsx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FSharp.Charting</span><br><span class="line"><span class="keyword">open</span> FSharp.Data</span><br><span class="line"><span class="keyword">open</span> NDtw</span><br><span class="line"></span><br><span class="line"><span class="comment">// Limit to only video 6</span></span><br><span class="line"><span class="keyword">let</span> videoIdFilter = <span class="number">6.</span> </span><br></pre></td></tr></table></figure><p>Load data using a type provider.  Since the file doesn’t have headers, I’ll use Schema to define the column names.  As a note, the <code>[&lt;Literal&gt;]</code> attribute on eegDataFile is so I can use the string in the CsvProvider.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> eegDataFile = <span class="string">"..\\data\\eeg\\eeg_data.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">EegData</span> </span>= CsvProvider&lt;eegDataFile, HasHeaders = <span class="keyword">false</span>, Schema = <span class="string">"SubjectID,VideoID,Attention,Mediation,RawEEG,Delta,Theta,Alpha1,Alpha2,Beta1,Beta2,Gamma1,Gamma2,PredefinedLabel,UserDefinedLabel"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fileData = EegData.Load eegDataFile</span><br><span class="line"><span class="keyword">let</span> allData = fileData.Rows </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subjectIds = fileData.Rows |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; x.SubjectID) |&gt; Seq.distinct </span><br></pre></td></tr></table></figure><p>I now create a function to extract subject and video specific rows from the dataset.  I also reduce the dataset to a single value for the signal.  I’ve decided to use the Theta channel.  This is arbitrary, but is primarily due to this quote from the dataset’s Kaggle page “Past research has indicated that Theta signal is correlated with confusion level.”  This leads me to believe it might be the most likely channel to find interesting comparisons.  So the resulting charts are easier to read, I limit the dataset to the first 100 rows of data per subject/video combination.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get subject &amp; video specific data, only pull the first 100 records of the dataset</span></span><br><span class="line"><span class="keyword">let</span> dataset subjectId videoId = </span><br><span class="line">    allData</span><br><span class="line">    |&gt; Seq.filter(<span class="keyword">fun</span> x -&gt; x.SubjectID = subjectId &amp;&amp; x.VideoID = videoId)</span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; x.Theta) </span><br><span class="line">    |&gt; Seq.take <span class="number">100</span></span><br><span class="line">    |&gt; Seq.toList</span><br></pre></td></tr></table></figure><p>Here is the dynamic time warping distance calculation function.  The call is straight foward.  After all this setup its almost anticlimatic. It expects 2 parameters, both being an array of values. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the distance between two signals</span></span><br><span class="line"><span class="keyword">let</span> distance (a:float seq) (b:float seq) = </span><br><span class="line">    <span class="keyword">let</span> dtw = <span class="keyword">new</span> Dtw(</span><br><span class="line">        a |&gt; Seq.toArray,</span><br><span class="line">        b |&gt; Seq.toArray)</span><br><span class="line">    dtw.GetCost()</span><br></pre></td></tr></table></figure><p>The NDtw library allows for a more complicated DTW call if so desired.  I’ve made an alternate distance function using the more complex version.  As an example, it allows for different distance calculations: Euclidean, Manhattan, Maximum, SquaredEuclidean. It also allows for limitations how much the path diverges from the standard path.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the distance between two signals (using more advanced dtw call)</span></span><br><span class="line"><span class="keyword">let</span> distanceAdvanced (a:float seq) (b:float seq) = </span><br><span class="line">    <span class="keyword">let</span> dtw = <span class="keyword">new</span> Dtw(</span><br><span class="line">        a |&gt; Seq.toArray,</span><br><span class="line">        b |&gt; Seq.toArray,</span><br><span class="line">        DistanceMeasure.Euclidean,</span><br><span class="line">        <span class="keyword">true</span>, <span class="comment">// boundaryConstraintStart </span></span><br><span class="line">        <span class="keyword">true</span>, <span class="comment">// boundaryConstraintEnd</span></span><br><span class="line">        Nullable&lt;int&gt;(<span class="number">2</span>), <span class="comment">// slopeStepSizeDiagonal</span></span><br><span class="line">        Nullable&lt;int&gt;(<span class="number">2</span>), <span class="comment">// slopStepSizeAside</span></span><br><span class="line">        Nullable&lt;int&gt;(<span class="number">2</span>)) <span class="comment">// sakoeChibaMaxShift</span></span><br><span class="line">    dtw.GetCost()</span><br></pre></td></tr></table></figure><p>As a short aside, the library offers a couple other bits of useful functionality that I am not using right now, but worth mentioning.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example comparison of 2 small datasets</span></span><br><span class="line"><span class="keyword">let</span> exampleDtw = <span class="keyword">new</span> Dtw(</span><br><span class="line">    [| <span class="number">1.</span>; <span class="number">3.</span>; <span class="number">7.</span>; <span class="number">8.</span>; <span class="number">11.</span>;  <span class="number">6.</span>; <span class="number">6.</span>; |],</span><br><span class="line">    [| <span class="number">3.</span>; <span class="number">6.</span>; <span class="number">3.</span>; <span class="number">7.</span>; <span class="number">13.</span>; <span class="number">12.</span>; <span class="number">7.</span>; |])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the coordinate path used for the best match between the datasets</span></span><br><span class="line">exampleDtw.GetPath()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it : (int * int) [] =</span><br><span class="line">  [|(<span class="number">0</span>, <span class="number">0</span>); (<span class="number">1</span>, <span class="number">1</span>); (<span class="number">1</span>, <span class="number">2</span>); (<span class="number">2</span>, <span class="number">3</span>); (<span class="number">3</span>, <span class="number">3</span>); (<span class="number">4</span>, <span class="number">4</span>); (<span class="number">4</span>, <span class="number">5</span>); (<span class="number">5</span>, <span class="number">6</span>); (<span class="number">6</span>, <span class="number">6</span>)|]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the matrix of distance comparisons on a point by point basis</span></span><br><span class="line">exampleDtw.GetDistanceMatrix()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it : float [] [] =</span><br><span class="line">  [|[|<span class="number">2.0</span>; <span class="number">5.0</span>; <span class="number">2.0</span>; <span class="number">6.0</span>; <span class="number">12.0</span>; <span class="number">11.0</span>; <span class="number">6.0</span>; <span class="number">0.0</span>|];</span><br><span class="line">    [|<span class="number">0.0</span>; <span class="number">3.0</span>; <span class="number">0.0</span>; <span class="number">4.0</span>; <span class="number">10.0</span>; <span class="number">9.0</span>; <span class="number">4.0</span>; <span class="number">0.0</span>|];</span><br><span class="line">    [|<span class="number">4.0</span>; <span class="number">1.0</span>; <span class="number">4.0</span>; <span class="number">0.0</span>; <span class="number">6.0</span>; <span class="number">5.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|];</span><br><span class="line">    [|<span class="number">5.0</span>; <span class="number">2.0</span>; <span class="number">5.0</span>; <span class="number">1.0</span>; <span class="number">5.0</span>; <span class="number">4.0</span>; <span class="number">1.0</span>; <span class="number">0.0</span>|];</span><br><span class="line">    [|<span class="number">8.0</span>; <span class="number">5.0</span>; <span class="number">8.0</span>; <span class="number">4.0</span>; <span class="number">2.0</span>; <span class="number">1.0</span>; <span class="number">4.0</span>; <span class="number">0.0</span>|];</span><br><span class="line">    [|<span class="number">3.0</span>; <span class="number">0.0</span>; <span class="number">3.0</span>; <span class="number">1.0</span>; <span class="number">7.0</span>; <span class="number">6.0</span>; <span class="number">1.0</span>; <span class="number">0.0</span>|];</span><br><span class="line">    [|<span class="number">3.0</span>; <span class="number">0.0</span>; <span class="number">3.0</span>; <span class="number">1.0</span>; <span class="number">7.0</span>; <span class="number">6.0</span>; <span class="number">1.0</span>; <span class="number">0.0</span>|];</span><br><span class="line">    [|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]|]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the matrix of cost (aka difference) between the datasets </span></span><br><span class="line">exampleDtw.GetCostMatrix()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it : float [] [] =</span><br><span class="line">  [|[|<span class="number">11.0</span>; <span class="number">11.0</span>; <span class="number">8.0</span>; <span class="number">16.0</span>; <span class="number">28.0</span>; <span class="number">22.0</span>; <span class="number">17.0</span>; infinity|];</span><br><span class="line">    [|<span class="number">9.0</span>; <span class="number">9.0</span>; <span class="number">6.0</span>; <span class="number">10.0</span>; <span class="number">22.0</span>; <span class="number">16.0</span>; <span class="number">11.0</span>; infinity|];</span><br><span class="line">    [|<span class="number">15.0</span>; <span class="number">11.0</span>; <span class="number">10.0</span>; <span class="number">6.0</span>; <span class="number">13.0</span>; <span class="number">12.0</span>; <span class="number">7.0</span>; infinity|];</span><br><span class="line">    [|<span class="number">18.0</span>; <span class="number">13.0</span>; <span class="number">11.0</span>; <span class="number">6.0</span>; <span class="number">8.0</span>; <span class="number">7.0</span>; <span class="number">7.0</span>; infinity|];</span><br><span class="line">    [|<span class="number">26.0</span>; <span class="number">22.0</span>; <span class="number">17.0</span>; <span class="number">9.0</span>; <span class="number">5.0</span>; <span class="number">3.0</span>; <span class="number">6.0</span>; infinity|];</span><br><span class="line">    [|<span class="number">21.0</span>; <span class="number">18.0</span>; <span class="number">18.0</span>; <span class="number">15.0</span>; <span class="number">14.0</span>; <span class="number">7.0</span>; <span class="number">2.0</span>; infinity|];</span><br><span class="line">    [|<span class="number">21.0</span>; <span class="number">18.0</span>; <span class="number">18.0</span>; <span class="number">15.0</span>; <span class="number">14.0</span>; <span class="number">7.0</span>; <span class="number">1.0</span>; infinity|];</span><br><span class="line">    [|infinity; infinity; infinity; infinity; infinity; infinity; infinity; infinity|]|]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get difference between datasets</span></span><br><span class="line">exampleDtw.GetCost()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it : float = <span class="number">11.0</span></span><br></pre></td></tr></table></figure><p>Back to the task at hand, I build a function to compare each subject’s signal against each other subject’s signal.  Then I get the best match I can find and store the results in subject1, subject2, and difference.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compare each subject against every other subject</span></span><br><span class="line"><span class="keyword">let</span> comparisons = </span><br><span class="line">    subjectIds</span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; </span><br><span class="line">        subjectIds</span><br><span class="line">        |&gt; Seq.filter (<span class="keyword">fun</span> y -&gt; y &lt;&gt; x)</span><br><span class="line">        |&gt; Seq.map (<span class="keyword">fun</span> y -&gt; </span><br><span class="line">            <span class="keyword">let</span> d = distance (dataset x videoIdFilter) (dataset y videoIdFilter)</span><br><span class="line">            (x, y, d)))</span><br><span class="line">    |&gt; Seq.concat</span><br><span class="line">    |&gt; Seq.sortBy (<span class="keyword">fun</span> (_, _, d) -&gt; d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> (subject1, subject2, difference) = </span><br><span class="line">    comparisons</span><br><span class="line">    |&gt; Seq.take <span class="number">1</span></span><br><span class="line">    |&gt; Seq.exactlyOne</span><br></pre></td></tr></table></figure><p>For visualization purposes, I create a comparison chart for each subject against Subject 1.  Then I save the charts to files.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Chart.Combine([</span><br><span class="line">    Chart.FastLine(dataset subject1 videoIdFilter, Name=sprintf <span class="string">"Subject %1.0f"</span> subject1).WithLegend(<span class="keyword">true</span>);</span><br><span class="line">    Chart.FastLine(dataset subject2 videoIdFilter, Name=sprintf <span class="string">"Subject %1.0f"</span> subject2).WithLegend(<span class="keyword">true</span>)])</span><br><span class="line">|&gt; Chart.WithTitle(String.Format(<span class="string">"Difference: &#123;0:n1&#125;"</span>, difference))</span><br><span class="line">|&gt; Chart.Show</span><br><span class="line"></span><br><span class="line"><span class="comment">// Show comparison charts</span></span><br><span class="line">comparisons</span><br><span class="line"><span class="comment">// Only include matches against subject1</span></span><br><span class="line">|&gt; Seq.filter (<span class="keyword">fun</span> (s1, s2, d) -&gt; s1 = subject1)</span><br><span class="line"><span class="comment">// Exclude subject1 vs. subject1</span></span><br><span class="line">|&gt; Seq.filter (<span class="keyword">fun</span> (s1, s2, d) -&gt; s2 &lt;&gt; subject1)</span><br><span class="line"><span class="comment">// Chart each pair</span></span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> (s1, s2, d) -&gt; </span><br><span class="line">    Chart.Combine([</span><br><span class="line">        Chart.FastLine(dataset s1 videoIdFilter, Name=sprintf <span class="string">"Subject %1.0f"</span> s1).WithLegend(<span class="keyword">true</span>);</span><br><span class="line">        Chart.FastLine(dataset s2 videoIdFilter, Name=sprintf <span class="string">"Subject %1.0f"</span> s2).WithLegend(<span class="keyword">true</span>)])</span><br><span class="line">    |&gt; Chart.WithTitle(String.Format(<span class="string">"Difference: &#123;0:n1&#125;)"</span>, d))</span><br><span class="line">    |&gt; Chart.WithYAxis(Min = <span class="number">0.</span>, Max = <span class="number">1000000.</span>)</span><br><span class="line">    |&gt; Chart.Save (Path.Combine(__SOURCE_DIRECTORY__, String.Format(<span class="string">@"..\\data\\eeg\\chart_&#123;0:n0&#125;_&#123;1:n0&#125;.png"</span>, s1, s2)))</span><br><span class="line">    <span class="comment">//|&gt; Chart.Show</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>Here are the top couple matches, in the format (subject1, subject2, distance).</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Show distances for our winner </span></span><br><span class="line">comparisons</span><br><span class="line">|&gt; Seq.filter (<span class="keyword">fun</span> (s1, _, _) -&gt; s1 = <span class="number">1.0</span>)</span><br><span class="line">|&gt; Seq.sortBy (<span class="keyword">fun</span> (_, _, d) -&gt; d)</span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> (s1, s2, d) -&gt; printfn <span class="string">"%1.0f %1.0f %10.1f"</span> s1 s2 d)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">7</span>  <span class="number">4442366.0</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span>  <span class="number">5256824.0</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span>  <span class="number">6801045.0</span></span><br><span class="line"><span class="number">1</span> <span class="number">9</span>  <span class="number">9462037.0</span></span><br><span class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">11714938.0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">12763188.0</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here is the top signal match.</p><p><img src="/images/dtw1/chart_1_7.png" alt="Best Match"></p><p>Here are the other subjects compared to subject 1.</p><p><img src="/images/dtw1/chart_1_4.png" alt="Comparison: Signal 1 and Signal 4"></p><p><img src="/images/dtw1/chart_1_2.png" alt="Comparison: Signal 1 and Signal 2"></p><p><img src="/images/dtw1/chart_1_9.png" alt="Comparison: Signal 1 and Signal 9"></p><p><img src="/images/dtw1/chart_1_8.png" alt="Comparison: Signal 1 and Signal 8"></p><p><img src="/images/dtw1/chart_1_0.png" alt="Comparison: Signal 1 and Signal 0"></p><p><img src="/images/dtw1/chart_1_6.png" alt="Comparison: Signal 1 and Signal 6"></p><p><img src="/images/dtw1/chart_1_3.png" alt="Comparison: Signal 1 and Signal 3"></p><p><img src="/images/dtw1/chart_1_5.png" alt="Comparison: Signal 1 and Signal 5"></p><p>There is it.  The best match it can find is between subjects 1 and 7, although 1 and 4 are a close second. This has been a fun experiment.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I look at using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; with the &lt;a href=&quot;https://github.com/doblak/ndtw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NDtw&lt;/a&gt; package.  This is so I can play with some &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_time_warping&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dynamic time warping&lt;/a&gt;.  In case you’re not familar with DTW, the TLDR version is that it is a method to compare timeseries data that can differ in frequency.  This allows for a more nuanced data comparison that can capture shifted, compressed, and extended patterns.  It’s a fun little algorithm to use and worth reading more about.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="DTW" scheme="http://codesuji.com/tags/DTW/"/>
    
      <category term="Dynamic Time Warping" scheme="http://codesuji.com/tags/Dynamic-Time-Warping/"/>
    
      <category term="Signals" scheme="http://codesuji.com/tags/Signals/"/>
    
      <category term="Similarity" scheme="http://codesuji.com/tags/Similarity/"/>
    
      <category term="EEG" scheme="http://codesuji.com/tags/EEG/"/>
    
      <category term="Kaggle" scheme="http://codesuji.com/tags/Kaggle/"/>
    
  </entry>
  
  <entry>
    <title>Decision Trees with F# and Accord.NET (Part 2)</title>
    <link href="http://codesuji.com/2016/12/07/Decision-Trees-with-F-and-Accord-NET-Part-2/"/>
    <id>http://codesuji.com/2016/12/07/Decision-Trees-with-F-and-Accord-NET-Part-2/</id>
    <published>2016-12-08T03:12:19.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>This is part 2 of my attempt to use an <a href="http://accord-framework.net/" target="_blank" rel="noopener">Accord.NET</a> Decision Tree to classify Lego set themes using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>.  Just as a reminder, the original data source is <a href="http://rebrickable.com/downloads" target="_blank" rel="noopener">Rebrickable</a>.  You can find <a href="/2016/12/05/Decision-Trees-with-F-and-Accord-NET-Part-1">Part 1</a> here.</p><a id="more"></a><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line">nuget Accord</span><br><span class="line">nuget Accord.Math</span><br><span class="line">nuget Accord.Statistics</span><br><span class="line">nuget Accord.MachineLearning</span><br><span class="line">nuget FSharp.Data</span><br></pre></td></tr></table></figure><p>This is the boring setup stuff.  It also includes some utility functions.  Not specific just to the utility functions, but one of my goals for these functions is flexibility.  I can add and remove features from the extract script without impacting code here.  This dynamic aspect of function building makes testing changes easier.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#i <span class="string">"../packages"</span></span><br><span class="line">#r <span class="string">"../packages/Accord/lib/net45/accord.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.MachineLearning/lib/net45/accord.machinelearning.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.Core.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Statistics/lib/net45/Accord.Statistics.dll"</span></span><br><span class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Accord</span><br><span class="line"><span class="keyword">open</span> Accord.MachineLearning</span><br><span class="line"><span class="keyword">open</span> Accord.MachineLearning.DecisionTrees</span><br><span class="line"><span class="keyword">open</span> Accord.MachineLearning.DecisionTrees.Learning</span><br><span class="line"><span class="keyword">open</span> Accord.Math</span><br><span class="line"><span class="keyword">open</span> Accord.Statistics.Analysis</span><br><span class="line"><span class="keyword">open</span> FSharp.Data</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shuffle an array (in-place)</span></span><br><span class="line"><span class="keyword">let</span> shuffle (a:<span class="symbol">'a</span>[]) =</span><br><span class="line">    <span class="keyword">let</span> swapByIndex i j =</span><br><span class="line">        <span class="keyword">let</span> tmp = a.[i]</span><br><span class="line">        a.[i] &lt;- a.[j]</span><br><span class="line">        a.[j] &lt;- tmp</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> maxIndex = Array.length a - <span class="number">1</span></span><br><span class="line">    [|<span class="number">0.</span>.maxIndex|] </span><br><span class="line">    |&gt; Array.iter (<span class="keyword">fun</span> i -&gt; swapByIndex i (rand.Next maxIndex))</span><br><span class="line">    a</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send a tree + input + output and generate a tuple with results for comparison</span></span><br><span class="line"><span class="keyword">let</span> getResults (tree:DecisionTree) (inputs:float[][]) (outputs:int[]) =</span><br><span class="line">    Array.zip inputs outputs</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> (i,o) -&gt; (i, o, tree.Decide(i)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Calculate number of correct predictions</span></span><br><span class="line"><span class="keyword">let</span> resultsTotalCorrect results = </span><br><span class="line">    results</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> (_, actual:int, predicted:int) -&gt; </span><br><span class="line">        <span class="keyword">if</span> actual = predicted <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">    |&gt; Array.fold (+) <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the input and output datasets to get correct prediction stats</span></span><br><span class="line"><span class="keyword">let</span> processResults tree inputs outputs = </span><br><span class="line">    <span class="keyword">let</span> results = getResults tree inputs outputs</span><br><span class="line">    (</span><br><span class="line">        results, </span><br><span class="line">        resultsTotalCorrect results</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display results</span></span><br><span class="line"><span class="keyword">let</span> showResults description correct total =</span><br><span class="line">    printfn <span class="string">"%s - Direct row match  : Correct %d/%d (%.3f)"</span> description correct total (float(correct) / (float(total)))</span><br></pre></td></tr></table></figure><p>Here are some data transformation functions. <em>buildTrainTestIndexes</em> generates a list of indexes for the training and test sets.  The data is randomized and all records are in one and only one set (no overlap between train and test).  <em>splitDataset</em> does the actual split into train and test sets.  <em>splitDataIntoInputAndOutput</em> breaks a dataset into inputs and outputs for decision tree consumption.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Build a list of indexes for the train and test sets</span></span><br><span class="line"><span class="comment">// Current implementation assigns a random 'trainpercent' of the indexes</span></span><br><span class="line"><span class="comment">// to the trainingset, and the remainder to the test set</span></span><br><span class="line"><span class="keyword">let</span> buildTrainTestIndexes (length:int) (trainPercent:float) :(int[] * int[]) = </span><br><span class="line">    <span class="keyword">let</span> splitIndex = int(Math.Floor(trainPercent * float(length<span class="number">-1</span>)))</span><br><span class="line">    <span class="keyword">let</span> indexes = [|<span class="number">0.</span>.length - <span class="number">1</span>|]</span><br><span class="line">    shuffle indexes |&gt; ignore</span><br><span class="line">    (indexes.[<span class="number">0.</span>.splitIndex],  <span class="comment">// training indexes</span></span><br><span class="line">     indexes.[splitIndex+<span class="number">1.</span>.])  <span class="comment">// testing indexes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Split a dataset into a trainingset and a testing set (with no overlap)</span></span><br><span class="line"><span class="keyword">let</span> splitDataset (d:list&lt;<span class="symbol">'a</span>&gt;) (trainPercent:float) =</span><br><span class="line">    <span class="keyword">let</span> (trainIndexes, testIndexes) = buildTrainTestIndexes (List.length d) trainPercent</span><br><span class="line">    (trainIndexes |&gt; Array.map (<span class="keyword">fun</span> i -&gt; List.item i d),  <span class="comment">// training set</span></span><br><span class="line">     testIndexes  |&gt; Array.map (<span class="keyword">fun</span> i -&gt; List.item i d))  <span class="comment">// testing set</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Splits dataset into its input and output </span></span><br><span class="line"><span class="comment">// Assumption: row's first column is label (output)</span></span><br><span class="line"><span class="keyword">let</span> splitDataIntoInputAndOutput (d:<span class="symbol">'a</span>[][]) = </span><br><span class="line">    (</span><br><span class="line">        d</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.[<span class="number">1.</span>.(Array.length row - <span class="number">1</span>)]),</span><br><span class="line">        d</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.[<span class="number">0</span>])</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>Here are decision tree setup specific functions.  The decision tree uses a DecisionVariable collection. Decision Tree ranges come in different flavors, but all my features are double, thus DoubleRange.  The other point of interest is <em>decisionVariablesIList</em>, this is necessarily because the F# list as I was using it didn’t meet the interface needs.  This very well could be something I missed on my part, but this seemed like the only way to resolve the conflict.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newRangeFromColumn (d:Double[][]) (i:int) = </span><br><span class="line">    <span class="keyword">new</span> DoubleRange(</span><br><span class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.min,</span><br><span class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.max)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new decision variable for a column</span></span><br><span class="line"><span class="keyword">let</span> newDecisionVariableFromColumn (d:Double[][]) (i:int) =</span><br><span class="line">    <span class="keyword">new</span> DecisionVariable((sprintf <span class="string">"col%d"</span> i), newRangeFromColumn d i)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a list of decision variables for the DecisionTree</span></span><br><span class="line"><span class="keyword">let</span> decisionVariables (inputs:float[][]) = </span><br><span class="line">    [<span class="number">0.</span>.(Array.length inputs.[<span class="number">0</span>])<span class="number">-1</span>] </span><br><span class="line">    |&gt; List.map (newDecisionVariableFromColumn inputs)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a list of decision variables for the DecisionTree</span></span><br><span class="line"><span class="keyword">let</span> decisionVariablesIList (inputs:float[][]) = </span><br><span class="line">    <span class="keyword">let</span> variableList = <span class="keyword">new</span> Collections.Generic.List&lt;DecisionVariable&gt;()</span><br><span class="line">    decisionVariables inputs |&gt; List.iter (<span class="keyword">fun</span> x -&gt; variableList.Add(x))</span><br><span class="line">    variableList</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get number of classes </span></span><br><span class="line"><span class="keyword">let</span> numClasses (d:int[]) = Array.max d - Array.min d + <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>All the prep functions are in place.  First I load the data.  Often I use the CsvProvider, but in this case I want the data directly in an array.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataset = </span><br><span class="line">    Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"..\\data\\legos\\aggregatedata.csv"</span>)</span><br><span class="line">    |&gt; File.ReadLines</span><br><span class="line">    |&gt; Seq.skip <span class="number">1</span> <span class="comment">// Skip header row</span></span><br><span class="line">    <span class="comment">//|&gt; Seq.take 10000 // For testing only take a subset of records</span></span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt;x.Split ',')</span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; Array.map (<span class="keyword">fun</span> y -&gt; float(y)) x)</span><br><span class="line">    |&gt; Seq.toList</span><br></pre></td></tr></table></figure><p>Here I split data into train and test sets, where 70% of the data is train.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Split dataset into train and test sets </span></span><br><span class="line"><span class="keyword">let</span> (trainData, testData) = splitDataset dataset <span class="number">0.7</span></span><br><span class="line">printfn <span class="string">"Dataset Sizes: All: %d Train: %d Test: %d"</span> (List.length dataset) (Array.length trainData) (Array.length testData)</span><br></pre></td></tr></table></figure><p>Now I split the train and test sets into input/output arrays.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Split training sets into seperate components for decision tree</span></span><br><span class="line"><span class="keyword">let</span> (trainInputs, trainOutputs) = splitDataIntoInputAndOutput trainData    </span><br><span class="line"><span class="keyword">let</span> (testInputs, testOutputs) = splitDataIntoInputAndOutput testData    </span><br></pre></td></tr></table></figure><p>Here I create and train the tree.  I use the C4.5 algorithm for the learning method.  Accord also offers ID3 for learning as well.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Build the decision tree from training data</span></span><br><span class="line"><span class="keyword">let</span> tree = <span class="keyword">new</span> DecisionTree(decisionVariablesIList trainInputs, numClasses (Array.map int trainOutputs))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Train the tree</span></span><br><span class="line"><span class="keyword">let</span> c45 = <span class="keyword">new</span> C45Learning(tree)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> error = c45.Learn(trainInputs, (Array.map int trainOutputs))</span><br></pre></td></tr></table></figure><p>Once the tree is trained, I apply the results to the train and test sets and then display the results.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Process train and test results</span></span><br><span class="line"><span class="keyword">let</span> (trainResults, trainTotalCorrect) = processResults tree trainInputs (Array.map int trainOutputs)    </span><br><span class="line"><span class="keyword">let</span> (testResults, testTotalCorrect) = processResults tree testInputs (Array.map int testOutputs)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Final display of results</span></span><br><span class="line">showResults <span class="string">"Train"</span> trainTotalCorrect (Array.length trainInputs)</span><br><span class="line">showResults <span class="string">"Test "</span> testTotalCorrect (Array.length testInputs)</span><br></pre></td></tr></table></figure><p>Below are the results.  They are disappointing, and there is certainly room for improvement.  But its a start. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Train - Direct row match  : Correct 5624/7584 (0.742)</span><br><span class="line">Test  - Direct row match  : Correct 1342/3250 (0.413)</span><br></pre></td></tr></table></figure><p>On a whim I attempt to use the ID3 learner instead.  This method requires discrete values.  It’s easy enough to convert all the doubles to ints.  Knowing that most of my columns are percentages, I multiple by 100, then convert to an int.  Unfortunantly, my system ran out of memory on this test.  I used fsharpi (Mono) as well as fsi (.NET CLR), but it gave me the same issue.  This deserves some additional follow-up, but I don’t have time for that rabbit-hole right now.  Below is the code I used to try the ID3 learner, if someone sees what is wrong, feel free to drop me a line.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Below is the hacked up ID3 variant of my test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newRangeFromColumnInt (d:int[][]) (i:int) = </span><br><span class="line">    <span class="keyword">new</span> IntRange(</span><br><span class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.min,</span><br><span class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.max)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDecisionVariableFromColumnInt (d:int[][]) (i:int) =</span><br><span class="line">    <span class="keyword">new</span> DecisionVariable((sprintf <span class="string">"col%d"</span> i), newRangeFromColumnInt d i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decisionVariablesInt (inputs:int[][]) = </span><br><span class="line">    [<span class="number">0.</span>.(Array.length inputs.[<span class="number">0</span>])<span class="number">-1</span>] </span><br><span class="line">    |&gt; List.map (newDecisionVariableFromColumnInt inputs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decisionVariablesIListInt (inputs:int[][]) = </span><br><span class="line">    <span class="keyword">let</span> variableList = <span class="keyword">new</span> Collections.Generic.List&lt;DecisionVariable&gt;()</span><br><span class="line">    decisionVariablesInt inputs |&gt; List.iter (<span class="keyword">fun</span> x -&gt; variableList.Add(x))</span><br><span class="line">    variableList</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inputsInt i = </span><br><span class="line">    (Array.map (<span class="keyword">fun</span> x -&gt; Array.map (<span class="keyword">fun</span> y -&gt; int(y * <span class="number">100.</span>)) x) i)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> treeId3 = <span class="keyword">new</span> DecisionTree(decisionVariablesIListInt (inputsInt trainInputs), numClasses (Array.map int trainOutputs))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> id3 = <span class="keyword">new</span> ID3Learning(treeId3)</span><br><span class="line"></span><br><span class="line">id3.ParallelOptions.MaxDegreeOfParallelism &lt;- <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> errorId3 = id3.Learn((inputsInt trainInputs), (Array.map int trainOutputs))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> (trainResultsId3, trainTotalCorrectId3) = processResultsId3 treeId3 (inputsInt trainInputs) (Array.map int trainOutputs)    </span><br><span class="line"><span class="keyword">let</span> (testResultsId3, testTotalCorrectId3) = processResultsId3 treeId3 (inputsInt testInputs) (Array.map int testOutputs)</span><br><span class="line"></span><br><span class="line">showResults <span class="string">"Train"</span> trainTotalCorrectId3 (Array.length trainInputs)</span><br><span class="line">showResults <span class="string">"Test "</span> testTotalCorrectId3 (Array.length testInputs)</span><br></pre></td></tr></table></figure><p>Although the end results were anticlimatic, it’s nice to see it all come together.  One consolation is with over 100 possible themes, 41% on the test set isn’t the worst thing in the world.  Hopefully this has offered some insight into how to use a decision tree in Accord.NET.  Until next time…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is part 2 of my attempt to use an &lt;a href=&quot;http://accord-framework.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Accord.NET&lt;/a&gt; Decision Tree to classify Lego set themes using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  Just as a reminder, the original data source is &lt;a href=&quot;http://rebrickable.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rebrickable&lt;/a&gt;.  You can find &lt;a href=&quot;/2016/12/05/Decision-Trees-with-F-and-Accord-NET-Part-1&quot;&gt;Part 1&lt;/a&gt; here.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Accord.NET" scheme="http://codesuji.com/tags/Accord-NET/"/>
    
      <category term="Decision Trees" scheme="http://codesuji.com/tags/Decision-Trees/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Legos" scheme="http://codesuji.com/tags/Legos/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="Classification" scheme="http://codesuji.com/tags/Classification/"/>
    
      <category term="Statistics" scheme="http://codesuji.com/tags/Statistics/"/>
    
  </entry>
  
  <entry>
    <title>Decision Trees with F# and Accord.NET (Part 1)</title>
    <link href="http://codesuji.com/2016/12/05/Decision-Trees-with-F-and-Accord-NET-Part-1/"/>
    <id>http://codesuji.com/2016/12/05/Decision-Trees-with-F-and-Accord-NET-Part-1/</id>
    <published>2016-12-06T02:13:22.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>It is time for an exploration into using a Decision Tree to classify Lego set themes using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="http://accord-framework.net/" target="_blank" rel="noopener">Accord.NET</a>.  </p><p>First things first, the data. <a href="http://rebrickable.com/downloads" target="_blank" rel="noopener">Rebrickable</a> has downloadable datasets for Lego sets and pieces.  I’ll use the <code>sets.csv</code> file as the primary dataset driver, but will grab information from <code>sets_pieces.csv</code>, <code>pieces.csv</code>, and <code>colors.csv</code> for feature creation.  The files are not in an format appropriate for a decision tree, so some transformations will need to happen first.  I don’t want the post to get too long, so this project will be broken into two components.  Part 1 will be building the feature file and getting the data into the desired comsumable format, <a href="/2016/12/07/Decision-Trees-with-F-and-Accord-NET-Part-2">Part 2</a> will actually use the file to get to the end goal.</p><a id="more"></a><p>Second, the approach.  The goal of part 1 is to do all transformations here.  I want the end result to be a file that can be directly loaded into part 2’s code.  I will use/create a series of features.  Year is the set’s year, and is directly provided.  The following features will need to be grouped and calculated.  First is “% of the set’s pieces are <x> type” for a couple major piece types.  Second, is “% of the set’s pieces are <x> color” for major color groups.  Lastly, the prediction target is theme.  The dataset has up to three themes per set (T1, T2, T3).  For simplicity sake I am only going to use one theme (T1) as the target theme to predict.  This will restrict the quality of my results, but as a proof-of-concept it will be good enough.  Hopefully all this give me some interesting results.</x></x></p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample <code>paket.dependencies</code> file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line">nuget FSharp.Data</span><br></pre></td></tr></table></figure><p>This is the boring setup stuff.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FSharp.Data</span><br></pre></td></tr></table></figure><p>Next it is time to leverage the CsvProvider for the input files.  The below code configures the types as well as loads the data. You’ve probably read it a million times, but Type Providers are really helpful to get get working with the data quickly.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File structures</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoSets</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/sets.csv"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoSetPieces</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/set_pieces.csv"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoPieces</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/pieces.csv"</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoColors</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/colors.csv"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load files</span></span><br><span class="line"><span class="keyword">let</span> legoSets = LegoSets.Load <span class="string">"../data/legos/sets.csv"</span></span><br><span class="line"><span class="keyword">let</span> legoSetPieces = LegoSetPieces.Load <span class="string">"../data/legos/set_pieces.csv"</span></span><br><span class="line"><span class="keyword">let</span> legoPieces = LegoPieces.Load <span class="string">"../data/legos/pieces.csv"</span></span><br><span class="line"><span class="keyword">let</span> legoColors = LegoColors.Load <span class="string">"../data/legos/colors.csv"</span></span><br></pre></td></tr></table></figure><p>When building the features, I will be counting the number of specific colors in the set.  There are 135 different colors.  I only care about eight different colors: Red, Green, Blue, White, Black, Gray, Silver, and Translucent.  I will ignore the rest.  As an expedient hack, I search for the color text in the description.  So ‘Red’, ‘Trans-Red’, and ‘Dark Red’ all count as ‘Red’.  I then store these indexes for later searching.  This method misses things like ‘Pink’, which is in the red family.  It also means ‘Trans-Red’ counts as a red piece and a translucent piece.  For a real problem I would be more thorough, but I just want to get to the decision tree.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getColorIndexes color =</span><br><span class="line">    legoColors.Rows </span><br><span class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> x -&gt; x.Descr.Contains(color)) </span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; x.Id) </span><br><span class="line">    |&gt; Seq.toList</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> redIndexes = getColorIndexes <span class="string">"Red"</span></span><br><span class="line"><span class="keyword">let</span> greenIndexes = getColorIndexes <span class="string">"Green"</span></span><br><span class="line"><span class="keyword">let</span> blueIndexes = getColorIndexes <span class="string">"Blue"</span></span><br><span class="line"><span class="keyword">let</span> whiteIndexes = getColorIndexes <span class="string">"White"</span></span><br><span class="line"><span class="keyword">let</span> blackIndexes = getColorIndexes <span class="string">"Black"</span></span><br><span class="line"><span class="keyword">let</span> grayIndexes = getColorIndexes <span class="string">"Gray"</span></span><br><span class="line"><span class="keyword">let</span> silverIndexes = getColorIndexes <span class="string">"Silver"</span></span><br><span class="line"><span class="keyword">let</span> translucentIndexes = getColorIndexes <span class="string">"Trans"</span></span><br></pre></td></tr></table></figure><p>To perform piece counts in the sets I’ll need to do some grouping.  I will use <em>SetCountsDetail</em> as an intermediate aggregation record type.  <em>SetDetail</em> will be my final output form.  You may notice I use counts for the aggregation, but in the final output I store “Percent of the set”.  I feel this should allow the feature values to be consistent across sets.  I also use the function <em>setCountsDetailSum</em> when folding group sums together.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Piece-type counts for sets (used for aggregation)</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">SetCountsDetail</span> </span>= &#123; </span><br><span class="line">    SetId: string; </span><br><span class="line">    BricksCount: int; </span><br><span class="line">    PlatesCount: int; </span><br><span class="line">    MinifigsCount: int;</span><br><span class="line">    PanelsCount: int;</span><br><span class="line">    PlantsAndAnimalsCount: int;</span><br><span class="line">    TilesCount: int;</span><br><span class="line">    TechnicsCount: int;</span><br><span class="line">    RedCount: int;</span><br><span class="line">    GreenCount: int;</span><br><span class="line">    BlueCount: int;</span><br><span class="line">    WhiteCount: int;</span><br><span class="line">    BlackCount: int;</span><br><span class="line">    GrayCount: int;</span><br><span class="line">    SilverCount: int;</span><br><span class="line">    TranslucentCount: int&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set detail record (this is what gets written to the output file)</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">SetDetail</span> </span>= &#123; </span><br><span class="line">    SetId: string; </span><br><span class="line">    Year: int;</span><br><span class="line">    ThemeId: int;</span><br><span class="line">    PiecesCount: int; </span><br><span class="line">    BricksPct: float; </span><br><span class="line">    PlatesPct: float; </span><br><span class="line">    MinifigsPct: float </span><br><span class="line">    PanelsPct: float;</span><br><span class="line">    PlantsAndAnimalsPct: float;</span><br><span class="line">    TilesPct: float;</span><br><span class="line">    TechnicsPct: float;</span><br><span class="line">    RedPct: float;</span><br><span class="line">    GreenPct: float;</span><br><span class="line">    BluePct: float;</span><br><span class="line">    WhitePct: float;</span><br><span class="line">    BlackPct: float;</span><br><span class="line">    GrayPct: float;</span><br><span class="line">    SilverPct: float;</span><br><span class="line">    TranslucentPct: float&#125; <span class="keyword">with</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">member</span> toCsv d =</span><br><span class="line">        sprintf <span class="string">"%d,%d,%d,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f"</span> </span><br><span class="line">            d.ThemeId d.Year d.PiecesCount d.BricksPct d.PlatesPct d.MinifigsPct d.PanelsPct d.PlantsAndAnimalsPct d.TilesPct d.TechnicsPct d.RedPct d.GreenPct d.BluePct d.WhitePct d.BlackPct d.GrayPct d.SilverPct d.TranslucentPct</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Sum counts for SetCountsDetail (use in fold)</span></span><br><span class="line"><span class="keyword">let</span> setCountsDetailSum (a:SetCountsDetail) (b:SetCountsDetail) = </span><br><span class="line">    &#123;a <span class="keyword">with</span> </span><br><span class="line">        BricksCount = a.BricksCount + b.BricksCount;</span><br><span class="line">        PlatesCount = a.PlatesCount + b.PlatesCount;</span><br><span class="line">        MinifigsCount = a.MinifigsCount + b.MinifigsCount;</span><br><span class="line">        PanelsCount = a.PanelsCount + b.PanelsCount;</span><br><span class="line">        PlantsAndAnimalsCount = a.PlantsAndAnimalsCount + b.PlantsAndAnimalsCount;</span><br><span class="line">        TilesCount = a.TilesCount + b.TilesCount;</span><br><span class="line">        TechnicsCount = a.TechnicsCount + b.TechnicsCount;</span><br><span class="line">        RedCount = a.RedCount + b.RedCount;</span><br><span class="line">        GreenCount = a.GreenCount + b.GreenCount;</span><br><span class="line">        BlueCount = a.BlueCount + b.BlueCount;</span><br><span class="line">        WhiteCount = a.WhiteCount + b.WhiteCount;</span><br><span class="line">        BlackCount = a.BlackCount + b.BlackCount;</span><br><span class="line">        GrayCount = a.GrayCount + b.GrayCount;</span><br><span class="line">        SilverCount = a.SilverCount + b.SilverCount;</span><br><span class="line">        TranslucentCount = a.TranslucentCount + b.TranslucentCount&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Now I create a piece lookup using a Map (for the non-F#ers, think Dictionary).  I also filter only the piece type categories I care about.  There are 56, and for simplicity I will only look at seven.  I also group all “Technic*” categories into a single “Technic” category.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Build lookup for pieces</span></span><br><span class="line"><span class="keyword">let</span> pieceLookup = </span><br><span class="line">    legoPieces.Rows</span><br><span class="line">    <span class="comment">// Only include these categories</span></span><br><span class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> row -&gt; </span><br><span class="line">        row.Category = <span class="string">"Bricks"</span> || </span><br><span class="line">        row.Category = <span class="string">"Plates"</span> || </span><br><span class="line">        row.Category = <span class="string">"Minifigs"</span> ||</span><br><span class="line">        row.Category = <span class="string">"Panels"</span> ||</span><br><span class="line">        row.Category = <span class="string">"Plants and Animals"</span> ||</span><br><span class="line">        row.Category = <span class="string">"Tiles"</span> ||</span><br><span class="line">        row.Category.Contains(<span class="string">"Technic"</span>)</span><br><span class="line">        )</span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> row -&gt; (row.Piece_id, <span class="keyword">if</span> row.Category.Contains(<span class="string">"Technic"</span>) <span class="keyword">then</span> <span class="string">"Technic"</span> <span class="keyword">else</span> row.Category))</span><br><span class="line">    |&gt; Map</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Here I take a row and transpose it in the intermediate feature columns I want.  <em>isColorIndex</em> is a helper function to determine if the specified piece color is part of one my color groupings.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Convert data row to a SetCountsDetail record</span></span><br><span class="line"><span class="keyword">let</span> isColorIndex indexList colorIndex = </span><br><span class="line">    indexList |&gt; List.filter (<span class="keyword">fun</span> x -&gt; x = colorIndex) |&gt; List.length &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert data row to a SetCountsDetail record</span></span><br><span class="line"><span class="keyword">let</span> rowToSetCountsDetail (row:CsvProvider&lt;<span class="string">"../data/legos/set_pieces.csv"</span>&gt;.Row) = </span><br><span class="line">    <span class="keyword">let</span> c = pieceLookup.Item row.Piece_id</span><br><span class="line">    &#123;        </span><br><span class="line">        SetCountsDetail.SetId = row.Set_id;  </span><br><span class="line">        BricksCount = <span class="keyword">if</span> c = <span class="string">"Bricks"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        PlatesCount = <span class="keyword">if</span> c = <span class="string">"Plates"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        MinifigsCount = <span class="keyword">if</span> c = <span class="string">"Minifigs"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        PanelsCount = <span class="keyword">if</span> c = <span class="string">"Panels"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        PlantsAndAnimalsCount = <span class="keyword">if</span> c = <span class="string">"Plants and Animals"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        TilesCount = <span class="keyword">if</span> c = <span class="string">"Tiles"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        TechnicsCount = <span class="keyword">if</span> c = <span class="string">"Technic"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        RedCount = <span class="keyword">if</span> isColorIndex redIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        GreenCount = <span class="keyword">if</span> isColorIndex greenIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        BlueCount = <span class="keyword">if</span> isColorIndex blueIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        WhiteCount = <span class="keyword">if</span> isColorIndex whiteIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        BlackCount = <span class="keyword">if</span> isColorIndex blackIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        GrayCount = <span class="keyword">if</span> isColorIndex grayIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        SilverCount = <span class="keyword">if</span> isColorIndex silverIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</span><br><span class="line">        TranslucentCount = <span class="keyword">if</span> isColorIndex translucentIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>I then create a series of lookup functions to support the transformation process. In <em>setPiecesLookup</em> I make a Map for piece counts by SetId.  It gets alittle gnarly, but it does a group by on SetId, then sums all columns up to that level. <em>getCountLookup</em> is used to get piece counts by setid. <em>themesLookup</em> maps the set’s theme text to an arbitrary int.  I will save that into a lookup table/file as well for later access.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Build lookup for setpieces</span></span><br><span class="line"><span class="keyword">let</span> setPiecesLookup = </span><br><span class="line">    legoSetPieces.Rows</span><br><span class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> r -&gt; Map.containsKey r.Piece_id pieceLookup)</span><br><span class="line">    |&gt; Seq.map rowToSetCountsDetail</span><br><span class="line">    <span class="comment">// Sum counts up to SetId                             </span></span><br><span class="line">    |&gt; Seq.groupBy (<span class="keyword">fun</span> x -&gt; x.SetId)</span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> (k, v) -&gt; </span><br><span class="line">        (k, </span><br><span class="line">         v |&gt; Seq.fold setCountsDetailSum &#123; SetCountsDetail.SetId = k; BricksCount = <span class="number">0</span>; PlatesCount = <span class="number">0</span>; MinifigsCount = <span class="number">0</span>; PanelsCount = <span class="number">0</span>;  PlantsAndAnimalsCount = <span class="number">0</span>; TilesCount = <span class="number">0</span>; TechnicsCount = <span class="number">0</span>; RedCount = <span class="number">0</span>; GreenCount = <span class="number">0</span>; BlueCount = <span class="number">0</span>; WhiteCount = <span class="number">0</span>; BlackCount = <span class="number">0</span>; GrayCount = <span class="number">0</span>; SilverCount = <span class="number">0</span>; TranslucentCount = <span class="number">0</span>&#125;))                                </span><br><span class="line">    <span class="comment">// Create lookup</span></span><br><span class="line">    |&gt; Map</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Lookup piece count in the set, if not found, return 0</span></span><br><span class="line"><span class="keyword">let</span> getCountLookup k =</span><br><span class="line">    <span class="keyword">match</span> Map.tryFind k setPiecesLookup <span class="keyword">with</span></span><br><span class="line">    | Some(x) -&gt; x</span><br><span class="line">    | _       -&gt; &#123; SetId = k; BricksCount = <span class="number">0</span>; PlatesCount = <span class="number">0</span>; MinifigsCount = <span class="number">0</span>; PanelsCount = <span class="number">0</span>; PlantsAndAnimalsCount = <span class="number">0</span>; TilesCount = <span class="number">0</span>; TechnicsCount = <span class="number">0</span>; RedCount = <span class="number">0</span>; GreenCount = <span class="number">0</span>; BlueCount = <span class="number">0</span>; WhiteCount = <span class="number">0</span>; BlackCount = <span class="number">0</span>; GrayCount = <span class="number">0</span>; SilverCount = <span class="number">0</span>; TranslucentCount = <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create theme lookups from the sets files</span></span><br><span class="line"><span class="keyword">let</span> themesLookup =</span><br><span class="line">    <span class="keyword">let</span> distinctThemes = legoSets.Rows |&gt; Seq.map (<span class="keyword">fun</span> row -&gt; row.T1) |&gt; Seq.distinct</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pair theme string with an int</span></span><br><span class="line">    (distinctThemes, seq [<span class="number">0.</span>.Seq.length distinctThemes])</span><br><span class="line">    ||&gt; Seq.zip</span><br><span class="line">    |&gt; Map</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>All the hard work is done.  I now just take the data from the file and run it through a series of filters and transformations to transpose the bricktype and piece color counts into “percent of the set” columns.  Once that is done I write out a file <code>aggregatedata.csv</code> that will be used in Part 2.  I also save a themes lookup file.  The lookup isn’t actually needed for the decision tree processing, but its a nice-to-have if I want to remap the int ids back to text values for evaluation.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Build dataset</span></span><br><span class="line"><span class="keyword">let</span> dataset = </span><br><span class="line">    legoSets.Rows</span><br><span class="line">    <span class="comment">// Exclude blank themes</span></span><br><span class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> row -&gt; not (String.IsNullOrEmpty(row.T1)))</span><br><span class="line">    <span class="comment">// Exclude sets with 0 pieces</span></span><br><span class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> row -&gt; row.Pieces &lt;&gt; <span class="number">0</span>)</span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> row -&gt;</span><br><span class="line">        <span class="comment">// Get item type counts for each row (ie set)</span></span><br><span class="line">        <span class="keyword">let</span> bricksCount = (getCountLookup row.Set_id).BricksCount</span><br><span class="line">        <span class="keyword">let</span> platesCount = (getCountLookup row.Set_id).PlatesCount</span><br><span class="line">        <span class="keyword">let</span> minifigsCount = (getCountLookup row.Set_id).MinifigsCount</span><br><span class="line">        <span class="keyword">let</span> panelsCount = (getCountLookup row.Set_id).PanelsCount</span><br><span class="line">        <span class="keyword">let</span> plantsAndAnimalsCount = (getCountLookup row.Set_id).PlantsAndAnimalsCount</span><br><span class="line">        <span class="keyword">let</span> tilesCount = (getCountLookup row.Set_id).TilesCount</span><br><span class="line">        <span class="keyword">let</span> technicsCount = (getCountLookup row.Set_id).TechnicsCount</span><br><span class="line">        <span class="keyword">let</span> redCount = (getCountLookup row.Set_id).RedCount</span><br><span class="line">        <span class="keyword">let</span> greenCount = (getCountLookup row.Set_id).GreenCount</span><br><span class="line">        <span class="keyword">let</span> blueCount = (getCountLookup row.Set_id).BlueCount</span><br><span class="line">        <span class="keyword">let</span> whiteCount = (getCountLookup row.Set_id).WhiteCount</span><br><span class="line">        <span class="keyword">let</span> blackCount = (getCountLookup row.Set_id).BlackCount</span><br><span class="line">        <span class="keyword">let</span> grayCount = (getCountLookup row.Set_id).GrayCount</span><br><span class="line">        <span class="keyword">let</span> silverCount = (getCountLookup row.Set_id).SilverCount</span><br><span class="line">        <span class="keyword">let</span> translucentCount = (getCountLookup row.Set_id).TranslucentCount</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Build a record for writing</span></span><br><span class="line">        &#123;SetId = row.Set_id;</span><br><span class="line">         Year = row.Year;</span><br><span class="line">         ThemeId = themesLookup.Item row.T1;</span><br><span class="line">         PiecesCount = row.Pieces;</span><br><span class="line">         BricksPct = float(bricksCount) / float(row.Pieces);</span><br><span class="line">         PlatesPct = float(platesCount) / float(row.Pieces);</span><br><span class="line">         MinifigsPct = float(minifigsCount) / float(row.Pieces);          </span><br><span class="line">         PanelsPct = float(panelsCount) / float(row.Pieces); </span><br><span class="line">         PlantsAndAnimalsPct = float(plantsAndAnimalsCount) / float(row.Pieces); </span><br><span class="line">         TilesPct = float(tilesCount) / float(row.Pieces);</span><br><span class="line">         TechnicsPct = float(technicsCount) / float(row.Pieces);</span><br><span class="line">         RedPct = float(redCount) / float(row.Pieces);</span><br><span class="line">         GreenPct = float(greenCount) / float(row.Pieces);</span><br><span class="line">         BluePct = float(blueCount) / float(row.Pieces);</span><br><span class="line">         WhitePct = float(whiteCount) / float(row.Pieces);</span><br><span class="line">         BlackPct = float(blackCount) / float(row.Pieces);</span><br><span class="line">         GrayPct = float(grayCount) / float(row.Pieces);</span><br><span class="line">         SilverPct = float(silverCount) / float(row.Pieces);</span><br><span class="line">         TranslucentPct = float(translucentCount) / float(row.Pieces)&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Write dataset to output file</span></span><br><span class="line"><span class="keyword">let</span> dataFile = List.Cons (</span><br><span class="line">    <span class="string">"ThemeId,Year,PiecesCount,BricksPct,PlatesPct,MinifigsPct,PanelsPct,PlantsAndAnimalsPct,TilesPct,TechnicsCount,RedPct,GreenPct,BluePct,WhitePct,BlackPct,GrayPct,SilverPct,TranslucentPct"</span>, </span><br><span class="line">    dataset</span><br><span class="line">    |&gt; Seq.toList</span><br><span class="line">    |&gt; List.map SetDetail.toCsv)</span><br><span class="line"></span><br><span class="line">File.WriteAllLines(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">@"..\\data\\legos\\aggregatedata.csv"</span>), dataFile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Write themes lookup to a file</span></span><br><span class="line"><span class="keyword">let</span> themesFile = List.Cons (</span><br><span class="line">    <span class="string">"ThemeId,Theme"</span>,</span><br><span class="line">    themesLookup</span><br><span class="line">    |&gt; Map.toList </span><br><span class="line">    |&gt; List.map (<span class="keyword">fun</span> (key, value) -&gt; sprintf <span class="string">"%s,%d"</span> key value))</span><br><span class="line"></span><br><span class="line">File.WriteAllLines(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">@"..\\data\\legos\\aggregatedata_themes.csv"</span>), themesFile)</span><br></pre></td></tr></table></figure><p>Here are samples of the aggregate data and lookups files.</p><p>File: aggregatedata.csv<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ThemeId,Year,PiecesCount,BricksPct,PlatesPct,MinifigsPct,PanelsPct,PlantsAndAnimalsPct,TilesPct,TechnicsCount,RedPct,GreenPct,BluePct,WhitePct,BlackPct,GrayPct,SilverPct,TranslucentPct</span><br><span class="line">0,1970,471,0.8110,0.0892,0.0000,0.0000,0.0000,0.0000,0.0000,0.1359,0.0000,0.0212,0.4480,0.0000,0.0828,0.0000,0.0000</span><br><span class="line">1,1978,12,0.0000,0.0000,0.8333,0.0000,0.0000,0.0000,0.0000,0.1667,0.0000,0.1667,0.0000,0.2500,0.0000,0.0000,0.0000</span><br><span class="line">2,1987,2,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>File: aggregatedata_themes.csv<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThemeId,Theme</span><br><span class="line">4 Juniors,47</span><br><span class="line">Adventurers,28</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><a href="/data/legodecisiontree.zip">Data Files</a></p><p>So there are the data transformations.  Until next time…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It is time for an exploration into using a Decision Tree to classify Lego set themes using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://accord-framework.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Accord.NET&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;First things first, the data. &lt;a href=&quot;http://rebrickable.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rebrickable&lt;/a&gt; has downloadable datasets for Lego sets and pieces.  I’ll use the &lt;code&gt;sets.csv&lt;/code&gt; file as the primary dataset driver, but will grab information from &lt;code&gt;sets_pieces.csv&lt;/code&gt;, &lt;code&gt;pieces.csv&lt;/code&gt;, and &lt;code&gt;colors.csv&lt;/code&gt; for feature creation.  The files are not in an format appropriate for a decision tree, so some transformations will need to happen first.  I don’t want the post to get too long, so this project will be broken into two components.  Part 1 will be building the feature file and getting the data into the desired comsumable format, &lt;a href=&quot;/2016/12/07/Decision-Trees-with-F-and-Accord-NET-Part-2&quot;&gt;Part 2&lt;/a&gt; will actually use the file to get to the end goal.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Accord.NET" scheme="http://codesuji.com/tags/Accord-NET/"/>
    
      <category term="Decision Trees" scheme="http://codesuji.com/tags/Decision-Trees/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Legos" scheme="http://codesuji.com/tags/Legos/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="Classification" scheme="http://codesuji.com/tags/Classification/"/>
    
  </entry>
  
  <entry>
    <title>Edge Filter using F# and Accord.NET</title>
    <link href="http://codesuji.com/2016/11/23/Edge-Filter-using-F-and-Accord-NET/"/>
    <id>http://codesuji.com/2016/11/23/Edge-Filter-using-F-and-Accord-NET/</id>
    <published>2016-11-23T12:56:08.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>This is a sample of how to apply edge filters to a set of images using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="http://accord-framework.net/" target="_blank" rel="noopener">Accord.NET</a>.  The framework provides several <a href="http://accord-framework.net/docs/html/N_Accord_Imaging_Filters.htm" target="_blank" rel="noopener">Filters</a> for image manipulating.  Since I’m interested in edge enhancement I’ll limit my scope to those filters.  In particular I’ve selected the <code>DifferenceEdgeDetector()</code>.</p><a id="more"></a><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample <code>paket.dependencies</code> file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line">nuget Accord</span><br><span class="line">nuget Accord.Imaging</span><br></pre></td></tr></table></figure><p>This is the boring setup stuff.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ref: http://accord-framework.net/docs/html/N_Accord_Imaging_Filters.htm</span></span><br><span class="line"></span><br><span class="line">#I <span class="string">"../packages"</span></span><br><span class="line">#r <span class="string">"../packages/Accord/lib/net45/accord.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Imaging/lib/net45/accord.imaging.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Drawing</span><br><span class="line"><span class="keyword">open</span> System.Drawing.Imaging</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Accord</span><br><span class="line"><span class="keyword">open</span> Accord.Imaging</span><br><span class="line"><span class="keyword">open</span> Accord.Imaging.Filters</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imageRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/"</span>))</span><br><span class="line"><span class="keyword">let</span> resultsRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/results/"</span>))</span><br></pre></td></tr></table></figure><p>Loading and applying the filter is straight-forward.  The only additional point worthy of mention is that most of the edge filters require the image to be in grayscale.  That conversion is included in this function.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Process image and save a result file with edge filter applied</span></span><br><span class="line"><span class="keyword">let</span> filterImage (resultsDir:string) (imageName:string) =</span><br><span class="line">    <span class="keyword">let</span> resultImageName = Path.Combine(resultsDir, Path.GetFileName(imageName))        </span><br><span class="line">    <span class="keyword">let</span> bitmap = <span class="keyword">new</span> Bitmap(imageName)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Need to reduce to grayscale, filter needs a reduced color bitmap to process</span></span><br><span class="line">    <span class="keyword">let</span> bitmapGray = Grayscale.CommonAlgorithms.BT709.Apply(bitmap)</span><br><span class="line">    <span class="keyword">let</span> filter = <span class="keyword">new</span> DifferenceEdgeDetector()</span><br><span class="line"></span><br><span class="line">    filter.ApplyInPlace(bitmapGray)</span><br><span class="line"></span><br><span class="line">    File.Delete resultImageName</span><br><span class="line">    bitmapGray.Save(resultImageName)</span><br></pre></td></tr></table></figure><p>The below code gets a list of qualifying images, then sends them through the filtering function.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Is file an image file?</span></span><br><span class="line"><span class="keyword">let</span> isImageFile (fileName:string) = </span><br><span class="line">    fileName.EndsWith(<span class="string">".jpg"</span>, StringComparison.OrdinalIgnoreCase)</span><br><span class="line">    || fileName.EndsWith(<span class="string">".png"</span>, StringComparison.OrdinalIgnoreCase)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get Image list to process</span></span><br><span class="line"><span class="keyword">let</span> imageNames = </span><br><span class="line">    Directory.GetFiles imageRoot </span><br><span class="line">    |&gt; Array.filter isImageFile</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process images</span></span><br><span class="line">imageNames </span><br><span class="line">|&gt; Array.iter (filterImage resultsRoot)</span><br></pre></td></tr></table></figure><p>Below is an example of the edge filter applied.</p><p><img src="/images/edges_before.jpg" alt="Before"></p><p><img src="/images/edges_after.jpg" alt="After"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a sample of how to apply edge filters to a set of images using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://accord-framework.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Accord.NET&lt;/a&gt;.  The framework provides several &lt;a href=&quot;http://accord-framework.net/docs/html/N_Accord_Imaging_Filters.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Filters&lt;/a&gt; for image manipulating.  Since I’m interested in edge enhancement I’ll limit my scope to those filters.  In particular I’ve selected the &lt;code&gt;DifferenceEdgeDetector()&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Accord.NET" scheme="http://codesuji.com/tags/Accord-NET/"/>
    
      <category term="Images" scheme="http://codesuji.com/tags/Images/"/>
    
      <category term="Edges" scheme="http://codesuji.com/tags/Edges/"/>
    
      <category term="Filters" scheme="http://codesuji.com/tags/Filters/"/>
    
  </entry>
  
</feed>
