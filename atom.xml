<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codesuji</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codesuji.com/"/>
  <updated>2017-01-14T19:47:36.275Z</updated>
  <id>http://codesuji.com/</id>
  
  <author>
    <name>codesuji.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linear Regression and F#</title>
    <link href="http://codesuji.com/2017/01/12/Linear-Regression-and-F/"/>
    <id>http://codesuji.com/2017/01/12/Linear-Regression-and-F/</id>
    <published>2017-01-13T02:39:24.000Z</published>
    <updated>2017-01-14T19:47:36.275Z</updated>
    
    <content type="html"><![CDATA[<p>Today I look into performing linear regression using <a href="http://fsharp.org/" target="_blank" rel="external">F#</a>.  The implementations of interest will be the <a href="https://numerics.mathdotnet.com/" target="_blank" rel="external">MathNet</a> and <a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a> libraries.  This isn’t a math lesson, my presumption is you know how and why you’d want to use linear regression.  My goal is to provide a simple explanation of how to leverage some existing F# accessible libraries.</p>
<a id="more"></a>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample paket.dependencies file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget Accord</div><div class="line">nuget Accord.Math</div><div class="line">nuget Accord.Statistics</div><div class="line">nuget Accord.MachineLearning</div><div class="line">nuget FSharp.Charting</div><div class="line">nuget MathNet.Numerics</div><div class="line">nuget MathNet.Numerics.FSharp</div></pre></td></tr></table></figure>
<p>Here is the library loading. </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#r <span class="string">"../packages/FSharp.Charting/lib/net40/FSharp.Charting.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord/lib/net45/Accord.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Statistics/lib/net45/Accord.Statistics.dll"</span></div><div class="line">#r <span class="string">"../packages/MathNet.Numerics/lib/net40/MathNet.Numerics.dll"</span></div><div class="line">#r <span class="string">"../packages/MathNet.Numerics.FSharp/lib/net40/MathNet.Numerics.FSharp.dll"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"><span class="keyword">open</span> FSharp.Charting</div><div class="line"><span class="keyword">open</span> Accord</div><div class="line"><span class="keyword">open</span> Accord.Math</div><div class="line"><span class="keyword">open</span> Accord.Math.Distances</div><div class="line"><span class="keyword">open</span> Accord.Statistics</div><div class="line"><span class="keyword">open</span> Accord.Statistics.Models.Regression.Linear</div><div class="line"><span class="keyword">open</span> MathNet</div><div class="line"><span class="keyword">open</span> MathNet.Numerics</div><div class="line"><span class="keyword">open</span> MathNet.Numerics.LinearAlgebra</div><div class="line"><span class="keyword">open</span> MathNet.Numerics.LinearRegression</div></pre></td></tr></table></figure>
<p>First I need to create some data. For this example, the formula is y =  x^2 + noise + occasional outlier.  The method is create 3 arrays representing x, noise, and outliers.  It is a bit convoluted, but it allows me to show off a couple bits of functionality from F# and MathNet.  The MathNet library includes methods to generate datasets, for the noise dataset <code>Generate.Normal</code> creates an array of numbers with a normal distribution.  It is worth checking out the other diverse <a href="https://numerics.mathdotnet.com/Generate.html" target="_blank" rel="external">generation</a> capabilities available.  For outliers, I define an arbitrary 30% chance of a big spike in the data, as defined by pct and range variables.  Then I use <code>|||&gt;</code> and <code>Array.zip3</code> to combine the 3 element tuple of arrays into an array of 3 element tuples.  Once in this format, a map is used to calculate the formula mentioned at the start.</p>
<p><em>Sidenote: If you’ve coded any F#, you know <code>|&gt;</code>.  But did you know there are other, similar operators: <code>||&gt;</code> passes a tuple as two arguments, <code>|||&gt;</code> passes a 3-tuple as 3 arguments.</em></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> xData = [| <span class="number">1.</span> .. <span class="number">0.25</span> .. <span class="number">50.</span> |]</div><div class="line"></div><div class="line"><span class="comment">// Args: length, mean, stddev</span></div><div class="line"><span class="keyword">let</span> noise = Generate.Normal(Array.length xData, <span class="number">500.</span>, <span class="number">200.</span>) </div><div class="line"></div><div class="line"><span class="keyword">let</span> makeOutliers len pct range =</div><div class="line">    <span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</div><div class="line">    [|<span class="number">1.</span>.len|]</div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> _ -&gt;</div><div class="line">        <span class="keyword">if</span> rand.NextDouble() &lt; pct</div><div class="line">        <span class="keyword">then</span> range * rand.NextDouble() - (range / <span class="number">2.</span>)</div><div class="line">        <span class="keyword">else</span> <span class="number">0.</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> outliers = makeOutliers (Array.length xData) <span class="number">0.3</span> <span class="number">2000.</span> </div><div class="line"></div><div class="line"><span class="keyword">let</span> yData = </div><div class="line">    (xData, noise, outliers) </div><div class="line">    |||&gt; Array.zip3 </div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> (x, n, o) -&gt; x**<span class="number">2.</span> + n + o)</div></pre></td></tr></table></figure>
<h3 id="MathNet"><a href="#MathNet" class="headerlink" title="MathNet"></a>MathNet</h3><p>Starting with the MathNet implementation, it is time for the regression fitting.  The first option is <code>Fit.Line</code>, this takes the x and y data, fits a line and returns the associated intercept and slope that can be plugged into a y = mx + b formula.  The second option is to use <code>Fit.LineFunc</code>.  It also takes the x and y data to fit a line.  The difference is it creates a delegate function that can be used to directly calculate.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mathnetIntercept, mathnetSlope = Fit.Line (xData, yData)</div><div class="line"></div><div class="line"><span class="keyword">let</span> regressionFunc = Fit.LineFunc(xData, yData)</div></pre></td></tr></table></figure>
<p>Now it’s time to generate data based on the regression result.  <strong>pData1</strong> is calculated manually using the slope and intercept from the <code>Fit.Line</code> call.  <strong>pData2</strong> leverages the function delegate from <code>Fit.LineFunc</code>.  I need to use <code>.Invoke</code> for performing the calculation.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> pData1 =</div><div class="line">    xData</div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; mathnetSlope * x + mathnetIntercept)</div><div class="line"></div><div class="line"><span class="keyword">let</span> pData2 =</div><div class="line">    xData</div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; regressionFunc.Invoke(x))</div></pre></td></tr></table></figure>
<p>The below code combines 3 charts; the original data, plus the regression lines.  Some of the effect is lost, since the lines are ontop of each other, but you hopefully get the point.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Chart actual versus linear regression predictions</span></div><div class="line">Chart.Combine([</div><div class="line">    (xData, yData)  ||&gt; Array.zip |&gt; Chart.Point;</div><div class="line">    (xData, pData1) ||&gt; Array.zip |&gt; Chart.Line;</div><div class="line">    (xData, pData2) ||&gt; Array.zip |&gt; Chart.Line])</div><div class="line">|&gt; Chart.Show</div></pre></td></tr></table></figure>
<p><img src="/images/lr1/lr1_mathnet.png" alt="Regression Comparison (MathNet)"></p>
<h3 id="Accord-NET"><a href="#Accord-NET" class="headerlink" title="Accord.NET"></a>Accord.NET</h3><p>Now it is time to look at the Accord.NET implementation.  Here,<code>OrdinaryLeastSquares</code> + <code>Learn</code> are used to determine line fitting.  The result is a <a href="http://accord-framework.net/docs/html/Methods_T_Accord_Statistics_Models_Regression_Linear_SimpleLinearRegression.htm" target="_blank" rel="external">SimpleLinearRegression</a> object.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> ols = <span class="keyword">new</span> OrdinaryLeastSquares();</div><div class="line"><span class="keyword">let</span> accordRegression = ols.Learn(xData, yData)</div><div class="line"><span class="keyword">let</span> accordSlope = accordRegression.Slope</div><div class="line"><span class="keyword">let</span> accordIntercept = accordRegression.Intercept</div></pre></td></tr></table></figure>
<p>Now it’s time to generate data based on the regression result.  <strong>pData3</strong> is calculated manually using the slope and intercept.  <strong>pData4</strong> is calculated directly by leveraging Accord’s <code>Transform()</code> function.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> pData3 =</div><div class="line">    xData</div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; accordSlope * x + accordIntercept)</div><div class="line"></div><div class="line"><span class="keyword">let</span> pData4 =</div><div class="line">    xData</div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; accordRegression.Transform(x))</div></pre></td></tr></table></figure>
<p>Again, the below code combines 3 charts; the original data, plus the regression lines.  As expected, these graphs are identical.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Chart.Combine([</div><div class="line">    (xData, yData)  ||&gt; Array.zip |&gt; Chart.Point;</div><div class="line">    (xData, pData3) ||&gt; Array.zip |&gt; Chart.Line;</div><div class="line">    (xData, pData4) ||&gt; Array.zip |&gt; Chart.Line])</div><div class="line">|&gt; Chart.Show</div></pre></td></tr></table></figure>
<p><img src="/images/lr1/lr1_accordnet.png" alt="Regression Comparison (Accord.NET)"></p>
<p>So, there it is.  A couple ways to do linear regression, but there is more.  What good is the regression model if you can’t perform scoring against the result.  Luckily, MathNet and Accord.NET have several methods of comparing datasets.  There are too many options to show them all here, but here are a couple examples scoring predicted data (pData1) versus actual data (yData).  For reference: <a href="https://numerics.mathdotnet.com/Distance.html" target="_blank" rel="external">MathNet Distances</a> and <a href="http://accord-framework.net/docs/html/N_Accord_Math_Distances.htm" target="_blank" rel="external">Accord.NET Distances</a>.  I recommend digging deeper to find the scoring method appropriate for your specific needs.  </p>
<p>MathNet: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">printfn <span class="string">"Scoring: R2=%.2f R=%.2f PSE=%.2f SE=%.2f SAD=%.2f SSD=%.2f MAE=%.2f MSE=%.2f"</span></div><div class="line">    (GoodnessOfFit.RSquared(pData1, yData))</div><div class="line">    (GoodnessOfFit.R(pData1, yData))</div><div class="line">    (GoodnessOfFit.PopulationStandardError(pData1, yData))</div><div class="line">    (GoodnessOfFit.StandardError(pData1, yData, <span class="number">2</span>)) <span class="comment">// 2 degrees freedom</span></div><div class="line">    (Distance.SAD(pData1, yData))</div><div class="line">    (Distance.SSD(pData1, yData))</div><div class="line">    (Distance.MAE(pData1, yData))</div><div class="line">    (Distance.MSE(pData1, yData))</div><div class="line"></div><div class="line">Scoring: R2=<span class="number">0.75</span> R=<span class="number">0.87</span> PSE=<span class="number">427.23</span> SE=<span class="number">429.41</span> SAD=<span class="number">61878.78</span> SSD=<span class="number">35957245.48</span> MAE=<span class="number">314.11</span> MSE=<span class="number">182524.09</span></div></pre></td></tr></table></figure>
<p>Accord.NET:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">printfn <span class="string">"Scoring SE: %.2f E: %.2f E2:%.2f M:%.2f PC:%.2f"</span></div><div class="line">    (accordRegression.GetStandardError(xData, yData))</div><div class="line">    (Euclidean().Distance(pData1, yData))</div><div class="line">    (SquareEuclidean().Distance(pData1, yData))</div><div class="line">    (Manhattan().Distance(pData1, yData))</div><div class="line">    (PearsonCorrelation().Similarity(pData1, yData))</div><div class="line"></div><div class="line">Scoring SE: <span class="number">429.41</span> E: <span class="number">5996.44</span> E2:<span class="number">35957245.48</span> M:<span class="number">61878.78</span> PC:<span class="number">0.87</span></div><div class="line"></div><div class="line"><span class="comment">// Confidence Intervals</span></div><div class="line">xData</div><div class="line">|&gt; Array.map (<span class="keyword">fun</span> x -&gt; </div><div class="line">    (x, accordRegression.GetConfidenceInterval(x, xData, yData)))</div><div class="line">|&gt; Array.iter (<span class="keyword">fun</span> (x, ci) -&gt; </div><div class="line">    printfn <span class="string">"x: %5.2f min: %7.2f max: %7.2f len:%7.2f"</span> x ci.Min ci.Max ci.Length)</div><div class="line"></div><div class="line">x:  <span class="number">1.00</span> min:  <span class="number">-90.80</span> max:  <span class="number">149.64</span> len: <span class="number">240.44</span></div><div class="line">x:  <span class="number">1.25</span> min:  <span class="number">-76.85</span> max:  <span class="number">161.76</span> len: <span class="number">238.61</span></div><div class="line">x:  <span class="number">1.50</span> min:  <span class="number">-62.90</span> max:  <span class="number">173.88</span> len: <span class="number">236.78</span></div><div class="line">x:  <span class="number">1.75</span> min:  <span class="number">-48.95</span> max:  <span class="number">186.00</span> len: <span class="number">234.95</span></div><div class="line">x:  <span class="number">2.00</span> min:  <span class="number">-35.01</span> max:  <span class="number">198.13</span> len: <span class="number">233.14</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>I hope this has been helpful if you’re venturing into F# and regression.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I look into performing linear regression using &lt;a href=&quot;http://fsharp.org/&quot;&gt;F#&lt;/a&gt;.  The implementations of interest will be the &lt;a href=&quot;https://numerics.mathdotnet.com/&quot;&gt;MathNet&lt;/a&gt; and &lt;a href=&quot;http://accord-framework.net/&quot;&gt;Accord.NET&lt;/a&gt; libraries.  This isn’t a math lesson, my presumption is you know how and why you’d want to use linear regression.  My goal is to provide a simple explanation of how to leverage some existing F# accessible libraries.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Accord.NET" scheme="http://codesuji.com/tags/Accord-NET/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="MathNet" scheme="http://codesuji.com/tags/MathNet/"/>
    
      <category term="Regression" scheme="http://codesuji.com/tags/Regression/"/>
    
      <category term="Statistics" scheme="http://codesuji.com/tags/Statistics/"/>
    
      <category term="Delegate" scheme="http://codesuji.com/tags/Delegate/"/>
    
      <category term="Scoring" scheme="http://codesuji.com/tags/Scoring/"/>
    
  </entry>
  
  <entry>
    <title>Site transition complete</title>
    <link href="http://codesuji.com/2017/01/09/Site-transition-complete/"/>
    <id>http://codesuji.com/2017/01/09/Site-transition-complete/</id>
    <published>2017-01-10T02:24:34.000Z</published>
    <updated>2017-01-11T01:31:52.967Z</updated>
    
    <content type="html"><![CDATA[<p>No tech talk today.  This is a milestone post.  After more hiccups than I’d prefer, the site transition is complete.  There has been some minor refactoring with more to follow. Happy prime number new year!   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;No tech talk today.  This is a milestone post.  After more hiccups than I’d prefer, the site transition is complete.  There has been some
    
    </summary>
    
    
      <category term="admin" scheme="http://codesuji.com/tags/admin/"/>
    
  </entry>
  
  <entry>
    <title>F# Morse Coder</title>
    <link href="http://codesuji.com/2016/12/23/F-Morse-Coder/"/>
    <id>http://codesuji.com/2016/12/23/F-Morse-Coder/</id>
    <published>2016-12-24T01:49:34.000Z</published>
    <updated>2017-01-14T19:47:00.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="In-other-words-–-–-…-…-–"><a href="#In-other-words-–-–-…-…-–" class="headerlink" title="In other words: -.– .- -.– / ..-. / … …. .- .-. .–."></a>In other words: -.– .- -.– / ..-. / … …. .- .-. .–.</h2><p>As I was explaining <a href="https://en.wikipedia.org/wiki/Morse_code" target="_blank" rel="external">Morse Code</a> to a young mind, I started thinking.  It is fine to explain the encoding and uses, but experiencing the audial component makes the lessons stick better.  Enter <a href="http://fsharp.org/" target="_blank" rel="external">F#</a>.  Yes, I know I could use any of a hundred phone apps or websites that produce sound, but what’s the fun in that?  For me, this is the perfect opportunity to hack out a quick text to morse code translator.  </p>
<a id="more"></a>
<p>Getting started, I setup a <code>Map</code> as the codebook for letter/number to morse code translation.  It’s not meant to be comprehensive, but enough to play with.  Then I code in some constants and helpers to make my life easier later. </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"></div><div class="line"><span class="keyword">let</span> codebook = </div><div class="line">    Map [ </div><div class="line">        (' ', <span class="string">" "</span>); </div><div class="line">        (<span class="symbol">'a</span>', <span class="string">".-"</span>);</div><div class="line">        (<span class="symbol">'b</span>', <span class="string">"-..."</span>);</div><div class="line">        (<span class="symbol">'c</span>', <span class="string">"-.-."</span>);</div><div class="line">        (<span class="symbol">'d</span>', <span class="string">"-.."</span>);</div><div class="line">        (<span class="symbol">'e</span>', <span class="string">"."</span>);</div><div class="line">        (<span class="symbol">'f</span>', <span class="string">"..-."</span>);</div><div class="line">        (<span class="symbol">'g</span>', <span class="string">"--."</span>);</div><div class="line">        (<span class="symbol">'h</span>', <span class="string">"...."</span>);</div><div class="line">        (<span class="symbol">'i</span>', <span class="string">".."</span>);</div><div class="line">        (<span class="symbol">'j</span>', <span class="string">".---"</span>);</div><div class="line">        (<span class="symbol">'k</span>', <span class="string">"-.-"</span>);</div><div class="line">        (<span class="symbol">'l</span>', <span class="string">".-.."</span>);</div><div class="line">        (<span class="symbol">'m</span>', <span class="string">"--"</span>);</div><div class="line">        (<span class="symbol">'n</span>', <span class="string">"-."</span>);</div><div class="line">        (<span class="symbol">'o</span>', <span class="string">"---"</span>);</div><div class="line">        (<span class="symbol">'p</span>', <span class="string">".--."</span>);</div><div class="line">        (<span class="symbol">'q</span>', <span class="string">"--.-"</span>);</div><div class="line">        (<span class="symbol">'r</span>', <span class="string">".-."</span>);</div><div class="line">        (<span class="symbol">'s</span>', <span class="string">"..."</span>);</div><div class="line">        (<span class="symbol">'t</span>', <span class="string">"-"</span>);</div><div class="line">        (<span class="symbol">'u</span>', <span class="string">"..-"</span>);</div><div class="line">        (<span class="symbol">'v</span>', <span class="string">"...-"</span>);</div><div class="line">        (<span class="symbol">'w</span>', <span class="string">".--"</span>);</div><div class="line">        (<span class="symbol">'x</span>', <span class="string">"-..-"</span>);</div><div class="line">        (<span class="symbol">'y</span>', <span class="string">"-.--"</span>);</div><div class="line">        (<span class="symbol">'z</span>', <span class="string">"--.."</span>);</div><div class="line">        ('<span class="number">1</span>',<span class="string">".----"</span>);</div><div class="line">        ('<span class="number">2</span>',<span class="string">"..---"</span>);</div><div class="line">        ('<span class="number">3</span>',<span class="string">"...--"</span>);</div><div class="line">        ('<span class="number">4</span>',<span class="string">"....-"</span>);</div><div class="line">        ('<span class="number">5</span>',<span class="string">"....."</span>);</div><div class="line">        ('<span class="number">6</span>',<span class="string">"-...."</span>);</div><div class="line">        ('<span class="number">7</span>',<span class="string">"--..."</span>);</div><div class="line">        ('<span class="number">8</span>',<span class="string">"---.."</span>);</div><div class="line">        ('<span class="number">9</span>',<span class="string">"----."</span>);</div><div class="line">        ('<span class="number">0</span>',<span class="string">"-----"</span>)]</div><div class="line"></div><div class="line"><span class="keyword">let</span> dotDuration = <span class="number">200</span></div><div class="line"><span class="keyword">let</span> dashDuration = dotDuration * <span class="number">3</span></div><div class="line"><span class="keyword">let</span> letterTrailDuration = dotDuration</div><div class="line"><span class="keyword">let</span> charTrailDuration = dotDuration * <span class="number">2</span> <span class="comment">// 3</span></div><div class="line"><span class="keyword">let</span> wordTrailDuration = dotDuration * <span class="number">6</span> <span class="comment">// 7</span></div><div class="line"><span class="keyword">let</span> frequency = <span class="number">700</span></div><div class="line"></div><div class="line"><span class="comment">// Sleep wrapper</span></div><div class="line"><span class="keyword">let</span> sleep (ms:int) = System.Threading.Thread.Sleep(ms)</div></pre></td></tr></table></figure>
<p>This is the translation and audio portion.  The approach is basically: string -&gt; char -&gt; code -&gt; dot/dash -&gt; sound. I do lookups in the codebook with <code>TryFind</code>.  This allows me to leverage <code>Some</code> and <code>None</code>.  For illustrative purposes, the character is displayed as its going audio.  Then the character’s code is fed into the morseToSound function.  Here the code is broken apart and the dots (.) and dashes (-) are translated into audio sounds.  Luckily I can just just use <code>Console.Beep</code> for easy tone creation.  I code spaces as a word seperator and visibilty display unknown characters and patterns with a ‘!’.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Convert the dot/dash to sound</span></div><div class="line"><span class="keyword">let</span> dotDashToSound dd = </div><div class="line">    <span class="keyword">match</span> dd <span class="keyword">with</span></div><div class="line">    | '.' -&gt; Console.Beep(frequency, dotDuration)</div><div class="line">    | '-' -&gt; Console.Beep(frequency, dashDuration)</div><div class="line">    | ' ' -&gt; sleep wordTrailDuration</div><div class="line">    | _   -&gt; Console.Write(<span class="string">"!"</span>)</div><div class="line">    sleep dotDuration</div><div class="line"></div><div class="line"><span class="comment">// Convert morsecode char to sound representation</span></div><div class="line"><span class="keyword">let</span> morseToSound mc = </div><div class="line">    <span class="keyword">match</span> mc <span class="keyword">with</span> </div><div class="line">    | Some(c) -&gt;</div><div class="line">        c |&gt; Seq.iter dotDashToSound</div><div class="line">        sleep letterTrailDuration</div><div class="line">    | None -&gt; Console.Write(<span class="string">"!"</span>)</div><div class="line"></div><div class="line"><span class="comment">// Convert char to sound</span></div><div class="line"><span class="keyword">let</span> charToSound (c:char) =</div><div class="line">    Console.Write(<span class="string">"&#123;0&#125;"</span>, c)</div><div class="line">    morseToSound (codebook.TryFind c)</div></pre></td></tr></table></figure>
<p>This is a test snippet to make sure it all works.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> input = <span class="string">"Hello World"</span></div><div class="line">input.ToLower() |&gt; Seq.iter charToSound</div></pre></td></tr></table></figure>
<p>I want to allow this experience to be more interactive.  It doesn’t have to be anything fancy so I just set up a loop that takes a line at a time and does translations.  An empty line exits the program.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">rec</span> main() = </div><div class="line">    <span class="keyword">match</span> Console.ReadLine() <span class="keyword">with</span></div><div class="line">    | <span class="string">""</span>    -&gt; ()</div><div class="line">    | input -&gt; </div><div class="line">        input.ToLower() |&gt; Seq.iter charToSound</div><div class="line">        printfn <span class="string">""</span></div><div class="line">        main()</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure>
<p>This mini project is pretty basic.  But it was a quick and fun way to whip up an experimentation tool, and use F# in the process.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;In-other-words-–-–-…-…-–&quot;&gt;&lt;a href=&quot;#In-other-words-–-–-…-…-–&quot; class=&quot;headerlink&quot; title=&quot;In other words: -.– .- -.– / ..-. / … …. .- .-. .–.&quot;&gt;&lt;/a&gt;In other words: -.– .- -.– / ..-. / … …. .- .-. .–.&lt;/h2&gt;&lt;p&gt;As I was explaining &lt;a href=&quot;https://en.wikipedia.org/wiki/Morse_code&quot;&gt;Morse Code&lt;/a&gt; to a young mind, I started thinking.  It is fine to explain the encoding and uses, but experiencing the audial component makes the lessons stick better.  Enter &lt;a href=&quot;http://fsharp.org/&quot;&gt;F#&lt;/a&gt;.  Yes, I know I could use any of a hundred phone apps or websites that produce sound, but what’s the fun in that?  For me, this is the perfect opportunity to hack out a quick text to morse code translator.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Morse Code" scheme="http://codesuji.com/tags/Morse-Code/"/>
    
      <category term="Sound" scheme="http://codesuji.com/tags/Sound/"/>
    
      <category term="Audio" scheme="http://codesuji.com/tags/Audio/"/>
    
      <category term="Translation" scheme="http://codesuji.com/tags/Translation/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Time Warping, an F# Implementation</title>
    <link href="http://codesuji.com/2016/12/17/Dynamic-Time-Warping-an-F-Implementation/"/>
    <id>http://codesuji.com/2016/12/17/Dynamic-Time-Warping-an-F-Implementation/</id>
    <published>2016-12-18T03:34:13.000Z</published>
    <updated>2017-01-14T19:46:40.076Z</updated>
    
    <content type="html"><![CDATA[<p>My recent post about <a href="/2016/12/13/F-and-Dynamic-Time-Warping/">Dynamic Time Warping</a> used an external library.  It inspired me to implement the algorithm in <a href="http://fsharp.org/" target="_blank" rel="external">F#</a>.  This is mostly just to see it in F#.  My last implementation was in <a href="http://racket-lang.org/" target="_blank" rel="external">Racket</a>, and I’m interested in the different language implementations. I use a pretty basic <a href="https://en.wikipedia.org/wiki/Dynamic_time_warping#Implementation" target="_blank" rel="external">Algorithm</a>, nothing fancy. As part of this process I’ll be doing comparisons between <a href="https://github.com/doblak/ndtw" target="_blank" rel="external">NDtw</a> and my code.  To be upfront, its not a perfect comparison.  NDtw has additional options and tracking that will reduce it’s max performance capabilities.  But for hacking around, the implementations will be close enough for alittle fun.  For anyone interested, unless otherwise specified, all of my results will be from the REPL in <a href="https://code.visualstudio.com/" target="_blank" rel="external">VS Code</a> + <a href="http://ionide.io/" target="_blank" rel="external">Ionide</a> using <a href="http://www.mono-project.com/" target="_blank" rel="external">Mono</a> version 4.6.2.</p>
<a id="more"></a>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample paket.dependencies file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget FSharp.Data</div><div class="line">nuget NDtw</div></pre></td></tr></table></figure>
<p>Here is the basic setup stuff.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#time</div><div class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></div><div class="line">#r <span class="string">"../packages/ndtw/lib/net40/ndtw.dll"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"><span class="keyword">open</span> FSharp.Data</div><div class="line"><span class="keyword">open</span> NDtw</div></pre></td></tr></table></figure>
<p>First, I need to get some data.  I’m in the mood for some stock data.  That should give me simple signals with lots of data points.  I also decide to pull it into local files.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl http://ichart.finance.yahoo.com/table.csv?s=IBM -o stock_ibm.csv</div><div class="line"></div><div class="line">curl http://ichart.finance.yahoo.com/table.csv?s=F -o stock_f.csv</div></pre></td></tr></table></figure>
<p>Here is the code to load the csv data into arrays.  I only pull 5,000 records, and the signal of interest will the “Open” value.  This will be enough data to run long enough, but not too long.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Stock</span> </span>= CsvProvider&lt;<span class="string">"../data/stocks/stock_ibm.csv"</span>&gt;</div><div class="line"></div><div class="line"><span class="keyword">let</span> ibm = Stock.Load(<span class="string">"../data/stocks/stock_ibm.csv"</span>)</div><div class="line"><span class="keyword">let</span> ford = Stock.Load(<span class="string">"../data/stocks/stock_f.csv"</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> ibmData = ibm.Rows |&gt; Seq.take <span class="number">5000</span> |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; float(x.Open)) |&gt; Seq.toArray</div><div class="line"><span class="keyword">let</span> fordData = ford.Rows |&gt; Seq.take <span class="number">5000</span> |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; float(x.Open)) |&gt; Seq.toArray</div></pre></td></tr></table></figure>
<p>Before I get started, I want to get a baseline for the NDtw implementation.  I ran this a couple times, and the below results are representative.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dtw = <span class="keyword">new</span> Dtw(ibmData, fordData)</div><div class="line"><span class="keyword">let</span> cost = dtw.GetCost()</div><div class="line"></div><div class="line"><span class="comment">//Real: 00:00:01.762, CPU: 00:00:01.781, GC gen0: 128, gen1: 67, gen2: 2</span></div></pre></td></tr></table></figure>
<p>Now it is time to implement the algorithm.  This is mostly a copy paste directly off of the wikipedia page.  I just need to do minor F# translation.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Distance calculation between 2 points</span></div><div class="line"><span class="keyword">let</span> distance (a:float) (b:float) = Math.Abs(a - b)</div><div class="line"></div><div class="line"><span class="keyword">let</span> myDtwArray2D_A (d1:float[]) (d2:float[]) =</div><div class="line">    <span class="keyword">let</span> n = Array.length d1</div><div class="line">    <span class="keyword">let</span> m = Array.length d2</div><div class="line">    <span class="keyword">let</span> path = Array2D.init (n+<span class="number">1</span>) (m+<span class="number">1</span>) (<span class="keyword">fun</span> _ _ -&gt; <span class="number">0.</span>)</div><div class="line">    [<span class="number">1.</span>.n] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[x,<span class="number">0</span>] &lt;- Double.PositiveInfinity)</div><div class="line">    [<span class="number">1.</span>.m] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[<span class="number">0</span>,x] &lt;- Double.PositiveInfinity)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1.</span>.n] <span class="keyword">do</span></div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">1.</span>.m] <span class="keyword">do</span></div><div class="line">            <span class="keyword">let</span> cost = distance d1.[i<span class="number">-1</span>] d2.[j<span class="number">-1</span>]</div><div class="line">            path.[i,j] &lt;- cost + (List.min</div><div class="line">                [path.[i<span class="number">-1</span>,j];</div><div class="line">                path.[i,j<span class="number">-1</span>];</div><div class="line">                path.[i<span class="number">-1</span>,j<span class="number">-1</span>]])</div><div class="line"></div><div class="line">    path.[n,m]</div></pre></td></tr></table></figure>
<p>Here is my first pass.  Again, I ran this multiple times, and this is a representative result. And ouch.  I know functional languages have a reputation for slower performance, but I need to be able to do better.  Not ony is it slower, but the GC #s are 10x worse than my baseline. </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cost = myDtwArray2D_A ibmData fordData</div><div class="line"></div><div class="line"><span class="comment">// Real: 00:00:10.189, CPU: 00:00:10.234, GC gen0: 1536, gen1: 461, gen2: 1</span></div></pre></td></tr></table></figure>
<p>Take 2: When I initially wrote the function I decided to leverage built-ins as much as possible.  As a result I used <code>List.min</code> when determining which step in the path to take next.  List construction seems like a possible expensive process.  So I’ll take that out and see how that does.  The below code is identical to above except for the <code>path.[i,j] &lt;- cost + (min path.[i-1,j] path.[i,j-1] path.[i-1,j-1])</code> call.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Min of three values</span></div><div class="line"><span class="keyword">let</span> min (a:float) (b:float) (c:float) =</div><div class="line">    <span class="keyword">if</span> a &lt; b</div><div class="line">        <span class="keyword">then</span> <span class="keyword">if</span> a &lt; c <span class="keyword">then</span> a <span class="keyword">else</span> <span class="keyword">if</span> b &lt; c <span class="keyword">then</span> b <span class="keyword">else</span> c</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> b &lt; c <span class="keyword">then</span> b <span class="keyword">else</span> <span class="keyword">if</span> a &lt; c <span class="keyword">then</span> a <span class="keyword">else</span> c</div><div class="line"></div><div class="line"><span class="keyword">let</span> myDtwArray2D_B (d1:float[]) (d2:float[]) =</div><div class="line">    <span class="keyword">let</span> n = Array.length d1</div><div class="line">    <span class="keyword">let</span> m = Array.length d2</div><div class="line">    <span class="keyword">let</span> path = Array2D.init (n+<span class="number">1</span>) (m+<span class="number">1</span>) (<span class="keyword">fun</span> _ _ -&gt; <span class="number">0.</span>)</div><div class="line">    [<span class="number">1.</span>.n] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[x,<span class="number">0</span>] &lt;- Double.PositiveInfinity)</div><div class="line">    [<span class="number">1.</span>.m] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[<span class="number">0</span>,x] &lt;- Double.PositiveInfinity)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1.</span>.n] <span class="keyword">do</span></div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">1.</span>.m] <span class="keyword">do</span></div><div class="line">            <span class="keyword">let</span> cost = distance d1.[i<span class="number">-1</span>] d2.[j<span class="number">-1</span>]</div><div class="line">            path.[i,j] &lt;- cost + (min</div><div class="line">                path.[i<span class="number">-1</span>,j]</div><div class="line">                path.[i,j<span class="number">-1</span>]</div><div class="line">                path.[i<span class="number">-1</span>,j<span class="number">-1</span>])</div><div class="line"></div><div class="line">    path.[n,m]</div></pre></td></tr></table></figure>
<p>Well, this is alot better.  The performance is even close to NDtw.  This is decent for a small amount effort.  Taking a closer look, the GC numbers are troubling.  My implementation numbers are high in comparison.  Maybe there is something I can do about that.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cost = myDtwArray2D_B ibmData fordData</div><div class="line"></div><div class="line"><span class="comment">// Real: 00:00:01.769, CPU: 00:00:01.781, GC gen0: 327, gen1: 57, gen2: 1</span></div></pre></td></tr></table></figure>
<p>What can I do?  Well, F# is a functional language with optimized <a href="https://en.wikipedia.org/wiki/Tail_recursion" target="_blank" rel="external">tail calls</a>.  For those not familar, the TLDR version is to write a recursive call in such a way that the last operation in the function is the return value.  When written in such a way it allows the compiler to effectively unwrap the recursion as a loop with no additional stack frames being allocated.  This is a brief, and unperfect, explanation, so it’s worth investigating further.  It is a really powerful construct.  In this particular case my hope is reduced stack allocations means less object creation, so less to garbage collect.  That means it is time to rework the function to be recursive, and more to the point, leverage tail call optimization.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myDtwArray2DRecursive (d1:float[]) (d2:float[]) =</div><div class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> myDtwArray2DRecursive' i j n m (path:float[,]) (d1:float[]) (d2:float[]) =</div><div class="line">        <span class="keyword">if</span> i &gt; n <span class="keyword">then</span></div><div class="line">            path.[n,m]</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> j &gt; m <span class="keyword">then</span></div><div class="line">            myDtwArray2DRecursive' (i + <span class="number">1</span>) <span class="number">1</span> n m path d1 d2</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">let</span> cost = distance d1.[i<span class="number">-1</span>] d2.[j<span class="number">-1</span>]</div><div class="line">            path.[i,j] &lt;- cost + (min</div><div class="line">                path.[i<span class="number">-1</span>,j]</div><div class="line">                path.[i,j<span class="number">-1</span>]</div><div class="line">                path.[i<span class="number">-1</span>,j<span class="number">-1</span>])</div><div class="line"></div><div class="line">            myDtwArray2DRecursive' (i) (j+<span class="number">1</span>) n m path d1 d2</div><div class="line"></div><div class="line">    <span class="keyword">let</span> n = Array.length d1</div><div class="line">    <span class="keyword">let</span> m = Array.length d2</div><div class="line">    <span class="keyword">let</span> path = Array2D.init (n+<span class="number">1</span>) (m+<span class="number">1</span>) (<span class="keyword">fun</span> _ _ -&gt; <span class="number">0.</span>)</div><div class="line">    [<span class="number">1.</span>.n] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[x,<span class="number">0</span>] &lt;- Double.PositiveInfinity)</div><div class="line">    [<span class="number">1.</span>.m] |&gt; List.iter (<span class="keyword">fun</span> x -&gt; path.[<span class="number">0</span>,x] &lt;- Double.PositiveInfinity)</div><div class="line"></div><div class="line">    myDtwArray2DRecursive' <span class="number">1</span> <span class="number">1</span> n m path d1 d2</div></pre></td></tr></table></figure>
<p>This is exciting.  The code is flying now (over 5x faster).  Also note the GC numbers, it appears this last modification worked like a charm.  The code is even running significantly faster than the NDtw code.  To be fair, that isn’t an apples to apples comparison, but it is a very encouraging result.  The important take away from this is a minor replace of loops for optimized tail calls can give a pretty satisifying performance boost.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cost = myDtwArray2DRecursion ibmData fordData</div><div class="line"></div><div class="line"><span class="comment">// Real: 00:00:00.367, CPU: 00:00:00.375, GC gen0: 0, gen1: 0, gen2: 0</span></div></pre></td></tr></table></figure>
<p>I like to cut numbers a couple different ways.  Now I build a mini framework to run each algorithm and report its Stopwatch time.  I store these in a list and then report on average performance.  Just to make sure my datasets and calls don’t accidently get memoized or cached, I modify the datasets on each iteration run.  It probably isn’t necessary, but its an easy way to protected against black magics trying to help me when I don’t want the performance help.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Test algorithm, time with stopwatch, add to performance results</span></div><div class="line"><span class="keyword">let</span> testAlgorithm description fn perfResults =</div><div class="line">    <span class="keyword">let</span> stopWatch = System.Diagnostics.Stopwatch.StartNew()</div><div class="line">    <span class="keyword">let</span> cost = fn()</div><div class="line">    stopWatch.Stop()</div><div class="line">    printfn <span class="string">"%20s = %f Time: %f"</span> description cost stopWatch.Elapsed.TotalMilliseconds</div><div class="line">    List.Cons((description, stopWatch.Elapsed.TotalMilliseconds), perfResults)</div><div class="line"></div><div class="line"><span class="comment">// Run multiple trials</span></div><div class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> perfResults:(string * float) list = []</div><div class="line"><span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</div><div class="line">[<span class="number">0.</span><span class="number">.10</span>]</div><div class="line">|&gt; List.iter (<span class="keyword">fun</span> _ -&gt;    </div><div class="line">    <span class="keyword">let</span> ibmData' = ibmData |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x + rand.NextDouble() * <span class="number">5.</span>)</div><div class="line">    <span class="keyword">let</span> fordData' = fordData |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x + rand.NextDouble() * <span class="number">5.</span>)</div><div class="line"></div><div class="line">    perfResults &lt;- testAlgorithm <span class="string">"NDtw"</span> (<span class="keyword">fun</span> () -&gt;</div><div class="line">        <span class="keyword">let</span> dtw = <span class="keyword">new</span> Dtw(ibmData', fordData')</div><div class="line">        dtw.GetCost()) perfResults</div><div class="line"></div><div class="line">    perfResults &lt;- testAlgorithm <span class="string">"Array2D_A"</span> (<span class="keyword">fun</span> () -&gt;</div><div class="line">        myDtwArray2D_A ibmData' fordData') perfResults</div><div class="line"></div><div class="line">    perfResults &lt;- testAlgorithm <span class="string">"Array2D_B"</span> (<span class="keyword">fun</span> () -&gt;</div><div class="line">        myDtwArray2D_B ibmData' fordData') perfResults</div><div class="line"></div><div class="line">    perfResults &lt;- testAlgorithm <span class="string">"Array2DRecursive"</span> (<span class="keyword">fun</span> () -&gt;</div><div class="line">        myDtwArray2DRecursive ibmData' fordData') perfResults</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment">// Show aggregate results</span></div><div class="line">printfn <span class="string">"%20s %8s %8s %8s"</span> <span class="string">"algo"</span> <span class="string">"avg"</span> <span class="string">"min"</span> <span class="string">"max"</span></div><div class="line">perfResults</div><div class="line">|&gt; List.groupBy fst</div><div class="line">|&gt; List.map (<span class="keyword">fun</span> (k,v) -&gt; </div><div class="line">    (k, </div><div class="line">     List.averageBy snd v, </div><div class="line">     (List.min (List.map snd v)),</div><div class="line">     (List.max (List.map snd v))))</div><div class="line">|&gt; List.sortBy (<span class="keyword">fun</span> (_, avg, _, _) -&gt; avg)</div><div class="line">|&gt; List.iter (<span class="keyword">fun</span> (k, avg, min, max) -&gt; </div><div class="line">    printfn <span class="string">"%20s %8.1f %8.1f %8.1f"</span> k avg min max)</div></pre></td></tr></table></figure>
<p>Here are the average/min/max runtimes for each function.  I like to keep an eye on differences in run environments, so I run a couple different iterations using the REPL, fsharpi (Mono), and fsi (.NET CLR).  The results are below.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// REPL</span></div><div class="line">                algo      avg      min      max</div><div class="line">    Array2DRecursive    <span class="number">353.2</span>    <span class="number">329.1</span>    <span class="number">498.8</span> <span class="comment">// TCO!</span></div><div class="line">           Array2D_B   <span class="number">1750.2</span>   <span class="number">1681.5</span>   <span class="number">1966.7</span> <span class="comment">// Using custom min function</span></div><div class="line">                NDtw   <span class="number">1975.5</span>   <span class="number">1713.1</span>   <span class="number">2322.1</span> <span class="comment">// Baseline</span></div><div class="line">           Array2D_A  <span class="number">11874.8</span>  <span class="number">11627.4</span>  <span class="number">12141.0</span> <span class="comment">// Using List.min</span></div></pre></td></tr></table></figure>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fsharpi dtwcompare.fsx</span></div><div class="line">                algo      avg      min      max        </div><div class="line">    Array2DRecursive    <span class="number">547.5</span>    <span class="number">507.0</span>    <span class="number">592.4</span>        </div><div class="line">                NDtw   <span class="number">1055.8</span>    <span class="number">999.8</span>   <span class="number">1317.1</span>        </div><div class="line">           Array2D_B   <span class="number">1552.8</span>   <span class="number">1522.3</span>   <span class="number">1633.7</span>        </div><div class="line">           Array2D_A   <span class="number">6581.2</span>   <span class="number">4409.3</span>   <span class="number">8533.6</span>        </div></pre></td></tr></table></figure>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fsi dtwcompare.fsx (fsi version 4.40.23020.0)</span></div><div class="line">                algo      avg      min      max</div><div class="line">    Array2DRecursive    <span class="number">659.4</span>    <span class="number">556.6</span>    <span class="number">757.3</span></div><div class="line">                NDtw   <span class="number">1964.3</span>   <span class="number">1819.1</span>   <span class="number">2097.0</span></div><div class="line">           Array2D_B   <span class="number">2903.6</span>   <span class="number">2821.2</span>   <span class="number">3046.9</span></div><div class="line">           Array2D_A  <span class="number">13808.5</span>  <span class="number">13061.0</span>  <span class="number">14632.9</span></div></pre></td></tr></table></figure>
<p>The comparative performance is similar, although NDtw and version B flip flop positions.  Those two seem to run about the same, so that probably has more to do with what’s going on my machine at the time.  I did expect faster performance with fsi than fsharpi, so that is a bit of surprise.  It is just a reminder that assumptions should always be tested.  Investigating that further may be worthy of a blog post itself.  This has been an interesting examination into implementing a DTW algorithm.  It turned into more of an optimization exercise than I expected, which was a pleasant turn of events.  I hope this has been useful, and inspired more F# algorithm implementations, more dynamic time warping, and more tail calls! </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My recent post about &lt;a href=&quot;/2016/12/13/F-and-Dynamic-Time-Warping/&quot;&gt;Dynamic Time Warping&lt;/a&gt; used an external library.  It inspired me to implement the algorithm in &lt;a href=&quot;http://fsharp.org/&quot;&gt;F#&lt;/a&gt;.  This is mostly just to see it in F#.  My last implementation was in &lt;a href=&quot;http://racket-lang.org/&quot;&gt;Racket&lt;/a&gt;, and I’m interested in the different language implementations. I use a pretty basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_time_warping#Implementation&quot;&gt;Algorithm&lt;/a&gt;, nothing fancy. As part of this process I’ll be doing comparisons between &lt;a href=&quot;https://github.com/doblak/ndtw&quot;&gt;NDtw&lt;/a&gt; and my code.  To be upfront, its not a perfect comparison.  NDtw has additional options and tracking that will reduce it’s max performance capabilities.  But for hacking around, the implementations will be close enough for alittle fun.  For anyone interested, unless otherwise specified, all of my results will be from the REPL in &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; + &lt;a href=&quot;http://ionide.io/&quot;&gt;Ionide&lt;/a&gt; using &lt;a href=&quot;http://www.mono-project.com/&quot;&gt;Mono&lt;/a&gt; version 4.6.2.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="DTW" scheme="http://codesuji.com/tags/DTW/"/>
    
      <category term="Dynamic Time Warping" scheme="http://codesuji.com/tags/Dynamic-Time-Warping/"/>
    
      <category term="Signals" scheme="http://codesuji.com/tags/Signals/"/>
    
      <category term="Similarity" scheme="http://codesuji.com/tags/Similarity/"/>
    
      <category term="Optimization" scheme="http://codesuji.com/tags/Optimization/"/>
    
      <category term="Tail calls" scheme="http://codesuji.com/tags/Tail-calls/"/>
    
      <category term="Racket" scheme="http://codesuji.com/tags/Racket/"/>
    
      <category term="VS Code" scheme="http://codesuji.com/tags/VS-Code/"/>
    
      <category term="Ionide" scheme="http://codesuji.com/tags/Ionide/"/>
    
      <category term="Mono" scheme="http://codesuji.com/tags/Mono/"/>
    
  </entry>
  
  <entry>
    <title>F# and Dynamic Time Warping</title>
    <link href="http://codesuji.com/2016/12/13/F-and-Dynamic-Time-Warping/"/>
    <id>http://codesuji.com/2016/12/13/F-and-Dynamic-Time-Warping/</id>
    <published>2016-12-14T02:07:21.000Z</published>
    <updated>2017-01-14T19:47:13.533Z</updated>
    
    <content type="html"><![CDATA[<p>Today I look at using <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> with the <a href="https://github.com/doblak/ndtw" target="_blank" rel="external">NDtw</a> package.  This is so I can play with some <a href="https://en.wikipedia.org/wiki/Dynamic_time_warping" target="_blank" rel="external">dynamic time warping</a>.  In case you’re not familar with DTW, the TLDR version is that it is a method to compare timeseries data that can differ in frequency.  This allows for a more nuanced data comparison that can capture shifted, compressed, and extended patterns.  It’s a fun little algorithm to use and worth reading more about.</p>
<a id="more"></a>
<p>Onto the data. I’ve pulled an <a href="https://www.kaggle.com/wanghaohan/eeg-brain-wave-for-confusion" target="_blank" rel="external">EEG</a> dataset from Kaggle.  I’ve also included a copy <a href="/data/EEG_data.zip">here</a> for posterity sake.  It contains EEG data of subjects watching short videos.  The goal of the dataset is mental state classification.  I won’t be doing that here, but I can see using DTW as a method to facilitate classification based on channel smiliarties.</p>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample paket.dependencies file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget FSharp.Charting</div><div class="line">nuget FSharp.Data</div><div class="line">nuget NDtw</div></pre></td></tr></table></figure>
<p>Here is my standard boilerplate code, along with the VideoId that I will be using for testing.  As a note, all of the data columns are floats, including the subject and video ids.  If I was doing something more serious I’d be inclined to convert these, but do do something quick I’ll deal with it.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#r <span class="string">"../packages/FSharp.Charting/lib/net40/FSharp.Charting.dll"</span></div><div class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></div><div class="line">#r <span class="string">"../packages/ndtw/lib/net40/ndtw.dll"</span></div><div class="line">#load <span class="string">"../packages/FSharp.Charting/FSharp.Charting.fsx"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"><span class="keyword">open</span> FSharp.Charting</div><div class="line"><span class="keyword">open</span> FSharp.Data</div><div class="line"><span class="keyword">open</span> NDtw</div><div class="line"></div><div class="line"><span class="comment">// Limit to only video 6</span></div><div class="line"><span class="keyword">let</span> videoIdFilter = <span class="number">6.</span> </div></pre></td></tr></table></figure>
<p>Load data using a type provider.  Since the file doesn’t have headers, I’ll use Schema to define the column names.  As a note, the <code>[&lt;Literal&gt;]</code> attribute on eegDataFile is so I can use the string in the CsvProvider.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[&lt;Literal&gt;]</span></div><div class="line"><span class="keyword">let</span> eegDataFile = <span class="string">"..\\data\\eeg\\eeg_data.csv"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">EegData</span> </span>= CsvProvider&lt;eegDataFile, HasHeaders = <span class="keyword">false</span>, Schema = <span class="string">"SubjectID,VideoID,Attention,Mediation,RawEEG,Delta,Theta,Alpha1,Alpha2,Beta1,Beta2,Gamma1,Gamma2,PredefinedLabel,UserDefinedLabel"</span>&gt;</div><div class="line"></div><div class="line"><span class="keyword">let</span> fileData = EegData.Load eegDataFile</div><div class="line"><span class="keyword">let</span> allData = fileData.Rows </div><div class="line"></div><div class="line"><span class="keyword">let</span> subjectIds = fileData.Rows |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; x.SubjectID) |&gt; Seq.distinct </div></pre></td></tr></table></figure>
<p>I now create a function to extract subject and video specific rows from the dataset.  I also reduce the dataset to a single value for the signal.  I’ve decided to use the Theta channel.  This is arbitrary, but is primarily due to this quote from the dataset’s Kaggle page “Past research has indicated that Theta signal is correlated with confusion level.”  This leads me to believe it might be the most likely channel to find interesting comparisons.  So the resulting charts are easier to read, I limit the dataset to the first 100 rows of data per subject/video combination.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get subject &amp; video specific data, only pull the first 100 records of the dataset</span></div><div class="line"><span class="keyword">let</span> dataset subjectId videoId = </div><div class="line">    allData</div><div class="line">    |&gt; Seq.filter(<span class="keyword">fun</span> x -&gt; x.SubjectID = subjectId &amp;&amp; x.VideoID = videoId)</div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; x.Theta) </div><div class="line">    |&gt; Seq.take <span class="number">100</span></div><div class="line">    |&gt; Seq.toList</div></pre></td></tr></table></figure>
<p>Here is the dynamic time warping distance calculation function.  The call is straight foward.  After all this setup its almost anticlimatic. It expects 2 parameters, both being an array of values. </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get the distance between two signals</span></div><div class="line"><span class="keyword">let</span> distance (a:float seq) (b:float seq) = </div><div class="line">    <span class="keyword">let</span> dtw = <span class="keyword">new</span> Dtw(</div><div class="line">        a |&gt; Seq.toArray,</div><div class="line">        b |&gt; Seq.toArray)</div><div class="line">    dtw.GetCost()</div></pre></td></tr></table></figure>
<p>The NDtw library allows for a more complicated DTW call if so desired.  I’ve made an alternate distance function using the more complex version.  As an example, it allows for different distance calculations: Euclidean, Manhattan, Maximum, SquaredEuclidean. It also allows for limitations how much the path diverges from the standard path.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get the distance between two signals (using more advanced dtw call)</span></div><div class="line"><span class="keyword">let</span> distanceAdvanced (a:float seq) (b:float seq) = </div><div class="line">    <span class="keyword">let</span> dtw = <span class="keyword">new</span> Dtw(</div><div class="line">        a |&gt; Seq.toArray,</div><div class="line">        b |&gt; Seq.toArray,</div><div class="line">        DistanceMeasure.Euclidean,</div><div class="line">        <span class="keyword">true</span>, <span class="comment">// boundaryConstraintStart </span></div><div class="line">        <span class="keyword">true</span>, <span class="comment">// boundaryConstraintEnd</span></div><div class="line">        Nullable&lt;int&gt;(<span class="number">2</span>), <span class="comment">// slopeStepSizeDiagonal</span></div><div class="line">        Nullable&lt;int&gt;(<span class="number">2</span>), <span class="comment">// slopStepSizeAside</span></div><div class="line">        Nullable&lt;int&gt;(<span class="number">2</span>)) <span class="comment">// sakoeChibaMaxShift</span></div><div class="line">    dtw.GetCost()</div></pre></td></tr></table></figure>
<p>As a short aside, the library offers a couple other bits of useful functionality that I am not using right now, but worth mentioning.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Example comparison of 2 small datasets</span></div><div class="line"><span class="keyword">let</span> exampleDtw = <span class="keyword">new</span> Dtw(</div><div class="line">    [| <span class="number">1.</span>; <span class="number">3.</span>; <span class="number">7.</span>; <span class="number">8.</span>; <span class="number">11.</span>;  <span class="number">6.</span>; <span class="number">6.</span>; |],</div><div class="line">    [| <span class="number">3.</span>; <span class="number">6.</span>; <span class="number">3.</span>; <span class="number">7.</span>; <span class="number">13.</span>; <span class="number">12.</span>; <span class="number">7.</span>; |])</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Get the coordinate path used for the best match between the datasets</span></div><div class="line">exampleDtw.GetPath()</div><div class="line"></div><div class="line"><span class="keyword">val</span> it : (int * int) [] =</div><div class="line">  [|(<span class="number">0</span>, <span class="number">0</span>); (<span class="number">1</span>, <span class="number">1</span>); (<span class="number">1</span>, <span class="number">2</span>); (<span class="number">2</span>, <span class="number">3</span>); (<span class="number">3</span>, <span class="number">3</span>); (<span class="number">4</span>, <span class="number">4</span>); (<span class="number">4</span>, <span class="number">5</span>); (<span class="number">5</span>, <span class="number">6</span>); (<span class="number">6</span>, <span class="number">6</span>)|]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Get the matrix of distance comparisons on a point by point basis</span></div><div class="line">exampleDtw.GetDistanceMatrix()</div><div class="line"></div><div class="line"><span class="keyword">val</span> it : float [] [] =</div><div class="line">  [|[|<span class="number">2.0</span>; <span class="number">5.0</span>; <span class="number">2.0</span>; <span class="number">6.0</span>; <span class="number">12.0</span>; <span class="number">11.0</span>; <span class="number">6.0</span>; <span class="number">0.0</span>|];</div><div class="line">    [|<span class="number">0.0</span>; <span class="number">3.0</span>; <span class="number">0.0</span>; <span class="number">4.0</span>; <span class="number">10.0</span>; <span class="number">9.0</span>; <span class="number">4.0</span>; <span class="number">0.0</span>|];</div><div class="line">    [|<span class="number">4.0</span>; <span class="number">1.0</span>; <span class="number">4.0</span>; <span class="number">0.0</span>; <span class="number">6.0</span>; <span class="number">5.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|];</div><div class="line">    [|<span class="number">5.0</span>; <span class="number">2.0</span>; <span class="number">5.0</span>; <span class="number">1.0</span>; <span class="number">5.0</span>; <span class="number">4.0</span>; <span class="number">1.0</span>; <span class="number">0.0</span>|];</div><div class="line">    [|<span class="number">8.0</span>; <span class="number">5.0</span>; <span class="number">8.0</span>; <span class="number">4.0</span>; <span class="number">2.0</span>; <span class="number">1.0</span>; <span class="number">4.0</span>; <span class="number">0.0</span>|];</div><div class="line">    [|<span class="number">3.0</span>; <span class="number">0.0</span>; <span class="number">3.0</span>; <span class="number">1.0</span>; <span class="number">7.0</span>; <span class="number">6.0</span>; <span class="number">1.0</span>; <span class="number">0.0</span>|];</div><div class="line">    [|<span class="number">3.0</span>; <span class="number">0.0</span>; <span class="number">3.0</span>; <span class="number">1.0</span>; <span class="number">7.0</span>; <span class="number">6.0</span>; <span class="number">1.0</span>; <span class="number">0.0</span>|];</div><div class="line">    [|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]|]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Get the matrix of cost (aka difference) between the datasets </span></div><div class="line">exampleDtw.GetCostMatrix()</div><div class="line"></div><div class="line"><span class="keyword">val</span> it : float [] [] =</div><div class="line">  [|[|<span class="number">11.0</span>; <span class="number">11.0</span>; <span class="number">8.0</span>; <span class="number">16.0</span>; <span class="number">28.0</span>; <span class="number">22.0</span>; <span class="number">17.0</span>; infinity|];</div><div class="line">    [|<span class="number">9.0</span>; <span class="number">9.0</span>; <span class="number">6.0</span>; <span class="number">10.0</span>; <span class="number">22.0</span>; <span class="number">16.0</span>; <span class="number">11.0</span>; infinity|];</div><div class="line">    [|<span class="number">15.0</span>; <span class="number">11.0</span>; <span class="number">10.0</span>; <span class="number">6.0</span>; <span class="number">13.0</span>; <span class="number">12.0</span>; <span class="number">7.0</span>; infinity|];</div><div class="line">    [|<span class="number">18.0</span>; <span class="number">13.0</span>; <span class="number">11.0</span>; <span class="number">6.0</span>; <span class="number">8.0</span>; <span class="number">7.0</span>; <span class="number">7.0</span>; infinity|];</div><div class="line">    [|<span class="number">26.0</span>; <span class="number">22.0</span>; <span class="number">17.0</span>; <span class="number">9.0</span>; <span class="number">5.0</span>; <span class="number">3.0</span>; <span class="number">6.0</span>; infinity|];</div><div class="line">    [|<span class="number">21.0</span>; <span class="number">18.0</span>; <span class="number">18.0</span>; <span class="number">15.0</span>; <span class="number">14.0</span>; <span class="number">7.0</span>; <span class="number">2.0</span>; infinity|];</div><div class="line">    [|<span class="number">21.0</span>; <span class="number">18.0</span>; <span class="number">18.0</span>; <span class="number">15.0</span>; <span class="number">14.0</span>; <span class="number">7.0</span>; <span class="number">1.0</span>; infinity|];</div><div class="line">    [|infinity; infinity; infinity; infinity; infinity; infinity; infinity; infinity|]|]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Get difference between datasets</span></div><div class="line">exampleDtw.GetCost()</div><div class="line"></div><div class="line"><span class="keyword">val</span> it : float = <span class="number">11.0</span></div></pre></td></tr></table></figure>
<p>Back to the task at hand, I build a function to compare each subject’s signal against each other subject’s signal.  Then I get the best match I can find and store the results in subject1, subject2, and difference.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Compare each subject against every other subject</span></div><div class="line"><span class="keyword">let</span> comparisons = </div><div class="line">    subjectIds</div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; </div><div class="line">        subjectIds</div><div class="line">        |&gt; Seq.filter (<span class="keyword">fun</span> y -&gt; y &lt;&gt; x)</div><div class="line">        |&gt; Seq.map (<span class="keyword">fun</span> y -&gt; </div><div class="line">            <span class="keyword">let</span> d = distance (dataset x videoIdFilter) (dataset y videoIdFilter)</div><div class="line">            (x, y, d)))</div><div class="line">    |&gt; Seq.concat</div><div class="line">    |&gt; Seq.sortBy (<span class="keyword">fun</span> (_, _, d) -&gt; d)</div><div class="line"></div><div class="line"><span class="keyword">let</span> (subject1, subject2, difference) = </div><div class="line">    comparisons</div><div class="line">    |&gt; Seq.take <span class="number">1</span></div><div class="line">    |&gt; Seq.exactlyOne</div></pre></td></tr></table></figure>
<p>For visualization purposes, I create a comparison chart for each subject against Subject 1.  Then I save the charts to files.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Chart.Combine([</div><div class="line">    Chart.FastLine(dataset subject1 videoIdFilter, Name=sprintf <span class="string">"Subject %1.0f"</span> subject1).WithLegend(<span class="keyword">true</span>);</div><div class="line">    Chart.FastLine(dataset subject2 videoIdFilter, Name=sprintf <span class="string">"Subject %1.0f"</span> subject2).WithLegend(<span class="keyword">true</span>)])</div><div class="line">|&gt; Chart.WithTitle(String.Format(<span class="string">"Difference: &#123;0:n1&#125;"</span>, difference))</div><div class="line">|&gt; Chart.Show</div><div class="line"></div><div class="line"><span class="comment">// Show comparison charts</span></div><div class="line">comparisons</div><div class="line"><span class="comment">// Only include matches against subject1</span></div><div class="line">|&gt; Seq.filter (<span class="keyword">fun</span> (s1, s2, d) -&gt; s1 = subject1)</div><div class="line"><span class="comment">// Exclude subject1 vs. subject1</span></div><div class="line">|&gt; Seq.filter (<span class="keyword">fun</span> (s1, s2, d) -&gt; s2 &lt;&gt; subject1)</div><div class="line"><span class="comment">// Chart each pair</span></div><div class="line">|&gt; Seq.iter (<span class="keyword">fun</span> (s1, s2, d) -&gt; </div><div class="line">    Chart.Combine([</div><div class="line">        Chart.FastLine(dataset s1 videoIdFilter, Name=sprintf <span class="string">"Subject %1.0f"</span> s1).WithLegend(<span class="keyword">true</span>);</div><div class="line">        Chart.FastLine(dataset s2 videoIdFilter, Name=sprintf <span class="string">"Subject %1.0f"</span> s2).WithLegend(<span class="keyword">true</span>)])</div><div class="line">    |&gt; Chart.WithTitle(String.Format(<span class="string">"Difference: &#123;0:n1&#125;)"</span>, d))</div><div class="line">    |&gt; Chart.WithYAxis(Min = <span class="number">0.</span>, Max = <span class="number">1000000.</span>)</div><div class="line">    |&gt; Chart.Save (Path.Combine(__SOURCE_DIRECTORY__, String.Format(<span class="string">@"..\\data\\eeg\\chart_&#123;0:n0&#125;_&#123;1:n0&#125;.png"</span>, s1, s2)))</div><div class="line">    <span class="comment">//|&gt; Chart.Show</span></div><div class="line">    )</div></pre></td></tr></table></figure>
<p>Here are the top couple matches, in the format (subject1, subject2, distance).</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Show distances for our winner </span></div><div class="line">comparisons</div><div class="line">|&gt; Seq.filter (<span class="keyword">fun</span> (s1, _, _) -&gt; s1 = <span class="number">1.0</span>)</div><div class="line">|&gt; Seq.sortBy (<span class="keyword">fun</span> (_, _, d) -&gt; d)</div><div class="line">|&gt; Seq.iter (<span class="keyword">fun</span> (s1, s2, d) -&gt; printfn <span class="string">"%1.0f %1.0f %10.1f"</span> s1 s2 d)</div><div class="line"></div><div class="line"><span class="number">1</span> <span class="number">7</span>  <span class="number">4442366.0</span></div><div class="line"><span class="number">1</span> <span class="number">4</span>  <span class="number">5256824.0</span></div><div class="line"><span class="number">1</span> <span class="number">2</span>  <span class="number">6801045.0</span></div><div class="line"><span class="number">1</span> <span class="number">9</span>  <span class="number">9462037.0</span></div><div class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">11714938.0</span></div><div class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">12763188.0</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>Here is the top signal match.</p>
<p><img src="/images/dtw1/chart_1_7.png" alt="Best Match"></p>
<p>Here are the other subjects compared to subject 1.</p>
<p><img src="/images/dtw1/chart_1_4.png" alt="Comparison: Signal 1 and Signal 4"></p>
<p><img src="/images/dtw1/chart_1_2.png" alt="Comparison: Signal 1 and Signal 2"></p>
<p><img src="/images/dtw1/chart_1_9.png" alt="Comparison: Signal 1 and Signal 9"></p>
<p><img src="/images/dtw1/chart_1_8.png" alt="Comparison: Signal 1 and Signal 8"></p>
<p><img src="/images/dtw1/chart_1_0.png" alt="Comparison: Signal 1 and Signal 0"></p>
<p><img src="/images/dtw1/chart_1_6.png" alt="Comparison: Signal 1 and Signal 6"></p>
<p><img src="/images/dtw1/chart_1_3.png" alt="Comparison: Signal 1 and Signal 3"></p>
<p><img src="/images/dtw1/chart_1_5.png" alt="Comparison: Signal 1 and Signal 5"></p>
<p>There is it.  The best match it can find is between subjects 1 and 7, although 1 and 4 are a close second. This has been a fun experiment.  Until next time.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I look at using &lt;a href=&quot;http://fsharp.org/&quot;&gt;F#&lt;/a&gt; with the &lt;a href=&quot;https://github.com/doblak/ndtw&quot;&gt;NDtw&lt;/a&gt; package.  This is so I can play with some &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_time_warping&quot;&gt;dynamic time warping&lt;/a&gt;.  In case you’re not familar with DTW, the TLDR version is that it is a method to compare timeseries data that can differ in frequency.  This allows for a more nuanced data comparison that can capture shifted, compressed, and extended patterns.  It’s a fun little algorithm to use and worth reading more about.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="DTW" scheme="http://codesuji.com/tags/DTW/"/>
    
      <category term="Dynamic Time Warping" scheme="http://codesuji.com/tags/Dynamic-Time-Warping/"/>
    
      <category term="Signals" scheme="http://codesuji.com/tags/Signals/"/>
    
      <category term="Similarity" scheme="http://codesuji.com/tags/Similarity/"/>
    
      <category term="EEG" scheme="http://codesuji.com/tags/EEG/"/>
    
      <category term="Kaggle" scheme="http://codesuji.com/tags/Kaggle/"/>
    
  </entry>
  
  <entry>
    <title>Decision Trees with F# and Accord.NET (Part 2)</title>
    <link href="http://codesuji.com/2016/12/07/Decision-Trees-with-F-and-Accord-NET-Part-2/"/>
    <id>http://codesuji.com/2016/12/07/Decision-Trees-with-F-and-Accord-NET-Part-2/</id>
    <published>2016-12-08T03:12:19.000Z</published>
    <updated>2017-01-14T19:46:30.263Z</updated>
    
    <content type="html"><![CDATA[<p>This is part 2 of my attempt to use an <a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a> Decision Tree to classify Lego set themes using <a href="http://fsharp.org/" target="_blank" rel="external">F#</a>.  Just as a reminder, the original data source is <a href="http://rebrickable.com/downloads" target="_blank" rel="external">Rebrickable</a>.  You can find <a href="/2016/12/05/Decision-Trees-with-F-and-Accord-NET-Part-1">Part 1</a> here.</p>
<a id="more"></a>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample paket.dependencies file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget Accord</div><div class="line">nuget Accord.Math</div><div class="line">nuget Accord.Statistics</div><div class="line">nuget Accord.MachineLearning</div><div class="line">nuget FSharp.Data</div></pre></td></tr></table></figure>
<p>This is the boring setup stuff.  It also includes some utility functions.  Not specific just to the utility functions, but one of my goals for these functions is flexibility.  I can add and remove features from the extract script without impacting code here.  This dynamic aspect of function building makes testing changes easier.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#i <span class="string">"../packages"</span></div><div class="line">#r <span class="string">"../packages/Accord/lib/net45/accord.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.MachineLearning/lib/net45/accord.machinelearning.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.Core.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Statistics/lib/net45/Accord.Statistics.dll"</span></div><div class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"><span class="keyword">open</span> Accord</div><div class="line"><span class="keyword">open</span> Accord.MachineLearning</div><div class="line"><span class="keyword">open</span> Accord.MachineLearning.DecisionTrees</div><div class="line"><span class="keyword">open</span> Accord.MachineLearning.DecisionTrees.Learning</div><div class="line"><span class="keyword">open</span> Accord.Math</div><div class="line"><span class="keyword">open</span> Accord.Statistics.Analysis</div><div class="line"><span class="keyword">open</span> FSharp.Data</div><div class="line"></div><div class="line"><span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</div><div class="line"></div><div class="line"><span class="comment">// Shuffle an array (in-place)</span></div><div class="line"><span class="keyword">let</span> shuffle (a:<span class="symbol">'a</span>[]) =</div><div class="line">    <span class="keyword">let</span> swapByIndex i j =</div><div class="line">        <span class="keyword">let</span> tmp = a.[i]</div><div class="line">        a.[i] &lt;- a.[j]</div><div class="line">        a.[j] &lt;- tmp</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> maxIndex = Array.length a - <span class="number">1</span></div><div class="line">    [|<span class="number">0.</span>.maxIndex|] </div><div class="line">    |&gt; Array.iter (<span class="keyword">fun</span> i -&gt; swapByIndex i (rand.Next maxIndex))</div><div class="line">    a</div><div class="line"></div><div class="line"><span class="comment">// Send a tree + input + output and generate a tuple with results for comparison</span></div><div class="line"><span class="keyword">let</span> getResults (tree:DecisionTree) (inputs:float[][]) (outputs:int[]) =</div><div class="line">    Array.zip inputs outputs</div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> (i,o) -&gt; (i, o, tree.Decide(i)))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Calculate number of correct predictions</span></div><div class="line"><span class="keyword">let</span> resultsTotalCorrect results = </div><div class="line">    results</div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> (_, actual:int, predicted:int) -&gt; </div><div class="line">        <span class="keyword">if</span> actual = predicted <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>)</div><div class="line">    |&gt; Array.fold (+) <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Use the input and output datasets to get correct prediction stats</span></div><div class="line"><span class="keyword">let</span> processResults tree inputs outputs = </div><div class="line">    <span class="keyword">let</span> results = getResults tree inputs outputs</div><div class="line">    (</div><div class="line">        results, </div><div class="line">        resultsTotalCorrect results</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment">// Display results</span></div><div class="line"><span class="keyword">let</span> showResults description correct total =</div><div class="line">    printfn <span class="string">"%s - Direct row match  : Correct %d/%d (%.3f)"</span> description correct total (float(correct) / (float(total)))</div></pre></td></tr></table></figure>
<p>Here are some data transformation functions. <em>buildTrainTestIndexes</em> generates a list of indexes for the training and test sets.  The data is randomized and all records are in one and only one set (no overlap between train and test).  <em>splitDataset</em> does the actual split into train and test sets.  <em>splitDataIntoInputAndOutput</em> breaks a dataset into inputs and outputs for decision tree consumption.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Build a list of indexes for the train and test sets</span></div><div class="line"><span class="comment">// Current implementation assigns a random 'trainpercent' of the indexes</span></div><div class="line"><span class="comment">// to the trainingset, and the remainder to the test set</span></div><div class="line"><span class="keyword">let</span> buildTrainTestIndexes (length:int) (trainPercent:float) :(int[] * int[]) = </div><div class="line">    <span class="keyword">let</span> splitIndex = int(Math.Floor(trainPercent * float(length<span class="number">-1</span>)))</div><div class="line">    <span class="keyword">let</span> indexes = [|<span class="number">0.</span>.length - <span class="number">1</span>|]</div><div class="line">    shuffle indexes |&gt; ignore</div><div class="line">    (indexes.[<span class="number">0.</span>.splitIndex],  <span class="comment">// training indexes</span></div><div class="line">     indexes.[splitIndex+<span class="number">1.</span>.])  <span class="comment">// testing indexes</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Split a dataset into a trainingset and a testing set (with no overlap)</span></div><div class="line"><span class="keyword">let</span> splitDataset (d:list&lt;<span class="symbol">'a</span>&gt;) (trainPercent:float) =</div><div class="line">    <span class="keyword">let</span> (trainIndexes, testIndexes) = buildTrainTestIndexes (List.length d) trainPercent</div><div class="line">    (trainIndexes |&gt; Array.map (<span class="keyword">fun</span> i -&gt; List.item i d),  <span class="comment">// training set</span></div><div class="line">     testIndexes  |&gt; Array.map (<span class="keyword">fun</span> i -&gt; List.item i d))  <span class="comment">// testing set</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Splits dataset into its input and output </span></div><div class="line"><span class="comment">// Assumption: row's first column is label (output)</span></div><div class="line"><span class="keyword">let</span> splitDataIntoInputAndOutput (d:<span class="symbol">'a</span>[][]) = </div><div class="line">    (</div><div class="line">        d</div><div class="line">        |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.[<span class="number">1.</span>.(Array.length row - <span class="number">1</span>)]),</div><div class="line">        d</div><div class="line">        |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.[<span class="number">0</span>])</div><div class="line">    )</div></pre></td></tr></table></figure>
<p>Here are decision tree setup specific functions.  The decision tree uses a DecisionVariable collection. Decision Tree ranges come in different flavors, but all my features are double, thus DoubleRange.  The other point of interest is <em>decisionVariablesIList</em>, this is necessarily because the F# list as I was using it didn’t meet the interface needs.  This very well could be something I missed on my part, but this seemed like the only way to resolve the conflict.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> newRangeFromColumn (d:Double[][]) (i:int) = </div><div class="line">    <span class="keyword">new</span> DoubleRange(</div><div class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.min,</div><div class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.max)</div><div class="line"></div><div class="line"><span class="comment">// Create a new decision variable for a column</span></div><div class="line"><span class="keyword">let</span> newDecisionVariableFromColumn (d:Double[][]) (i:int) =</div><div class="line">    <span class="keyword">new</span> DecisionVariable((sprintf <span class="string">"col%d"</span> i), newRangeFromColumn d i)</div><div class="line"></div><div class="line"><span class="comment">// Create a list of decision variables for the DecisionTree</span></div><div class="line"><span class="keyword">let</span> decisionVariables (inputs:float[][]) = </div><div class="line">    [<span class="number">0.</span>.(Array.length inputs.[<span class="number">0</span>])<span class="number">-1</span>] </div><div class="line">    |&gt; List.map (newDecisionVariableFromColumn inputs)</div><div class="line"></div><div class="line"><span class="comment">// Create a list of decision variables for the DecisionTree</span></div><div class="line"><span class="keyword">let</span> decisionVariablesIList (inputs:float[][]) = </div><div class="line">    <span class="keyword">let</span> variableList = <span class="keyword">new</span> Collections.Generic.List&lt;DecisionVariable&gt;()</div><div class="line">    decisionVariables inputs |&gt; List.iter (<span class="keyword">fun</span> x -&gt; variableList.Add(x))</div><div class="line">    variableList</div><div class="line"></div><div class="line"><span class="comment">// Get number of classes </span></div><div class="line"><span class="keyword">let</span> numClasses (d:int[]) = Array.max d - Array.min d + <span class="number">1</span></div><div class="line"></div></pre></td></tr></table></figure>
<p>All the prep functions are in place.  First I load the data.  Often I use the CsvProvider, but in this case I want the data directly in an array.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dataset = </div><div class="line">    Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"..\\data\\legos\\aggregatedata.csv"</span>)</div><div class="line">    |&gt; File.ReadLines</div><div class="line">    |&gt; Seq.skip <span class="number">1</span> <span class="comment">// Skip header row</span></div><div class="line">    <span class="comment">//|&gt; Seq.take 10000 // For testing only take a subset of records</span></div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt;x.Split ',')</div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; Array.map (<span class="keyword">fun</span> y -&gt; float(y)) x)</div><div class="line">    |&gt; Seq.toList</div></pre></td></tr></table></figure>
<p>Here I split data into train and test sets, where 70% of the data is train.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Split dataset into train and test sets </span></div><div class="line"><span class="keyword">let</span> (trainData, testData) = splitDataset dataset <span class="number">0.7</span></div><div class="line">printfn <span class="string">"Dataset Sizes: All: %d Train: %d Test: %d"</span> (List.length dataset) (Array.length trainData) (Array.length testData)</div></pre></td></tr></table></figure>
<p>Now I split the train and test sets into input/output arrays.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Split training sets into seperate components for decision tree</span></div><div class="line"><span class="keyword">let</span> (trainInputs, trainOutputs) = splitDataIntoInputAndOutput trainData    </div><div class="line"><span class="keyword">let</span> (testInputs, testOutputs) = splitDataIntoInputAndOutput testData    </div></pre></td></tr></table></figure>
<p>Here I create and train the tree.  I use the C4.5 algorithm for the learning method.  Accord also offers ID3 for learning as well.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Build the decision tree from training data</span></div><div class="line"><span class="keyword">let</span> tree = <span class="keyword">new</span> DecisionTree(decisionVariablesIList trainInputs, numClasses (Array.map int trainOutputs))</div><div class="line"></div><div class="line"><span class="comment">// Train the tree</span></div><div class="line"><span class="keyword">let</span> c45 = <span class="keyword">new</span> C45Learning(tree)</div><div class="line"></div><div class="line"><span class="keyword">let</span> error = c45.Learn(trainInputs, (Array.map int trainOutputs))</div></pre></td></tr></table></figure>
<p>Once the tree is trained, I apply the results to the train and test sets and then display the results.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Process train and test results</span></div><div class="line"><span class="keyword">let</span> (trainResults, trainTotalCorrect) = processResults tree trainInputs (Array.map int trainOutputs)    </div><div class="line"><span class="keyword">let</span> (testResults, testTotalCorrect) = processResults tree testInputs (Array.map int testOutputs)</div><div class="line"></div><div class="line"><span class="comment">// Final display of results</span></div><div class="line">showResults <span class="string">"Train"</span> trainTotalCorrect (Array.length trainInputs)</div><div class="line">showResults <span class="string">"Test "</span> testTotalCorrect (Array.length testInputs)</div></pre></td></tr></table></figure>
<p>Below are the results.  They are disappointing, and there is certainly room for improvement.  But its a start. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Train - Direct row match  : Correct 5624/7584 (0.742)</div><div class="line">Test  - Direct row match  : Correct 1342/3250 (0.413)</div></pre></td></tr></table></figure>
<p>On a whim I attempt to use the ID3 learner instead.  This method requires discrete values.  It’s easy enough to convert all the doubles to ints.  Knowing that most of my columns are percentages, I multiple by 100, then convert to an int.  Unfortunantly, my system ran out of memory on this test.  I used fsharpi (Mono) as well as fsi (.NET CLR), but it gave me the same issue.  This deserves some additional follow-up, but I don’t have time for that rabbit-hole right now.  Below is the code I used to try the ID3 learner, if someone sees what is wrong, feel free to drop me a line.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Below is the hacked up ID3 variant of my test</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> newRangeFromColumnInt (d:int[][]) (i:int) = </div><div class="line">    <span class="keyword">new</span> IntRange(</div><div class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.min,</div><div class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.max)</div><div class="line"></div><div class="line"><span class="keyword">let</span> newDecisionVariableFromColumnInt (d:int[][]) (i:int) =</div><div class="line">    <span class="keyword">new</span> DecisionVariable((sprintf <span class="string">"col%d"</span> i), newRangeFromColumnInt d i)</div><div class="line"></div><div class="line"><span class="keyword">let</span> decisionVariablesInt (inputs:int[][]) = </div><div class="line">    [<span class="number">0.</span>.(Array.length inputs.[<span class="number">0</span>])<span class="number">-1</span>] </div><div class="line">    |&gt; List.map (newDecisionVariableFromColumnInt inputs)</div><div class="line"></div><div class="line"><span class="keyword">let</span> decisionVariablesIListInt (inputs:int[][]) = </div><div class="line">    <span class="keyword">let</span> variableList = <span class="keyword">new</span> Collections.Generic.List&lt;DecisionVariable&gt;()</div><div class="line">    decisionVariablesInt inputs |&gt; List.iter (<span class="keyword">fun</span> x -&gt; variableList.Add(x))</div><div class="line">    variableList</div><div class="line"></div><div class="line"><span class="keyword">let</span> inputsInt i = </div><div class="line">    (Array.map (<span class="keyword">fun</span> x -&gt; Array.map (<span class="keyword">fun</span> y -&gt; int(y * <span class="number">100.</span>)) x) i)</div><div class="line">    </div><div class="line"><span class="keyword">let</span> treeId3 = <span class="keyword">new</span> DecisionTree(decisionVariablesIListInt (inputsInt trainInputs), numClasses (Array.map int trainOutputs))</div><div class="line"></div><div class="line"><span class="keyword">let</span> id3 = <span class="keyword">new</span> ID3Learning(treeId3)</div><div class="line"></div><div class="line">id3.ParallelOptions.MaxDegreeOfParallelism &lt;- <span class="number">1</span></div><div class="line"><span class="keyword">let</span> errorId3 = id3.Learn((inputsInt trainInputs), (Array.map int trainOutputs))</div><div class="line"></div><div class="line"><span class="keyword">let</span> (trainResultsId3, trainTotalCorrectId3) = processResultsId3 treeId3 (inputsInt trainInputs) (Array.map int trainOutputs)    </div><div class="line"><span class="keyword">let</span> (testResultsId3, testTotalCorrectId3) = processResultsId3 treeId3 (inputsInt testInputs) (Array.map int testOutputs)</div><div class="line"></div><div class="line">showResults <span class="string">"Train"</span> trainTotalCorrectId3 (Array.length trainInputs)</div><div class="line">showResults <span class="string">"Test "</span> testTotalCorrectId3 (Array.length testInputs)</div></pre></td></tr></table></figure>
<p>Although the end results were anticlimatic, it’s nice to see it all come together.  One consolation is with over 100 possible themes, 41% on the test set isn’t the worst thing in the world.  Hopefully this has offered some insight into how to use a decision tree in Accord.NET.  Until next time…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is part 2 of my attempt to use an &lt;a href=&quot;http://accord-framework.net/&quot;&gt;Accord.NET&lt;/a&gt; Decision Tree to classify Lego set themes using &lt;a href=&quot;http://fsharp.org/&quot;&gt;F#&lt;/a&gt;.  Just as a reminder, the original data source is &lt;a href=&quot;http://rebrickable.com/downloads&quot;&gt;Rebrickable&lt;/a&gt;.  You can find &lt;a href=&quot;/2016/12/05/Decision-Trees-with-F-and-Accord-NET-Part-1&quot;&gt;Part 1&lt;/a&gt; here.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Accord.NET" scheme="http://codesuji.com/tags/Accord-NET/"/>
    
      <category term="Decision Trees" scheme="http://codesuji.com/tags/Decision-Trees/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Legos" scheme="http://codesuji.com/tags/Legos/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="Classification" scheme="http://codesuji.com/tags/Classification/"/>
    
      <category term="Statistics" scheme="http://codesuji.com/tags/Statistics/"/>
    
  </entry>
  
  <entry>
    <title>Decision Trees with F# and Accord.NET (Part 1)</title>
    <link href="http://codesuji.com/2016/12/05/Decision-Trees-with-F-and-Accord-NET-Part-1/"/>
    <id>http://codesuji.com/2016/12/05/Decision-Trees-with-F-and-Accord-NET-Part-1/</id>
    <published>2016-12-06T02:13:22.000Z</published>
    <updated>2017-01-14T19:46:17.309Z</updated>
    
    <content type="html"><![CDATA[<p>It is time for an exploration into using a Decision Tree to classify Lego set themes using <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> and <a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a>.  </p>
<p>First things first, the data. <a href="http://rebrickable.com/downloads" target="_blank" rel="external">Rebrickable</a> has downloadable datasets for Lego sets and pieces.  I’ll use the <code>sets.csv</code> file as the primary dataset driver, but will grab information from <code>sets_pieces.csv</code>, <code>pieces.csv</code>, and <code>colors.csv</code> for feature creation.  The files are not in an format appropriate for a decision tree, so some transformations will need to happen first.  I don’t want the post to get too long, so this project will be broken into two components.  Part 1 will be building the feature file and getting the data into the desired comsumable format, <a href="/2016/12/07/Decision-Trees-with-F-and-Accord-NET-Part-2">Part 2</a> will actually use the file to get to the end goal.</p>
<a id="more"></a>
<p>Second, the approach.  The goal of part 1 is to do all transformations here.  I want the end result to be a file that can be directly loaded into part 2’s code.  I will use/create a series of features.  Year is the set’s year, and is directly provided.  The following features will need to be grouped and calculated.  First is “% of the set’s pieces are <x> type” for a couple major piece types.  Second, is “% of the set’s pieces are <x> color” for major color groups.  Lastly, the prediction target is theme.  The dataset has up to three themes per set (T1, T2, T3).  For simplicity sake I am only going to use one theme (T1) as the target theme to predict.  This will restrict the quality of my results, but as a proof-of-concept it will be good enough.  Hopefully all this give me some interesting results.</x></x></p>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample <code>paket.dependencies</code> file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget FSharp.Data</div></pre></td></tr></table></figure>
<p>This is the boring setup stuff.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"><span class="keyword">open</span> FSharp.Data</div></pre></td></tr></table></figure>
<p>Next it is time to leverage the CsvProvider for the input files.  The below code configures the types as well as loads the data. You’ve probably read it a million times, but Type Providers are really helpful to get get working with the data quickly.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// File structures</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoSets</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/sets.csv"</span>&gt;</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoSetPieces</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/set_pieces.csv"</span>&gt;</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoPieces</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/pieces.csv"</span>&gt;</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoColors</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/colors.csv"</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">// Load files</span></div><div class="line"><span class="keyword">let</span> legoSets = LegoSets.Load <span class="string">"../data/legos/sets.csv"</span></div><div class="line"><span class="keyword">let</span> legoSetPieces = LegoSetPieces.Load <span class="string">"../data/legos/set_pieces.csv"</span></div><div class="line"><span class="keyword">let</span> legoPieces = LegoPieces.Load <span class="string">"../data/legos/pieces.csv"</span></div><div class="line"><span class="keyword">let</span> legoColors = LegoColors.Load <span class="string">"../data/legos/colors.csv"</span></div></pre></td></tr></table></figure>
<p>When building the features, I will be counting the number of specific colors in the set.  There are 135 different colors.  I only care about eight different colors: Red, Green, Blue, White, Black, Gray, Silver, and Translucent.  I will ignore the rest.  As an expedient hack, I search for the color text in the description.  So ‘Red’, ‘Trans-Red’, and ‘Dark Red’ all count as ‘Red’.  I then store these indexes for later searching.  This method misses things like ‘Pink’, which is in the red family.  It also means ‘Trans-Red’ counts as a red piece and a translucent piece.  For a real problem I would be more thorough, but I just want to get to the decision tree.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> getColorIndexes color =</div><div class="line">    legoColors.Rows </div><div class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> x -&gt; x.Descr.Contains(color)) </div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; x.Id) </div><div class="line">    |&gt; Seq.toList</div><div class="line"></div><div class="line"><span class="keyword">let</span> redIndexes = getColorIndexes <span class="string">"Red"</span></div><div class="line"><span class="keyword">let</span> greenIndexes = getColorIndexes <span class="string">"Green"</span></div><div class="line"><span class="keyword">let</span> blueIndexes = getColorIndexes <span class="string">"Blue"</span></div><div class="line"><span class="keyword">let</span> whiteIndexes = getColorIndexes <span class="string">"White"</span></div><div class="line"><span class="keyword">let</span> blackIndexes = getColorIndexes <span class="string">"Black"</span></div><div class="line"><span class="keyword">let</span> grayIndexes = getColorIndexes <span class="string">"Gray"</span></div><div class="line"><span class="keyword">let</span> silverIndexes = getColorIndexes <span class="string">"Silver"</span></div><div class="line"><span class="keyword">let</span> translucentIndexes = getColorIndexes <span class="string">"Trans"</span></div></pre></td></tr></table></figure>
<p>To perform piece counts in the sets I’ll need to do some grouping.  I will use <em>SetCountsDetail</em> as an intermediate aggregation record type.  <em>SetDetail</em> will be my final output form.  You may notice I use counts for the aggregation, but in the final output I store “Percent of the set”.  I feel this should allow the feature values to be consistent across sets.  I also use the function <em>setCountsDetailSum</em> when folding group sums together.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Piece-type counts for sets (used for aggregation)</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">SetCountsDetail</span> </span>= &#123; </div><div class="line">    SetId: string; </div><div class="line">    BricksCount: int; </div><div class="line">    PlatesCount: int; </div><div class="line">    MinifigsCount: int;</div><div class="line">    PanelsCount: int;</div><div class="line">    PlantsAndAnimalsCount: int;</div><div class="line">    TilesCount: int;</div><div class="line">    TechnicsCount: int;</div><div class="line">    RedCount: int;</div><div class="line">    GreenCount: int;</div><div class="line">    BlueCount: int;</div><div class="line">    WhiteCount: int;</div><div class="line">    BlackCount: int;</div><div class="line">    GrayCount: int;</div><div class="line">    SilverCount: int;</div><div class="line">    TranslucentCount: int&#125;</div><div class="line"></div><div class="line"><span class="comment">// Set detail record (this is what gets written to the output file)</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">SetDetail</span> </span>= &#123; </div><div class="line">    SetId: string; </div><div class="line">    Year: int;</div><div class="line">    ThemeId: int;</div><div class="line">    PiecesCount: int; </div><div class="line">    BricksPct: float; </div><div class="line">    PlatesPct: float; </div><div class="line">    MinifigsPct: float </div><div class="line">    PanelsPct: float;</div><div class="line">    PlantsAndAnimalsPct: float;</div><div class="line">    TilesPct: float;</div><div class="line">    TechnicsPct: float;</div><div class="line">    RedPct: float;</div><div class="line">    GreenPct: float;</div><div class="line">    BluePct: float;</div><div class="line">    WhitePct: float;</div><div class="line">    BlackPct: float;</div><div class="line">    GrayPct: float;</div><div class="line">    SilverPct: float;</div><div class="line">    TranslucentPct: float&#125; <span class="keyword">with</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">member</span> toCsv d =</div><div class="line">        sprintf <span class="string">"%d,%d,%d,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f"</span> </div><div class="line">            d.ThemeId d.Year d.PiecesCount d.BricksPct d.PlatesPct d.MinifigsPct d.PanelsPct d.PlantsAndAnimalsPct d.TilesPct d.TechnicsPct d.RedPct d.GreenPct d.BluePct d.WhitePct d.BlackPct d.GrayPct d.SilverPct d.TranslucentPct</div><div class="line">    </div><div class="line"><span class="comment">// Sum counts for SetCountsDetail (use in fold)</span></div><div class="line"><span class="keyword">let</span> setCountsDetailSum (a:SetCountsDetail) (b:SetCountsDetail) = </div><div class="line">    &#123;a <span class="keyword">with</span> </div><div class="line">        BricksCount = a.BricksCount + b.BricksCount;</div><div class="line">        PlatesCount = a.PlatesCount + b.PlatesCount;</div><div class="line">        MinifigsCount = a.MinifigsCount + b.MinifigsCount;</div><div class="line">        PanelsCount = a.PanelsCount + b.PanelsCount;</div><div class="line">        PlantsAndAnimalsCount = a.PlantsAndAnimalsCount + b.PlantsAndAnimalsCount;</div><div class="line">        TilesCount = a.TilesCount + b.TilesCount;</div><div class="line">        TechnicsCount = a.TechnicsCount + b.TechnicsCount;</div><div class="line">        RedCount = a.RedCount + b.RedCount;</div><div class="line">        GreenCount = a.GreenCount + b.GreenCount;</div><div class="line">        BlueCount = a.BlueCount + b.BlueCount;</div><div class="line">        WhiteCount = a.WhiteCount + b.WhiteCount;</div><div class="line">        BlackCount = a.BlackCount + b.BlackCount;</div><div class="line">        GrayCount = a.GrayCount + b.GrayCount;</div><div class="line">        SilverCount = a.SilverCount + b.SilverCount;</div><div class="line">        TranslucentCount = a.TranslucentCount + b.TranslucentCount&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>Now I create a piece lookup using a Map (for the non-F#ers, think Dictionary).  I also filter only the piece type categories I care about.  There are 56, and for simplicity I will only look at seven.  I also group all “Technic*” categories into a single “Technic” category.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Build lookup for pieces</span></div><div class="line"><span class="keyword">let</span> pieceLookup = </div><div class="line">    legoPieces.Rows</div><div class="line">    <span class="comment">// Only include these categories</span></div><div class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> row -&gt; </div><div class="line">        row.Category = <span class="string">"Bricks"</span> || </div><div class="line">        row.Category = <span class="string">"Plates"</span> || </div><div class="line">        row.Category = <span class="string">"Minifigs"</span> ||</div><div class="line">        row.Category = <span class="string">"Panels"</span> ||</div><div class="line">        row.Category = <span class="string">"Plants and Animals"</span> ||</div><div class="line">        row.Category = <span class="string">"Tiles"</span> ||</div><div class="line">        row.Category.Contains(<span class="string">"Technic"</span>)</div><div class="line">        )</div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> row -&gt; (row.Piece_id, <span class="keyword">if</span> row.Category.Contains(<span class="string">"Technic"</span>) <span class="keyword">then</span> <span class="string">"Technic"</span> <span class="keyword">else</span> row.Category))</div><div class="line">    |&gt; Map</div><div class="line"></div></pre></td></tr></table></figure>
<p>Here I take a row and transpose it in the intermediate feature columns I want.  <em>isColorIndex</em> is a helper function to determine if the specified piece color is part of one my color groupings.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Convert data row to a SetCountsDetail record</span></div><div class="line"><span class="keyword">let</span> isColorIndex indexList colorIndex = </div><div class="line">    indexList |&gt; List.filter (<span class="keyword">fun</span> x -&gt; x = colorIndex) |&gt; List.length &gt; <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">// Convert data row to a SetCountsDetail record</span></div><div class="line"><span class="keyword">let</span> rowToSetCountsDetail (row:CsvProvider&lt;<span class="string">"../data/legos/set_pieces.csv"</span>&gt;.Row) = </div><div class="line">    <span class="keyword">let</span> c = pieceLookup.Item row.Piece_id</div><div class="line">    &#123;        </div><div class="line">        SetCountsDetail.SetId = row.Set_id;  </div><div class="line">        BricksCount = <span class="keyword">if</span> c = <span class="string">"Bricks"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        PlatesCount = <span class="keyword">if</span> c = <span class="string">"Plates"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        MinifigsCount = <span class="keyword">if</span> c = <span class="string">"Minifigs"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        PanelsCount = <span class="keyword">if</span> c = <span class="string">"Panels"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        PlantsAndAnimalsCount = <span class="keyword">if</span> c = <span class="string">"Plants and Animals"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        TilesCount = <span class="keyword">if</span> c = <span class="string">"Tiles"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        TechnicsCount = <span class="keyword">if</span> c = <span class="string">"Technic"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        RedCount = <span class="keyword">if</span> isColorIndex redIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        GreenCount = <span class="keyword">if</span> isColorIndex greenIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        BlueCount = <span class="keyword">if</span> isColorIndex blueIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        WhiteCount = <span class="keyword">if</span> isColorIndex whiteIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        BlackCount = <span class="keyword">if</span> isColorIndex blackIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        GrayCount = <span class="keyword">if</span> isColorIndex grayIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        SilverCount = <span class="keyword">if</span> isColorIndex silverIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        TranslucentCount = <span class="keyword">if</span> isColorIndex translucentIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>&#125;</div></pre></td></tr></table></figure>
<p>I then create a series of lookup functions to support the transformation process. In <em>setPiecesLookup</em> I make a Map for piece counts by SetId.  It gets alittle gnarly, but it does a group by on SetId, then sums all columns up to that level. <em>getCountLookup</em> is used to get piece counts by setid. <em>themesLookup</em> maps the set’s theme text to an arbitrary int.  I will save that into a lookup table/file as well for later access.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Build lookup for setpieces</span></div><div class="line"><span class="keyword">let</span> setPiecesLookup = </div><div class="line">    legoSetPieces.Rows</div><div class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> r -&gt; Map.containsKey r.Piece_id pieceLookup)</div><div class="line">    |&gt; Seq.map rowToSetCountsDetail</div><div class="line">    <span class="comment">// Sum counts up to SetId                             </span></div><div class="line">    |&gt; Seq.groupBy (<span class="keyword">fun</span> x -&gt; x.SetId)</div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> (k, v) -&gt; </div><div class="line">        (k, </div><div class="line">         v |&gt; Seq.fold setCountsDetailSum &#123; SetCountsDetail.SetId = k; BricksCount = <span class="number">0</span>; PlatesCount = <span class="number">0</span>; MinifigsCount = <span class="number">0</span>; PanelsCount = <span class="number">0</span>;  PlantsAndAnimalsCount = <span class="number">0</span>; TilesCount = <span class="number">0</span>; TechnicsCount = <span class="number">0</span>; RedCount = <span class="number">0</span>; GreenCount = <span class="number">0</span>; BlueCount = <span class="number">0</span>; WhiteCount = <span class="number">0</span>; BlackCount = <span class="number">0</span>; GrayCount = <span class="number">0</span>; SilverCount = <span class="number">0</span>; TranslucentCount = <span class="number">0</span>&#125;))                                </div><div class="line">    <span class="comment">// Create lookup</span></div><div class="line">    |&gt; Map</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Lookup piece count in the set, if not found, return 0</span></div><div class="line"><span class="keyword">let</span> getCountLookup k =</div><div class="line">    <span class="keyword">match</span> Map.tryFind k setPiecesLookup <span class="keyword">with</span></div><div class="line">    | Some(x) -&gt; x</div><div class="line">    | _       -&gt; &#123; SetId = k; BricksCount = <span class="number">0</span>; PlatesCount = <span class="number">0</span>; MinifigsCount = <span class="number">0</span>; PanelsCount = <span class="number">0</span>; PlantsAndAnimalsCount = <span class="number">0</span>; TilesCount = <span class="number">0</span>; TechnicsCount = <span class="number">0</span>; RedCount = <span class="number">0</span>; GreenCount = <span class="number">0</span>; BlueCount = <span class="number">0</span>; WhiteCount = <span class="number">0</span>; BlackCount = <span class="number">0</span>; GrayCount = <span class="number">0</span>; SilverCount = <span class="number">0</span>; TranslucentCount = <span class="number">0</span>&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Create theme lookups from the sets files</span></div><div class="line"><span class="keyword">let</span> themesLookup =</div><div class="line">    <span class="keyword">let</span> distinctThemes = legoSets.Rows |&gt; Seq.map (<span class="keyword">fun</span> row -&gt; row.T1) |&gt; Seq.distinct</div><div class="line"></div><div class="line">    <span class="comment">// Pair theme string with an int</span></div><div class="line">    (distinctThemes, seq [<span class="number">0.</span>.Seq.length distinctThemes])</div><div class="line">    ||&gt; Seq.zip</div><div class="line">    |&gt; Map</div><div class="line"></div></pre></td></tr></table></figure>
<p>All the hard work is done.  I now just take the data from the file and run it through a series of filters and transformations to transpose the bricktype and piece color counts into “percent of the set” columns.  Once that is done I write out a file <code>aggregatedata.csv</code> that will be used in Part 2.  I also save a themes lookup file.  The lookup isn’t actually needed for the decision tree processing, but its a nice-to-have if I want to remap the int ids back to text values for evaluation.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Build dataset</span></div><div class="line"><span class="keyword">let</span> dataset = </div><div class="line">    legoSets.Rows</div><div class="line">    <span class="comment">// Exclude blank themes</span></div><div class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> row -&gt; not (String.IsNullOrEmpty(row.T1)))</div><div class="line">    <span class="comment">// Exclude sets with 0 pieces</span></div><div class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> row -&gt; row.Pieces &lt;&gt; <span class="number">0</span>)</div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> row -&gt;</div><div class="line">        <span class="comment">// Get item type counts for each row (ie set)</span></div><div class="line">        <span class="keyword">let</span> bricksCount = (getCountLookup row.Set_id).BricksCount</div><div class="line">        <span class="keyword">let</span> platesCount = (getCountLookup row.Set_id).PlatesCount</div><div class="line">        <span class="keyword">let</span> minifigsCount = (getCountLookup row.Set_id).MinifigsCount</div><div class="line">        <span class="keyword">let</span> panelsCount = (getCountLookup row.Set_id).PanelsCount</div><div class="line">        <span class="keyword">let</span> plantsAndAnimalsCount = (getCountLookup row.Set_id).PlantsAndAnimalsCount</div><div class="line">        <span class="keyword">let</span> tilesCount = (getCountLookup row.Set_id).TilesCount</div><div class="line">        <span class="keyword">let</span> technicsCount = (getCountLookup row.Set_id).TechnicsCount</div><div class="line">        <span class="keyword">let</span> redCount = (getCountLookup row.Set_id).RedCount</div><div class="line">        <span class="keyword">let</span> greenCount = (getCountLookup row.Set_id).GreenCount</div><div class="line">        <span class="keyword">let</span> blueCount = (getCountLookup row.Set_id).BlueCount</div><div class="line">        <span class="keyword">let</span> whiteCount = (getCountLookup row.Set_id).WhiteCount</div><div class="line">        <span class="keyword">let</span> blackCount = (getCountLookup row.Set_id).BlackCount</div><div class="line">        <span class="keyword">let</span> grayCount = (getCountLookup row.Set_id).GrayCount</div><div class="line">        <span class="keyword">let</span> silverCount = (getCountLookup row.Set_id).SilverCount</div><div class="line">        <span class="keyword">let</span> translucentCount = (getCountLookup row.Set_id).TranslucentCount</div><div class="line"></div><div class="line">        <span class="comment">// Build a record for writing</span></div><div class="line">        &#123;SetId = row.Set_id;</div><div class="line">         Year = row.Year;</div><div class="line">         ThemeId = themesLookup.Item row.T1;</div><div class="line">         PiecesCount = row.Pieces;</div><div class="line">         BricksPct = float(bricksCount) / float(row.Pieces);</div><div class="line">         PlatesPct = float(platesCount) / float(row.Pieces);</div><div class="line">         MinifigsPct = float(minifigsCount) / float(row.Pieces);          </div><div class="line">         PanelsPct = float(panelsCount) / float(row.Pieces); </div><div class="line">         PlantsAndAnimalsPct = float(plantsAndAnimalsCount) / float(row.Pieces); </div><div class="line">         TilesPct = float(tilesCount) / float(row.Pieces);</div><div class="line">         TechnicsPct = float(technicsCount) / float(row.Pieces);</div><div class="line">         RedPct = float(redCount) / float(row.Pieces);</div><div class="line">         GreenPct = float(greenCount) / float(row.Pieces);</div><div class="line">         BluePct = float(blueCount) / float(row.Pieces);</div><div class="line">         WhitePct = float(whiteCount) / float(row.Pieces);</div><div class="line">         BlackPct = float(blackCount) / float(row.Pieces);</div><div class="line">         GrayPct = float(grayCount) / float(row.Pieces);</div><div class="line">         SilverPct = float(silverCount) / float(row.Pieces);</div><div class="line">         TranslucentPct = float(translucentCount) / float(row.Pieces)&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Write dataset to output file</span></div><div class="line"><span class="keyword">let</span> dataFile = List.Cons (</div><div class="line">    <span class="string">"ThemeId,Year,PiecesCount,BricksPct,PlatesPct,MinifigsPct,PanelsPct,PlantsAndAnimalsPct,TilesPct,TechnicsCount,RedPct,GreenPct,BluePct,WhitePct,BlackPct,GrayPct,SilverPct,TranslucentPct"</span>, </div><div class="line">    dataset</div><div class="line">    |&gt; Seq.toList</div><div class="line">    |&gt; List.map SetDetail.toCsv)</div><div class="line">	</div><div class="line">File.WriteAllLines(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">@"..\\data\\legos\\aggregatedata.csv"</span>), dataFile)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Write themes lookup to a file</span></div><div class="line"><span class="keyword">let</span> themesFile = List.Cons (</div><div class="line">    <span class="string">"ThemeId,Theme"</span>,</div><div class="line">    themesLookup</div><div class="line">    |&gt; Map.toList </div><div class="line">    |&gt; List.map (<span class="keyword">fun</span> (key, value) -&gt; sprintf <span class="string">"%s,%d"</span> key value))</div><div class="line"></div><div class="line">File.WriteAllLines(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">@"..\\data\\legos\\aggregatedata_themes.csv"</span>), themesFile)</div></pre></td></tr></table></figure>
<p>Here are samples of the aggregate data and lookups files.</p>
<p>File: aggregatedata.csv<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ThemeId,Year,PiecesCount,BricksPct,PlatesPct,MinifigsPct,PanelsPct,PlantsAndAnimalsPct,TilesPct,TechnicsCount,RedPct,GreenPct,BluePct,WhitePct,BlackPct,GrayPct,SilverPct,TranslucentPct</div><div class="line">0,1970,471,0.8110,0.0892,0.0000,0.0000,0.0000,0.0000,0.0000,0.1359,0.0000,0.0212,0.4480,0.0000,0.0828,0.0000,0.0000</div><div class="line">1,1978,12,0.0000,0.0000,0.8333,0.0000,0.0000,0.0000,0.0000,0.1667,0.0000,0.1667,0.0000,0.2500,0.0000,0.0000,0.0000</div><div class="line">2,1987,2,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>File: aggregatedata_themes.csv<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ThemeId,Theme</div><div class="line">4 Juniors,47</div><div class="line">Adventurers,28</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p><a href="/data/legodecisiontree.zip">Data Files</a></p>
<p>So there are the data transformations.  Until next time…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It is time for an exploration into using a Decision Tree to classify Lego set themes using &lt;a href=&quot;http://fsharp.org/&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://accord-framework.net/&quot;&gt;Accord.NET&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;First things first, the data. &lt;a href=&quot;http://rebrickable.com/downloads&quot;&gt;Rebrickable&lt;/a&gt; has downloadable datasets for Lego sets and pieces.  I’ll use the &lt;code&gt;sets.csv&lt;/code&gt; file as the primary dataset driver, but will grab information from &lt;code&gt;sets_pieces.csv&lt;/code&gt;, &lt;code&gt;pieces.csv&lt;/code&gt;, and &lt;code&gt;colors.csv&lt;/code&gt; for feature creation.  The files are not in an format appropriate for a decision tree, so some transformations will need to happen first.  I don’t want the post to get too long, so this project will be broken into two components.  Part 1 will be building the feature file and getting the data into the desired comsumable format, &lt;a href=&quot;/2016/12/07/Decision-Trees-with-F-and-Accord-NET-Part-2&quot;&gt;Part 2&lt;/a&gt; will actually use the file to get to the end goal.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Accord.NET" scheme="http://codesuji.com/tags/Accord-NET/"/>
    
      <category term="Decision Trees" scheme="http://codesuji.com/tags/Decision-Trees/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Legos" scheme="http://codesuji.com/tags/Legos/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="Classification" scheme="http://codesuji.com/tags/Classification/"/>
    
  </entry>
  
  <entry>
    <title>Edge Filter using F# and Accord.NET</title>
    <link href="http://codesuji.com/2016/11/23/Edge-Filter-using-F-and-Accord-NET/"/>
    <id>http://codesuji.com/2016/11/23/Edge-Filter-using-F-and-Accord-NET/</id>
    <published>2016-11-23T12:56:08.000Z</published>
    <updated>2017-01-14T19:46:50.360Z</updated>
    
    <content type="html"><![CDATA[<p>This is a sample of how to apply edge filters to a set of images using <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> and <a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a>.  The framework provides several <a href="http://accord-framework.net/docs/html/N_Accord_Imaging_Filters.htm" target="_blank" rel="external">Filters</a> for image manipulating.  Since I’m interested in edge enhancement I’ll limit my scope to those filters.  In particular I’ve selected the <code>DifferenceEdgeDetector()</code>.</p>
<a id="more"></a>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample <code>paket.dependencies</code> file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget Accord</div><div class="line">nuget Accord.Imaging</div></pre></td></tr></table></figure>
<p>This is the boring setup stuff.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Ref: http://accord-framework.net/docs/html/N_Accord_Imaging_Filters.htm</span></div><div class="line"></div><div class="line">#i <span class="string">"../packages"</span></div><div class="line">#r <span class="string">"../packages/Accord/lib/net45/accord.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Imaging/lib/net45/accord.imaging.dll"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> System.Drawing</div><div class="line"><span class="keyword">open</span> System.Drawing.Imaging</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"><span class="keyword">open</span> Accord</div><div class="line"><span class="keyword">open</span> Accord.Imaging</div><div class="line"><span class="keyword">open</span> Accord.Imaging.Filters</div><div class="line"></div><div class="line"><span class="keyword">let</span> imageRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/"</span>))</div><div class="line"><span class="keyword">let</span> resultsRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/results/"</span>))</div></pre></td></tr></table></figure>
<p>Loading and applying the filter is straight-forward.  The only additional point worthy of mention is that most of the edge filters require the image to be in grayscale.  That conversion is included in this function.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Process image and save a result file with edge filter applied</span></div><div class="line"><span class="keyword">let</span> filterImage (resultsDir:string) (imageName:string) =</div><div class="line">    <span class="keyword">let</span> resultImageName = Path.Combine(resultsDir, Path.GetFileName(imageName))        </div><div class="line">    <span class="keyword">let</span> bitmap = <span class="keyword">new</span> Bitmap(imageName)</div><div class="line"></div><div class="line">    <span class="comment">// Need to reduce to grayscale, filter needs a reduced color bitmap to process</span></div><div class="line">    <span class="keyword">let</span> bitmapGray = Grayscale.CommonAlgorithms.BT709.Apply(bitmap)</div><div class="line">    <span class="keyword">let</span> filter = <span class="keyword">new</span> DifferenceEdgeDetector()</div><div class="line"></div><div class="line">    filter.ApplyInPlace(bitmapGray)</div><div class="line"></div><div class="line">    File.Delete resultImageName</div><div class="line">    bitmapGray.Save(resultImageName)</div></pre></td></tr></table></figure>
<p>The below code gets a list of qualifying images, then sends them through the filtering function.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Is file an image file?</span></div><div class="line"><span class="keyword">let</span> isImageFile (fileName:string) = </div><div class="line">    fileName.EndsWith(<span class="string">".jpg"</span>, StringComparison.OrdinalIgnoreCase)</div><div class="line">    || fileName.EndsWith(<span class="string">".png"</span>, StringComparison.OrdinalIgnoreCase)</div><div class="line"></div><div class="line"><span class="comment">// Get Image list to process</span></div><div class="line"><span class="keyword">let</span> imageNames = </div><div class="line">    Directory.GetFiles imageRoot </div><div class="line">    |&gt; Array.filter isImageFile</div><div class="line"></div><div class="line"><span class="comment">// Process images</span></div><div class="line">imageNames </div><div class="line">|&gt; Array.iter (filterImage resultsRoot)</div></pre></td></tr></table></figure>
<p>Below is an example of the edge filter applied.</p>
<p><img src="/images/edges_before.jpg" alt="Before"></p>
<p><img src="/images/edges_after.jpg" alt="After"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a sample of how to apply edge filters to a set of images using &lt;a href=&quot;http://fsharp.org/&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://accord-framework.net/&quot;&gt;Accord.NET&lt;/a&gt;.  The framework provides several &lt;a href=&quot;http://accord-framework.net/docs/html/N_Accord_Imaging_Filters.htm&quot;&gt;Filters&lt;/a&gt; for image manipulating.  Since I’m interested in edge enhancement I’ll limit my scope to those filters.  In particular I’ve selected the &lt;code&gt;DifferenceEdgeDetector()&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Accord.NET" scheme="http://codesuji.com/tags/Accord-NET/"/>
    
      <category term="Images" scheme="http://codesuji.com/tags/Images/"/>
    
      <category term="Edges" scheme="http://codesuji.com/tags/Edges/"/>
    
      <category term="Filters" scheme="http://codesuji.com/tags/Filters/"/>
    
  </entry>
  
  <entry>
    <title>Face Detection with F# and Accord.NET</title>
    <link href="http://codesuji.com/2016/11/21/Face-Detection-with-FSharp-and-Accord-NET/"/>
    <id>http://codesuji.com/2016/11/21/Face-Detection-with-FSharp-and-Accord-NET/</id>
    <published>2016-11-21T14:48:50.000Z</published>
    <updated>2017-01-14T19:47:24.748Z</updated>
    
    <content type="html"><![CDATA[<p>This is a quick sample using <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> and <a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a> to do face detection.  The method uses the provided Haar-like feature detection.  The results aren’t particularly good, but for little effort it’s an ok start.  At a minimum, it does reasonably well at detecting potential regions of interest.  For the test images, the best improvements were found when constraining the min/max range based on the known sizes of faces in the pictures.</p>
<a id="more"></a>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample <code>paket.dependencies</code> file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget Accord</div><div class="line">nuget Accord.Math</div><div class="line">nuget Accord.Statistics</div><div class="line">nuget Accord.MachineLearning</div><div class="line">nuget Accord.Vision</div><div class="line">nuget Accord.Imaging</div></pre></td></tr></table></figure>
<p>This is the boring setup stuff.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ref: http://accord-framework.net/docs/html/N_Accord_Vision_Detection.htm</span></div><div class="line"></div><div class="line">#i <span class="string">"../packages"</span></div><div class="line">#r <span class="string">"../packages/Accord/lib/net45/accord.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Imaging/lib/net45/accord.imaging.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Vision/lib/net45/accord.vision.dll"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> Accord</div><div class="line"><span class="keyword">open</span> Accord.Imaging</div><div class="line"><span class="keyword">open</span> Accord.Vision</div><div class="line"><span class="keyword">open</span> Accord.Vision.Detection</div><div class="line"><span class="keyword">open</span> System.Drawing</div><div class="line"><span class="keyword">open</span> System.Drawing.Imaging</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"></div><div class="line"><span class="keyword">let</span> imageRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/haar_face/"</span>))</div><div class="line"><span class="keyword">let</span> resultsRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/haar_face/results/"</span>))</div></pre></td></tr></table></figure>
<p>Two cascades are provided, <code>FaceHaarCascade()</code> and <code>NoseHaarCascade()</code>.  Custom ones can be created, but for an initial test, one of the provided cascades is good enough.  The minSize and maxSize values are hardcoded hacks to match the expected face sizes in the test images.  They are used to define the minimum and maximum window size to consider as the algorithm scans the image.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cascade = Cascades.FaceHaarCascade()</div><div class="line"><span class="comment">//let cascade = Cascades.NoseHaarCascade()</span></div><div class="line"><span class="keyword">let</span> minSize = <span class="number">200</span> </div><div class="line"><span class="keyword">let</span> maxSize = <span class="number">2000</span></div></pre></td></tr></table></figure>
<p>This is a function that will add a bounding box to the bitmap with the specified line color and width.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Draw bound-box on Bitmap </span></div><div class="line"><span class="comment">// TopLeft: (x1, y1)</span></div><div class="line"><span class="comment">// BottomRight: (x2, y2) </span></div><div class="line"><span class="keyword">let</span> drawRectangle (bitmap:Bitmap) (x1:int) (y1:int) (x2:int) (y2:int) (lineWidth:int) (lineColor:Color) = </div><div class="line">    [x1..x2] </div><div class="line">    |&gt; List.iter (<span class="keyword">fun</span> x -&gt;</div><div class="line">        [<span class="number">0.</span>.lineWidth] </div><div class="line">        |&gt; List.iter (<span class="keyword">fun</span> i -&gt; </div><div class="line">            bitmap.SetPixel(x, y1 + i, lineColor) </div><div class="line">            bitmap.SetPixel(x, y2 - i, lineColor)))</div><div class="line"></div><div class="line">    [y1..y2] </div><div class="line">    |&gt; List.iter (<span class="keyword">fun</span> y -&gt; </div><div class="line">        [<span class="number">0.</span>.lineWidth] </div><div class="line">        |&gt; List.iter (<span class="keyword">fun</span> i -&gt; </div><div class="line">            bitmap.SetPixel(x1 + i, y, lineColor) </div><div class="line">            bitmap.SetPixel(x2 - i, y, lineColor)))</div></pre></td></tr></table></figure>
<p>This is the core component of interest.  It loads a bitmap, runs the object detector, draws bounding boxes around the detected locations, then saves a “result” image.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> processImage (cascade:HaarCascade) (minSize:int) (maxSize:int) (resultsDir:string) (imageName:string) =</div><div class="line">    <span class="keyword">let</span> resultImageName = Path.Combine(resultsDir, Path.GetFileName(imageName))        </div><div class="line">    <span class="keyword">let</span> bitmap = <span class="keyword">new</span> Bitmap(imageName)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> haar = HaarObjectDetector(cascade, minSize)</div><div class="line">    haar.MaxSize &lt;- <span class="keyword">new</span> Size(<span class="keyword">new</span> Point(<span class="keyword">new</span> Size(maxSize, maxSize)))</div><div class="line">    <span class="keyword">let</span> faceFinder = haar.ProcessFrame(bitmap)</div><div class="line"></div><div class="line">    faceFinder</div><div class="line">    |&gt; Array.iter (<span class="keyword">fun</span> r -&gt; </div><div class="line">        drawRectangle bitmap r.X r.Y (r.X + r.Width) (r.Y + r.Height) <span class="number">5</span> Color.Blue)</div><div class="line"></div><div class="line">    File.Delete resultImageName</div><div class="line">    bitmap.Save(resultImageName)</div></pre></td></tr></table></figure>
<p>The below code gets a list of qualifying images, then sends them through the processing function.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> isImageFile (fileName:string) = </div><div class="line">    fileName.EndsWith(<span class="string">".jpg"</span>, StringComparison.OrdinalIgnoreCase)</div><div class="line">    || fileName.EndsWith(<span class="string">".png"</span>, StringComparison.OrdinalIgnoreCase)</div><div class="line"></div><div class="line"><span class="keyword">let</span> imageNames = </div><div class="line">    Directory.GetFiles imageRoot </div><div class="line">    |&gt; Array.filter isImageFile</div><div class="line"></div><div class="line">imageNames </div><div class="line">|&gt; Array.iter (processImage cascade minSize maxSize resultsRoot)</div></pre></td></tr></table></figure>
<p>That is all there is to it.  Certainly the method can be improved, but hopefully this shows a small taste of what can be done with F#.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a quick sample using &lt;a href=&quot;http://fsharp.org/&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://accord-framework.net/&quot;&gt;Accord.NET&lt;/a&gt; to do face detection.  The method uses the provided Haar-like feature detection.  The results aren’t particularly good, but for little effort it’s an ok start.  At a minimum, it does reasonably well at detecting potential regions of interest.  For the test images, the best improvements were found when constraining the min/max range based on the known sizes of faces in the pictures.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Accord.NET" scheme="http://codesuji.com/tags/Accord-NET/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Images" scheme="http://codesuji.com/tags/Images/"/>
    
      <category term="Computer Vision" scheme="http://codesuji.com/tags/Computer-Vision/"/>
    
      <category term="Faces" scheme="http://codesuji.com/tags/Faces/"/>
    
      <category term="Detection" scheme="http://codesuji.com/tags/Detection/"/>
    
  </entry>
  
</feed>
