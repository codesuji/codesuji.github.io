<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codesuji</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codesuji.com/"/>
  <updated>2024-11-28T03:05:40.964Z</updated>
  <id>http://codesuji.com/</id>
  
  <author>
    <name>codesuji.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Estimated Shortest Path with F#</title>
    <link href="http://codesuji.com/2024/11/27/Estimated-Shortest-Path-F/"/>
    <id>http://codesuji.com/2024/11/27/Estimated-Shortest-Path-F/</id>
    <published>2024-11-27T12:02:41.000Z</published>
    <updated>2024-11-28T03:05:40.964Z</updated>
    
    <content type="html"><![CDATA[<p>Calculating the shortest path between two nodes in large graphs can be a time-consuming process. One approach to solving this is to calculate an estimated path. There are many situations where the exact path isn’t necessary; an estimated path is good enough.  This is the case especially if the performance benefits of estimating are high enough. I’ll look at implementing the algorithm from <a href="/references/shortestpath1/2406.08624v1.pdf">A Sublinear Algorithm for Approximate Shortest Paths in Large Networks</a> in <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>. It offers a hefty performance boost at the cost of some preprocessing; well worth the time.</p><a id="more"></a><p>To set the stage, imagine a large, highly-connected graph with millions of nodes. Common examples are a social graphs and networking graphs.  What is the fastest way to find the shortest path between two nodes? One method is to use breadth first search (BFS) from the starting node, expanding its search until the target node is found. In a similar, but faster fashion, there is a BiBFS (a bidirectional search simultaneously from the source and target nodes, and stopping when the searches meet). Another option is to preprocess the graph and store an index the nodes and shortest paths. As you can imagine, indexing a large graph isn’t particularly practical.  A common solution to this is only index a portion of the nodes.  That’s what will be investigated today.</p><p>The paper describes, what they call the Wormhole algorithm. It is a method of dynamically selecting a core group of nodes to be indexed.  This method takes advantage of the characteristic of highly connected graphs.  As a preprocessing step, the core nodes are selected and indexed.  Once this is done searches use a modified BiBFS. A path can still be found directly from source to target.  But a path can also be found when both searches come in contact with the core group of nodes.  At this point, the search can look up the indexed result of part of the path to improved the performance, while accepting that the ultimate path will now be an estimate, not necessarily the fastest path.</p><p><img src="/images/wormhole1/graph.png" alt="Graph path through core nodes"></p><p>Before getting into the details of the algorithm, there is a bit of structure to define.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Graph</span> </span>= &#123;</span><br><span class="line">  <span class="comment">/// Nodes (in map form for fast lookup)</span></span><br><span class="line">  Nodes: Map&lt;string, bool&gt;</span><br><span class="line">  <span class="comment">/// List of a node's neighbors</span></span><br><span class="line">  AdjacencyList: Map&lt;string, string list&gt;</span><br><span class="line">  <span class="comment">/// Indexed version of nodes </span></span><br><span class="line">  Index: Dictionary&lt;string * string, string list&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> emptyGraph =</span><br><span class="line">  &#123; Graph.Nodes = [] |&gt; Map.ofList</span><br><span class="line">    AdjacencyList = Map.empty&lt;string, string list&gt;</span><br><span class="line">    Index = <span class="keyword">new</span> Dictionary&lt;string * string, string list&gt;()&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rnd = System.Random()</span><br></pre></td></tr></table></figure><p>A bit of preparation is required. The core group of nodes must be selected and indexed. First, to select a core group of nodes a random node is selected from the graph and placed into what is called the “inner ring”. It’s neighbors are then placed in the “outer ring”.  The algorithm then processes all nodes in the outer ring in the similar way.  One difference is nodes from the outer ring are not selected randomly.  Since the goal is to leverage high connectivity, the node in the outer ring that has the most connections to nodes in the inner ring is selected. The selected node is placed in the inner ring.  Then its neighbors are added to the outer ring. This process repeats until the size of the inner ring meets the desired size.  At this point the processing is complete.  The inner and outer rings are combined into a core graph. The result is a highly connected group of core nodes to be used when performing partial path estimation. This is what will be used moving forward.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Create an inner and outer ring of most connected verticies</span></span><br><span class="line"><span class="keyword">let</span> decomposeGraph (size: int) (graph: Graph) =</span><br><span class="line">  <span class="keyword">let</span> nodeKeys = graph.Nodes.Keys |&gt; Seq.toArray</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">rec</span> decomposeGraph' (cin: string list) (cout: string list) =</span><br><span class="line">    <span class="keyword">if</span> cin.Length = <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// add random vertex to cin</span></span><br><span class="line">      <span class="keyword">let</span> v = nodeKeys[rnd.Next(nodeKeys.Length)]</span><br><span class="line">      <span class="keyword">let</span> (cin', cout') = addToCin cin cout graph v</span><br><span class="line">      decomposeGraph' cin' cout' </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> cin.Length &lt; size <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// add v from cout with highest ties to cin</span></span><br><span class="line">      <span class="keyword">let</span> v =</span><br><span class="line">        cout</span><br><span class="line">        |&gt; List.filter (<span class="keyword">fun</span> x -&gt; not (List.contains x cin))</span><br><span class="line">        |&gt; List.map (<span class="keyword">fun</span> x -&gt;</span><br><span class="line">            <span class="keyword">if</span> graph.AdjacencyList.ContainsKey x <span class="keyword">then</span></span><br><span class="line">              <span class="keyword">let</span> c =</span><br><span class="line">                graph.AdjacencyList[x]</span><br><span class="line">                |&gt; List.filter (<span class="keyword">fun</span> y -&gt; List.contains y cin)</span><br><span class="line">                |&gt; List.length</span><br><span class="line">              (x, c)</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">              (x, <span class="number">0</span>))</span><br><span class="line">        |&gt; List.sortByDescending (<span class="keyword">fun</span> (x,y) -&gt; y)</span><br><span class="line">        |&gt; List.head</span><br><span class="line">        |&gt; fst</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> (cin', cout') = addToCin cin cout graph v</span><br><span class="line">      decomposeGraph' cin' cout' </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      (cin, cout)</span><br><span class="line"></span><br><span class="line">  decomposeGraph' [] []</span><br></pre></td></tr></table></figure><p>Next, the core graph must be indexed. The index is a mapping of every node pair combination and the shortest path between them <code>(start, target) -&gt; path</code>.  Although computationally intensive, it is a much smaller graph, making it viable. This is also where we get the performance boost. Once path finding hits the core group of nodes, a fast index lookup can be done instead of needing to calculate the shortest path on the fly.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Index a graph</span></span><br><span class="line"><span class="comment">/// Result is a (start, target) -&gt; path dictionary</span></span><br><span class="line"><span class="keyword">let</span> indexGraph (graph: Graph) (start: string) =</span><br><span class="line">  <span class="keyword">let</span> indexes = <span class="keyword">new</span> Dictionary&lt;string * string, string list&gt;()</span><br><span class="line">  <span class="keyword">let</span> visited = <span class="keyword">new</span> Dictionary&lt;string, string list&gt;()</span><br><span class="line">  <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue&lt;string list&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">rec</span> indexGraph' start =</span><br><span class="line">    <span class="keyword">if</span> queue.Count &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// Keep processing if queue is populated</span></span><br><span class="line">      <span class="keyword">let</span> path = queue.Dequeue()</span><br><span class="line">      <span class="keyword">let</span> node = path.Head</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> not (indexes.ContainsKey((start, node))) <span class="keyword">then</span></span><br><span class="line">        indexes.Add((start, node), path |&gt; List.rev)</span><br><span class="line"></span><br><span class="line">      graph.AdjacencyList[node]</span><br><span class="line">      |&gt; List.filter (<span class="keyword">fun</span> neighbor -&gt; not (visited.ContainsKey neighbor))</span><br><span class="line">      |&gt; List.iter (<span class="keyword">fun</span> neighbor -&gt;</span><br><span class="line">          visited.Add(neighbor, (neighbor :: path))</span><br><span class="line">          queue.Enqueue (neighbor :: path))</span><br><span class="line"></span><br><span class="line">      indexGraph' start</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      indexes</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> graph.Nodes.Keys <span class="keyword">do</span></span><br><span class="line">    visited.Clear()</span><br><span class="line">    visited.Add(start, [start])</span><br><span class="line">    queue.Clear()</span><br><span class="line">    queue.Enqueue [start]</span><br><span class="line">    indexGraph' n |&gt; ignore</span><br><span class="line"></span><br><span class="line">  indexes</span><br></pre></td></tr></table></figure><p>Creating the core graph along with its index looks like this. For this test I’ve selected an s of 600, which means the inner ring needs to get to a size of 600. This value is really dependent on the properties of the graph in question.  The size and connectedness of the graph will impact performance.  For a specific graph some experimentation may be required. But once determined, this process only needs to be run once.  It can then be saved and used for pathfinding later.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="number">600</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> coreGraphTemp =</span><br><span class="line">  graph</span><br><span class="line">  |&gt; decomposeGraph s</span><br><span class="line">  |&gt; createCoreGraph graph</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> coreIndex = indexGraph coreGraphTemp (Seq.head coreGraphTemp.Nodes.Keys)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> coreGraph = &#123; coreGraphTemp <span class="keyword">with</span> Index = coreIndex &#125;</span><br></pre></td></tr></table></figure><p>Now that the core graph has been created, the next step is to look at what searching looks like. Before I get to the BiBFS code, I have a supporting enqueue that conditionally adds a node to a queue based on whether the current search has found a path to the core graph yet.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">inline</span> enqueue (queue: Queue&lt;string list&gt;) (coreNodes: Map&lt;string, bool&gt;) (portalPath: (string list) option) (path: string list) :(string list) option =</span><br><span class="line">  <span class="keyword">let</span> node = List.head path</span><br><span class="line">  <span class="comment">// always enqueue</span></span><br><span class="line">  queue.Enqueue path</span><br><span class="line">  <span class="keyword">if</span> portalPath.IsNone <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> Map.containsKey node coreNodes <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// Found portal node</span></span><br><span class="line">      Some path</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="comment">// Not a portal node, continue processing</span></span><br><span class="line">      None</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">// Already found portal Path, just return it</span></span><br><span class="line">    portalPath</span><br></pre></td></tr></table></figure><p>At a high level, the algorithm simultaneously does two BFSes, one from the start node and one from the target node.  When the two searches meet, the shortest path is found.  But, the interesting aspect is the integration of the core graph. The algorithm keeps track of when the search touches one of the core nodes. If both searches connect, there is no change. But, if both searches hit the core before each other, then the path will traverse through the core set of nodes. This path is looked up in the index.  This is also where the performance comes from. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// bfs with wormhole algorithm</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> wormholeBfs (graph: Graph) (start: string) (target: string) =</span><br><span class="line">  <span class="keyword">let</span> visited1 = <span class="keyword">new</span> Dictionary&lt;string, string list&gt;()</span><br><span class="line">  <span class="keyword">let</span> visited2 = <span class="keyword">new</span> Dictionary&lt;string, string list&gt;()</span><br><span class="line">  <span class="keyword">let</span> queue1 = <span class="keyword">new</span> Queue&lt;string list&gt;()</span><br><span class="line">  <span class="keyword">let</span> queue2 = <span class="keyword">new</span> Queue&lt;string list&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Init visited</span></span><br><span class="line">  visited1.Add(start, [start])</span><br><span class="line">  visited2.Add(target, [target])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> portalPath1 :(string list) option = None</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> portalPath2 :(string list) option = None</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Init processing queues</span></span><br><span class="line">  portalPath1 &lt;- enqueue queue1 coreGraph.Nodes portalPath1 [start]</span><br><span class="line">  portalPath2 &lt;- enqueue queue2 coreGraph.Nodes portalPath2 [target]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">rec</span> wormholeBfs' () =</span><br><span class="line">    <span class="keyword">if</span> portalPath1.IsSome &amp;&amp; portalPath2.IsSome <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// Both ends are linked to the core graph</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> n1 = portalPath1.Value |&gt; List.head</span><br><span class="line">      <span class="keyword">let</span> n2 = portalPath2.Value |&gt; List.head</span><br><span class="line">      <span class="keyword">let</span> corePath :(string list) option =</span><br><span class="line">        <span class="keyword">if</span> coreGraph.Index.ContainsKey (n1, n2) <span class="keyword">then</span></span><br><span class="line">          Some coreGraph.Index[(n1, n2)]</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          None</span><br><span class="line">      <span class="keyword">if</span> corePath.IsSome <span class="keyword">then</span></span><br><span class="line">        Some(</span><br><span class="line">          List.concat [</span><br><span class="line">            portalPath1.Value |&gt; List.tail |&gt; List.rev;</span><br><span class="line">            corePath.Value;</span><br><span class="line">            portalPath2.Value |&gt; List.tail |&gt; List.rev])</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        None</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> queue1.Count &gt; <span class="number">0</span> &amp;&amp; queue2.Count &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// Keep processing if queues are populated</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> path1 = queue1.Dequeue()</span><br><span class="line">      <span class="keyword">let</span> node1 = path1.Head</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> path2 = queue2.Dequeue()</span><br><span class="line">      <span class="keyword">let</span> node2 = path2.Head</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> visited2.ContainsKey node1 <span class="keyword">then</span></span><br><span class="line">        <span class="comment">// Node from start path is in target visited</span></span><br><span class="line">        <span class="keyword">let</span> path1' =</span><br><span class="line">          path1</span><br><span class="line">          |&gt; List.tail</span><br><span class="line">          |&gt; List.rev</span><br><span class="line">        Some(path1' @ (visited2[node1]))</span><br><span class="line">      <span class="keyword">elif</span> visited1.ContainsKey node2 <span class="keyword">then</span></span><br><span class="line">        <span class="comment">// Node from target path is in start visited</span></span><br><span class="line">        <span class="keyword">let</span> path1' =</span><br><span class="line">          visited1[node2]</span><br><span class="line">          |&gt; List.tail</span><br><span class="line">          |&gt; List.rev</span><br><span class="line">        Some(path1' @ path2)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// Not common nodes found, add neighbors for the current nodes</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">          graph.AdjacencyList[node1]</span><br><span class="line">          |&gt; List.iter (<span class="keyword">fun</span> neighbor -&gt;</span><br><span class="line">              <span class="keyword">if</span> not (visited1.ContainsKey neighbor) <span class="keyword">then</span></span><br><span class="line">                visited1.Add(neighbor, (neighbor :: path1))</span><br><span class="line">                portalPath1 &lt;- enqueue queue1 coreGraph.Nodes portalPath1 (neighbor :: path1))</span><br><span class="line">          <span class="keyword">with</span></span><br><span class="line">        | _ -&gt; ()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">          graph.AdjacencyList[node2]</span><br><span class="line">          |&gt; List.iter (<span class="keyword">fun</span> neighbor -&gt;</span><br><span class="line">              <span class="keyword">if</span> not (visited2.ContainsKey neighbor) <span class="keyword">then</span></span><br><span class="line">                visited2.Add(neighbor, (neighbor :: path2))</span><br><span class="line">                portalPath2 &lt;- enqueue queue2 coreGraph.Nodes portalPath2 (neighbor :: path2))</span><br><span class="line">        <span class="keyword">with</span></span><br><span class="line">        | _ -&gt; ()</span><br><span class="line"></span><br><span class="line">        wormholeBfs'()</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      None</span><br><span class="line"></span><br><span class="line">  wormholeBfs'()</span><br></pre></td></tr></table></figure><p>That’s pretty much it. There is preprocessing to provide a partial index that allows for faster search results. Then there the search uses this index.  So how do the results look? It should be noted any results are going to be highly dependent on the characteristics of graph as well as the size of the core indexed graph.  As with anything related to performance take this with a grain of salt. But the results can be pretty impressive.  Below are some sample path finding times from random nodes of a 10 million node graph. Is many cases the wormhole version is drastically faster, although it often comes at the cost of not-quite-the-shortest-path. The index can provide upwards of a 90% performance improvement, but even a nominal improvement is often seen. There is some overhead because of the extra portal node checks, so occasionally the search actually takes longer, if the index isn’t used. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">BiBFS            Wormhole          Gain  Length (delta)</span><br><span class="line">00:00:00.0225713 00:00:00.0044238  80.4%  9 (8)</span><br><span class="line">00:00:00.0063691 00:00:00.0011482  82.0% 10 (4)</span><br><span class="line">00:00:00.0312000 00:00:00.0092429  70.4%  8 (8)</span><br><span class="line">00:00:00.0085600 00:00:00.0034126  60.1% 10 (5)</span><br><span class="line">00:00:00.0184681 00:00:00.0025473  86.2%  9 (7)</span><br><span class="line">00:00:00.0137133 00:00:00.0046735  65.9% 10 (6)</span><br><span class="line">00:00:00.0193507 00:00:00.0027667  85.7% 10 (6)</span><br><span class="line">00:00:00.0047823 00:00:00.0003425  92.8% 10 (4)</span><br><span class="line">00:00:00.0006894 00:00:00.0009595 -39.2%  8 (0)</span><br><span class="line">00:00:00.0422815 00:00:00.0033562  92.1% 10 (7)</span><br><span class="line">00:00:00.0077808 00:00:00.0021191  72.8% 10 (6)</span><br><span class="line">00:00:00.0008566 00:00:00.0007513  12.3%  7 (6)</span><br><span class="line">00:00:00.0148260 00:00:00.0013760  90.7% 10 (5)</span><br><span class="line">00:00:00.0103843 00:00:00.0031217  69.9%  9 (8)</span><br><span class="line">00:00:00.0081660 00:00:00.0017522  78.5% 10 (2)</span><br><span class="line">00:00:00.0045205 00:00:00.0035961  20.4% 10 (7)</span><br><span class="line">00:00:00.0343872 00:00:00.0066955  80.5% 10 (5)</span><br><span class="line">00:00:00.0080696 00:00:00.0048364  40.1%  9 (7)</span><br><span class="line">00:00:00.0075896 00:00:00.0122219 -61.0%  9 (8)</span><br><span class="line">00:00:00.0036436 00:00:00.0036039   1.1%  9 (0)</span><br></pre></td></tr></table></figure><p>There are a couple ways the provided code could be improved for performance an estimated path. But even a relatively naive implementation provides some nice benefits.  Hopefully you found some value in this dive into estimated shortest path finding and selective indexing.  If nothing else, it is valuable to consider that estimates can often be good enough, especially on large datasets where performance is an issue. Until next time.</p><p>References:</p><p><a href="/references/shortestpath1/2406.08624v1.pdf">A Sublinear Algorithm for Approximate Shortest Paths in Large Networks</a>  (original source: <a href="https://arxiv.org/pdf/2406.08624" target="_blank" rel="noopener">https://arxiv.org/pdf/2406.08624</a>)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Calculating the shortest path between two nodes in large graphs can be a time-consuming process. One approach to solving this is to calculate an estimated path. There are many situations where the exact path isn’t necessary; an estimated path is good enough.  This is the case especially if the performance benefits of estimating are high enough. I’ll look at implementing the algorithm from &lt;a href=&quot;/references/shortestpath1/2406.08624v1.pdf&quot;&gt;A Sublinear Algorithm for Approximate Shortest Paths in Large Networks&lt;/a&gt; in &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;. It offers a hefty performance boost at the cost of some preprocessing; well worth the time.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="Algorithms" scheme="http://codesuji.com/tags/Algorithms/"/>
    
      <category term="Benchmarking" scheme="http://codesuji.com/tags/Benchmarking/"/>
    
  </entry>
  
  <entry>
    <title>Estimating Distinct Element Counts with F#</title>
    <link href="http://codesuji.com/2024/05/24/Distinct-Counting-in-F/"/>
    <id>http://codesuji.com/2024/05/24/Distinct-Counting-in-F/</id>
    <published>2024-05-25T00:27:55.000Z</published>
    <updated>2024-05-26T21:37:53.694Z</updated>
    
    <content type="html"><![CDATA[<p>Performing estimated counting of distinct elements in large datasets is a common task. While there are straightforward approaches, they can be memory-intensive and slow for massive datasets.  Today I’m going to take a look at the F0 Estimator introduced in the paper <a href="/references/count1/2301.10191v2.pdf">Distinct Elements in Streams: An Algorithm for the (Text) Book∗</a>. As often, this will be an implementation in <a href="https://fsharp" target="_blank" rel="noopener">F#</a>.</p><a id="more"></a><p>First things first, what is the goal?  There are some cases where the data being processed is so large, calculating exact counts of distinct values can be impractical.  An alternative is to perform an estimated count of the items.  The key is to provide an estimation that is accurate enough, while also being performant (across whatever axis matters).  The goal here is not to go through the proofs, but to understand the implementation.</p><p>With that said, I need to implement the paper’s algorithm in F#.  One nice thing aspect of this paper is the algorithm is pretty simple; that is also the point of the paper . I’ll get into performance later, but it is enjoyable to see benefits from a solution that isn’t too hard to understand.  At a high level, the algorithm iterates through the data, keeping track of items it has seen (using a Set). This is the first place where probabilities come into play.  The value is only added to the set randomly based on a variable sampling rate (p).  Also, in order to save space, the set is going to have a limited capacity (thresh). This inevitably will lead to the set filling up.  When this happens, space needs to be freed up for further processing.  This is done by conditionally removing each item with a 50% probability.  At the same time, the variable sampling rate (p) mentioned earlier is halved.  This results in the dynamic that as processing progressess, it become less likely that a new item will be added to the set.  Once processing is complete, the estimate is calcuated by: set size / p.  Accuracy and space used are driven by the epsilon and delta parameters.  Lower values result in higher accuracy, but more space being used; Higher values result in reduced accuracy, but space-used savings.  And that’s pretty much it.  Below is what the F# code looks like.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f0Estimator (A: string[]) (epsilon: float) (delta: float) =</span><br><span class="line">  <span class="keyword">let</span> m = A.Length</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> p = <span class="number">1.0</span></span><br><span class="line">  <span class="keyword">let</span> thresh = int(ceil (<span class="number">12.0</span> * epsilon ** <span class="number">-2.0</span> * log (<span class="number">8.0</span> * float m / delta)))</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> X = HashSet&lt;string&gt;(thresh)</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> noAnswer = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> .. m<span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">    X.Remove(A.[i]) |&gt; ignore</span><br><span class="line">    <span class="keyword">if</span> random.NextDouble() &lt; p <span class="keyword">then</span></span><br><span class="line">      X.Add(A.[i]) |&gt; ignore</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> X.Count = thresh <span class="keyword">then</span></span><br><span class="line">      X &lt;- X</span><br><span class="line">           |&gt; Seq.filter (<span class="keyword">fun</span> _ -&gt; random.NextDouble() &gt;= <span class="number">0.5</span>)</span><br><span class="line">           |&gt; HashSet</span><br><span class="line"></span><br><span class="line">      p &lt;- p / <span class="number">2.0</span></span><br><span class="line">      <span class="keyword">if</span> X.Count = thresh <span class="keyword">then</span></span><br><span class="line">        noAnswer &lt;- <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> noAnswer <span class="keyword">then</span></span><br><span class="line">    None</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    Some (int (float X.Count / p))</span><br></pre></td></tr></table></figure><p>So, what do the results look like? For the following analysis I used a 1GB text file that has 27M lines, 184M words, and 132,876 unique words. There are two main things I care about, accuracy and performance.  I’ll look at estimation accuracy first.  Below are the results with several different epsilon and delta values.  I also include thresh, which is the maximum size of the set being used (which directly impacts memory usage).  Depending on your tolerance level, the results are reasonable.  Looking at epsilon and delta values from 1 down to 0.1, you can see the tradeoff of using more memory.  A lower thresh results in less memory, but it also includes a larger difference from the actual values; it also has a higher variation level.  Using more memory (higher thresh), results in higher accuracy as well as more consistency in the results.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Actual   : 132876</span><br><span class="line"></span><br><span class="line"># epsilon: 1 delta: 1 thresh: 254</span><br><span class="line">Estimator: 120832 Difference: 9.06%</span><br><span class="line">Estimator: 141312 Difference: 6.35%</span><br><span class="line">Estimator: 149504 Difference: 12.51%</span><br><span class="line">Estimator: 129024 Difference: 2.90%</span><br><span class="line">Estimator: 135168 Difference: 1.72%</span><br><span class="line">Estimator: 133120 Difference: 0.18%</span><br><span class="line">Estimator: 135168 Difference: 1.72%</span><br><span class="line">Estimator: 138240 Difference: 4.04%</span><br><span class="line"></span><br><span class="line"># epsilon: 0.5 delta: 0.5 thresh: 1047</span><br><span class="line">Estimator: 127488 Difference: 4.05%</span><br><span class="line">Estimator: 134400 Difference: 1.15%</span><br><span class="line">Estimator: 132864 Difference: 0.01%</span><br><span class="line">Estimator: 126976 Difference: 4.44%</span><br><span class="line">Estimator: 135936 Difference: 2.30%</span><br><span class="line">Estimator: 138496 Difference: 4.23%</span><br><span class="line">Estimator: 131072 Difference: 1.36%</span><br><span class="line">Estimator: 124160 Difference: 6.56%</span><br><span class="line"></span><br><span class="line"># epsilon: 0.25 delta: 0.25 thresh: 4320</span><br><span class="line">Estimator: 130048 Difference: 2.13%</span><br><span class="line">Estimator: 132544 Difference: 0.25%</span><br><span class="line">Estimator: 136448 Difference: 2.69%</span><br><span class="line">Estimator: 137664 Difference: 3.60%</span><br><span class="line">Estimator: 133440 Difference: 0.42%</span><br><span class="line">Estimator: 131648 Difference: 0.92%</span><br><span class="line">Estimator: 137024 Difference: 3.12%</span><br><span class="line">Estimator: 130752 Difference: 1.60%</span><br><span class="line"></span><br><span class="line"># epsilon: 0.1 delta: 0.1 thresh: 28100</span><br><span class="line">Estimator: 133384 Difference: 0.38%</span><br><span class="line">Estimator: 132832 Difference: 0.03%</span><br><span class="line">Estimator: 134664 Difference: 1.35%</span><br><span class="line">Estimator: 134344 Difference: 1.10%</span><br><span class="line">Estimator: 133872 Difference: 0.75%</span><br><span class="line">Estimator: 133240 Difference: 0.27%</span><br><span class="line">Estimator: 132984 Difference: 0.08%</span><br><span class="line">Estimator: 133184 Difference: 0.23%</span><br></pre></td></tr></table></figure><p>Next, what does the performance look like? I used BenchmarkDotNet and again look at several different settings.  For comparison, I use a naive “countDistinct” and a more efficient “countDistinctWithHashSet (see below).  One thing that becomes quickly obvious is memory allocations are drastically reduced when using estimated counting.  This is expected, and one of the primary goals.  Estimates are several orders of magnitude less than the naive version, and at least half of the HashSet benchmark.  This savings in memory allocations is a compelling reason to use estimated counting.  As you might imagine, the amount of allocations correspond to epsilon and delta settings.  Higher levels of accuracy require more allocations.  The second take away is execution performance, its approximately twice as fast as both counts used as the control groups.  These results are a nice demonstraiont, and concrete view, of the trade-offs, and why one would want to use estimated counting.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Naive</span></span><br><span class="line"><span class="keyword">let</span> countDistinct (data: string[]) =</span><br><span class="line">  data |&gt; Array.distinct |&gt; Array.length</span><br><span class="line"></span><br><span class="line"><span class="comment">// Naive with HashSet</span></span><br><span class="line"><span class="keyword">let</span> countDistinctWithHashSet (data: string[]) =</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> X = HashSet&lt;string&gt;()</span><br><span class="line">  data</span><br><span class="line">  |&gt; Array.iter (<span class="keyword">fun</span> word -&gt; X.Add word |&gt; ignore)</span><br><span class="line">  X.Count</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Performance:</span><br><span class="line"></span><br><span class="line">| Method                   | Mean     | Error    | StdDev   | Allocated     |</span><br><span class="line">|------------------------- |---------:|---------:|---------:|--------------:|</span><br><span class="line">| CountDistinct            | 10.414 s | 0.0323 s | 0.0302 s | 1310550.29 KB |</span><br><span class="line">| CountDistinctWithHashSet |  9.523 s | 0.0626 s | 0.0523 s |   12234.11 KB |</span><br><span class="line">| F0Estimator_one          |  4.216 s | 0.0429 s | 0.0380 s |     183.16 KB |</span><br><span class="line">| F0Estimator_half         |  4.286 s | 0.0840 s | 0.0934 s |     679.77 KB |</span><br><span class="line">| F0Estimator_quarter      |  4.354 s | 0.0798 s | 0.0667 s |    2358.71 KB |</span><br><span class="line">| F0Estimator_tenth        |  5.428 s | 0.1063 s | 0.0943 s |    6838.87 KB |</span><br></pre></td></tr></table></figure><p>There is one additional aspect to tease out.  For comparison purposes, everything is based on an array.  But considering the idea is to use a method like this on very large data, there is value in investigating its use when processing a stream.  Below is an adaptation that performs an estimated distinct word count on a stream.  The estimated counting logic is the same as above.  The major difference is because the data size isn’t know beforehand, thresh (set size) needs to be explicitly provided.  Manual calculations can be done to address a solution base on use case, anticipated size, and desired memory profile</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> streamF0Estimator (thresh: int) (stream: Stream) =</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> p = <span class="number">1.0</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> X = HashSet&lt;string&gt;(thresh)</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> noAnswer = <span class="keyword">false</span></span><br><span class="line">  <span class="keyword">let</span> chunkSize = <span class="number">4096</span></span><br><span class="line">  <span class="keyword">let</span> buffer = Array.zeroCreate&lt;byte&gt; chunkSize</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> bytesRead = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> lastWord = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (bytesRead &lt;- stream.Read(buffer, <span class="number">0</span>, chunkSize); bytesRead &gt; <span class="number">0</span>) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> content = Text.Encoding.UTF8.GetString(buffer, <span class="number">0</span>, bytesRead)</span><br><span class="line">    <span class="keyword">let</span> words = (lastWord + content).Split([|' ';'\r';'\n'|])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> .. words.Length - <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">      X.Remove(words[i]) |&gt; ignore</span><br><span class="line">      <span class="keyword">if</span> random.NextDouble() &lt; p <span class="keyword">then</span></span><br><span class="line">        X.Add(words[i]) |&gt; ignore</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> X.Count = thresh <span class="keyword">then</span></span><br><span class="line">        X &lt;- X</span><br><span class="line">             |&gt; Seq.filter (<span class="keyword">fun</span> _ -&gt; random.NextDouble() &gt;= <span class="number">0.5</span>)</span><br><span class="line">             |&gt; HashSet</span><br><span class="line"></span><br><span class="line">        p &lt;- p / <span class="number">2.0</span></span><br><span class="line">        <span class="keyword">if</span> X.Count = thresh <span class="keyword">then</span></span><br><span class="line">          noAnswer &lt;- <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">    lastWord &lt;- words.[words.Length - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> noAnswer <span class="keyword">then</span></span><br><span class="line">    None</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    Some (int (float X.Count / p))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">use</span> stream = <span class="keyword">new</span> IO.FileStream(<span class="string">"really_big_file.txt"</span>, IO.FileMode.Open, FileAccess.Read)</span><br><span class="line"><span class="keyword">let</span> distinctEstimate2 = streamF0Estimator <span class="number">4000</span> stream</span><br></pre></td></tr></table></figure><p>So what does all this mean?  First, if you’re willing to use estimates when counting distinct values, there are some good ways to get performance benefits in both processsing and memory.  In reality though, this isn’t new.  What is unique in this case is that the estimation algorithm is pretty easy to implement and understand.  That can go a long way when you’re concerned with long term maintenance.  If nothing else, there is value in investigating and understanding alternate approaches.  That’s all I have for now.  Until next time.</p><p>References:<br><a href="/references/count1/2301.10191v2.pdf">Distinct Elements in Streams: An Algorithm for the (Text) Book∗</a>  (original source: <a href="https://arxiv.org/pdf/2301.10191" target="_blank" rel="noopener">https://arxiv.org/pdf/2301.10191</a>)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Performing estimated counting of distinct elements in large datasets is a common task. While there are straightforward approaches, they can be memory-intensive and slow for massive datasets.  Today I’m going to take a look at the F0 Estimator introduced in the paper &lt;a href=&quot;/references/count1/2301.10191v2.pdf&quot;&gt;Distinct Elements in Streams: An Algorithm for the (Text) Book∗&lt;/a&gt;. As often, this will be an implementation in &lt;a href=&quot;https://fsharp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="Algorithms" scheme="http://codesuji.com/tags/Algorithms/"/>
    
      <category term="Benchmarking" scheme="http://codesuji.com/tags/Benchmarking/"/>
    
  </entry>
  
  <entry>
    <title>Harnessing the Anthropic API with F#</title>
    <link href="http://codesuji.com/2024/05/21/F-and-Anthropic/"/>
    <id>http://codesuji.com/2024/05/21/F-and-Anthropic/</id>
    <published>2024-05-22T01:31:58.000Z</published>
    <updated>2024-05-23T01:20:04.323Z</updated>
    
    <content type="html"><![CDATA[<p>Since LLMs are currently all the rage, I wanted to spend some time today to dig into how to leverage the <a href="https://www.anthropic.com" target="_blank" rel="noopener">Anthropic</a> API using <a href="https://www.fsharp.org" target="_blank" rel="noopener">F#</a>. Anthropic provides a language model that can be utilized for various natural language processing tasks, and it can be a handy tool to add to the application toolkit.</p><a id="more"></a><p>Although Anthropic provides some language SDKs, they do not have anything for .NET. Thankfully they provide a REST endpoint, so that’s the route I’ll take.  One consideration is the API isn’t free, but api calls are pretty cheap.  The target is their <a href="https://docs.anthropic.com/en/api/messages" target="_blank" rel="noopener">messages API</a>, and their new v3 models: opus, sonnet, and haiku.</p><p>As always, there are a couple things to setup first.  There are some record types to be setup for interaction with the api. Additionally there are a couple settings to configure.  Changing this alters the responses.  Regarding the json encoding for the REST calls, the api expects lower snake case.</p><p>Most of this is pretty basic, and its best to look at their documentation to get more details.  I’ll call out that temperature is set 1.0, which is more “creative”. That’s exactly what I want in a programming assistant, so I’ll go with that. The system prompt provides some direction on how I want answers to come back.  <a href="https://docs.anthropic.com/en/docs/prompt-engineering" target="_blank" rel="noopener">Prompt engineering</a> is a whole thing, so I won’t go into details.  But as an example, with no prompt “namesome German cities”, gives me a list of major cities as well as details about them. With the prompt below I’m more likely to get a plain comma-delimited list, or sometimes even a Python array.  The key here is, you can hone the shape of the answers. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Message</span> </span>= &#123;</span><br><span class="line">  Role: string</span><br><span class="line">  Content: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Request</span> </span>= &#123;</span><br><span class="line">  Model: string</span><br><span class="line">  Messages: Message[]</span><br><span class="line">  <span class="meta">[&lt;JsonPropertyName("max_tokens")&gt;]</span></span><br><span class="line">  MaxTokens: int</span><br><span class="line">  Temperature: float</span><br><span class="line">  System: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Usage</span> </span>= &#123;</span><br><span class="line">  <span class="meta">[&lt;JsonPropertyName("input_tokens")&gt;]</span></span><br><span class="line">  InputTokens: int</span><br><span class="line">  <span class="meta">[&lt;JsonPropertyName("output_tokens")&gt;]</span></span><br><span class="line">  OutputTokens: int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Content</span> </span>= &#123;</span><br><span class="line">  Type: string</span><br><span class="line">  Text: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Response</span> </span>= &#123;</span><br><span class="line">  Id: string</span><br><span class="line">  Type: string</span><br><span class="line">  Role: string</span><br><span class="line">  Model: string</span><br><span class="line">  <span class="meta">[&lt;JsonPropertyName("stop_sequence")&gt;]</span></span><br><span class="line">  StopSequence: string option</span><br><span class="line">  Usage: Usage</span><br><span class="line">  Content: Content[]</span><br><span class="line">  <span class="meta">[&lt;JsonPropertyName("stop_reason")&gt;]</span></span><br><span class="line">  StopReason: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anthropicUrl = <span class="string">"https://api.anthropic.com/v1/messages"</span></span><br><span class="line"><span class="keyword">let</span> anthropicVersion = <span class="string">"2023-06-01"</span></span><br><span class="line"><span class="keyword">let</span> apiKey = Environment.GetEnvironmentVariable(<span class="string">"ANTHROPIC_API_KEY"</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> model =</span><br><span class="line">  <span class="string">"claude-3-opus-20240229"</span>   <span class="comment">// opus</span></span><br><span class="line">  <span class="comment">//"claude-3-sonnet-20240229" // sonnet</span></span><br><span class="line">  <span class="comment">//"claude-3-haiku-20240307"  // haiku</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> temperature = <span class="number">1.0</span> <span class="comment">// 0.0 - 1.0</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> max_tokens = <span class="number">1000</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> systemMessage = <span class="string">"You are a programming assistant"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonSerializerOptions = JsonSerializerOptions(</span><br><span class="line">  PropertyNamingPolicy = JsonNamingPolicy.CamelCase)</span><br></pre></td></tr></table></figure><p>At this point, the function can be written to interface with the api.  There isn’t anything crazy in the function. It’s a basic REST call, just formatted as the Anthropic api requires.  Once the function is together, it can be called with simple message.  The response json is different whether the call was a success or failure so it is helpful to accomodate those situations.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sendMessage (message: string) = task &#123;</span><br><span class="line">  <span class="keyword">use</span> httpClient = <span class="keyword">new</span> HttpClient()</span><br><span class="line">  httpClient.DefaultRequestHeaders.Add(<span class="string">"x-api-key"</span>, apiKey)</span><br><span class="line">  httpClient.DefaultRequestHeaders.Add(<span class="string">"anthropic-version"</span>, anthropicVersion)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> userMessage =</span><br><span class="line">    &#123; Role = <span class="string">"user"</span></span><br><span class="line">      Content = message &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> requestData =</span><br><span class="line">    &#123; Model = model</span><br><span class="line">      Messages = [| userMessage |]</span><br><span class="line">      MaxTokens = max_tokens</span><br><span class="line">      Temperature = temperature</span><br><span class="line">      System = systemMessage &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> requestJson = JsonSerializer.Serialize(requestData, jsonSerializerOptions)</span><br><span class="line">  <span class="keyword">let</span> requestContent = <span class="keyword">new</span> StringContent(requestJson, Encoding.UTF8, <span class="string">"application/json"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let!</span> response = httpClient.PostAsync(anthropicUrl, requestContent)</span><br><span class="line">  <span class="keyword">let!</span> responseJson = response.Content.ReadAsStringAsync()</span><br><span class="line">  <span class="keyword">let</span> responseData = JsonSerializer.Deserialize&lt;Response&gt;(responseJson, jsonSerializerOptions)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> not (responseData.Content = <span class="keyword">null</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">// Success</span></span><br><span class="line">    <span class="keyword">if</span> not (Array.isEmpty responseData.Content) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">let</span> responseText =</span><br><span class="line">        responseData.Content</span><br><span class="line">        |&gt; Array.filter (<span class="keyword">fun</span> x -&gt; x.Type = <span class="string">"text"</span>)</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Text)</span><br><span class="line">        |&gt; String.concat <span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> Some responseText</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> None</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">// Error</span></span><br><span class="line">    <span class="keyword">let</span> errorResponseData = JsonSerializer.Deserialize&lt;ErrorResponse&gt;(responseJson, jsonSerializerOptions)</span><br><span class="line">    printfn <span class="string">"Error processing request: %A"</span> errorResponseData</span><br><span class="line">    <span class="keyword">return</span> None</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">"Write an F# function to factor a number"</span></span><br><span class="line"><span class="keyword">let</span> response =</span><br><span class="line">  sendMessage message</span><br><span class="line">  |&gt; Async.AwaitTask</span><br><span class="line">  |&gt; Async.RunSynchronously</span><br><span class="line">printfn $<span class="string">"response: &#123;response&#125;"</span></span><br></pre></td></tr></table></figure><p>So, what does an F# function that factors a number look like?  The output below shows what Anthropic’s opus thinks at least.  In addition to the textual result shown, the api response structure, includes other details, like input tokens (21) and output tokens (695).  Depending on the application, these extras can be useful.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">response: Here&apos;s an F# function to factor a number:</span><br><span class="line"></span><br><span class="line">``fsharp</span><br><span class="line">let rec factorize n =</span><br><span class="line">    let rec findFactor i =</span><br><span class="line">        if i * i &gt; n then</span><br><span class="line">            [n]</span><br><span class="line">        elif n % i = 0 then</span><br><span class="line">            i :: factorize (n / i)</span><br><span class="line">        else</span><br><span class="line">            findFactor (i + 1)</span><br><span class="line"></span><br><span class="line">    if n &lt;= 1 then</span><br><span class="line">        []</span><br><span class="line">    else</span><br><span class="line">        findFactor 2</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">This function uses a recursive approach to find the factors of a given number `n`. Here&apos;s how it works:</span><br><span class="line"></span><br><span class="line">1. The main function `factorize` takes an integer `n` as input.</span><br><span class="line">2. It first checks if `n` is less than or equal to 1. If so, it returns an empty list since numbers less than or equal to 1 have no factors.</span><br><span class="line">3. If `n` is greater than 1, it calls the inner recursive function `findFactor` with an initial value of 2.</span><br><span class="line">4. The `findFactor` function takes an integer `i` as input and does the following:</span><br><span class="line">   - If `i * i` is greater than `n`, it means that `n` is a prime number and cannot be factored further. In this case, it returns a list containing only `n`.</span><br><span class="line">   - If `n` is divisible by `i` (i.e., `n % i = 0`), it means that `i` is a factor of `n`. It adds `i` to the list of factors and recursively calls `factorize` with `n / i` to find the factors of the remaining part.</span><br><span class="line">   - If `n` is not divisible by `i`, it calls `findFactor` with `i + 1` to check the next potential factor.</span><br><span class="line">5. The function continues recursively until all factors are found, and it returns the list of factors.</span><br><span class="line"></span><br><span class="line">Here are a few examples of using the `factorize` function:</span><br><span class="line"></span><br><span class="line">``fsharp</span><br><span class="line">printfn &quot;%A&quot; (factorize 12)  // Output: [2; 2; 3]</span><br><span class="line">printfn &quot;%A&quot; (factorize 18)  // Output: [2; 3; 3]</span><br><span class="line">printfn &quot;%A&quot; (factorize 17)  // Output: [17]</span><br><span class="line">printfn &quot;%A&quot; (factorize 1)   // Output: []</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">In the above examples:</span><br><span class="line">- `factorize 12` returns `[2; 2; 3]` because 12 = 2 * 2 * 3.</span><br><span class="line">- `factorize 18` returns `[2; 3; 3]` because 18 = 2 * 3 * 3.</span><br><span class="line">- `factorize 17` returns `[17]` because 17 is a prime number.</span><br><span class="line">- `factorize 1` returns an empty list because 1 has no factors.</span><br><span class="line"></span><br><span class="line">Note that this function returns the factors in the order they are found, which may not necessarily be in ascending order.</span><br></pre></td></tr></table></figure><p>One aspect of how LLMs work is they can leverage more than a single message, but an entire conversation history. This is where context comes from when you need to tweak something.  Doing this is pretty easy.  Here I make a modification to store user messages and response, then I feed this into the api.  For a bit more detail, the main changes are: I append user messages and LLM responses to conversation history, I send the history to the api, and I add a REPL for the user to send a message, see the result, then provide follow-up information.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Conversation history</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> history = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sendMessageWithHistory (message: string) = task &#123;</span><br><span class="line">  <span class="keyword">use</span> httpClient = <span class="keyword">new</span> HttpClient()</span><br><span class="line">  httpClient.DefaultRequestHeaders.Add(<span class="string">"x-api-key"</span>, apiKey)</span><br><span class="line">  httpClient.DefaultRequestHeaders.Add(<span class="string">"anthropic-version"</span>, anthropicVersion)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> systemMessage = systemMessage</span><br><span class="line">  <span class="keyword">let</span> userMessage =</span><br><span class="line">    &#123; Role = <span class="string">"user"</span></span><br><span class="line">      Content = message &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add user message to conversation</span></span><br><span class="line">  history &lt;- List.append history [ userMessage ]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> requestData =</span><br><span class="line">    &#123; Model = model</span><br><span class="line">      Messages = List.toArray history</span><br><span class="line">      MaxTokens = max_tokens</span><br><span class="line">      Temperature = temperature</span><br><span class="line">      System = systemMessage &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> requestJson = JsonSerializer.Serialize(requestData, jsonSerializerOptions)</span><br><span class="line">  <span class="keyword">let</span> requestContent = <span class="keyword">new</span> StringContent(requestJson, Encoding.UTF8, <span class="string">"application/json"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let!</span> response = httpClient.PostAsync(anthropicUrl, requestContent)</span><br><span class="line">  <span class="keyword">let!</span> responseJson = response.Content.ReadAsStringAsync()</span><br><span class="line">  <span class="keyword">let</span> responseData = JsonSerializer.Deserialize&lt;Response&gt;(responseJson, jsonSerializerOptions)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> not (responseData.Content = <span class="keyword">null</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">// Success</span></span><br><span class="line">    <span class="keyword">if</span> not (Array.isEmpty responseData.Content) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">let</span> responseText =</span><br><span class="line">        responseData.Content</span><br><span class="line">        |&gt; Array.filter (<span class="keyword">fun</span> x -&gt; x.Type = <span class="string">"text"</span>)</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Text)</span><br><span class="line">        |&gt; String.concat <span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> assistantMessage =</span><br><span class="line">        &#123; Role = <span class="string">"assistant"</span></span><br><span class="line">          Content = responseText &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add response to conversation</span></span><br><span class="line">      history &lt;- List.append history [ assistantMessage ]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> Some responseText</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> None</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">// Error</span></span><br><span class="line">    <span class="keyword">let</span> errorResponseData = JsonSerializer.Deserialize&lt;ErrorResponse&gt;(responseJson, jsonSerializerOptions)</span><br><span class="line">    printfn <span class="string">"Error processing request: %A"</span> errorResponseData</span><br><span class="line">    <span class="keyword">return</span> None</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> loop() = task &#123;</span><br><span class="line">  printf <span class="string">"&gt; "</span></span><br><span class="line">  <span class="keyword">let</span> input = Console.ReadLine()</span><br><span class="line">  <span class="keyword">match</span> input <span class="keyword">with</span></span><br><span class="line">  | <span class="string">"quit"</span>  -&gt; ()</span><br><span class="line">  | message -&gt;</span><br><span class="line">      <span class="keyword">let!</span> response = sendMessageWithHistory message</span><br><span class="line">      <span class="keyword">match</span> response <span class="keyword">with</span></span><br><span class="line">      | Some r -&gt; printfn $<span class="string">"&#123;r&#125;"</span></span><br><span class="line">      | None   -&gt; printfn <span class="string">"No content from api call"</span></span><br><span class="line">      <span class="keyword">return!</span> loop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loop()</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; Async.RunSynchronously</span><br></pre></td></tr></table></figure><p>Here is what it looks the output from this looks like.  You can see the ability to include conversation history provides a nice experience.  If you’ve used any of the web interfaces for these LLMs, this is the experience you are probably used to. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&gt; write and F# function to split a paragraph into sentences</span><br><span class="line">Here&apos;s an F# function that splits a paragraph into sentences:</span><br><span class="line"></span><br><span class="line">``fsharp</span><br><span class="line">open System</span><br><span class="line">open System.Text.RegularExpressions</span><br><span class="line"></span><br><span class="line">let splitIntoSentences (paragraph: string) =</span><br><span class="line">    let sentenceEnders = [| &apos;.&apos;; &apos;!&apos;; &apos;?&apos; |]</span><br><span class="line">    let mutable sentences = []</span><br><span class="line">    let mutable currentSentence = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    for c in paragraph do</span><br><span class="line">        currentSentence &lt;- currentSentence + string c</span><br><span class="line">        if Array.contains c sentenceEnders then</span><br><span class="line">            sentences &lt;- sentences @ [currentSentence.Trim()]</span><br><span class="line">            currentSentence &lt;- &quot;&quot;</span><br><span class="line"></span><br><span class="line">    if not (String.IsNullOrWhiteSpace(currentSentence)) then</span><br><span class="line">        sentences &lt;- sentences @ [currentSentence.Trim()]</span><br><span class="line"></span><br><span class="line">    sentences</span><br><span class="line"></span><br><span class="line">// Example usage</span><br><span class="line">let paragraph = &quot;This is the first sentence. This is the second sentence! And this is the third sentence? This is the fourth and final sentence.&quot;</span><br><span class="line">let sentences = splitIntoSentences paragraph</span><br><span class="line">printfn &quot;%A&quot; sentences</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">In this function:</span><br><span class="line"></span><br><span class="line">1. We define an array `sentenceEnders` that contains the characters that typically end a sentence: period (`.`), exclamation mark (`!`), and question mark (`?`).</span><br><span class="line"></span><br><span class="line">2. We initialize a mutable list `sentences` to store the individual sentences and a mutable string `currentSentence` to build each sentence.</span><br><span class="line"></span><br><span class="line">3. We iterate over each character `c` in the input `paragraph`:</span><br><span class="line">   - We append the character to `currentSentence`.</span><br><span class="line">   - If the character is found in `sentenceEnders`, we consider it the end of a sentence:</span><br><span class="line">     - We add the `currentSentence` (after trimming any leading/trailing whitespace) to the `sentences` list.</span><br><span class="line">     - We reset `currentSentence` to an empty string to start building the next sentence.</span><br><span class="line"></span><br><span class="line">4. After the loop, if `currentSentence` is not empty or whitespace, we add it to the `sentences` list as the last sentence.</span><br><span class="line"></span><br><span class="line">5. Finally, we return the `sentences` list containing the individual sentences.</span><br><span class="line"></span><br><span class="line">In the example usage, we have a paragraph string that consists of multiple sentences. We pass this paragraph to the `splitIntoSentences` function, which returns a list of individual sentences. We then print the list of sentences using `printfn &quot;%A&quot;`.</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">``</span><br><span class="line">[&quot;This is the first sentence.&quot;; &quot;This is the second sentence!&quot;; &quot;And this is the third sentence?&quot;; &quot;This is the fourth and final sentence.&quot;]</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">The function splits the paragraph into individual sentences based on the presence of sentence-ending punctuation marks (`.`, `!`, `?`). Note that this is a basic implementation and may not handle all edge cases or complex sentence structures perfectly.</span><br><span class="line">&gt; modify the function to return word count with each sentence</span><br><span class="line">Sure! Here&apos;s the modified F# function that returns a tuple containing each sentence along with its word count:</span><br><span class="line"></span><br><span class="line">``fsharp</span><br><span class="line">open System</span><br><span class="line">open System.Text.RegularExpressions</span><br><span class="line"></span><br><span class="line">let splitIntoSentencesWithWordCount (paragraph: string) =</span><br><span class="line">    let sentenceEnders = [| &apos;.&apos;; &apos;!&apos;; &apos;?&apos; |]</span><br><span class="line">    let mutable sentences = []</span><br><span class="line">    let mutable currentSentence = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    for c in paragraph do</span><br><span class="line">        currentSentence &lt;- currentSentence + string c</span><br><span class="line">        if Array.contains c sentenceEnders then</span><br><span class="line">            let sentence = currentSentence.Trim()</span><br><span class="line">            let wordCount = sentence.Split([| &apos; &apos;; &apos;\t&apos;; &apos;\r&apos;; &apos;\n&apos; |], StringSplitOptions.RemoveEmptyEntries).Length</span><br><span class="line">            sentences &lt;- sentences @ [(sentence, wordCount)]</span><br><span class="line">            currentSentence &lt;- &quot;&quot;</span><br><span class="line"></span><br><span class="line">    if not (String.IsNullOrWhiteSpace(currentSentence)) then</span><br><span class="line">        let sentence = currentSentence.Trim()</span><br><span class="line">        let wordCount = sentence.Split([| &apos; &apos;; &apos;\t&apos;; &apos;\r&apos;; &apos;\n&apos; |], StringSplitOptions.RemoveEmptyEntries).Length</span><br><span class="line">        sentences &lt;- sentences @ [(sentence, wordCount)]</span><br><span class="line"></span><br><span class="line">    sentences</span><br><span class="line"></span><br><span class="line">// Example usage</span><br><span class="line">let paragraph = &quot;This is the first sentence. This is the second sentence! And this is the third sentence? This is the fourth and final sentence.&quot;</span><br><span class="line">let sentencesWithWordCount = splitIntoSentencesWithWordCount paragraph</span><br><span class="line">printfn &quot;%A&quot; sentencesWithWordCount</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">The modifications made to the function are as follows:</span><br><span class="line"></span><br><span class="line">1. Instead of just storing the sentence in the `sentences` list, we now store a tuple `(sentence, wordCount)` for each sentence.</span><br><span class="line"></span><br><span class="line">2. After extracting a sentence (trimming leading/trailing whitespace), we calculate its word count using the following steps:</span><br><span class="line">   - We split the sentence using the `Split` method with an array of delimiters including space, tab, carriage return, and newline characters.</span><br><span class="line">   - We use `StringSplitOptions.RemoveEmptyEntries` to remove any empty substrings resulting from consecutive delimiters.</span><br><span class="line">   - We count the length of the resulting array, which gives us the word count for the sentence.</span><br><span class="line"></span><br><span class="line">3. We add the tuple `(sentence, wordCount)` to the `sentences` list.</span><br><span class="line"></span><br><span class="line">4. After the loop, if `currentSentence` is not empty or whitespace, we process it as the last sentence, calculate its word count, and add it to the `sentences` list as a tuple.</span><br><span class="line"></span><br><span class="line">5. Finally, we return the `sentences` list containing tuples of individual sentences and their corresponding word counts.</span><br><span class="line"></span><br><span class="line">In the example usage, we have the same paragraph string as before. We pass this paragraph to the `splitIntoSentencesWithWordCount` function, which returns a list of tuples, where each tuple contains a sentence and its word count. We then print the list of sentence-word count tuples using `printfn &quot;%A&quot;`.</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">``</span><br><span class="line">[(&quot;This is the first sentence.&quot;, 5); (&quot;This is the second sentence!&quot;, 5); (&quot;And this is the third sentence?&quot;, 6); (&quot;This is the fourth and final sentence.&quot;, 7)]</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">The function splits the paragraph into individual sentences and returns each sentence along with its word count. Note that this implementation considers words as substrings separated by spaces, tabs, carriage returns, or newlines. It may not handle all edge cases or complex word structures perfectly.</span><br><span class="line">&gt; quit</span><br></pre></td></tr></table></figure><p>In addition to sending text-based messages, the Anthropic API also supports sending image data as part of the conversation. Let’s explore how to handle image data using F#.  For this I’ll need to modify some of the definitions to support image-related fields.  I also modify the json serializer to exclude empty (None) values when serializing. The api fails when extra fields are sent, and this is a good way to handle that.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="meta">[&lt;Struct&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ImageSource</span> </span>=</span><br><span class="line">  &#123; Type: string</span><br><span class="line">    <span class="meta">[&lt;JsonPropertyName("media_type")&gt;]</span></span><br><span class="line">    MediaType: string</span><br><span class="line">    Data: string &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MessageContent</span> </span>=</span><br><span class="line">  &#123; Type: string</span><br><span class="line">    Source: ImageSource option</span><br><span class="line">    Text: string option</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Message</span> </span>= &#123;</span><br><span class="line">  Role: string</span><br><span class="line">  Content: MessageContent[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Request</span> </span>= &#123;</span><br><span class="line">  Model: string</span><br><span class="line">  Messages: Message[]</span><br><span class="line">  <span class="meta">[&lt;JsonPropertyName("max_tokens")&gt;]</span></span><br><span class="line">  MaxTokens: int</span><br><span class="line">  Temperature: float</span><br><span class="line">  System: string option</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonSerializerOptions.DefaultIgnoreCondition &lt;- JsonIgnoreCondition.WhenWritingNull</span><br></pre></td></tr></table></figure><p>When sending an image, it is similar to text, the primary different is sending a slightly different message structure. The image itself is sent as a Base64 encoded string.  An additional note with images, you should be careful of the cost when sending images.  There is a <a href="https://docs.anthropic.com/en/docs/vision#image-size" target="_blank" rel="noopener">calcuation</a> of image size to token, for this particular example, I use a 200x151 sized image to keep the token count down (The image here is bigger, just so its easier to see).</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sendImageMessage (imagePath: string) (message: string) = task &#123;</span><br><span class="line">  <span class="keyword">use</span> httpClient = <span class="keyword">new</span> HttpClient()</span><br><span class="line">  httpClient.DefaultRequestHeaders.Add(<span class="string">"x-api-key"</span>, apiKey)</span><br><span class="line">  httpClient.DefaultRequestHeaders.Add(<span class="string">"anthropic-version"</span>, anthropicVersion)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> imageBytes = System.IO.File.ReadAllBytes(imagePath)</span><br><span class="line">  <span class="keyword">let</span> encodedImage = Convert.ToBase64String(imageBytes)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> imageData =</span><br><span class="line">    &#123; Type = <span class="string">"image"</span></span><br><span class="line">      Source = Some</span><br><span class="line">        &#123; Type = <span class="string">"base64"</span></span><br><span class="line">          MediaType = <span class="string">"image/jpeg"</span></span><br><span class="line">          Data = encodedImage &#125;</span><br><span class="line">      Text = None &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> messageData =</span><br><span class="line">    &#123; Type = <span class="string">"text"</span></span><br><span class="line">      Source = None</span><br><span class="line">      Text = Some message &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> userMessage =</span><br><span class="line">    &#123; Role = <span class="string">"user"</span></span><br><span class="line">      Content = [| imageData; messageData |] &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> requestData =</span><br><span class="line">    &#123; Model = model</span><br><span class="line">      Messages = [| userMessage |]</span><br><span class="line">      MaxTokens = maxTokens</span><br><span class="line">      Temperature = temperature</span><br><span class="line">      System = None &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> requestJson = JsonSerializer.Serialize(requestData, jsonSerializerOptions)</span><br><span class="line">  <span class="keyword">let</span> requestContent = <span class="keyword">new</span> StringContent(requestJson, Encoding.UTF8, <span class="string">"application/json"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let!</span> response = httpClient.PostAsync(anthropicUrl, requestContent)</span><br><span class="line">  <span class="keyword">let!</span> responseJson = response.Content.ReadAsStringAsync()</span><br><span class="line">  <span class="keyword">let</span> responseData = JsonSerializer.Deserialize&lt;Response&gt;(responseJson, jsonSerializerOptions)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> not (responseData.Content = <span class="keyword">null</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">// Success</span></span><br><span class="line">    <span class="keyword">if</span> not (Array.isEmpty responseData.Content) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">let</span> responseText =</span><br><span class="line">        responseData.Content</span><br><span class="line">        |&gt; Array.filter (<span class="keyword">fun</span> x -&gt; x.Type = <span class="string">"text"</span>)</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Text)</span><br><span class="line">        |&gt; String.concat <span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> Some responseText</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> None</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">// Error</span></span><br><span class="line">    <span class="keyword">let</span> errorResponseData = JsonSerializer.Deserialize&lt;ErrorResponse&gt;(responseJson, jsonSerializerOptions)</span><br><span class="line">    printfn <span class="string">"Error processing request: %A"</span> errorResponseData</span><br><span class="line">    <span class="keyword">return</span> None</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">"What is in the image?"</span></span><br><span class="line"><span class="keyword">let</span> response =</span><br><span class="line">  sendImageMessage <span class="string">"test.jpg"</span> message</span><br><span class="line">  |&gt; Async.AwaitTask</span><br><span class="line">  |&gt; Async.RunSynchronously</span><br><span class="line">printfn $<span class="string">"response: &#123;response&#125;"</span></span><br></pre></td></tr></table></figure><p>:<img src="/images/claude1/test_big.jpg" alt="Sample Image"></p><p>Here is description of the image, not too bad.</p><p>“<br>response: The image shows a winter landscape covered in snow. It depicts a park or garden setting with bare trees and bushes blanketed in snow. In the foreground, there is a fence or railing, also covered in snow. The scene has a serene, tranquil feel with the monochromatic gray tones created by the snowy conditions. The trees appear slightly obscured or hazy, likely due to falling snow or overcast sky conditions during the winter snowfall captured in the photograph.<br>“</p><p>So, that’s about it for now.  I’ve explored how to use the Anthropic API with F#, using a couple different scenarios.  Hopefully this offers some inspiration to go out in play with this LLM or another one yourself.  Until next time, happy coding with F# and Anthropic.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Since LLMs are currently all the rage, I wanted to spend some time today to dig into how to leverage the &lt;a href=&quot;https://www.anthropic.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Anthropic&lt;/a&gt; API using &lt;a href=&quot;https://www.fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;. Anthropic provides a language model that can be utilized for various natural language processing tasks, and it can be a handy tool to add to the application toolkit.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Using F# and Flurl</title>
    <link href="http://codesuji.com/2023/09/23/F-Flurl/"/>
    <id>http://codesuji.com/2023/09/23/F-Flurl/</id>
    <published>2023-09-23T17:32:52.000Z</published>
    <updated>2023-09-23T14:16:32.962Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s post is really light, and nothing too involved.  It is composed mostly of notes and examples using the fluent http client <a href="https://flurl.dev/" target="_blank" rel="noopener">Flurl</a> with <a href="https://fsharp.org/" target="_blank" rel="noopener">F#</a>.</p><a id="more"></a><p>If you’re looking for an alternative to the HttpClient, Flurl offers some nice functionality and ergonomics. For reference I’m using version 3.2.4 of the client.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package flurl.http --version 3.2.4</span><br></pre></td></tr></table></figure><p>Before getting into examples, there is some small setup. I’ve defined a <code>User</code> type to send and receive data. Based on the Flurl response objects (which you’ll see in a moment) I have some response types specifically for HTTP GET and POST.  Note here, I’m only including the <code>args</code>, since that is all I care about, but this could also include things like <code>data</code> or <code>headers</code> as well.  For simplicity, I’m using httpbin.org, which echos what I send. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Flurl</span><br><span class="line"><span class="keyword">open</span> Flurl.Http</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">User</span> </span>=</span><br><span class="line">  &#123; Id: int</span><br><span class="line">    FirstName: string </span><br><span class="line">    LastName: string </span><br><span class="line">    Notes: string &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">GetResult</span> </span>= </span><br><span class="line">  &#123; args: User &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">PostResult</span> </span>= </span><br><span class="line">  &#123; json: User &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> targetUrl = <span class="string">"https://httpbin.org/anything"</span></span><br></pre></td></tr></table></figure><p>A simple HTTP GET is straight-forward.  Here I am returning the raw result, so you can see the general structure of the data returned.  Query parameters are sent using the <code>SetQueryParams</code> method.  <code>GetStringAsync</code> returns the raw string result.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">task &#123;</span><br><span class="line">  <span class="keyword">let!</span> result =</span><br><span class="line">    targetUrl</span><br><span class="line">      .SetQueryParams(</span><br><span class="line">        &#123;| Id = <span class="number">123</span></span><br><span class="line">           FirstName = <span class="string">"James"</span></span><br><span class="line">           LastName = <span class="string">"Cole"</span></span><br><span class="line">           Notes = <span class="string">""</span> |&#125;)</span><br><span class="line">      .GetStringAsync()</span><br><span class="line"></span><br><span class="line">  printfn <span class="string">"%A"</span> result &#125;</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; Async.RunSynchronously</span><br></pre></td></tr></table></figure><p>Results:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;</span><br><span class="line">  &quot;args&quot;: &#123;</span><br><span class="line">    &quot;FirstName&quot;: &quot;James&quot;, </span><br><span class="line">    &quot;Id&quot;: &quot;123&quot;, </span><br><span class="line">    &quot;LastName&quot;: &quot;Cole&quot;, </span><br><span class="line">    &quot;Notes&quot;: &quot;&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;data&quot;: &quot;&quot;, </span><br><span class="line">  &quot;files&quot;: &#123;&#125;, </span><br><span class="line">  &quot;form&quot;: &#123;&#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-712ae14b-12b5a0fd70cfafb2213dd1b2&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;json&quot;: null, </span><br><span class="line">  &quot;method&quot;: &quot;GET&quot;, </span><br><span class="line">  &quot;origin&quot;: &quot;###.###.###.###&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;https://httpbin.org/anything?FirstName=James&amp;Id=123&amp;LastName=Cole&amp;Notes=&quot;</span><br><span class="line">&#125;</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><p>It is nice to see the raw result, but it is much more practical to deserialize the response into the desired object.  To do this, change the Get call to <code>GetJsonAsync&lt;GetResult&gt;</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">task &#123;</span><br><span class="line">  <span class="keyword">let!</span> result =</span><br><span class="line">    targetUrl</span><br><span class="line">      .SetQueryParams(</span><br><span class="line">        &#123;| Id = <span class="number">456</span></span><br><span class="line">           FirstName = <span class="string">"Jeffrey"</span></span><br><span class="line">           LastName = <span class="string">"Goines"</span></span><br><span class="line">           Notes = <span class="string">""</span> |&#125;)</span><br><span class="line">      .GetJsonAsync&lt;GetResult&gt;()</span><br><span class="line"></span><br><span class="line">  printfn <span class="string">"%A"</span> result &#125;</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; Async.RunSynchronously</span><br></pre></td></tr></table></figure><p>Results:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; args = &#123; Id = 456</span><br><span class="line">           FirstName = &quot;Jeffrey&quot;</span><br><span class="line">           LastName = &quot;Goines&quot;</span><br><span class="line">           Notes = &quot;&quot; &#125; &#125;</span><br></pre></td></tr></table></figure><p>Often you want to send additional http headers with your request.  To do this, use the <code>WithHeaders</code> method. It takes an array of key/value pairs.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">task &#123;</span><br><span class="line">  <span class="keyword">let!</span> getResult =</span><br><span class="line">    targetUrl</span><br><span class="line">      .WithHeaders(</span><br><span class="line">        &#123;| X_CUSTOM_HEADER = <span class="string">"12 Monkeys"</span> |&#125;,</span><br><span class="line">        <span class="keyword">true</span>)</span><br><span class="line">      .GetStringAsync()</span><br><span class="line"></span><br><span class="line">  printfn <span class="string">"%A"</span> getResult &#125;</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; Async.RunSynchronously</span><br></pre></td></tr></table></figure><p>Results:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;data&quot;: &quot;&quot;, </span><br><span class="line">  &quot;files&quot;: &#123;&#125;, </span><br><span class="line">  &quot;form&quot;: &#123;&#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-712ae14b-887a539f672c4c3360afd11e&quot;, </span><br><span class="line">    &quot;X-Custom-Header&quot;: &quot;12 Monkeys&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;json&quot;: null, </span><br><span class="line">  &quot;method&quot;: &quot;GET&quot;, </span><br><span class="line">  &quot;origin&quot;: &quot;###.###.###.###&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;https://httpbin.org/anything&quot;</span><br><span class="line">&#125;</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><p>Performing an HTTP POST is similar to a GET.  In this case use the <code>PostJsonAsync</code> method along with the object to serialize.  Like the previous example, <code>ReceiveJson&lt;PostResult&gt;</code> will deserialize the response into the desired object.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">task &#123;</span><br><span class="line">  <span class="keyword">let!</span> postResult =</span><br><span class="line">    targetUrl</span><br><span class="line">      .PostJsonAsync(</span><br><span class="line">          &#123;| Id = <span class="number">789</span></span><br><span class="line">             FirstName = <span class="string">"Kathryn"</span></span><br><span class="line">             LastName = <span class="string">"Railly"</span></span><br><span class="line">             Notes = <span class="string">""</span> |&#125;)</span><br><span class="line">      .ReceiveJson&lt;PostResult&gt;()</span><br><span class="line"></span><br><span class="line">  printfn <span class="string">"%A"</span> postResult &#125;</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; Async.RunSynchronously</span><br></pre></td></tr></table></figure><p>Results:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; json = &#123; Id = 789</span><br><span class="line">           FirstName = &quot;Kathryn&quot;</span><br><span class="line">           LastName = &quot;Railly&quot;</span><br><span class="line">           Notes = &quot;&quot; &#125; &#125;</span><br></pre></td></tr></table></figure><p>To put these components into a larger call, here is an HTTP POST that also sends headers.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">task &#123;</span><br><span class="line">  <span class="keyword">let!</span> postResult =</span><br><span class="line">    targetUrl</span><br><span class="line">      .WithHeaders(</span><br><span class="line">        &#123;| Accept = <span class="string">"application/json"</span></span><br><span class="line">           ContentType = <span class="string">"application/json"</span></span><br><span class="line">           X_CUSTOM_HEADER = <span class="string">"12 Monkeys"</span> |&#125;,</span><br><span class="line">        <span class="keyword">true</span> <span class="comment">// replace _ with -</span></span><br><span class="line">      )</span><br><span class="line">      .PostJsonAsync(</span><br><span class="line">        &#123;| Id = <span class="number">101112</span></span><br><span class="line">           FirstName = <span class="string">"Lelan"</span></span><br><span class="line">           LastName = <span class="string">"Goines"</span></span><br><span class="line">           Notes = <span class="string">""</span> |&#125;)</span><br><span class="line">      .ReceiveJson&lt;PostResult&gt;()</span><br><span class="line"></span><br><span class="line">  printfn <span class="string">"%A"</span> postResult &#125;</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; Async.RunSynchronously</span><br></pre></td></tr></table></figure><p>Results:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; json = &#123; Id = 101112</span><br><span class="line">           FirstName = &quot;Lelan&quot;</span><br><span class="line">           LastName = &quot;Goines&quot;</span><br><span class="line">           Notes = &quot;&quot; &#125; &#125;</span><br></pre></td></tr></table></figure><p>Up until now, it has been send/receiving json payloads.  But Flurl can be used to download files as well.  Here I how a pdf can be downloaded and saved using <code>DownloadFileAsync</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task &#123;</span><br><span class="line">  <span class="keyword">let!</span> result =</span><br><span class="line">    <span class="string">"https://people.math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf"</span></span><br><span class="line">      .DownloadFileAsync(<span class="string">"./"</span>, <span class="string">"entropy.pdf"</span>)</span><br><span class="line">  printfn $<span class="string">"&#123;result&#125;"</span> &#125;</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; Async.RunSynchronously</span><br></pre></td></tr></table></figure><p>Results:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./entropy.pdf</span><br></pre></td></tr></table></figure><p>Hopefully these short notes have been helpful if you want to use Flurl with F#.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s post is really light, and nothing too involved.  It is composed mostly of notes and examples using the fluent http client &lt;a href=&quot;https://flurl.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flurl&lt;/a&gt; with &lt;a href=&quot;https://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Tips" scheme="http://codesuji.com/tags/Tips/"/>
    
      <category term="Web" scheme="http://codesuji.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Vector Search using F#</title>
    <link href="http://codesuji.com/2023/04/08/VectorSearch-F-1/"/>
    <id>http://codesuji.com/2023/04/08/VectorSearch-F-1/</id>
    <published>2023-04-08T10:27:11.000Z</published>
    <updated>2024-05-23T02:32:12.249Z</updated>
    
    <content type="html"><![CDATA[<p>Vector search is an essential tool for many modern applications, particularly for information retrieval. It allows for efficient searching and retrieval of information based on similarity between vectors. Today I will explore how to implement a naive vector search with <a href="https://fsharp" target="_blank" rel="noopener">F#</a>.  Whether you are a seasoned F# developer or just starting out, this will provide you some useful information if you want to better understand the basics of vector search in your own projects.</p><a id="more"></a><p>The impetus for this post is to dig into vector search and how it can be used in a project.  It has become such a hot topic as of late, it is valuable to dig into the underlying concepts. Even though what I show here isn’t large-scale high performance, it will describe some of the underlying concepts, which can help you understand what the big solutions are talking about.  This will be a multi-phase process. I first want to provide a simple breakdown of what vector search can do in the simpliest way.  The resulting code won’t be the best search algorithm, nor the fastest.  But once the basics are covered, I’ll start replacing pieces until I get to a more usable result.  It’ll also worthwhile to note up front, there isn’t one right way to do vector search. There are lots of variations, depending on the specific use case. I’ll at least show some of them and point in directions for deeper information.</p><p>First things first. What is vector search?  Vector search is a way to find similar entries based on their features, specifically represented as vectors (or an array of numbers). For example, if you have a bunch of text documents, you can represent each document as a vector of numbers.  You can then compare these vectors to find documents that are similar to each other, even if they use different words.  This can be used for anything that can be represented, so although I’ll focus mostly on text, this conceptually works for other types of data, like images or audio. The idea is that similar things will have similar features, so their vectors will be similar too. And I know what you’re asking, how can text be represented as an array of numbers, for now “magic”, but I’ll dig into that a bit.</p><p>The starting point is going to be comparing sentences.  I’ll get into the details soon, but for my implementation I’m going to need a list of already vectorized words.  There are several sources, but I’ve decided to use <a href="http://nlp.stanford.edu/data/glove.6B.zip" target="_blank" rel="noopener">GloVe</a> from Standford’s NLP lab.  They provide multiple vector size embeddings, I’m going to use a vector size of 300.  You can think of larger vectors providing a better representation, with the obvious tradeoff of slower and larger.  Once loaded, I’ll see the word -&gt; vector mappings in a Map.</p><p>The loadGloVeModel function loads the downloaded pre-trained GloVe model from a file and returns it as a WordModel.   Each key in the map is a word, and each value is a 300-dimensional float array representing that word’s vector.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">WordModel</span> </span>= Map&lt;string, float[]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Load the GloVe model</span></span><br><span class="line"><span class="keyword">let</span> loadGloVeModel (modelFile: string) :WordModel =</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> model :WordModel = Map.empty&lt;string, float[]&gt;</span><br><span class="line">  IO.File.ReadAllLines(modelFile)</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> line -&gt; </span><br><span class="line">      <span class="keyword">let</span> tokens = line.Split([|' '|])</span><br><span class="line">      <span class="keyword">let</span> word = tokens[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">let</span> vector =</span><br><span class="line">        tokens[<span class="number">1.</span>.tokens.Length<span class="number">-1</span>]</span><br><span class="line">        |&gt; Array.map float</span><br><span class="line">      (word, vector))</span><br><span class="line">  |&gt; Map.ofArray</span><br></pre></td></tr></table></figure><p>Once I have a list of words and their associated vectors, I can use these to vectorize the sentence.  In this particular case I’ve decided to add the vectors of each word together to calculate a sentence’s vector.  Without going into too much detail just yet, this can be handled several different ways.  Other typical ways include averaging the word vectors and multiplying vectors.  There are more sophisticated methods, but I don’t want to get ahead of myself just yet.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Vectorize sentence</span></span><br><span class="line"><span class="comment">/// Aggregate word vectors into a single sentence vector</span></span><br><span class="line"><span class="keyword">let</span> vectorizeSentence (model: WordModel) (sentence: string) =</span><br><span class="line">  <span class="keyword">let</span> vectorLength = <span class="number">300</span></span><br><span class="line">  <span class="keyword">let</span> words = sentence.ToLower().Split([|' '|])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> vector = Array.create vectorLength <span class="number">0.</span></span><br><span class="line">  <span class="keyword">let</span> wordVectors =</span><br><span class="line">    words</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> word -&gt; Map.tryFind word model)</span><br><span class="line">    |&gt; Array.filter (<span class="keyword">fun</span> x -&gt; x.IsSome)</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Value)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sum vectors</span></span><br><span class="line">  <span class="keyword">for</span> wordVector <span class="keyword">in</span> wordVectors <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0.</span>.vectorLength - <span class="number">1</span>] <span class="keyword">do</span></span><br><span class="line">      vector[i] &lt;- vector[i] + wordVector[i]</span><br><span class="line"></span><br><span class="line">  vector</span><br></pre></td></tr></table></figure><p>Before going much further, let’s take a look at how this looks in practice.  The below code snippet uses the GloVe word vectorizations to vectorize a sentence.  I’ve included the resulting vector.  Now that we know how to convert sentences to vectors we can start using all sorts of comparison tricks.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> modelFile = <span class="string">"./glove.6B/glove.6B.300d.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> model = loadGloVeModel modelFile</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vs = vectorizeSentence model <span class="string">"this is a test"</span></span><br><span class="line">printfn <span class="string">"%A"</span> vs</span><br><span class="line"></span><br><span class="line"><span class="comment">(* Results (300 dimension vector):</span></span><br><span class="line"><span class="comment">[|-0.64975; 1.224579; 0.339562; -1.924; -0.683991; 0.351187; -0.313945;</span></span><br><span class="line"><span class="comment">  -0.604948; -0.31373; -7.8024; 1.20313; -0.312192; -0.191178; 0.192142;</span></span><br><span class="line"><span class="comment">  0.393947; 0.9711565; -1.64555; 0.435215; 0.172147; -1.468; -0.741057; 0.72615;</span></span><br><span class="line"><span class="comment">  0.098328; 1.86091; -0.548895; -0.225667; 0.45209; -1.07928; -0.493058; 0.05875;</span></span><br><span class="line"><span class="comment">  0.090338; 0.71061; -1.39378; 0.29642; -3.17332; 1.51456; -1.170281; 0.55138;</span></span><br><span class="line"><span class="comment">  -1.75381; 1.178137; 1.021473; 0.878106; 0.156037; 0.0063756; 0.208939;</span></span><br><span class="line"><span class="comment">  0.132626; 0.2679; 0.054727; -0.714408; -0.39498; 0.256841; -0.344485; 0.165513;</span></span><br><span class="line"><span class="comment">  0.533583; 0.015597; 0.453348; -0.657536; 0.27526; 1.1971; -0.113965; 0.045459;</span></span><br><span class="line"><span class="comment">  -0.130756; 1.842526; -0.353876; -0.72542; -0.82638; -0.042127; -0.756783;</span></span><br><span class="line"><span class="comment">  0.609844; 0.30856; -0.802697; 1.045285; 0.43572; -0.540373; -1.55073;</span></span><br><span class="line"><span class="comment">  -0.371212; 0.52077; 0.192682; -0.819995; 0.952318; -0.829941; 0.725035;</span></span><br><span class="line"><span class="comment">  0.45467; -0.456168; 0.18888; 0.620742; -0.202445; 0.78332; 0.684417; 0.079607;</span></span><br><span class="line"><span class="comment">  -1.009762; 1.36058; 0.150918; -1.93009; 1.3126; 0.3376661; -0.66495; 0.580754;</span></span><br><span class="line"><span class="comment">  0.0967394; -1.257588; ...|]</span></span><br><span class="line"><span class="comment">*)</span></span><br></pre></td></tr></table></figure><p>How do comparison between vectors work?  The options here are quite varied, but a couple common methods bubble to the top.  I’m going to use Cosine similarity, which essentially is a calculation of angle between the vectors of two sentences (in this case).  The results go from -1 to 1, where 1 is very similar and -1 indicates an opposite concept.  Right in the middle is 0, this indicates that the two vectors are orthoginal, and not related at all.  Like so many other parts of this process, there are a variety of methods, the Pearson Correlation Coefficient being one.  The last part just takes it a step further, given a set of sentences, which ones are closest to the “query” sentence. This is simply a map over the sentences, performing the required vectorization and comparisons.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Cosine similarity between two vectors</span></span><br><span class="line"><span class="keyword">let</span> cosineSimilarity (v1: float[]) (v2: float[]) :float =</span><br><span class="line">  <span class="keyword">let</span> dotProduct = Array.map2 <span class="comment">(*) v1 v2 |&gt; Array.sum</span></span><br><span class="line"><span class="comment">  let magnitude1 = sqrt(Array.sumBy (fun x -&gt; x * x) v1)</span></span><br><span class="line"><span class="comment">  let magnitude2 = sqrt(Array.sumBy (fun x -&gt; x * x) v2)</span></span><br><span class="line"><span class="comment">  if magnitude1 &lt;&gt; 0. &amp;&amp; magnitude2 &lt;&gt; 0. then</span></span><br><span class="line"><span class="comment">    dotProduct / (magnitude1 * magnitude2)</span></span><br><span class="line"><span class="comment">  else</span></span><br><span class="line"><span class="comment">    0.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/// Compare and rank query to a list of other sentences</span></span><br><span class="line"><span class="comment">/// Note: Higher values mean they are more similar</span></span><br><span class="line"><span class="comment">let similarityVectorSearch (query: string) (sentences: string list) (model: WordModel) =</span></span><br><span class="line"><span class="comment">    let queryVector = vectorizeSentence model query</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    sentences</span></span><br><span class="line"><span class="comment">    |&gt; List.map (fun sentence -&gt; (sentence, vectorizeSentence model sentence ))</span></span><br><span class="line"><span class="comment">    |&gt; List.map (fun (sentence, sentenceVector) -&gt; (sentence, cosineSimilarity queryVector sentenceVector))</span></span><br><span class="line"><span class="comment">    |&gt; List.sortByDescending snd</span></span><br></pre></td></tr></table></figure><p>Time to put it all together.  Below I have a query sentence as well as a corpus of other sentences that I’ll use for comparison.  The goal is to see which of those sentences are closest to the query sentence.  The key here being I’m not looking for specific word matches.  I expect to match closer to sentences that carry similarities, possibily related to apples, fruit, food, and eating. Time to see how well a very naive implementation can do.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> modelFile = <span class="string">"./glove.6B/glove.6B.300d.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> model = loadGloVeModel modelFile</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> query = <span class="string">"This is a good apple to eat"</span></span><br><span class="line"><span class="keyword">let</span> queryVector = vectorizeSentence model query</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sentences = [</span><br><span class="line">  <span class="string">"A man's got to do what a man's got to do"</span></span><br><span class="line">  <span class="string">"All those moments will be lost in time, like tears in rain"</span></span><br><span class="line">  <span class="string">"An apple a day keeps the doctor away"</span></span><br><span class="line">  <span class="string">"An apple is an excellent thing - until you have tried a peach"</span></span><br><span class="line">  <span class="string">"An idealist is one who, on noticing that roses smell better than a cabbage, concludes that it will also make better soup"</span></span><br><span class="line">  <span class="string">"As American as apple pie"</span></span><br><span class="line">  <span class="string">"Fruit does not grow on the trunk of a tree but on the tips of its branches"</span></span><br><span class="line">  <span class="string">"Game over, man"</span> </span><br><span class="line">  <span class="string">"I am not a robot, but I play one on TV"</span></span><br><span class="line">  <span class="string">"I have come here to chew bubblegum and kick ass and I'm all out of bubblegum"</span></span><br><span class="line">  <span class="string">"I never met a man I didn't like until I met that man"</span></span><br><span class="line">  <span class="string">"I'll be back"</span> </span><br><span class="line">  <span class="string">"I'm sorry, Dave. I'm afraid I can't do that"</span> </span><br><span class="line">  <span class="string">"I've got a bad feeling about this"</span> </span><br><span class="line">  <span class="string">"Knowledge is knowing a tomato is a fruit; wisdom is not putting it in a fruit salad"</span></span><br><span class="line">  <span class="string">"Let food be thy medicine and medicine be thy food"</span></span><br><span class="line">  <span class="string">"Life is uncertain. Eat dessert first"</span></span><br><span class="line">  <span class="string">"Open the pod bay doors HAL"</span> </span><br><span class="line">  <span class="string">"Resistance is futile"</span> </span><br><span class="line">  <span class="string">"The early bird gets the worm"</span></span><br><span class="line">  <span class="string">"The future is not set. There is no fate but what we make for ourselves"</span></span><br><span class="line">  <span class="string">"The needs of the many outweigh the needs of the few, or the one"</span> </span><br><span class="line">  <span class="string">"The only thing we have to fear is fear itself - and robots"</span></span><br><span class="line">  <span class="string">"There's no place like home"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> similarities =</span><br><span class="line">  sentences</span><br><span class="line">  |&gt; List.map (<span class="keyword">fun</span> sentence -&gt;</span><br><span class="line">      <span class="keyword">let</span> sentenceVector = vectorizeSentence model sentence</span><br><span class="line">      <span class="keyword">let</span> similarity = cosineSimilarity queryVector sentenceVector</span><br><span class="line">      (sentence, similarity))</span><br><span class="line">  |&gt; List.sortByDescending snd</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (sentence, similarity) <span class="keyword">in</span> similarities <span class="keyword">do</span></span><br><span class="line">  printfn $<span class="string">"%2.4f&#123;similarity&#125; &#123;sentence&#125;"</span></span><br></pre></td></tr></table></figure><p>I said it before, but the big caveat is that this is meant to provide a general feeling for the components and methodologies involved.  The results below won’t be fast, or great (honestly), but it provides a base on which better things can be built.  I’ve starred the ones I would expect to match. There is higher concentration similar sentences at the top of the list, although there are some interesting matches.  For something simple, this is encouraging. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">*0.9072 Knowledge is knowing a tomato is a fruit; wisdom is not putting it in a fruit salad</span><br><span class="line">*0.9022 An idealist is one who, on noticing that roses smell better than a cabbage, concludes that it will also make better soup</span><br><span class="line">*0.8949 An apple is an excellent thing - until you have tried a peach</span><br><span class="line"> 0.8730 A man&apos;s got to do what a man&apos;s got to do</span><br><span class="line">*0.8557 An apple a day keeps the doctor away</span><br><span class="line"> 0.8504 The future is not set. There is no fate but what we make for ourselves</span><br><span class="line">*0.8480 Life is uncertain. Eat dessert first</span><br><span class="line"> 0.8300 The only thing we have to fear is fear itself - and robots</span><br><span class="line">*0.8282 Fruit does not grow on the trunk of a tree but on the tips of its branches</span><br><span class="line"> 0.8215 I am not a robot, but I play one on TV</span><br><span class="line"> 0.8212 I&apos;ve got a bad feeling about this</span><br><span class="line"> 0.7758 There&apos;s no place like home</span><br><span class="line"> 0.7718 I never met a man I didn&apos;t like until I met that man</span><br><span class="line"> 0.7669 I have come here to chew bubblegum and kick ass and I&apos;m all out of bubblegum</span><br><span class="line"> 0.7598 The needs of the many outweigh the needs of the few, or the one</span><br><span class="line"> 0.7591 All those moments will be lost in time, like tears in rain</span><br><span class="line">*0.7405 As American as apple pie</span><br><span class="line"> 0.7347 I&apos;ll be back</span><br><span class="line"> 0.7315 I&apos;m sorry, Dave. I&apos;m afraid I can&apos;t do that</span><br><span class="line"> 0.7053 The early bird gets the worm</span><br><span class="line">*0.6668 Let food be thy medicine and medicine be thy food</span><br><span class="line"> 0.5982 Game over, man</span><br><span class="line"> 0.5306 Resistance is futile</span><br><span class="line"> 0.4955 Open the pod bay doors HAL</span><br></pre></td></tr></table></figure><p>Now, the harsh truth. This is cool, but there are some severe limitations.  First, the results are better than random, but could use some boosting to be more useful.  This leads to the second point, the methodologies for vectorization and similarity comparisons are naive. There is room for improvement there.  Third, the implementation is not necessarily the most performant.  The good thing is, there are all solvable, or at least something that can be improved. Fourth, how can these techniques be applied to document search (this has its own set of nuances)?  These are good topics to dig into next time.  I hope you found this at least mildly informative.  Until then, keep coding.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vector search is an essential tool for many modern applications, particularly for information retrieval. It allows for efficient searching and retrieval of information based on similarity between vectors. Today I will explore how to implement a naive vector search with &lt;a href=&quot;https://fsharp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  Whether you are a seasoned F# developer or just starting out, this will provide you some useful information if you want to better understand the basics of vector search in your own projects.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>The Great Json Bake-Off</title>
    <link href="http://codesuji.com/2023/03/07/Json-Bakeoff/"/>
    <id>http://codesuji.com/2023/03/07/Json-Bakeoff/</id>
    <published>2023-03-07T12:57:32.000Z</published>
    <updated>2023-07-25T21:52:14.987Z</updated>
    
    <content type="html"><![CDATA[<p>It is difficult to build much without needing to deal with json at some point. In the world of <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> there are several options.  Today I want to lay out some of the popular choices and offer some some compare and contrast.  These libraries all have their own strengths and weaknesses, and bringing it all into a single place to highlight these is a useful point of reference for decision making and general understanding.</p><a id="more"></a><p>First, a couple disclaimers.  What I’m presenting is not an exhaustive list of libraries, but it is what I have found are commonly referenced and used.  The benchmarks provided are intended to be representative, but should be taken with a grain of salt (as with all benchmarks).  Other systems and data may see slightly different results than what I’m showing here.  Most of these libraries have the ability to support custom serialization/deserialization and all kinds of options. The goal is not to dive into a bunch of rabbit holes, but what does typical usage looks like.  If there is another library you’d like to see, an error I made, or a performance aspect I missed, hit me up and I’ll make corrections/additions.  The goal is to offer an honest representation, and it is important to get this as correct as possible.  Second, the libraries I’ll be investigating are below.  The first three libraries are F#-specific, the last two are the common json encoders in the .NET ecosystem that everyone knows.  </p><ul><li><a href="https://github.com/Microsoft/fsharplu" target="_blank" rel="noopener">FSharpLu</a></li><li><a href="https://thoth-org.github.io/Thoth.Json/" target="_blank" rel="noopener">Thoth</a></li><li><a href="https://github.com/fsprojects/Fleece" target="_blank" rel="noopener">Fleece</a></li><li><a href="https://www.newtonsoft.com/json" target="_blank" rel="noopener">Newtonsoft</a></li><li><a href="https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/overview" target="_blank" rel="noopener">System.Text.Json</a></li></ul><p>The benchmarks are run on Linux, using .NET 7.  Below are the library versions.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># BenchmarkDotNet</span><br><span class="line">dotnet add package BenchmarkDotNet --version 0.13.4</span><br><span class="line"></span><br><span class="line"># FSharpLu</span><br><span class="line">dotnet add package Microsoft.FSharpLu.Json --version 0.11.7</span><br><span class="line"></span><br><span class="line"># Thoth</span><br><span class="line">dotnet add package Thoth.Json.Net --version 11.0.0</span><br><span class="line"></span><br><span class="line"># Fleece (using System.Text.Json)</span><br><span class="line">dotnet add package Fleece --version 0.10.0</span><br><span class="line">dotnet add package Fleece.SystemTextJson --version 0.10.0</span><br><span class="line"></span><br><span class="line"># Newtonsoft</span><br><span class="line">dotnet add package Newtonsoft.Json --version 13.0.2</span><br><span class="line"></span><br><span class="line"># System.Text.Json (with Discriminated Union support)</span><br><span class="line">dotnet add package System.Text.Json --version 7.0.2</span><br><span class="line">dotnet add package FSharp.SystemTextJson --version 1.1.23</span><br></pre></td></tr></table></figure><p>In the spirit of testing common use cases, below are the data types I’ll be serializing/deserializing to/from json.  I also include some code samples.  This at least helps level-set the type of data being handled.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Discriminated Union and Record types</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Email</span> </span>= string</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Industry</span> </span>=</span><br><span class="line">  | Education</span><br><span class="line">  | Manufacturing</span><br><span class="line">  | Finance</span><br><span class="line">  | Retail</span><br><span class="line">  | Other <span class="keyword">of</span> string</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Stats</span> </span>= int * int * int</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Customer</span> </span>= &#123;</span><br><span class="line">  Id: Guid</span><br><span class="line">  Name: string</span><br><span class="line">  Created: DateTime</span><br><span class="line">  Contacts: Email list</span><br><span class="line">  Industry: Industry</span><br><span class="line">  Stats: Stats</span><br><span class="line">  Notes: string option</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int list example</span></span><br><span class="line"><span class="keyword">let</span> data :int list = [<span class="number">472</span>; <span class="number">4</span>; <span class="number">137</span>; <span class="number">599</span>; <span class="number">455</span>; <span class="number">923</span>; <span class="number">542</span>; <span class="number">457</span>; <span class="number">309</span>; <span class="number">338</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// string list example</span></span><br><span class="line"><span class="keyword">let</span> data: string list = [<span class="string">"abc"</span>; <span class="string">"def"</span>; <span class="string">"ghi"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// record list example</span></span><br><span class="line"><span class="keyword">let</span> data: Customer list = [</span><br><span class="line">  &#123; Customer.Id = Guid.NewGuid()</span><br><span class="line">    Name = <span class="string">"Foo Inc."</span></span><br><span class="line">    Created = DateTime.UtcNow</span><br><span class="line">    Contacts = [</span><br><span class="line">      Email(<span class="string">"user1@test.com"</span>)</span><br><span class="line">      Email(<span class="string">"user2@test.com"</span>) ]</span><br><span class="line">    Industry = Industry.Finance</span><br><span class="line">    Stats = <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span></span><br><span class="line">    Notes = Some(<span class="string">"This is a note"</span>) &#125; </span><br><span class="line">  &#123; Customer.Id = Guid.NewGuid()</span><br><span class="line">    Name = <span class="string">"Bar Inc."</span></span><br><span class="line">    Created = DateTime.UtcNow</span><br><span class="line">    Contacts = [</span><br><span class="line">      Email(<span class="string">"user1@test.com"</span>)</span><br><span class="line">      Email(<span class="string">"user2@test.com"</span>) ]</span><br><span class="line">    Industry = Industry.Education</span><br><span class="line">    Stats = <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span></span><br><span class="line">    Notes = None &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">// single record example</span></span><br><span class="line"><span class="keyword">let</span> data: Customer = &#123;</span><br><span class="line">  Customer.Id = Guid.NewGuid()</span><br><span class="line">  Name = <span class="string">"Foo Inc."</span></span><br><span class="line">  Created = DateTime.UtcNow</span><br><span class="line">  Contacts = [</span><br><span class="line">    Email(<span class="string">"user1@test.com"</span>)</span><br><span class="line">    Email(<span class="string">"user2@test.com"</span>) ]</span><br><span class="line">  Industry = Industry.Finance</span><br><span class="line">  Stats = <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span></span><br><span class="line">  Notes = Some(<span class="string">"This is a note"</span>) &#125;</span><br></pre></td></tr></table></figure><p>One of the characteristics that really sticks out when serializing F# objects to json is how the library handles F#-specific types, namely Discriminated Unions (DU) and Tuples.  This can be a point of taste, but I prefer the way <code>FSharpLu</code>, <code>Thoth</code>, and <code>Fleece</code> handle DUs.  Even for these libraries there are are variations.  FSharpLu and Thoth auto-encode without any extra effort, while Fleece requires writing encoders/decoders for anything beyond primitive types.  This falls into the balance of more/less power and is a specific library design choice.  Fleece is inspired by <a href="https://hackage.haskell.org/package/aeson-0.7.0.0/docs/Data-Aeson.html" target="_blank" rel="noopener">Aeson</a>.  This typically means more work upfront, but offers power regarding data representation.  Without putting too fine a point on it, this can be a significant advantage.</p><p>In the spirit of investigating variations, I also include multiple Thoth methods.  The first is Auto encoding/decoding, which is what most people will use. The second uses pre-cached encoders/decoders by type.  Caching requires an extra step prior to usage, but can offer a performance boost.  The third is manual encoding/decoding in a similar vein to Fleece.  This allows control of the encoding/decoding json, and potentially a performance boost.  It is nice to have this as an capability, although the Fleece ergonomics are a bit nicer. </p><p>Then there are the traditional .NET json libraries.  <code>Newtonsoft.Json</code> auto-encodes out of the box, although the default encoding of some types feels awkward to my F# eyes.  <code>System.Text.Json</code> also auto-encodes, except for Discriminated Unions.  If you try to use it with a Discriminated Union, you’ll get a compile error.  To overcome this, I use <code>FSharp.SystemTextJson</code> to add DU support.  I think its great this library exists, but it does highlight a functionality gap for <code>System.Text.Json</code>.</p><p>What does all of this mean in practice? Time for some examples of where these libraries differ.  Primitive types like int and string aren’t interesting; they all encode the same way, so basically “nothing to see here”. To that end, I’ll focus on the Customer record type specified above.  I’ll start where they all encode data in the same manner.  For reference, here is where they all match serialization (missing are Industry and Stats fields):<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"Id"</span>: <span class="string">"1d765765-9ad9-46e1-989e-b3e4fa2ff3e6"</span>,</span><br><span class="line">  <span class="string">"Name"</span>: <span class="string">"Foo Inc."</span>,</span><br><span class="line">  <span class="string">"Created"</span>: <span class="string">"2023-03-03T16:49:07.8710678Z"</span>,</span><br><span class="line">  <span class="string">"Contacts"</span>: [</span><br><span class="line">    <span class="string">"user1@test.com"</span>,</span><br><span class="line">    <span class="string">"user2@test.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"Notes"</span>: <span class="string">"This is a note"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Using the above as a baseline, I can now dig into the serialization differences.  First up is the Industry DU.  As a refresher, Industry can be one of several fixed types (e.g. Finance, Manufacturing, etc) or an <code>Other</code> value with a custom string.  Below are both encodings, broken down by library.  FSharpLu, Thoth, and Fleece are the most intuitive.  Fleece is a special case because I chose to encode <code>Other</code> as <code>Other=&lt;value&gt;</code> to show some customization (more on how that happens later), but Fleece could look however makes the most sense to you.  The Newtonsoft and System.Text.Json serializations are a bit more verbose.  It is a more complex type, so in general this is fine, but the representation does feel a little weird.  I think when interacting with external systems this could potentially be an issue, but in the grand scheme of things, this isn’t a really a deal breaker.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">### Industry = Finance</span><br><span class="line"></span><br><span class="line"># FSharpLu</span><br><span class="line">  &quot;Industry&quot;: &quot;Finance&quot;</span><br><span class="line"></span><br><span class="line"># Thoth</span><br><span class="line">  &quot;Industry&quot;: &quot;Finance&quot;</span><br><span class="line"></span><br><span class="line"># Fleece</span><br><span class="line">  &quot;Industry&quot;: &quot;Finance&quot;</span><br><span class="line"></span><br><span class="line"># Newtonsoft.Json</span><br><span class="line">  &quot;Industry&quot;: &#123;&quot;Case&quot;: &quot;Finance&quot;&#125;</span><br><span class="line"></span><br><span class="line"># System.Text.Json</span><br><span class="line">  &quot;Industry&quot;: &#123;&quot;Case&quot;: &quot;Finance&quot;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">### Industry = Other(&quot;Recycling&quot;)</span><br><span class="line"></span><br><span class="line"># FSharpLu</span><br><span class="line">  &quot;Industry&quot;: &#123;</span><br><span class="line">    &quot;Other&quot;: &quot;Recycling&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"># Thoth</span><br><span class="line">  &quot;Industry&quot;: [</span><br><span class="line">    &quot;Other&quot;,</span><br><span class="line">    &quot;Recycling&quot; ]</span><br><span class="line"></span><br><span class="line"># Fleece</span><br><span class="line">  &quot;Industry&quot;: &quot;Other=Recycling&quot;</span><br><span class="line"></span><br><span class="line"># Newtonsoft.Json</span><br><span class="line">  &quot;Industry&quot;: &#123;</span><br><span class="line">    &quot;Case&quot;: &quot;Other&quot;,</span><br><span class="line">    &quot;Fields&quot;: [&quot;Recycling&quot;]&#125;</span><br><span class="line"></span><br><span class="line"># System.Text.Json</span><br><span class="line">  &quot;Industry&quot;: &#123;</span><br><span class="line">    &quot;Case&quot;: &quot;Other&quot;,</span><br><span class="line">    &quot;Fields&quot;: [&quot;Recycling&quot;]&#125;</span><br></pre></td></tr></table></figure><p>Now on to the Stats tuple. Four of the five encode it as an array. From a data structure perspective this is interesting and mostly pragmatic representation that maps to other languages without too much hassle.  Newtonsoft is interesting in that it has the most honest data representation, but feels kind of clunky when encoding.  With that said, I prefer this method for the following reason.  What I don’t show here is the case when the tuple is mixed types (e.g. <code>int * int * string</code>), in that case the other libraries show <code>[10, 20, &quot;30&quot;]</code>, which could be an issue if the decoder expected an array to have a single type.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">### Stats = 10, 20, 30</span><br><span class="line"></span><br><span class="line"># FSharpLu</span><br><span class="line">  &quot;Stats&quot;: [10, 20, 30]</span><br><span class="line"></span><br><span class="line"># Thoth</span><br><span class="line">  &quot;Stats&quot;: [10, 20, 30]</span><br><span class="line"></span><br><span class="line"># Fleece</span><br><span class="line">  &quot;stats&quot;: [10, 20, 30]</span><br><span class="line"></span><br><span class="line"># Newtonsoft.Json</span><br><span class="line">  &quot;Stats&quot;: &#123;&quot;Item1&quot;: 10, &quot;Item2&quot;: 20, &quot;Item3&quot;: 30&#125;</span><br><span class="line"></span><br><span class="line"># System.Text.Json</span><br><span class="line">  &quot;Stats&quot;: [10, 20, 30]</span><br></pre></td></tr></table></figure><p>Now that I’ve looked at the results, it is time to see how the serialization/deserialize happens.  Libraries are more than just the results, they also include the developer ergonomics.  In addition to caveats mentioned above, some of these libraries have multiple ways to do things, I’ve just picked what is most convenient for my tests.  Now is a good time to mention the above type definitions were abbreviated for readability; its now to bring out all the gruesome details.  The most notable blocks are the Fleece codec and Thoth decoder/encoders, both of which are for manual encoding support.  I’ve commented where library-supporting code exists.  You’ll may also notice static member vs. module code organization; this to to match the respective library conventions, even though within a singular codebase it falls on the side of inconsistency.   Frankly, its a lot of extra code to add to a type, but that is the cost of hand encoding/decoding.  It may be too much to stomach for some, but sometimes the flexibility is worth the effort.  Just to be clear, the Thoth-specific decoder/encoder modules are only required for manual usage, when using Auto options, these are not necessary.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Email</span> </span>= string</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Thoth manual decoder/encoder support</span></span><br><span class="line"><span class="keyword">module</span> Email =</span><br><span class="line">  <span class="keyword">let</span> decoder :Decoder&lt;Email&gt; =</span><br><span class="line">    Decode.object (<span class="keyword">fun</span> get -&gt; (get.Required.Raw Decode.string))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> encoder =</span><br><span class="line">    Encode.string</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Industry</span> </span>=</span><br><span class="line">  | Education</span><br><span class="line">  | Manufacturing</span><br><span class="line">  | Finance</span><br><span class="line">  | Retail</span><br><span class="line">  | Other <span class="keyword">of</span> string</span><br><span class="line">  <span class="keyword">with</span> </span><br><span class="line">  <span class="comment">/// Fleece json codec (decoder)</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> jsonDecoder = <span class="keyword">function</span></span><br><span class="line">    | JString <span class="string">"Education"</span> -&gt; Decode.Success Education</span><br><span class="line">    | JString <span class="string">"Manufacturing"</span> -&gt; Decode.Success Manufacturing</span><br><span class="line">    | JString <span class="string">"Finance"</span> -&gt; Decode.Success Finance</span><br><span class="line">    | JString <span class="string">"Retail"</span> -&gt; Decode.Success Retail</span><br><span class="line">    | JString x <span class="keyword">as</span> v -&gt; Decode.Success(Other(x.Replace(<span class="string">"Other="</span>, <span class="string">""</span>)))</span><br><span class="line">    | x -&gt; Decode.Fail.strExpected x</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Fleece json codec (encoder)</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> jsonEncoder = <span class="keyword">function</span></span><br><span class="line">    | Education -&gt; JString <span class="string">"Education"</span></span><br><span class="line">    | Manufacturing -&gt; JString <span class="string">"Manufacturing"</span></span><br><span class="line">    | Finance -&gt; JString <span class="string">"Finance"</span></span><br><span class="line">    | Retail -&gt; JString <span class="string">"Retail"</span></span><br><span class="line">    | Other(x) -&gt; JString $<span class="string">"Other=&#123;x&#125;"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Fleece json codec</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> jsonCodec = Industry.jsonDecoder &lt;-&gt; Industry.jsonEncoder</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Fleece get_Codec</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> get_Codec() =</span><br><span class="line">    Industry.jsonCodec</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Thoth manual decoder/encoder support</span></span><br><span class="line"><span class="keyword">module</span> Industry =</span><br><span class="line">  <span class="keyword">let</span> decoder: Decoder&lt;Industry&gt; =</span><br><span class="line">    Decode.string</span><br><span class="line">    |&gt; Decode.andThen (<span class="keyword">function</span></span><br><span class="line">        | <span class="string">"Education"</span> -&gt; Decode.succeed Education</span><br><span class="line">        | <span class="string">"Manufacturing"</span> -&gt; Decode.succeed Manufacturing</span><br><span class="line">        | <span class="string">"Finance"</span> -&gt; Decode.succeed Finance</span><br><span class="line">        | <span class="string">"Retail"</span> -&gt; Decode.succeed Retail</span><br><span class="line">        | string <span class="keyword">as</span> s -&gt; Decode.succeed (Other(s))</span><br><span class="line">        | invalid -&gt; Decode.fail $<span class="string">"Error: &#123;invalid&#125;"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> encoder (industry: Industry) =</span><br><span class="line">    <span class="keyword">let</span> s  =</span><br><span class="line">      <span class="keyword">match</span> industry <span class="keyword">with</span></span><br><span class="line">      | Other(s) -&gt; $<span class="string">"&#123;s&#125;"</span></span><br><span class="line">      | i -&gt; i.ToString()</span><br><span class="line"></span><br><span class="line">    Encode.string s</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Stats</span> </span>= int * int * int</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Thoth manual decoder/encoder support</span></span><br><span class="line"><span class="keyword">module</span> Stats =</span><br><span class="line">  <span class="comment">/// Decode array to Stats. json=[#,#,#] to Stats(#,#,#)</span></span><br><span class="line">  <span class="keyword">let</span> decoder :Decoder&lt;Stats&gt; =</span><br><span class="line">    Decode.object (<span class="keyword">fun</span> get -&gt;</span><br><span class="line">      get.Required.Raw (</span><br><span class="line">        Decode.list Decode.int</span><br><span class="line">        |&gt; Decode.andThen (<span class="keyword">fun</span> data -&gt;</span><br><span class="line">            <span class="keyword">if</span> data.Length = <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">              <span class="keyword">let</span> (a, b, c) = (data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>])</span><br><span class="line">              Decode.succeed (a, b, c)</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">              Decode.fail <span class="string">"Invalid Stats format. Expected '[ #, #, # ]'."</span>)))</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Encode Stats tuple to json array. Stats(#,#,#) to json=[#,#,#]</span></span><br><span class="line">  <span class="keyword">let</span> encoder (stats: Stats) =</span><br><span class="line">    <span class="keyword">let</span> (a, b, c) = stats</span><br><span class="line">    Encode.list [ Encode.int a; Encode.int b; Encode.int c ]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Customer</span> </span>= &#123;</span><br><span class="line">  Id: Guid</span><br><span class="line">  Name: string</span><br><span class="line">  Created: DateTime</span><br><span class="line">  Contacts: Email list</span><br><span class="line">  Industry: Industry</span><br><span class="line">  Stats: Stats</span><br><span class="line">  Notes: string option</span><br><span class="line">&#125; <span class="keyword">with</span></span><br><span class="line">  <span class="comment">/// Fleece codec</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> get_Codec() =</span><br><span class="line">    codec &#123;</span><br><span class="line">      <span class="keyword">let!</span> id = jreq <span class="string">"Id"</span> (<span class="keyword">fun</span> x -&gt; Some(x.Id))</span><br><span class="line">      <span class="keyword">and</span>! name = jreq <span class="string">"Name"</span> (<span class="keyword">fun</span> x -&gt; Some(x.Name))</span><br><span class="line">      <span class="keyword">and</span>! created = jreq <span class="string">"Created"</span> (<span class="keyword">fun</span> x -&gt; Some(x.Created))</span><br><span class="line">      <span class="keyword">and</span>! contacts = jreq <span class="string">"Contacts"</span> (<span class="keyword">fun</span> x -&gt; Some(x.Contacts))</span><br><span class="line">      <span class="keyword">and</span>! industry = jreqWith Industry.jsonCodec <span class="string">"Industry"</span> (<span class="keyword">fun</span> x -&gt; Some(x.Industry))</span><br><span class="line">      <span class="keyword">and</span>! stats = jreq <span class="string">"Stats"</span> (<span class="keyword">fun</span> x -&gt; Some(x.Stats))</span><br><span class="line">      <span class="keyword">and</span>! notes = jopt <span class="string">"Notes"</span> (<span class="keyword">fun</span> x -&gt; x.Notes)</span><br><span class="line">      <span class="keyword">return</span> &#123; </span><br><span class="line">        Customer.Id = id</span><br><span class="line">        Name = name</span><br><span class="line">        Created = created</span><br><span class="line">        Contacts = contacts</span><br><span class="line">        Industry = industry</span><br><span class="line">        Stats = stats</span><br><span class="line">        Notes = notes &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    |&gt; ofObjCodec</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Thoth manual decoder/encoder support</span></span><br><span class="line"><span class="keyword">module</span> Customer =</span><br><span class="line">  <span class="keyword">let</span> contactsDecoder :Decoder&lt;Email list&gt; =</span><br><span class="line">    Decode.list Email.decoder</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> contactsEncoder (contacts: Email list) =</span><br><span class="line">    contacts</span><br><span class="line">    |&gt; List.map Email.encoder</span><br><span class="line">    |&gt; Encode.list</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> decoder: Decoder&lt;Customer&gt; =</span><br><span class="line">    Decode.object (<span class="keyword">fun</span> get -&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        Id = get.Required.Field <span class="string">"Id"</span> Decode.guid</span><br><span class="line">        Name = get.Required.Field <span class="string">"Name"</span> Decode.string</span><br><span class="line">        Created = get.Required.Field <span class="string">"Created"</span> Decode.datetimeUtc</span><br><span class="line">        Contacts = get.Required.Field <span class="string">"Contacts"</span> contactsDecoder</span><br><span class="line">        Industry = get.Required.Field <span class="string">"Industry"</span> Industry.decoder</span><br><span class="line">        Stats = get.Required.Field <span class="string">"Stats"</span> Stats.decoder</span><br><span class="line">        Notes = get.Optional.Field <span class="string">"Notes"</span> Decode.string</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> encoder (customer: Customer) =</span><br><span class="line">    Encode.object [</span><br><span class="line">        <span class="string">"Id"</span>, Encode.guid customer.Id</span><br><span class="line">        <span class="string">"Name"</span>, Encode.string customer.Name</span><br><span class="line">        <span class="string">"Created"</span>, Encode.datetime customer.Created</span><br><span class="line">        <span class="string">"Contacts"</span>, contactsEncoder customer.Contacts</span><br><span class="line">        <span class="string">"Industry"</span>, Industry.encoder customer.Industry</span><br><span class="line">        <span class="string">"Stats"</span>, Stats.encoder customer.Stats</span><br><span class="line">        <span class="string">"Notes"</span>, Encode.option Encode.string customer.Notes</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>The actual serialization and deserialization for all libraries is simple and straight-forward.  Manual encoding when using Thoth takes a bit more effort, but not much.  They all support custom options, but this is the bare bones method to get data converted back and forth.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FSharpLu</span></span><br><span class="line"><span class="keyword">let</span> json = Compact.serialize customer</span><br><span class="line"><span class="keyword">let</span> customer = Compact.deserialize json</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thoth</span></span><br><span class="line"><span class="keyword">let</span> json = Encode.Auto.toString(<span class="number">2</span>, customer)</span><br><span class="line"><span class="keyword">let</span> customer = Decode.Auto.fromString&lt;Customer&gt;(json)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thoth (Cached)</span></span><br><span class="line"><span class="keyword">let</span> thothCachedCustomerEncoder =</span><br><span class="line">  Encode.Auto.generateEncoderCached&lt;Customer&gt;(caseStrategy = PascalCase, extra = Extra.empty)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> thothCachedCustomerDecoder =</span><br><span class="line">  Decode.Auto.generateDecoderCached&lt;Customer&gt;(caseStrategy = PascalCase, extra = Extra.empty)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = Encode.toString <span class="number">2</span> (thothCachedCustomerEncoder customer)</span><br><span class="line"><span class="keyword">let</span> customer = Decode.fromString (thothCachedCustomerDecoder) json</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thoth (Manual)</span></span><br><span class="line"><span class="keyword">let</span> json = customer |&gt; Customer.encoder |&gt; Encode.toString <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> customer = Decode.fromString Customer.decoder json</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fleece</span></span><br><span class="line"><span class="keyword">let</span> json = toJsonText customer</span><br><span class="line"><span class="keyword">let</span> customer: Customer ParseResult = ofJsonText json</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewtonSoft.Json</span></span><br><span class="line"><span class="keyword">let</span> json = Newtonsoft.Json.JsonConvert.SerializeObject customer</span><br><span class="line"><span class="keyword">let</span> customer = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;Customer&gt; json</span><br><span class="line"></span><br><span class="line"><span class="comment">// System.Text.Json</span></span><br><span class="line"><span class="comment">/// Serialization options for System.Text.Json (to support F#)</span></span><br><span class="line"><span class="keyword">let</span> jsonOptions = JsonFSharpOptions.Default().ToJsonSerializerOptions()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = JsonSerializer.Serialize&lt;Customer&gt;(customer, jsonOptions)</span><br><span class="line"><span class="keyword">let</span> customer = JsonSerializer.Deserialize&lt;Customer&gt;(json, jsonOptions)</span><br></pre></td></tr></table></figure><p>There is one more major piece to discuss, performance.  This is where BenchmarkDotNet comes into play.  I investigate several different scenarios.  I focus mostly on different object types: int list, string list, Customer list, and Customer.  An additional variation is list size, for this I run the tests with size: 1, 100, and 1000.  The combination of these tests will provide some insight regarding performance (for both speed and memory).  For the most part, the benchmark code is straight forward.  The only variation to note is that I try to keep the serialized json consistent, but I do need multiple versions of the json strings, since the libraries support slightly different encodings.  Beyond that, they are all operating on the same data.  Fair warning, the benchmark results are pretty hefty, but it’s the only way to see all the different breakdowns.</p><p><strong>### System:</strong><br>BenchmarkDotNet=v0.13.4, OS=ubuntu 20.04<br>Intel Core i7-9750H CPU 2.60GHz, 1 CPU, 12 logical and 6 physical cores<br>.NET SDK=7.0.101<br>  [Host]     : .NET 7.0.1 (7.0.122.56804), X64 RyuJIT AVX2 DEBUG<br>  DefaultJob : .NET 7.0.1 (7.0.122.56804), X64 RyuJIT AVX2</p><p><strong>### Serialization:</strong></p><table><thead><tr><th>Method</th><th>ListSize</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Median</th><th style="text-align:right">Gen0</th><th style="text-align:right">Gen1</th><th style="text-align:right">Gen2</th><th style="text-align:right">Allocated</th></tr></thead><tbody><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>IntListFSharpLu</td><td>1</td><td style="text-align:right">7,043.0 ns</td><td style="text-align:right">43.89 ns</td><td style="text-align:right">41.05 ns</td><td style="text-align:right">7,033.7 ns</td><td style="text-align:right">0.6</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">4167 B</td></tr><tr><td>IntListThoth</td><td>1</td><td style="text-align:right">1,194.4 ns</td><td style="text-align:right">7.02 ns</td><td style="text-align:right">6.22 ns</td><td style="text-align:right">1,197.0 ns</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">1168 B</td></tr><tr><td>IntListThothCached</td><td>1</td><td style="text-align:right">406.7 ns</td><td style="text-align:right">3.48 ns</td><td style="text-align:right">3.25 ns</td><td style="text-align:right">405.5 ns</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">1039 B</td></tr><tr><td>IntListThothManual</td><td>1</td><td style="text-align:right">164.1 ns</td><td style="text-align:right">0.27 ns</td><td style="text-align:right">0.24 ns</td><td style="text-align:right">164.1 ns</td><td style="text-align:right">0.0</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">408 B</td></tr><tr><td>IntListFleece</td><td>1</td><td style="text-align:right">1,174.0 ns</td><td style="text-align:right">6.37 ns</td><td style="text-align:right">5.65 ns</td><td style="text-align:right">1,172.6 ns</td><td style="text-align:right">0.9</td><td style="text-align:right">0.0</td><td style="text-align:right">-</td><td style="text-align:right">5832 B</td></tr><tr><td>IntListNewtonsoft</td><td>1</td><td style="text-align:right">389.2 ns</td><td style="text-align:right">0.55 ns</td><td style="text-align:right">0.43 ns</td><td style="text-align:right">389.2 ns</td><td style="text-align:right">0.2</td><td style="text-align:right">0.0</td><td style="text-align:right">-</td><td style="text-align:right">1447 B</td></tr><tr><td>IntListTextJson</td><td>1</td><td style="text-align:right">316.4 ns</td><td style="text-align:right">1.62 ns</td><td style="text-align:right">1.51 ns</td><td style="text-align:right">316.2 ns</td><td style="text-align:right">0.0</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">136 B</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>StringListFSharpLu</td><td>1</td><td style="text-align:right">23,558.4 ns</td><td style="text-align:right">32.47 ns</td><td style="text-align:right">30.37 ns</td><td style="text-align:right">23,567.7 ns</td><td style="text-align:right">2.7</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">17161 B</td></tr><tr><td>StringListThoth</td><td>1</td><td style="text-align:right">17,798.6 ns</td><td style="text-align:right">34.58 ns</td><td style="text-align:right">30.65 ns</td><td style="text-align:right">17,790.3 ns</td><td style="text-align:right">2.2</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">14276 B</td></tr><tr><td>StringListThothCached</td><td>1</td><td style="text-align:right">17,000.0 ns</td><td style="text-align:right">28.15 ns</td><td style="text-align:right">26.34 ns</td><td style="text-align:right">16,994.6 ns</td><td style="text-align:right">2.2</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">14144 B</td></tr><tr><td>StringListThothManual</td><td>1</td><td style="text-align:right">16,396.5 ns</td><td style="text-align:right">12.94 ns</td><td style="text-align:right">10.81 ns</td><td style="text-align:right">16,398.5 ns</td><td style="text-align:right">2.1</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">13216 B</td></tr><tr><td>StringListFleece</td><td>1</td><td style="text-align:right">17,498.7 ns</td><td style="text-align:right">20.93 ns</td><td style="text-align:right">16.34 ns</td><td style="text-align:right">17,500.4 ns</td><td style="text-align:right">2.9</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">18841 B</td></tr><tr><td>StringListNewtonsoft</td><td>1</td><td style="text-align:right">16,627.6 ns</td><td style="text-align:right">17.37 ns</td><td style="text-align:right">14.51 ns</td><td style="text-align:right">16,625.7 ns</td><td style="text-align:right">2.2</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">14320 B</td></tr><tr><td>StringListTextJson</td><td>1</td><td style="text-align:right">16,270.4 ns</td><td style="text-align:right">44.64 ns</td><td style="text-align:right">41.76 ns</td><td style="text-align:right">16,262.5 ns</td><td style="text-align:right">2.0</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">13032 B</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>RecordListFSharpLu</td><td>1</td><td style="text-align:right">48,328.4 ns</td><td style="text-align:right">189.01 ns</td><td style="text-align:right">176.80 ns</td><td style="text-align:right">48,287.4 ns</td><td style="text-align:right">2.4</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">15483 B</td></tr><tr><td>RecordListThoth</td><td>1</td><td style="text-align:right">84,474.2 ns</td><td style="text-align:right">307.36 ns</td><td style="text-align:right">287.50 ns</td><td style="text-align:right">84,523.1 ns</td><td style="text-align:right">4.7</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">30290 B</td></tr><tr><td>RecordListThothCached</td><td>1</td><td style="text-align:right">44,234.5 ns</td><td style="text-align:right">150.27 ns</td><td style="text-align:right">140.56 ns</td><td style="text-align:right">44,270.8 ns</td><td style="text-align:right">3.2</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">20479 B</td></tr><tr><td>RecordListThothManual</td><td>1</td><td style="text-align:right">45,829.3 ns</td><td style="text-align:right">63.85 ns</td><td style="text-align:right">59.72 ns</td><td style="text-align:right">45,842.2 ns</td><td style="text-align:right">3.7</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">23980 B</td></tr><tr><td>RecordListFleece</td><td>1</td><td style="text-align:right">12,916.2 ns</td><td style="text-align:right">29.86 ns</td><td style="text-align:right">23.31 ns</td><td style="text-align:right">12,924.2 ns</td><td style="text-align:right">3.4</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">21768 B</td></tr><tr><td>RecordListNewtonsoft</td><td>1</td><td style="text-align:right">4,928.5 ns</td><td style="text-align:right">20.42 ns</td><td style="text-align:right">18.11 ns</td><td style="text-align:right">4,922.4 ns</td><td style="text-align:right">0.7</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">4871 B</td></tr><tr><td>RecordListTextJson</td><td>1</td><td style="text-align:right">4,409.8 ns</td><td style="text-align:right">12.55 ns</td><td style="text-align:right">11.12 ns</td><td style="text-align:right">4,413.0 ns</td><td style="text-align:right">0.3</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">2247 B</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>OneRecordFSharpLu</td><td>1</td><td style="text-align:right">43,885.5 ns</td><td style="text-align:right">111.43 ns</td><td style="text-align:right">98.78 ns</td><td style="text-align:right">43,885.5 ns</td><td style="text-align:right">2.3</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">14553 B</td></tr><tr><td>OneRecordThoth</td><td>1</td><td style="text-align:right">83,886.9 ns</td><td style="text-align:right">264.00 ns</td><td style="text-align:right">246.94 ns</td><td style="text-align:right">83,845.5 ns</td><td style="text-align:right">4.6</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">29321 B</td></tr><tr><td>OneRecordThothCached</td><td>1</td><td style="text-align:right">43,521.3 ns</td><td style="text-align:right">306.90 ns</td><td style="text-align:right">287.08 ns</td><td style="text-align:right">43,645.5 ns</td><td style="text-align:right">3.1</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">19608 B</td></tr><tr><td>OneRecordThothManual</td><td>1</td><td style="text-align:right">48,191.4 ns</td><td style="text-align:right">94.14 ns</td><td style="text-align:right">83.45 ns</td><td style="text-align:right">48,174.8 ns</td><td style="text-align:right">3.6</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">23070 B</td></tr><tr><td>OneRecordFleece</td><td>1</td><td style="text-align:right">11,719.4 ns</td><td style="text-align:right">34.92 ns</td><td style="text-align:right">29.16 ns</td><td style="text-align:right">11,727.1 ns</td><td style="text-align:right">3.2</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">20439 B</td></tr><tr><td>OneRecordNewtonsoft</td><td>1</td><td style="text-align:right">4,362.4 ns</td><td style="text-align:right">38.07 ns</td><td style="text-align:right">35.61 ns</td><td style="text-align:right">4,375.7 ns</td><td style="text-align:right">0.7</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">4587 B</td></tr><tr><td>OneRecordTextJson</td><td>1</td><td style="text-align:right">4,088.9 ns</td><td style="text-align:right">9.79 ns</td><td style="text-align:right">8.68 ns</td><td style="text-align:right">4,085.0 ns</td><td style="text-align:right">0.3</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">1963 B</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>IntListFSharpLu</td><td>100</td><td style="text-align:right">20,188.5 ns</td><td style="text-align:right">86.07 ns</td><td style="text-align:right">80.51 ns</td><td style="text-align:right">20,171.1 ns</td><td style="text-align:right">3.4</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">21864 B</td></tr><tr><td>IntListThoth</td><td>100</td><td style="text-align:right">14,860.5 ns</td><td style="text-align:right">42.98 ns</td><td style="text-align:right">38.10 ns</td><td style="text-align:right">14,859.4 ns</td><td style="text-align:right">3.4</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">21745 B</td></tr><tr><td>IntListThothCached</td><td>100</td><td style="text-align:right">13,736.9 ns</td><td style="text-align:right">44.20 ns</td><td style="text-align:right">41.35 ns</td><td style="text-align:right">13,720.9 ns</td><td style="text-align:right">3.4</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">21607 B</td></tr><tr><td>IntListThothManual</td><td>100</td><td style="text-align:right">9,308.6 ns</td><td style="text-align:right">15.10 ns</td><td style="text-align:right">12.61 ns</td><td style="text-align:right">9,305.5 ns</td><td style="text-align:right">2.8</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">17952 B</td></tr><tr><td>IntListFleece</td><td>100</td><td style="text-align:right">16,534.7 ns</td><td style="text-align:right">52.73 ns</td><td style="text-align:right">46.74 ns</td><td style="text-align:right">16,519.1 ns</td><td style="text-align:right">5.8</td><td style="text-align:right">0.2</td><td style="text-align:right">-</td><td style="text-align:right">36727 B</td></tr><tr><td>IntListNewtonsoft</td><td>100</td><td style="text-align:right">7,372.3 ns</td><td style="text-align:right">6.85 ns</td><td style="text-align:right">6.07 ns</td><td style="text-align:right">7,371.9 ns</td><td style="text-align:right">1.3</td><td style="text-align:right">0.0</td><td style="text-align:right">-</td><td style="text-align:right">8741 B</td></tr><tr><td>IntListTextJson</td><td>100</td><td style="text-align:right">3,831.8 ns</td><td style="text-align:right">4.95 ns</td><td style="text-align:right">4.63 ns</td><td style="text-align:right">3,832.3 ns</td><td style="text-align:right">0.7</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">4469 B</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>StringListFSharpLu</td><td>100</td><td style="text-align:right">1,649,890.3 ns</td><td style="text-align:right">2,182.75 ns</td><td style="text-align:right">2,041.75 ns</td><td style="text-align:right">1,649,718.0 ns</td><td style="text-align:right">208.9</td><td style="text-align:right">13.6</td><td style="text-align:right">-</td><td style="text-align:right">1315335 B</td></tr><tr><td>StringListThoth</td><td>100</td><td style="text-align:right">1,603,423.3 ns</td><td style="text-align:right">3,536.47 ns</td><td style="text-align:right">2,953.12 ns</td><td style="text-align:right">1,602,939.4 ns</td><td style="text-align:right">208.9</td><td style="text-align:right">11.7</td><td style="text-align:right">-</td><td style="text-align:right">1313783 B</td></tr><tr><td>StringListThothCached</td><td>100</td><td style="text-align:right">1,558,011.5 ns</td><td style="text-align:right">3,719.41 ns</td><td style="text-align:right">3,479.14 ns</td><td style="text-align:right">1,558,608.2 ns</td><td style="text-align:right">208.9</td><td style="text-align:right">13.6</td><td style="text-align:right">-</td><td style="text-align:right">1313298 B</td></tr><tr><td>StringListThothManual</td><td>100</td><td style="text-align:right">1,609,062.4 ns</td><td style="text-align:right">2,173.69 ns</td><td style="text-align:right">2,033.27 ns</td><td style="text-align:right">1,609,041.0 ns</td><td style="text-align:right">207.0</td><td style="text-align:right">19.5</td><td style="text-align:right">-</td><td style="text-align:right">1299154 B</td></tr><tr><td>StringListFleece</td><td>100</td><td style="text-align:right">1,701,875.8 ns</td><td style="text-align:right">3,307.47 ns</td><td style="text-align:right">3,093.81 ns</td><td style="text-align:right">1,701,224.7 ns</td><td style="text-align:right">212.8</td><td style="text-align:right">13.6</td><td style="text-align:right">-</td><td style="text-align:right">1336981 B</td></tr><tr><td>StringListNewtonsoft</td><td>100</td><td style="text-align:right">1,663,057.9 ns</td><td style="text-align:right">2,827.21 ns</td><td style="text-align:right">2,506.25 ns</td><td style="text-align:right">1,662,869.2 ns</td><td style="text-align:right">207.0</td><td style="text-align:right">11.7</td><td style="text-align:right">-</td><td style="text-align:right">1303146 B</td></tr><tr><td>StringListTextJson</td><td>100</td><td style="text-align:right">1,572,979.7 ns</td><td style="text-align:right">2,086.97 ns</td><td style="text-align:right">1,850.05 ns</td><td style="text-align:right">1,573,096.4 ns</td><td style="text-align:right">205.0</td><td style="text-align:right">11.7</td><td style="text-align:right">-</td><td style="text-align:right">1293890 B</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>RecordListFSharpLu</td><td>100</td><td style="text-align:right">709,046.5 ns</td><td style="text-align:right">1,413.84 ns</td><td style="text-align:right">1,322.50 ns</td><td style="text-align:right">709,459.4 ns</td><td style="text-align:right">89.8</td><td style="text-align:right">27.3</td><td style="text-align:right">-</td><td style="text-align:right">568895 B</td></tr><tr><td>RecordListThoth</td><td>100</td><td style="text-align:right">4,123,862.4 ns</td><td style="text-align:right">20,371.95 ns</td><td style="text-align:right">19,055.93 ns</td><td style="text-align:right">4,118,491.6 ns</td><td style="text-align:right">304.6</td><td style="text-align:right">210.9</td><td style="text-align:right">-</td><td style="text-align:right">1914472 B</td></tr><tr><td>RecordListThothCached</td><td>100</td><td style="text-align:right">4,068,735.7 ns</td><td style="text-align:right">18,677.86 ns</td><td style="text-align:right">17,471.28 ns</td><td style="text-align:right">4,060,941.0 ns</td><td style="text-align:right">296.8</td><td style="text-align:right">195.3</td><td style="text-align:right">-</td><td style="text-align:right">1901524 B</td></tr><tr><td>RecordListThothManual</td><td>100</td><td style="text-align:right">4,531,003.4 ns</td><td style="text-align:right">11,349.26 ns</td><td style="text-align:right">10,616.10 ns</td><td style="text-align:right">4,534,660.2 ns</td><td style="text-align:right">351.5</td><td style="text-align:right">140.6</td><td style="text-align:right">-</td><td style="text-align:right">2249710 B</td></tr><tr><td>RecordListFleece</td><td>100</td><td style="text-align:right">857,710.4 ns</td><td style="text-align:right">2,601.90 ns</td><td style="text-align:right">2,433.82 ns</td><td style="text-align:right">857,026.0 ns</td><td style="text-align:right">206.0</td><td style="text-align:right">0.9</td><td style="text-align:right">-</td><td style="text-align:right">1294299 B</td></tr><tr><td>RecordListNewtonsoft</td><td>100</td><td style="text-align:right">405,181.7 ns</td><td style="text-align:right">701.05 ns</td><td style="text-align:right">621.47 ns</td><td style="text-align:right">405,120.1 ns</td><td style="text-align:right">50.7</td><td style="text-align:right">13.6</td><td style="text-align:right">-</td><td style="text-align:right">321528 B</td></tr><tr><td>RecordListTextJson</td><td>100</td><td style="text-align:right">362,255.9 ns</td><td style="text-align:right">631.07 ns</td><td style="text-align:right">559.42 ns</td><td style="text-align:right">362,328.9 ns</td><td style="text-align:right">34.6</td><td style="text-align:right">8.3</td><td style="text-align:right">-</td><td style="text-align:right">220188 B</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>IntListFSharpLu</td><td>1000</td><td style="text-align:right">133,347.3 ns</td><td style="text-align:right">1,257.91 ns</td><td style="text-align:right">1,176.65 ns</td><td style="text-align:right">133,482.3 ns</td><td style="text-align:right">28.8</td><td style="text-align:right">5.3</td><td style="text-align:right">-</td><td style="text-align:right">182022 B</td></tr><tr><td>IntListThoth</td><td>1000</td><td style="text-align:right">134,059.9 ns</td><td style="text-align:right">306.36 ns</td><td style="text-align:right">255.82 ns</td><td style="text-align:right">134,002.1 ns</td><td style="text-align:right">31.2</td><td style="text-align:right">3.4</td><td style="text-align:right">-</td><td style="text-align:right">196388 B</td></tr><tr><td>IntListThothCached</td><td>1000</td><td style="text-align:right">128,716.7 ns</td><td style="text-align:right">1,423.84 ns</td><td style="text-align:right">1,331.86 ns</td><td style="text-align:right">127,905.5 ns</td><td style="text-align:right">31.0</td><td style="text-align:right">2.4</td><td style="text-align:right">-</td><td style="text-align:right">196170 B</td></tr><tr><td>IntListThothManual</td><td>1000</td><td style="text-align:right">93,161.8 ns</td><td style="text-align:right">454.78 ns</td><td style="text-align:right">425.40 ns</td><td style="text-align:right">93,178.4 ns</td><td style="text-align:right">27.4</td><td style="text-align:right">0.1</td><td style="text-align:right">-</td><td style="text-align:right">172760 B</td></tr><tr><td>IntListFleece</td><td>1000</td><td style="text-align:right">149,448.3 ns</td><td style="text-align:right">386.25 ns</td><td style="text-align:right">342.40 ns</td><td style="text-align:right">149,418.3 ns</td><td style="text-align:right">44.1</td><td style="text-align:right">9.7</td><td style="text-align:right">-</td><td style="text-align:right">277991 B</td></tr><tr><td>IntListNewtonsoft</td><td>1000</td><td style="text-align:right">68,508.4 ns</td><td style="text-align:right">220.08 ns</td><td style="text-align:right">195.09 ns</td><td style="text-align:right">68,464.8 ns</td><td style="text-align:right">12.2</td><td style="text-align:right">1.3</td><td style="text-align:right">-</td><td style="text-align:right">77127 B</td></tr><tr><td>IntListTextJson</td><td>1000</td><td style="text-align:right">34,069.5 ns</td><td style="text-align:right">107.37 ns</td><td style="text-align:right">89.66 ns</td><td style="text-align:right">34,113.2 ns</td><td style="text-align:right">6.9</td><td style="text-align:right">0.4</td><td style="text-align:right">-</td><td style="text-align:right">43871 B</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>StringListFSharpLu</td><td>1000</td><td style="text-align:right">17,584,797.3 ns</td><td style="text-align:right">29,524.67 ns</td><td style="text-align:right">27,617.39 ns</td><td style="text-align:right">17,584,905.4 ns</td><td style="text-align:right">2062.5</td><td style="text-align:right">125.0</td><td style="text-align:right">31.2</td><td style="text-align:right">13116871 B</td></tr><tr><td>StringListThoth</td><td>1000</td><td style="text-align:right">16,840,644.9 ns</td><td style="text-align:right">28,439.32 ns</td><td style="text-align:right">25,210.72 ns</td><td style="text-align:right">16,842,766.9 ns</td><td style="text-align:right">2062.5</td><td style="text-align:right">125.0</td><td style="text-align:right">31.2</td><td style="text-align:right">13110095 B</td></tr><tr><td>StringListThothCached</td><td>1000</td><td style="text-align:right">16,990,921.6 ns</td><td style="text-align:right">51,412.23 ns</td><td style="text-align:right">45,575.60 ns</td><td style="text-align:right">16,988,783.6 ns</td><td style="text-align:right">2062.5</td><td style="text-align:right">125.0</td><td style="text-align:right">31.2</td><td style="text-align:right">13108271 B</td></tr><tr><td>StringListThothManual</td><td>1000</td><td style="text-align:right">16,557,071.7 ns</td><td style="text-align:right">146,791.20 ns</td><td style="text-align:right">137,308.58 ns</td><td style="text-align:right">16,601,215.2 ns</td><td style="text-align:right">2062.5</td><td style="text-align:right">31.2</td><td style="text-align:right">-</td><td style="text-align:right">12984789 B</td></tr><tr><td>StringListFleece</td><td>1000</td><td style="text-align:right">17,261,490.7 ns</td><td style="text-align:right">55,897.70 ns</td><td style="text-align:right">52,286.74 ns</td><td style="text-align:right">17,263,192.8 ns</td><td style="text-align:right">2125.0</td><td style="text-align:right">93.7</td><td style="text-align:right">31.2</td><td style="text-align:right">13385711 B</td></tr><tr><td>StringListNewtonsoft</td><td>1000</td><td style="text-align:right">16,650,742.4 ns</td><td style="text-align:right">50,595.94 ns</td><td style="text-align:right">44,851.98 ns</td><td style="text-align:right">16,638,779.1 ns</td><td style="text-align:right">2062.5</td><td style="text-align:right">156.2</td><td style="text-align:right">31.2</td><td style="text-align:right">13019946 B</td></tr><tr><td>StringListTextJson</td><td>1000</td><td style="text-align:right">16,210,066.4 ns</td><td style="text-align:right">18,023.81 ns</td><td style="text-align:right">15,977.64 ns</td><td style="text-align:right">16,215,392.3 ns</td><td style="text-align:right">2031.2</td><td style="text-align:right">62.5</td><td style="text-align:right">-</td><td style="text-align:right">12938117 B</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>RecordListFSharpLu</td><td>1000</td><td style="text-align:right">7,418,860.9 ns</td><td style="text-align:right">16,006.82 ns</td><td style="text-align:right">14,972.79 ns</td><td style="text-align:right">7,413,755.7 ns</td><td style="text-align:right">789.0</td><td style="text-align:right">757.8</td><td style="text-align:right">195.3</td><td style="text-align:right">5522664 B</td></tr><tr><td>RecordListThoth</td><td>1000</td><td style="text-align:right">45,465,135.8 ns</td><td style="text-align:right">385,734.45 ns</td><td style="text-align:right">360,816.24 ns</td><td style="text-align:right">45,402,331.0 ns</td><td style="text-align:right">2818.1</td><td style="text-align:right">727.2</td><td style="text-align:right">454.5</td><td style="text-align:right">18928991 B</td></tr><tr><td>RecordListThothCached</td><td>1000</td><td style="text-align:right">48,735,891.0 ns</td><td style="text-align:right">831,080.08 ns</td><td style="text-align:right">1,243,921.53 ns</td><td style="text-align:right">47,969,807.8 ns</td><td style="text-align:right">2818.1</td><td style="text-align:right">727.2</td><td style="text-align:right">454.5</td><td style="text-align:right">18902199 B</td></tr><tr><td>RecordListThothManual</td><td>1000</td><td style="text-align:right">54,555,776.3 ns</td><td style="text-align:right">125,263.21 ns</td><td style="text-align:right">117,171.29 ns</td><td style="text-align:right">54,558,445.9 ns</td><td style="text-align:right">3600.0</td><td style="text-align:right">700.0</td><td style="text-align:right">200.0</td><td style="text-align:right">22406518 B</td></tr><tr><td>RecordListFleece</td><td>1000</td><td style="text-align:right">13,469,301.0 ns</td><td style="text-align:right">100,449.31 ns</td><td style="text-align:right">89,045.70 ns</td><td style="text-align:right">13,458,451.0 ns</td><td style="text-align:right">1843.7</td><td style="text-align:right">843.7</td><td style="text-align:right">578.1</td><td style="text-align:right">12810464 B</td></tr><tr><td>RecordListNewtonsoft</td><td>1000</td><td style="text-align:right">4,360,206.6 ns</td><td style="text-align:right">30,850.12 ns</td><td style="text-align:right">28,857.22 ns</td><td style="text-align:right">4,368,718.1 ns</td><td style="text-align:right">546.8</td><td style="text-align:right">375.0</td><td style="text-align:right">140.6</td><td style="text-align:right">3208284 B</td></tr><tr><td>RecordListTextJson</td><td>1000</td><td style="text-align:right">3,924,525.0 ns</td><td style="text-align:right">16,541.52 ns</td><td style="text-align:right">14,663.63 ns</td><td style="text-align:right">3,920,796.3 ns</td><td style="text-align:right">406.2</td><td style="text-align:right">257.8</td><td style="text-align:right">140.6</td><td style="text-align:right">2222653 B</td></tr></tbody></table><p><strong>### Deserialization:</strong></p><table><thead><tr><th>Method</th><th>ListSize</th><th style="text-align:right">Mean</th><th style="text-align:right">Error</th><th style="text-align:right">StdDev</th><th style="text-align:right">Gen0</th><th style="text-align:right">Gen1</th><th style="text-align:right">Gen2</th><th style="text-align:right">Allocated</th></tr></thead><tbody><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>IntListFSharpLu</td><td>1</td><td style="text-align:right">15.6 μs</td><td style="text-align:right">0.1459 μs</td><td style="text-align:right">0.1365 μs</td><td style="text-align:right">1.4954</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">9.29 KB</td></tr><tr><td>IntListThoth</td><td>1</td><td style="text-align:right">17.9 μs</td><td style="text-align:right">0.0496 μs</td><td style="text-align:right">0.0440 μs</td><td style="text-align:right">1.4343</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">8.88 KB</td></tr><tr><td>IntListThothCached</td><td>1</td><td style="text-align:right">16.9 μs</td><td style="text-align:right">0.1128 μs</td><td style="text-align:right">0.1055 μs</td><td style="text-align:right">1.4038</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">8.74 KB</td></tr><tr><td>IntListThothManual</td><td>1</td><td style="text-align:right">10.1 μs</td><td style="text-align:right">0.0488 μs</td><td style="text-align:right">0.0457 μs</td><td style="text-align:right">1.2360</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">7.66 KB</td></tr><tr><td>IntListFleece</td><td>1</td><td style="text-align:right">10.6 μs</td><td style="text-align:right">0.0179 μs</td><td style="text-align:right">0.0159 μs</td><td style="text-align:right">1.0071</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">6.26 KB</td></tr><tr><td>IntListNewtonsoft</td><td>1</td><td style="text-align:right">9.0 μs</td><td style="text-align:right">0.0284 μs</td><td style="text-align:right">0.0265 μs</td><td style="text-align:right">1.0986</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">6.79 KB</td></tr><tr><td>IntListTextJson</td><td>1</td><td style="text-align:right">8.5 μs</td><td style="text-align:right">0.0106 μs</td><td style="text-align:right">0.0088 μs</td><td style="text-align:right">0.6714</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">4.2 KB</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>StringListFSharpLu</td><td>1</td><td style="text-align:right">33.7 μs</td><td style="text-align:right">0.1217 μs</td><td style="text-align:right">0.1138 μs</td><td style="text-align:right">3.6011</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">22.17 KB</td></tr><tr><td>StringListThoth</td><td>1</td><td style="text-align:right">35.5 μs</td><td style="text-align:right">0.0508 μs</td><td style="text-align:right">0.0450 μs</td><td style="text-align:right">3.4790</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">21.56 KB</td></tr><tr><td>StringListThothCached</td><td>1</td><td style="text-align:right">32.7 μs</td><td style="text-align:right">0.0909 μs</td><td style="text-align:right">0.0850 μs</td><td style="text-align:right">3.4790</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">21.42 KB</td></tr><tr><td>StringListThothManual</td><td>1</td><td style="text-align:right">30.5 μs</td><td style="text-align:right">0.0669 μs</td><td style="text-align:right">0.0593 μs</td><td style="text-align:right">3.4790</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">21.43 KB</td></tr><tr><td>StringListFleece</td><td>1</td><td style="text-align:right">30.0 μs</td><td style="text-align:right">0.0498 μs</td><td style="text-align:right">0.0441 μs</td><td style="text-align:right">3.1128</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">19.09 KB</td></tr><tr><td>StringListNewtonsoft</td><td>1</td><td style="text-align:right">27.1 μs</td><td style="text-align:right">0.0321 μs</td><td style="text-align:right">0.0268 μs</td><td style="text-align:right">3.1738</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">19.56 KB</td></tr><tr><td>StringListTextJson</td><td>1</td><td style="text-align:right">26.0 μs</td><td style="text-align:right">0.0560 μs</td><td style="text-align:right">0.0524 μs</td><td style="text-align:right">2.7466</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">16.99 KB</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>RecordListFSharpLu</td><td>1</td><td style="text-align:right">103.2 μs</td><td style="text-align:right">0.2298 μs</td><td style="text-align:right">0.2037 μs</td><td style="text-align:right">4.8828</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">30.07 KB</td></tr><tr><td>RecordListThoth</td><td>1</td><td style="text-align:right">209.4 μs</td><td style="text-align:right">0.3070 μs</td><td style="text-align:right">0.2872 μs</td><td style="text-align:right">10.9863</td><td style="text-align:right">0.2441</td><td style="text-align:right">-</td><td style="text-align:right">68.71 KB</td></tr><tr><td>RecordListThothCached</td><td>1</td><td style="text-align:right">163.9 μs</td><td style="text-align:right">0.4874 μs</td><td style="text-align:right">0.4559 μs</td><td style="text-align:right">9.5215</td><td style="text-align:right">0.2441</td><td style="text-align:right">-</td><td style="text-align:right">58.5 KB</td></tr><tr><td>RecordListThothManual</td><td>1</td><td style="text-align:right">72.3 μs</td><td style="text-align:right">0.1873 μs</td><td style="text-align:right">0.1752 μs</td><td style="text-align:right">4.0283</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">24.73 KB</td></tr><tr><td>RecordListFleece</td><td>1</td><td style="text-align:right">24.1 μs</td><td style="text-align:right">0.0792 μs</td><td style="text-align:right">0.0741 μs</td><td style="text-align:right">3.4485</td><td style="text-align:right">0.0916</td><td style="text-align:right">-</td><td style="text-align:right">21.25 KB</td></tr><tr><td>RecordListNewtonsoft</td><td>1</td><td style="text-align:right">12.2 μs</td><td style="text-align:right">0.0365 μs</td><td style="text-align:right">0.0342 μs</td><td style="text-align:right">1.5717</td><td style="text-align:right">0.0153</td><td style="text-align:right">-</td><td style="text-align:right">9.65 KB</td></tr><tr><td>RecordListTextJson</td><td>1</td><td style="text-align:right">11.9 μs</td><td style="text-align:right">0.0402 μs</td><td style="text-align:right">0.0376 μs</td><td style="text-align:right">0.5035</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">3.16 KB</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>OneRecordFSharpLu</td><td>1</td><td style="text-align:right">95.5 μs</td><td style="text-align:right">0.2836 μs</td><td style="text-align:right">0.2652 μs</td><td style="text-align:right">4.5166</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">28.38 KB</td></tr><tr><td>OneRecordThoth</td><td>1</td><td style="text-align:right">182.2 μs</td><td style="text-align:right">0.5150 μs</td><td style="text-align:right">0.4817 μs</td><td style="text-align:right">8.7891</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">54.73 KB</td></tr><tr><td>OneRecordThothCached</td><td>1</td><td style="text-align:right">137.7 μs</td><td style="text-align:right">0.3629 μs</td><td style="text-align:right">0.3031 μs</td><td style="text-align:right">7.0801</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">44.69 KB</td></tr><tr><td>OneRecordThothManual</td><td>1</td><td style="text-align:right">66.1 μs</td><td style="text-align:right">0.1749 μs</td><td style="text-align:right">0.1460 μs</td><td style="text-align:right">3.7842</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">23.21 KB</td></tr><tr><td>OneRecordFleece</td><td>1</td><td style="text-align:right">21.1 μs</td><td style="text-align:right">0.0523 μs</td><td style="text-align:right">0.0464 μs</td><td style="text-align:right">3.1738</td><td style="text-align:right">0.0916</td><td style="text-align:right">-</td><td style="text-align:right">19.46 KB</td></tr><tr><td>OneRecordNewtonsoft</td><td>1</td><td style="text-align:right">11.4 μs</td><td style="text-align:right">0.0185 μs</td><td style="text-align:right">0.0164 μs</td><td style="text-align:right">1.4954</td><td style="text-align:right">0.0153</td><td style="text-align:right">-</td><td style="text-align:right">9.21 KB</td></tr><tr><td>OneRecordTextJson</td><td>1</td><td style="text-align:right">10.5 μs</td><td style="text-align:right">0.0313 μs</td><td style="text-align:right">0.0293 μs</td><td style="text-align:right">0.4425</td><td style="text-align:right">-</td><td style="text-align:right">-</td><td style="text-align:right">2.76 KB</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>IntListFSharpLu</td><td>100</td><td style="text-align:right">41.6 μs</td><td style="text-align:right">0.1170 μs</td><td style="text-align:right">0.1094 μs</td><td style="text-align:right">5.3711</td><td style="text-align:right">0.1831</td><td style="text-align:right">-</td><td style="text-align:right">33.05 KB</td></tr><tr><td>IntListThoth</td><td>100</td><td style="text-align:right">131.1 μs</td><td style="text-align:right">1.2809 μs</td><td style="text-align:right">1.1981 μs</td><td style="text-align:right">10.7422</td><td style="text-align:right">0.4883</td><td style="text-align:right">-</td><td style="text-align:right">66.87 KB</td></tr><tr><td>IntListThothCached</td><td>100</td><td style="text-align:right">131.9 μs</td><td style="text-align:right">1.1325 μs</td><td style="text-align:right">1.0039 μs</td><td style="text-align:right">10.7422</td><td style="text-align:right">0.4883</td><td style="text-align:right">-</td><td style="text-align:right">66.72 KB</td></tr><tr><td>IntListThothManual</td><td>100</td><td style="text-align:right">54.6 μs</td><td style="text-align:right">0.0609 μs</td><td style="text-align:right">0.0570 μs</td><td style="text-align:right">9.0942</td><td style="text-align:right">0.4272</td><td style="text-align:right">-</td><td style="text-align:right">55.76 KB</td></tr><tr><td>IntListFleece</td><td>100</td><td style="text-align:right">53.1 μs</td><td style="text-align:right">0.1576 μs</td><td style="text-align:right">0.1474 μs</td><td style="text-align:right">9.3994</td><td style="text-align:right">0.3052</td><td style="text-align:right">-</td><td style="text-align:right">57.82 KB</td></tr><tr><td>IntListNewtonsoft</td><td>100</td><td style="text-align:right">34.5 μs</td><td style="text-align:right">0.0915 μs</td><td style="text-align:right">0.0811 μs</td><td style="text-align:right">4.9438</td><td style="text-align:right">0.1221</td><td style="text-align:right">-</td><td style="text-align:right">30.55 KB</td></tr><tr><td>IntListTextJson</td><td>100</td><td style="text-align:right">30.7 μs</td><td style="text-align:right">0.0543 μs</td><td style="text-align:right">0.0481 μs</td><td style="text-align:right">4.2419</td><td style="text-align:right">0.1221</td><td style="text-align:right">-</td><td style="text-align:right">26.05 KB</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>StringListFSharpLu</td><td>100</td><td style="text-align:right">1,763.7 μs</td><td style="text-align:right">2.6119 μs</td><td style="text-align:right">2.4432 μs</td><td style="text-align:right">210.9375</td><td style="text-align:right">15.6250</td><td style="text-align:right">-</td><td style="text-align:right">1303.58 KB</td></tr><tr><td>StringListThoth</td><td>100</td><td style="text-align:right">1,895.9 μs</td><td style="text-align:right">3.5673 μs</td><td style="text-align:right">3.1623 μs</td><td style="text-align:right">216.7969</td><td style="text-align:right">17.5781</td><td style="text-align:right">-</td><td style="text-align:right">1329.64 KB</td></tr><tr><td>StringListThothCached</td><td>100</td><td style="text-align:right">1,774.0 μs</td><td style="text-align:right">6.9559 μs</td><td style="text-align:right">6.5066 μs</td><td style="text-align:right">216.7969</td><td style="text-align:right">17.5781</td><td style="text-align:right">-</td><td style="text-align:right">1329.27 KB</td></tr><tr><td>StringListThothManual</td><td>100</td><td style="text-align:right">1,761.7 μs</td><td style="text-align:right">34.6178 μs</td><td style="text-align:right">35.5499 μs</td><td style="text-align:right">212.8906</td><td style="text-align:right">7.8125</td><td style="text-align:right">-</td><td style="text-align:right">1308.76 KB</td></tr><tr><td>StringListFleece</td><td>100</td><td style="text-align:right">1,773.9 μs</td><td style="text-align:right">5.0636 μs</td><td style="text-align:right">4.4888 μs</td><td style="text-align:right">216.7969</td><td style="text-align:right">19.5313</td><td style="text-align:right">-</td><td style="text-align:right">1333.79 KB</td></tr><tr><td>StringListNewtonsoft</td><td>100</td><td style="text-align:right">1,715.8 μs</td><td style="text-align:right">6.6255 μs</td><td style="text-align:right">6.1975 μs</td><td style="text-align:right">210.9375</td><td style="text-align:right">15.6250</td><td style="text-align:right">-</td><td style="text-align:right">1300.96 KB</td></tr><tr><td>StringListTextJson</td><td>100</td><td style="text-align:right">1,841.5 μs</td><td style="text-align:right">2.5186 μs</td><td style="text-align:right">2.1032 μs</td><td style="text-align:right">210.9375</td><td style="text-align:right">15.6250</td><td style="text-align:right">-</td><td style="text-align:right">1299.17 KB</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>RecordListFSharpLu</td><td>100</td><td style="text-align:right">1,506.4 μs</td><td style="text-align:right">3.7216 μs</td><td style="text-align:right">3.4812 μs</td><td style="text-align:right">156.2500</td><td style="text-align:right">50.7813</td><td style="text-align:right">-</td><td style="text-align:right">969.71 KB</td></tr><tr><td>RecordListThoth</td><td>100</td><td style="text-align:right">10,375.6 μs</td><td style="text-align:right">84.5533 μs</td><td style="text-align:right">79.0912 μs</td><td style="text-align:right">718.7500</td><td style="text-align:right">531.2500</td><td style="text-align:right">15.6250</td><td style="text-align:right">4452.71 KB</td></tr><tr><td>RecordListThothCached</td><td>100</td><td style="text-align:right">10,250.9 μs</td><td style="text-align:right">34.5145 μs</td><td style="text-align:right">32.2849 μs</td><td style="text-align:right">718.7500</td><td style="text-align:right">562.5000</td><td style="text-align:right">15.6250</td><td style="text-align:right">4442.12 KB</td></tr><tr><td>RecordListThothManual</td><td>100</td><td style="text-align:right">1,599.8 μs</td><td style="text-align:right">4.6668 μs</td><td style="text-align:right">4.1370 μs</td><td style="text-align:right">189.4531</td><td style="text-align:right">89.8438</td><td style="text-align:right">-</td><td style="text-align:right">1164.58 KB</td></tr><tr><td>RecordListFleece</td><td>100</td><td style="text-align:right">498.4 μs</td><td style="text-align:right">0.6963 μs</td><td style="text-align:right">0.6173 μs</td><td style="text-align:right">48.8281</td><td style="text-align:right">1.9531</td><td style="text-align:right">-</td><td style="text-align:right">305.02 KB</td></tr><tr><td>RecordListNewtonsoft</td><td>100</td><td style="text-align:right">854.5 μs</td><td style="text-align:right">3.7517 μs</td><td style="text-align:right">3.5094 μs</td><td style="text-align:right">81.0547</td><td style="text-align:right">22.4609</td><td style="text-align:right">-</td><td style="text-align:right">502.68 KB</td></tr><tr><td>RecordListTextJson</td><td>100</td><td style="text-align:right">979.8 μs</td><td style="text-align:right">2.1825 μs</td><td style="text-align:right">2.0416 μs</td><td style="text-align:right">48.8281</td><td style="text-align:right">11.7188</td><td style="text-align:right">-</td><td style="text-align:right">304.22 KB</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>IntListFSharpLu</td><td>1000</td><td style="text-align:right">256.8 μs</td><td style="text-align:right">0.4628 μs</td><td style="text-align:right">0.3864 μs</td><td style="text-align:right">39.5508</td><td style="text-align:right">6.3477</td><td style="text-align:right">-</td><td style="text-align:right">245.56 KB</td></tr><tr><td>IntListThoth</td><td>1000</td><td style="text-align:right">1,158.0 μs</td><td style="text-align:right">1.9641 μs</td><td style="text-align:right">1.8372 μs</td><td style="text-align:right">95.7031</td><td style="text-align:right">37.1094</td><td style="text-align:right">-</td><td style="text-align:right">588.79 KB</td></tr><tr><td>IntListThothCached</td><td>1000</td><td style="text-align:right">1,159.7 μs</td><td style="text-align:right">3.3701 μs</td><td style="text-align:right">2.8142 μs</td><td style="text-align:right">95.7031</td><td style="text-align:right">39.0625</td><td style="text-align:right">-</td><td style="text-align:right">588.44 KB</td></tr><tr><td>IntListThothManual</td><td>1000</td><td style="text-align:right">454.2 μs</td><td style="text-align:right">0.6121 μs</td><td style="text-align:right">0.5426 μs</td><td style="text-align:right">79.1016</td><td style="text-align:right">1.9531</td><td style="text-align:right">-</td><td style="text-align:right">486.03 KB</td></tr><tr><td>IntListFleece</td><td>1000</td><td style="text-align:right">443.5 μs</td><td style="text-align:right">0.5548 μs</td><td style="text-align:right">0.5189 μs</td><td style="text-align:right">84.4727</td><td style="text-align:right">1.9531</td><td style="text-align:right">-</td><td style="text-align:right">520.01 KB</td></tr><tr><td>IntListNewtonsoft</td><td>1000</td><td style="text-align:right">264.2 μs</td><td style="text-align:right">1.9403 μs</td><td style="text-align:right">1.8149 μs</td><td style="text-align:right">39.5508</td><td style="text-align:right">9.2773</td><td style="text-align:right">-</td><td style="text-align:right">243.05 KB</td></tr><tr><td>IntListTextJson</td><td>1000</td><td style="text-align:right">233.1 μs</td><td style="text-align:right">0.8043 μs</td><td style="text-align:right">0.7129 μs</td><td style="text-align:right">35.8887</td><td style="text-align:right">8.0566</td><td style="text-align:right">-</td><td style="text-align:right">221.16 KB</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>StringListFSharpLu</td><td>1000</td><td style="text-align:right">16,952.5 μs</td><td style="text-align:right">31.5653 μs</td><td style="text-align:right">27.9819 μs</td><td style="text-align:right">2093.7500</td><td style="text-align:right">31.2500</td><td style="text-align:right">-</td><td style="text-align:right">12948.04 KB</td></tr><tr><td>StringListThoth</td><td>1000</td><td style="text-align:right">18,092.8 μs</td><td style="text-align:right">201.8233 μs</td><td style="text-align:right">188.7856 μs</td><td style="text-align:right">2156.2500</td><td style="text-align:right">125.0000</td><td style="text-align:right">31.2500</td><td style="text-align:right">13214.55 KB</td></tr><tr><td>StringListThothCached</td><td>1000</td><td style="text-align:right">18,802.7 μs</td><td style="text-align:right">81.7247 μs</td><td style="text-align:right">76.4453 μs</td><td style="text-align:right">2156.2500</td><td style="text-align:right">125.0000</td><td style="text-align:right">31.2500</td><td style="text-align:right">13213.3 KB</td></tr><tr><td>StringListThothManual</td><td>1000</td><td style="text-align:right">17,291.1 μs</td><td style="text-align:right">183.9874 μs</td><td style="text-align:right">172.1019 μs</td><td style="text-align:right">2093.7500</td><td style="text-align:right">281.2500</td><td style="text-align:right">31.2500</td><td style="text-align:right">13002.46 KB</td></tr><tr><td>StringListFleece</td><td>1000</td><td style="text-align:right">18,058.9 μs</td><td style="text-align:right">51.8915 μs</td><td style="text-align:right">40.5135 μs</td><td style="text-align:right">2156.2500</td><td style="text-align:right">156.2500</td><td style="text-align:right">31.2500</td><td style="text-align:right">13305.53 KB</td></tr><tr><td>StringListNewtonsoft</td><td>1000</td><td style="text-align:right">17,507.9 μs</td><td style="text-align:right">66.8627 μs</td><td style="text-align:right">62.5434 μs</td><td style="text-align:right">2093.7500</td><td style="text-align:right">31.2500</td><td style="text-align:right">-</td><td style="text-align:right">12945.42 KB</td></tr><tr><td>StringListTextJson</td><td>1000</td><td style="text-align:right">16,826.3 μs</td><td style="text-align:right">37.8847 μs</td><td style="text-align:right">33.5838 μs</td><td style="text-align:right">2093.7500</td><td style="text-align:right">31.2500</td><td style="text-align:right">-</td><td style="text-align:right">12950.66 KB</td></tr><tr><td></td><td></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td>RecordListFSharpLu</td><td>1000</td><td style="text-align:right">16,157.2 μs</td><td style="text-align:right">68.4580 μs</td><td style="text-align:right">64.0357 μs</td><td style="text-align:right">1406.2500</td><td style="text-align:right">500.0000</td><td style="text-align:right">250.0000</td><td style="text-align:right">9433.67 KB</td></tr><tr><td>RecordListThoth</td><td>1000</td><td style="text-align:right">106,187.4 μs</td><td style="text-align:right">633.2908 μs</td><td style="text-align:right">592.3806 μs</td><td style="text-align:right">7000.0000</td><td style="text-align:right">750.0000</td><td style="text-align:right">500.0000</td><td style="text-align:right">44255.41 KB</td></tr><tr><td>RecordListThothCached</td><td>1000</td><td style="text-align:right">108,517.2 μs</td><td style="text-align:right">608.9917 μs</td><td style="text-align:right">539.8552 μs</td><td style="text-align:right">7200.0000</td><td style="text-align:right">800.0000</td><td style="text-align:right">400.0000</td><td style="text-align:right">44214.61 KB</td></tr><tr><td>RecordListThothManual</td><td>1000</td><td style="text-align:right">21,465.3 μs</td><td style="text-align:right">120.3867 μs</td><td style="text-align:right">112.6098 μs</td><td style="text-align:right">1750.0000</td><td style="text-align:right">1500.0000</td><td style="text-align:right">718.7500</td><td style="text-align:right">11445.14 KB</td></tr><tr><td>RecordListFleece</td><td>1000</td><td style="text-align:right">5,433.1 μs</td><td style="text-align:right">98.3105 μs</td><td style="text-align:right">91.9597 μs</td><td style="text-align:right">632.8125</td><td style="text-align:right">500.0000</td><td style="text-align:right">359.3750</td><td style="text-align:right">3292.54 KB</td></tr><tr><td>RecordListNewtonsoft</td><td>1000</td><td style="text-align:right">9,820.1 μs</td><td style="text-align:right">18.1347 μs</td><td style="text-align:right">15.1433 μs</td><td style="text-align:right">796.8750</td><td style="text-align:right">781.2500</td><td style="text-align:right">140.6250</td><td style="text-align:right">4995.52 KB</td></tr><tr><td>RecordListTextJson</td><td>1000</td><td style="text-align:right">10,365.1 μs</td><td style="text-align:right">26.4786 μs</td><td style="text-align:right">22.1108 μs</td><td style="text-align:right">531.2500</td><td style="text-align:right">515.6250</td><td style="text-align:right">125.0000</td><td style="text-align:right">3064.77 KB</td></tr></tbody></table><p>There are a couple trends to gleen from the above results.  At a high level, F#-specific libraries incur a performance cost.  Newtonsoft and System.Text.Json are typically 5x-10x faster than FSharpLu and Thoth, and 2x-3x faster than Fleece.  Datatype impacts performance differences, but the trends hold for the most part (with the exception of string lists, where string handling dominates encoding).  Library memory usage holds similar trends, just not as pronounced in most cases.  Memory usage does show its impact on the larger ListSize (1000), where speed and the GC take a pretty hard hit.</p><p>Looking at the results a bit closer, Newtonsoft and System.Text.Json are in the same ballpark, but System.Text.Json nearly always had a slight lead in performance.  On average, Thoth is the slowest, although cached encodings offer a small boost.  Manual encoding for Thoth certainly makes it more competitive with FSharpLu and Fleece.  Speaking of which, FSharpLu and Fleece are steadily in the middle of the pack.  Fleece typically has performance several times faster, trending it closer to Newtonsoft and System.Text.Json performance.  I suspect this is a result of manual encoding versus reflection, but just a hunch.</p><p>What does all this mean?  Well, it depends (I hope you weren’t expecting a simple answer).  Clearly there is a performance difference between the libraries, sometimes up to an order of magnitude (that is more the exception than the rule).  When talking nanoseconds and microseconds, most use cases honestly aren’t going to see a noticeable difference.  This is where ergonomics and flexibility need to factor into a decision.  Everything has its trade off, and finding what works for your specific case is a process. If straight-up performance matters most, there are some clear leaders.  Admittedly, the benchmark results surprised me.  I didn’t expect the F#-specific libraries to have such a large gap.  I also expected manual encoding to offer a better performance benefit over reflection than it did.  As they say, you learn something new every day, and today is no exception.   So there you have it, a comparison with some of the major json encoding libraries supported in F#.  Seeing all the trade-offs in one place can assist in decisions moving forward and understanding what makes the best library for particular use cases.  A better grasp on all the impact of all components in a system will help make any project stronger.  As I mentioned in the beginning, if you see any errors or opportunities for improvement, let me know.  Until next time, stay calm and keep encoding…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It is difficult to build much without needing to deal with json at some point. In the world of &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; there are several options.  Today I want to lay out some of the popular choices and offer some some compare and contrast.  These libraries all have their own strengths and weaknesses, and bringing it all into a single place to highlight these is a useful point of reference for decision making and general understanding.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
      <category term="Performance" scheme="http://codesuji.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>F# and LVars</title>
    <link href="http://codesuji.com/2022/12/31/lvar/"/>
    <id>http://codesuji.com/2022/12/31/lvar/</id>
    <published>2022-12-31T13:43:19.000Z</published>
    <updated>2023-01-02T03:32:15.370Z</updated>
    
    <content type="html"><![CDATA[<p>Today I want to spend some time with <a href="https://en.wikipedia.org/wiki/Semilattice" target="_blank" rel="noopener">join-semilattices</a>, specifically my <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> implementation, LVar.  It is a conceptually interesting data structure and approach to managing information, as well as improving program correctness.</p><a id="more"></a><p>What is a join-semilattice? For purposes of this conversation, you can think of it as a structure that has specific properties regarding data and increasing information.  It is worth expanding on two prominent properties.  One, it is a partially ordered set.  Two, it is associative, communicative, and idempotent when combined with other join-semilattices.  Why does this matter?  Because these properties provide interesting capabilities that can be used to manage a variable’s information in a unique way.  A join-semilattice can provide guarentees as a developer encodes not just datatype, but intent of a variable.  From a practical sense it means we can build variables that only “grow” their information in a predefined manner.  Using these types of variables can ensure a higher level of correct intention for an application.</p><p>At this point some examples are useful. Think of a variable that only ever increases (hit count, game high score, etc), from an intuitive approach the value always goes up, but typically languages don’t limit interactions with a variable to that constraint type.  In contrast, a hit counter or high score tracker using an LVar only increases, by definition.  When the LVar’s value is set, it will only accept a new value that is greater than or equal to its existing value.  As another example, consider a data structure that tracks team members voting on a ballot. Once a person votes, they will always maintain a vote, it shouldn’t randomly disappear in the future due to a coding or data synchronization error.  Using an LVar set or hashmap only permits the internal values to improve in information through inserts and updates (remove is forbidden).  When merging the set or hashmap, keys are not lost, and the values only improve.</p><p>The original inspiration for this post and package came from <a href="https://decomposition.al/" target="_blank" rel="noopener">Lindsey Kuper’s</a> LVar work.  If you want more technical explanations, the papers I most used for reference material are worth a read.  The first being <a href="/references/lvar1/2013-FHPC_LVars.pdf">LVars: Lattice-based Data Structures for Deterministic Parallelism</a>.  The second is the Bloom Lattice variables paper, <a href="/references/lvar1/UCB-lattice-tr.pdf">Logic and Lattices for Distributed Programming</a>.  These aren’t the only places lattice variables discussed, but these drove most of my journey.  It is also worth mentioning at this point, my goal is not to implement their definitions verbatim; my LVars package is more of an inspired-by, focusing on the factors that are important to my current needs.</p><p>LVars provide interesting characteristics, but as is often the case, these benefits come some restrictions and tradeoffs.  Only some types of data can be properly represented with lattices.  For instance, lists and arrays do not meet the requirements of being able to support associative, communicative, and idempotent operations.  This can mean architecting solutions using structures like sets and hashmaps, sometimes in creative ways.  This is just one of the trade-offs to considered.  Since I’m talking about datatypes, what does the LVar package currently support?</p><ul><li>Min - Values only decrease.</li><li>Max - Values only increase.</li><li>Boolean - Starts as false, once changed to true, it can never be false again.</li><li>Set - Once a value is added, it cannot be removed.</li><li>PSet - Same as a set, but values are positive numeric values only.</li><li>Bag - Similar to a set, but there can be multiple instances of a value.  Multiplicity of values is tracked, but values can only be added, not removed.</li><li>Map - Keys can only be added. Values are LVars.</li><li>Intervals - Intervals are ranges defined by min and max values.  They increase in information by getting tighter, or more precise.</li></ul><p>Beyond datatype support, what does the LVar interface look like?  All LVars have common functions (see below).  They also have their own type-appropriate supported functions (e.g. AND for LBool, Union for LSet, etc) while excluding non-conformating functions (e.g. remove).</p><ul><li>init - Create an LVar.</li><li>set -  Set/Update the value of the LVar within its defined constraints.</li><li>merge - Combine two LVars into a single LVar.</li><li>reveal - Unwrap the LVar into its F#-primative value.</li></ul><p>I often turn to examples to help solidify concepts in my head. This is especially helpful when dealing with mathematical structures.  It really helps to form a pattern and shape of these variables.  The first example I will use is an LBool (LVar Boolean).</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initializing an LBool</span></span><br><span class="line"><span class="keyword">let</span> bobVoted = LBool.init <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Setting an LBool (to true)</span></span><br><span class="line"><span class="keyword">let</span> bobVoted = LBool.set <span class="keyword">true</span> bobVoted</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setting an LBool (to false)</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> The resulting value is still true (once Bob votes, he can't unvote)</span></span><br><span class="line"><span class="keyword">let</span> bobVoted = LBool.set <span class="keyword">false</span> bobVoted</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unwrap an LBool as a bool</span></span><br><span class="line">bobVoted |&gt; LBool.reveal |&gt; printfn <span class="string">"Bob voted: %b"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Merge two LBools (merging data from two different processes)</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> If one of these in true, the result is true</span></span><br><span class="line"><span class="keyword">let</span> bobVoted = LBool.merge bobVotedServer1 bobVotedServer2</span><br></pre></td></tr></table></figure><p>Looking at another example, LMax only increases.  This means <code>set</code> is the greater of the provided LMax, and the newly provided numeric value.  Of course this is the kind of business logic is easy enough to write, but it can be nice this intent is encoded in the variable so you don’t have to worry about it.  This ties back to the earlier idea of including intent in the type definitions used.  This level of self-documentation goes a long way to code comprehension as well.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initializing an LMax</span></span><br><span class="line"><span class="keyword">let</span> highScore = LMax.init <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Setting an LMax (value increases to 525)</span></span><br><span class="line"><span class="keyword">let</span> highScore = LMax.set <span class="number">525</span> highScore </span><br><span class="line"></span><br><span class="line"><span class="comment">// Setting an LMax (value doesn't change (310 &lt; 525))</span></span><br><span class="line"><span class="keyword">let</span> highScore = LMax.set <span class="number">310</span> highScore </span><br><span class="line"></span><br><span class="line"><span class="comment">// Merges two LMaxs (taking the higher value)</span></span><br><span class="line"><span class="keyword">let</span> highScore = LMax.merge highScoreServer1 highScoreServer2</span><br></pre></td></tr></table></figure><p>For the last example I’ll use a more complex type, LInterval.  The goal of LInterval is to maintain a range of values, where increasing information tightens the range.  If this sounds familar, its because I’ve worked with this concept before in my Propagator package.  Below I have some examples of creating, updating, and merging interval ranges. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set a temp based on the knowledge that the temperature is at least 17 degrees</span></span><br><span class="line"><span class="keyword">let</span> tempStation1 = LInterval(Interval(Some <span class="number">17</span>, None))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set a temp based on the knowledge that the temperature is 20 +- 5 degrees </span></span><br><span class="line"><span class="keyword">let</span> tempStation2 = LInterval(Interval(Some <span class="number">15</span>, Some <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Aggregate temperature data from multiple stations (resulting range is 17-25 degrees)</span></span><br><span class="line"><span class="keyword">let</span> temp = LInterval.merge tempStation1 tempStation2 </span><br><span class="line">printfn <span class="string">"Temperature Estimate: %A"</span> (Interval.toTuple(temp.reveal))</span><br></pre></td></tr></table></figure><p>This is a light view of what join-semilattices and LVars can bring to the table.  I hope you’ve found the concepts and possibilities interesting.  The package itself is still a work in progress, but I wanted to share current progress.  My hope is this inspires to see code and data differently, and perhaps even experiment with new ways to code.  That’s one of the many things I enjoy pulling from programming language research. Even if the specific implementation doesn’t make sense for me currently, the additional perspective inevitably improves my future code and designs in some way.  Until next time. </p><h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><ul><li><a href="/references/lvar1/2013-FHPC_LVars.pdf">LVars: Lattice-based Data Structures for Deterministic Parallelism</a><br>(source: <a href="https://legacy.cs.indiana.edu/~rrnewton/papers/2013-FHPC_LVars.pdf" target="_blank" rel="noopener">https://legacy.cs.indiana.edu/~rrnewton/papers/2013-FHPC_LVars.pdf</a>)</li><li><a href="/references/lvar1/UCB-lattice-tr.pdf">Logic and Lattices for Distributed Programming</a><br>(source: <a href="https://dsf.berkeley.edu/papers/UCB-lattice-tr.pdf" target="_blank" rel="noopener">https://dsf.berkeley.edu/papers/UCB-lattice-tr.pdf</a>)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I want to spend some time with &lt;a href=&quot;https://en.wikipedia.org/wiki/Semilattice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;join-semilattices&lt;/a&gt;, specifically my &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; implementation, LVar.  It is a conceptually interesting data structure and approach to managing information, as well as improving program correctness.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
  </entry>
  
  <entry>
    <title>Yaml and F#</title>
    <link href="http://codesuji.com/2022/11/13/Yaml-and-F/"/>
    <id>http://codesuji.com/2022/11/13/Yaml-and-F/</id>
    <published>2022-11-14T00:11:49.000Z</published>
    <updated>2023-01-09T02:13:34.026Z</updated>
    
    <content type="html"><![CDATA[<p>Yaml is a useful format for both configuration and simple data representation that pops up from time to time.  As a result, it is helpful to know how to use it and coding in <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>.  Today I’ll take a quick look into using Yaml and how it can be integrated into an F# project.</p><a id="more"></a><p>There are several Yaml parsers in the .NET ecosystem; for this post I’ll use YamlDotNet.  It has a direct interface and decent documentation.  For the samples below I’ll use <code>dotnet add package YamlDotNet --version 12.3.1</code>.</p><p>Below is a sample file, <code>config.yml</code>.  It is a mocked config file that could be seen for any random service.  To show some of the options available, it contains scalar (string and numeric), list, and object structures.  I’ll take this file as the case study to convert into F# types.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">stage: dev</span><br><span class="line">version: 1.2.3</span><br><span class="line">batchSize: 1000</span><br><span class="line">events:</span><br><span class="line">  - insert </span><br><span class="line">  - update</span><br><span class="line">  - query</span><br><span class="line">  - delete</span><br><span class="line">endPoints:</span><br><span class="line">  backup:</span><br><span class="line">    description: Data backups</span><br><span class="line">    uri: https://example.com/backup</span><br><span class="line">    timeout: 10</span><br><span class="line">    enabled: true</span><br><span class="line">  metrics:</span><br><span class="line">    description: Data backups</span><br><span class="line">    uri: https://example.com/metrics</span><br><span class="line">    timeout: 10</span><br><span class="line">    enabled: true</span><br><span class="line">dataSources:</span><br><span class="line">  users:</span><br><span class="line">    description: string</span><br><span class="line">    connectionString: postgresql://user1:pass1@10.0.0.1:5432/postgres</span><br><span class="line">    enabled: true</span><br><span class="line">  data:</span><br><span class="line">    description: string</span><br><span class="line">    connectionString: postgresql://user2:pass2@10.0.0.2:5432/postgres</span><br><span class="line">    enabled: true</span><br><span class="line">notes: |</span><br><span class="line">  This service should run periodically.</span><br><span class="line">  Check further documentation on the website for execution details.</span><br></pre></td></tr></table></figure><p>Before I can work with the yaml, I’l need to define the types and structure of the config file.  A couple notes to get this to all work.  One, the types must be annotated with <code>[&lt;CLIMutable&gt;]</code>.  Also, I generally prefer to use F#’s <code>Map</code>, but for this case I need to use a <code>Dictionary</code>.  The serialization/deserialization doesn’t work otherwise.  This is all fine, it is just one of the compromises we F# devs need to make sometimes.  The structure of the file is represented with the <code>Config</code> type.  In addition to standard scalars and a list, it uses DataSource and Endpoint types.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Collections.Generic</span><br><span class="line"><span class="keyword">open</span> YamlDotNet.Serialization</span><br><span class="line"><span class="keyword">open</span> YamlDotNet.Serialization.NamingConventions</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">DataSource</span> </span>= &#123;</span><br><span class="line">  Description: string</span><br><span class="line">  ConnectionString: string</span><br><span class="line">  Enabled: bool</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">EndPoint</span> </span>= &#123;</span><br><span class="line">  Description: string</span><br><span class="line">  Uri: string</span><br><span class="line">  Timeout: int</span><br><span class="line">  Enabled: bool</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Config</span> </span>= &#123;</span><br><span class="line">  Stage: string</span><br><span class="line">  Version: string</span><br><span class="line">  BatchSize: int</span><br><span class="line">  EndPoints: Dictionary&lt;string, EndPoint&gt;</span><br><span class="line">  DataSources: Dictionary&lt;string, DataSource&gt;</span><br><span class="line">  Events: List&lt;string&gt;</span><br><span class="line">  Notes: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As can often be the case, there are multiple ways to do things.  I prefer the above way to define types (using record types), but the types can be defined as classes with explicit getters and setters.  For the most part this is a stylist choice, but I wanted to provide both options.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">DataSource</span> </span>() =</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> Description: string = <span class="string">""</span> <span class="keyword">with</span> get, set</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> ConnectionString: string = <span class="string">""</span> <span class="keyword">with</span> get, set</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> Enabled: bool = <span class="keyword">false</span> <span class="keyword">with</span> get, set</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">EndPoint</span> </span>() =</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> Description: string = <span class="string">""</span> <span class="keyword">with</span> get, set</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> Uri: string = <span class="string">""</span> <span class="keyword">with</span> get, set</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> Timeout: int = <span class="number">0</span> <span class="keyword">with</span> get, set</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> Enabled: bool = <span class="keyword">false</span> <span class="keyword">with</span> get, set</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Config</span> </span>() =</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> Stage: string = <span class="string">""</span> <span class="keyword">with</span> get, set</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> Version: string = <span class="string">""</span> <span class="keyword">with</span> get, set</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> BatchSize: int = <span class="number">10000</span> <span class="keyword">with</span> get, set</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> EndPoints: Dictionary&lt;string, EndPoint&gt; = <span class="keyword">new</span> Dictionary&lt;string, EndPoint&gt;() <span class="keyword">with</span> get, set</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> DataSources: Dictionary&lt;string, DataSource&gt; = <span class="keyword">new</span> Dictionary&lt;string, DataSource&gt;() <span class="keyword">with</span> get, set</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> Events: List&lt;string&gt; = <span class="keyword">new</span> List&lt;string&gt;() <span class="keyword">with</span> get, set</span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> Notes: string = <span class="string">""</span> <span class="keyword">with</span> get, set</span><br></pre></td></tr></table></figure><p>Below I have the serialization and deserialization examples.  For my case I’m using camel casing in the yaml files, but other naming conventions are supported: Hyphenated, PascalCase, Underscored, LowerCase.  The process is pretty simple: create a builder, then serialized/deserialize as appropriate.  For the deserializer, I added some error handling, always a good practice.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Serialize config to yaml</span></span><br><span class="line"><span class="keyword">let</span> configToYaml (config: Config) :string =</span><br><span class="line">  <span class="keyword">let</span> serializer =</span><br><span class="line">    SerializerBuilder()</span><br><span class="line">      .WithNamingConvention(CamelCaseNamingConvention.Instance)</span><br><span class="line">      .Build()</span><br><span class="line"></span><br><span class="line">  serializer.Serialize(config)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save config</span></span><br><span class="line"><span class="keyword">let</span> yaml = configToYaml config</span><br><span class="line">IO.File.WriteAllText(<span class="string">"config_new.yml"</span>, yaml)</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Deserialize yaml into Config object </span></span><br><span class="line"><span class="keyword">let</span> deserializeConfig (s: string) :Result&lt;Config, string&gt; =</span><br><span class="line">  <span class="keyword">let</span> deserializer =</span><br><span class="line">    DeserializerBuilder()</span><br><span class="line">      .WithNamingConvention(CamelCaseNamingConvention.Instance)</span><br><span class="line">      .Build()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    Ok(deserializer.Deserialize&lt;Config&gt;(s))</span><br><span class="line">  <span class="keyword">with</span></span><br><span class="line">  | e -&gt; Error (e.ToString())</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read config</span></span><br><span class="line"><span class="keyword">let</span> config =</span><br><span class="line">  <span class="string">"config.yml"</span></span><br><span class="line">  |&gt; IO.File.ReadAllText</span><br><span class="line">  |&gt; deserializeConfig</span><br></pre></td></tr></table></figure><p>Sometimes you don’t know the specific structure of the yaml.  The library provides a stream processor that allows an alternative method to navigate the yaml. It isn’t as convenient and you have to worry about casting errors, but it works.  Below I have an example of some simple data extraction. For readability I’ve excluded error handling from the example, but some try..with is definitely a requirement here with the necessary downcasting.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> configReader = <span class="keyword">new</span> System.IO.StreamReader(<span class="string">"config.yml"</span>)</span><br><span class="line"><span class="keyword">let</span> yaml = YamlStream()</span><br><span class="line">yaml.Load(configReader)</span><br><span class="line"></span><br><span class="line"><span class="comment">// root node</span></span><br><span class="line"><span class="keyword">let</span> root = yaml.Documents[<span class="number">0</span>].RootNode :?&gt; YamlMappingNode</span><br><span class="line"></span><br><span class="line"><span class="comment">// Show top level nodes </span></span><br><span class="line">printfn <span class="string">"top level:"</span></span><br><span class="line"><span class="keyword">for</span> entry <span class="keyword">in</span> root.Children <span class="keyword">do</span></span><br><span class="line">  printfn <span class="string">"  %s"</span> (entry.Key :?&gt; YamlScalarNode).Value</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterate through events</span></span><br><span class="line"><span class="keyword">let</span> events = root.Children[YamlScalarNode(<span class="string">"events"</span>)] :?&gt; YamlSequenceNode</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"events:"</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events <span class="keyword">do</span></span><br><span class="line">  printfn <span class="string">"  %A"</span> event </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Output: </span><br><span class="line">top level:</span><br><span class="line">  stage</span><br><span class="line">  version</span><br><span class="line">  batchSize</span><br><span class="line">  events</span><br><span class="line">  endPoints</span><br><span class="line">  dataSources</span><br><span class="line">  notes</span><br><span class="line">events:</span><br><span class="line">  insert</span><br><span class="line">  update</span><br><span class="line">  query</span><br><span class="line">  delete</span><br></pre></td></tr></table></figure><p>This is a bit of a divergence, but the library also provides a nice option for json serialization.  So if you ever run into the case where you need to convert, this can do the trick.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Serialize config to json</span></span><br><span class="line"><span class="keyword">let</span> configToJson (config: Config) :string =</span><br><span class="line">  <span class="keyword">let</span> serializer =</span><br><span class="line">    SerializerBuilder()</span><br><span class="line">      .JsonCompatible()</span><br><span class="line">      .Build()</span><br><span class="line"></span><br><span class="line">  serializer.Serialize(config)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = configToJson config</span><br><span class="line">printfn <span class="string">"%s"</span> json</span><br><span class="line">IO.File.WriteAllText(<span class="string">"config_new.json"</span>, json)</span><br></pre></td></tr></table></figure><p>This has been a pretty light post, but if you have a quick need to use yaml with F#, hopefully you find this useful.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yaml is a useful format for both configuration and simple data representation that pops up from time to time.  As a result, it is helpful to know how to use it and coding in &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  Today I’ll take a quick look into using Yaml and how it can be integrated into an F# project.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
  </entry>
  
  <entry>
    <title>Watc</title>
    <link href="http://codesuji.com/2022/08/13/Watc/"/>
    <id>http://codesuji.com/2022/08/13/Watc/</id>
    <published>2022-08-14T03:09:37.000Z</published>
    <updated>2022-11-24T13:03:57.676Z</updated>
    
    <content type="html"><![CDATA[<p>Recently Ted Unangst wrote about his tool, <a href="https://flak.tedunangst.com/post/watc" target="_blank" rel="noopener">watc</a>, to extract line count and file size statistics to support some of his work.  Chris Wellons followed up with his take on <a href="https://nullprogram.com/blog/2022/05/22/" target="_blank" rel="noopener">watc</a>.  Inspired by both posts, I thought it would be an interesting tool to add to my own toolbox.  It pairs nicely with some of my current work on extracting useful information from code repositories.  This feels like a good way to put together a quick tool using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>.  I’ll also use this as an opportunity to show some F# along the way.</p><a id="more"></a><p>Like Chris, I tend to favor non-interactive apps for this time of tooling.  I have my own personal additions, but I follow his design a bit closer.  At a high level, the app is a relatively simple matter of iterating a directory structure and aggregating line count and file sizes.   Since the goal is analyzing source code, it will filter binaries, .git, build artifacts, etc; allowing me to stay focused on what I immediately care about.  Command line parameters allow me to dictate summary level, sorting, and report formatting.  You can find the full code <a href="https://bitbucket.org/0x6a62/watc" target="_blank" rel="noopener">here</a>, but I’m just going to focus on a couple small aspects.  Before I get to the point, below is a small example of what the results look like. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ ./watc --depth=2 --sort=lines ~/projects/fsharp/src</span><br><span class="line">/home/codesuji/projects/fsharp/src       430.9K LOC    23.0MB</span><br><span class="line">  Compiler                               356.0K LOC    19.3MB</span><br><span class="line">    xlf                                  126.6K LOC     8.8MB</span><br><span class="line">    Checking                              55.2K LOC     2.8MB</span><br><span class="line">    TypedTree                             31.5K LOC     1.4MB</span><br><span class="line">    AbstractIL                            30.6K LOC     1.1MB</span><br><span class="line">    Service                               22.2K LOC     1.1MB</span><br><span class="line">    Driver                                14.0K LOC   659.7KB</span><br><span class="line">    Utilities                             11.5K LOC   409.5KB</span><br><span class="line">    SyntaxTree                            11.1K LOC   426.0KB</span><br><span class="line">    CodeGen                               10.8K LOC   536.4KB</span><br><span class="line">    Optimize                               8.9K LOC   417.7KB</span><br><span class="line">    Interactive                            8.2K LOC   433.6KB (1)</span><br><span class="line">    Symbols                                7.3K LOC   317.3KB</span><br><span class="line">    Facilities                             5.0K LOC   206.6KB (1)</span><br><span class="line">    DependencyManager                      1.2K LOC    57.5KB (1)</span><br><span class="line">    Legacy                                  659 LOC    31.4KB</span><br><span class="line">  FSharp.Core                             66.2K LOC     3.2MB</span><br><span class="line">    xlf                                    9.3K LOC   571.8KB</span><br><span class="line">    math                                    134 LOC     5.0KB</span><br><span class="line">  FSharp.Build                             4.0K LOC   191.4KB</span><br><span class="line">    xlf                                     416 LOC    29.1KB</span><br><span class="line">  FSharp.DependencyManager.Nuget           1.9K LOC    88.0KB</span><br><span class="line">    xlf                                     818 LOC    38.7KB</span><br><span class="line">  fsi                                      1.7K LOC   159.0KB</span><br><span class="line">  FSharp.Compiler.Interactive.Settings      408 LOC    16.4KB</span><br><span class="line">    xlf                                      78 LOC     5.1KB</span><br><span class="line">  fsc                                       194 LOC     7.7KB</span><br><span class="line">  Microsoft.FSharp.Compiler                 103 LOC     7.7KB</span><br><span class="line">  FSharp.Compiler.Server.Shared              95 LOC     3.2KB</span><br><span class="line">  fsiAnyCpu                                  69 LOC     2.7KB</span><br><span class="line">  fscAnyCpu                                  66 LOC     2.9KB</span><br></pre></td></tr></table></figure><p>With some of the demonstration out of the way, time to get to the point.  Improving application performance is a complicated and nuanced topic; obvious statement I know.  Seeing the hoops some languages need to jump through to support parallelism is a good reminder is it doesn’t always have to be difficult. This leads me to F#.  Today’s post is a pretty shallow view, looking for a quick win, but sometimes that’s all you need.  For relatively simple tasks, parallelism can be simple to acheive with F#.  A conversion of <code>Array.map</code> to <code>Array.Parallel.map</code> gives quick access to parallelism out of the box.  To illustrate this, I’ll pull the related section out of the code.</p><p>Before, single-threaded:</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> processDir maxDepth showFiles dir =</span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">let</span> filesLines =</span><br><span class="line">      files</span><br><span class="line">      |&gt; Array.map (<span class="keyword">fun</span> x -&gt;</span><br><span class="line">          &#123; Node.Name = Path.GetFileName x</span><br><span class="line">            Type = NodeType.File</span><br><span class="line">            Lines = getFileLines x</span><br><span class="line">            Bytes = getFileBytes x</span><br><span class="line">            DirCount = <span class="number">0</span></span><br><span class="line">            Children = [||]</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dirsLines =</span><br><span class="line">      dirs</span><br><span class="line">      |&gt; Array.map (<span class="keyword">fun</span> x -&gt; processDir' (currentDepth + <span class="number">1</span>) x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> lineSum =</span><br><span class="line">      [| filesLines; dirsLines |]</span><br><span class="line">      |&gt; Array.concat</span><br><span class="line">      |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Lines)</span><br><span class="line">      |&gt; Array.sum</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> byteSum =</span><br><span class="line">      [| filesLines; dirsLines |]</span><br><span class="line">      |&gt; Array.concat</span><br><span class="line">      |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Bytes)</span><br><span class="line">      |&gt; Array.sum</span><br><span class="line"></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>After, multi-threaded:</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> processDir maxDepth showFiles dir =</span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">let</span> filesLines =</span><br><span class="line">      files</span><br><span class="line">      |&gt; Array.Parallel.map (<span class="keyword">fun</span> x -&gt; <span class="comment">// LINE CHANGED</span></span><br><span class="line">          &#123; Node.Name = Path.GetFileName x</span><br><span class="line">            Type = NodeType.File</span><br><span class="line">            Lines = getFileLines x</span><br><span class="line">            Bytes = getFileBytes x</span><br><span class="line">            DirCount = <span class="number">0</span></span><br><span class="line">            Children = [||]</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dirsLines =</span><br><span class="line">      dirs</span><br><span class="line">      |&gt; Array.Parallel.map (<span class="keyword">fun</span> x -&gt; processDir' (currentDepth + <span class="number">1</span>) x) <span class="comment">// LINE CHANGED</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> lineSum =</span><br><span class="line">      [| filesLines; dirsLines |]</span><br><span class="line">      |&gt; Array.concat</span><br><span class="line">      |&gt; Array.Parallel.map (<span class="keyword">fun</span> x -&gt; x.Lines) <span class="comment">// LINE CHANGED</span></span><br><span class="line">      |&gt; Array.sum</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> byteSum =</span><br><span class="line">      [| filesLines; dirsLines |]</span><br><span class="line">      |&gt; Array.concat</span><br><span class="line">      |&gt; Array.Parallel.map (<span class="keyword">fun</span> x -&gt; x.Bytes) <span class="comment">// LINE CHANGED</span></span><br><span class="line">      |&gt; Array.sum</span><br><span class="line"></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>Above you’ll see four line changes, resulting in a faster application.  At this point, it is worth noting this is a cool trick, with caveats. When it fits the needs, it is a simple way to get a performance improvement. But, not all situations are the same.  Sometimes design dictates a need for more control over the implementation.  It is also something you need to test to ensure you’re getting the proper benefits, and making the correct tradeoffs.  There are many, particularly large scale apps, where this won’t necessarily work and you’d have to use other techniques.  But I do enjoy how for many cases, this is a quick win.</p><p>I mentioned testing earlier. This is such a small project, I didn’t break out more advanced benchmarks. I just ran some quick sanity checks to see how the changes impacted runtime. I performed tests using two different directories, the F# and Rust language github repos.  I ran it multiple times, clearing system caches between tests.  In a very unscientific fashion, below are representative results of running <code>time</code> using a serial versus parallel version of watc.  It shows the app running faster in elapsed time (real time), which is what I’m aiming for.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># time ./watc ~/projects/fsharp</span><br><span class="line"></span><br><span class="line">Serial:</span><br><span class="line">real  0m2.429s</span><br><span class="line">user  0m0.933s</span><br><span class="line">sys   0m0.467s</span><br><span class="line"></span><br><span class="line">Parallel:</span><br><span class="line">real  0m1.135s</span><br><span class="line">user  0m1.156s</span><br><span class="line">sys   0m0.346s</span><br><span class="line"></span><br><span class="line"># time ./watc ~/projects/rust/</span><br><span class="line"></span><br><span class="line">Serial:</span><br><span class="line">real  0m6.367s</span><br><span class="line">user  0m2.071s</span><br><span class="line">sys   0m1.286s</span><br><span class="line"></span><br><span class="line">Parallel:</span><br><span class="line">real  0m0.855s</span><br><span class="line">user  0m2.222s</span><br><span class="line">sys   0m0.971s</span><br></pre></td></tr></table></figure><p>That’s all I have for today.  <code>Array.Parallel</code> has given me a nice performance boost when I’m doing repo recon, and I’ll take it.  Beyond that, I just wanted to give a quick view into watc, F#-style.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently Ted Unangst wrote about his tool, &lt;a href=&quot;https://flak.tedunangst.com/post/watc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;watc&lt;/a&gt;, to extract line count and file size statistics to support some of his work.  Chris Wellons followed up with his take on &lt;a href=&quot;https://nullprogram.com/blog/2022/05/22/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;watc&lt;/a&gt;.  Inspired by both posts, I thought it would be an interesting tool to add to my own toolbox.  It pairs nicely with some of my current work on extracting useful information from code repositories.  This feels like a good way to put together a quick tool using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  I’ll also use this as an opportunity to show some F# along the way.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Performance" scheme="http://codesuji.com/tags/Performance/"/>
    
      <category term="Tools" scheme="http://codesuji.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Data in Motion - Earthquakes Map</title>
    <link href="http://codesuji.com/2022/07/24/Data-in-Motion-Earthquakes/"/>
    <id>http://codesuji.com/2022/07/24/Data-in-Motion-Earthquakes/</id>
    <published>2022-07-24T14:18:39.000Z</published>
    <updated>2022-08-08T00:12:19.737Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s “data in motion” post is a visualization of earthquakes over time.  I’ll use seismic data from the <a href="https://nsf.gov" target="_blank" rel="noopener">National Science Foundation</a>.  Keeping with the theme, I’ll use <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://ffmpeg.org" target="_blank" rel="noopener">FFmpeg</a> to convert the raw data into a video of the data over time.</p><a id="more"></a><video width="600" height="375" controls><br>  <source src="/images/dim4/earthquakes.webm" type="video/webm"><br></video><p>The above video represents earthquakes from the last 20 years.  The magnitude of seismic events are represented using bubble size and color. Lower magnitude events are smaller and blue/green.  Higher magnitudes are larger and red.  The static data is brought together using a combination of tools.  The primary one being F#, along with the libraries Deedle and Plotly.NET for data manipulation and chart creation (respectively).  The last step uses <a href="https://ffpmeg.org" target="_blank" rel="noopener">FFmpeg</a> to transform a series of images into a final video.</p><p>Source Data: Incorporated Research Institutions for Seismology <a href="https://service.iris.edu/fdsnws/event/1/" target="_blank" rel="noopener">https://service.iris.edu/fdsnws/event/1/</a></p><p>For posterity sake, here are the package versions. Plotly.NET has made a lot of great progress lately.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Deedle --version <span class="number">2.5</span><span class="number">.0</span></span><br><span class="line">dotnet add package Newtonsoft.Json --version <span class="number">13.0</span><span class="number">.1</span></span><br><span class="line">dotnet add package Plotly.NET --version <span class="number">2.0</span><span class="number">.0</span></span><br><span class="line">dotnet add package Plotly.NET.ImageExport --version <span class="number">2.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>And here is the code. As you can imagine, it is similar to the other posts in this series.  The differences from previous posts are mostly a result of different data formats and using the BubbleGeo chart type for plotting data.  The largest difference is the generation of intermediate charts combined into date-specific charts.  This extra step is required because the current version of the BubbleGeo chart doesn’t support multiple marker colors for a single chart.  To implement different colors, I create a single chart for each magnitude with it’s specific color.  Then I use Plotly’s <code>Chart.combine</code> to combine them into a single chart image. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Diagnostics</span><br><span class="line"><span class="keyword">open</span> Deedle</span><br><span class="line"><span class="keyword">open</span> Plotly.NET</span><br><span class="line"><span class="keyword">open</span> Plotly.NET.ImageExport</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imageDir = <span class="string">"../images/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Execute command</span></span><br><span class="line"><span class="keyword">let</span> exec command args =</span><br><span class="line">  <span class="keyword">let</span> startInfo = ProcessStartInfo(FileName = command, Arguments = args)</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> Process(StartInfo = startInfo) </span><br><span class="line">  <span class="keyword">let</span> success = p.Start()</span><br><span class="line">  <span class="keyword">if</span> not success <span class="keyword">then</span></span><br><span class="line">    printfn <span class="string">"Process Failed"</span></span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    p.WaitForExit()</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Build a video (mp4) using all pngs in the sourceDir</span></span><br><span class="line"><span class="keyword">let</span> buildVideo sourceDir dstFile =</span><br><span class="line">  exec <span class="string">"ffmpeg"</span> $<span class="string">"-y -i &#123;sourceDir&#125;/image_%%04d.png -c:v libx264 -r 120 -pix_fmt yuv420p &#123;dstFile&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert an mp4 to a different file format (i.e. webm or .gif)</span></span><br><span class="line"><span class="keyword">let</span> convertVideo (inputFile: string) (outputFile: string) =</span><br><span class="line">  exec <span class="string">"ffmpeg"</span> $<span class="string">"-y -i &#123;inputFile&#125; &#123;outputFile&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Create a chart from earthquake data</span></span><br><span class="line"><span class="comment">/// color - Based on magnitude</span></span><br><span class="line"><span class="comment">/// data - (long * lat * bubblesize) list</span></span><br><span class="line"><span class="keyword">let</span> makeChart (color: string) (data: (float * float * int) list) =</span><br><span class="line">  Chart.BubbleGeo(</span><br><span class="line">    lonlatsizes = data,</span><br><span class="line">    Name = <span class="string">"Magnitude"</span>,</span><br><span class="line">    ShowLegend = <span class="keyword">false</span>,</span><br><span class="line">    Opacity = <span class="number">0.5</span>,</span><br><span class="line">    MarkerColor = Color.fromHex(color))</span><br><span class="line">  |&gt; Chart.withGeoStyle(Scope = StyleParam.GeoScope.Usa)</span><br><span class="line">  |&gt; Chart.withSize (<span class="number">800.</span>, <span class="number">500.</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert magnitude to a color for the chart</span></span><br><span class="line"><span class="keyword">let</span> magnitudeToColor (magnitude: int) =</span><br><span class="line">  <span class="keyword">if</span> magnitude &lt; <span class="number">1</span>      <span class="keyword">then</span> <span class="string">"000077"</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> magnitude &lt; <span class="number">2</span> <span class="keyword">then</span> <span class="string">"007777"</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> magnitude &lt; <span class="number">3</span> <span class="keyword">then</span> <span class="string">"007700"</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> magnitude &lt; <span class="number">4</span> <span class="keyword">then</span> <span class="string">"777700"</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> magnitude &lt; <span class="number">5</span> <span class="keyword">then</span> <span class="string">"770000"</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> magnitude &lt; <span class="number">6</span> <span class="keyword">then</span> <span class="string">"550000"</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> magnitude &lt; <span class="number">7</span> <span class="keyword">then</span> <span class="string">"330000"</span></span><br><span class="line">  <span class="keyword">else</span>                       <span class="string">"110000"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> data =</span><br><span class="line">    Frame.ReadCsv(<span class="string">"../data/earthquakes-us.csv"</span>, <span class="keyword">true</span>, separators = <span class="string">"|"</span>)</span><br><span class="line">    |&gt; Frame.mapRowValues(<span class="keyword">fun</span> row -&gt;</span><br><span class="line">        <span class="keyword">let</span> date = row.GetAs&lt;DateTime&gt;(<span class="string">"Time"</span>).ToString(<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">        <span class="keyword">let</span> longitude = row.GetAs&lt;float&gt;(<span class="string">"Longitude"</span>)</span><br><span class="line">        <span class="keyword">let</span> latitude = row.GetAs&lt;float&gt;(<span class="string">"Latitude"</span>)</span><br><span class="line">        <span class="keyword">let</span> magnitude = row.GetAs&lt;int&gt;(<span class="string">"Magnitude"</span>)</span><br><span class="line">        (date, longitude, latitude, magnitude))</span><br><span class="line">    |&gt; Series.values</span><br><span class="line">    |&gt; Seq.groupBy (<span class="keyword">fun</span> (date, _longitude, _latitude, _magnitude) -&gt; date)</span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> (date, data) -&gt;</span><br><span class="line">        <span class="keyword">let</span> dataByMagnitude =</span><br><span class="line">          data</span><br><span class="line">          |&gt; Seq.groupBy (<span class="keyword">fun</span> (_date, _longitude, _latitude, magnitude) -&gt; magnitude)</span><br><span class="line">        (date, dataByMagnitude))</span><br><span class="line">    |&gt; Seq.sortBy fst</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a chart for each date</span></span><br><span class="line">  <span class="comment">// Each chart is a combination of separate magnitude-based charts for the date</span></span><br><span class="line">  data</span><br><span class="line">  |&gt; Seq.iteri (<span class="keyword">fun</span> i datum -&gt;</span><br><span class="line">    <span class="keyword">let</span> (date, dataForDate) = datum</span><br><span class="line">    <span class="keyword">let</span> magnitudeCharts =</span><br><span class="line">      dataForDate </span><br><span class="line">      |&gt; Seq.map (<span class="keyword">fun</span> (m, dataForMagnitude) -&gt;</span><br><span class="line">          <span class="keyword">let</span> detailData =</span><br><span class="line">            dataForMagnitude</span><br><span class="line">            |&gt; Seq.map (<span class="keyword">fun</span> (_data: string, longitude: float, latitude: float, magnitude: int) -&gt; (longitude, latitude, (magnitude + <span class="number">1</span>) * <span class="number">4</span>))</span><br><span class="line">            |&gt; Seq.toList</span><br><span class="line"></span><br><span class="line">          makeChart (magnitudeToColor m) detailData)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create chart by combining magnitude-specific charts</span></span><br><span class="line">    <span class="keyword">let</span> fileName = sprintf <span class="string">"%s/image_%04d"</span> imageDir i</span><br><span class="line">    magnitudeCharts</span><br><span class="line">    |&gt; Chart.combine</span><br><span class="line">    |&gt; Chart.withTitle (title=date.Substring(<span class="number">0</span>, <span class="number">10</span>),</span><br><span class="line">                        TitleFont=Font.init(Family=StyleParam.FontFamily.Courier_New, Size=<span class="number">32.</span>))</span><br><span class="line">    |&gt; Chart.savePNG (path = fileName, Width = <span class="number">800</span>, Height = <span class="number">500</span>))</span><br><span class="line"></span><br><span class="line">  buildVideo <span class="string">"../images"</span> <span class="string">"earthquake.mp4"</span></span><br><span class="line">  convertVideo <span class="string">"earthquake.mp4"</span> <span class="string">"earthquake.webm"</span></span><br><span class="line"></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s “data in motion” post is a visualization of earthquakes over time.  I’ll use seismic data from the &lt;a href=&quot;https://nsf.gov&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;National Science Foundation&lt;/a&gt;.  Keeping with the theme, I’ll use &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://ffmpeg.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FFmpeg&lt;/a&gt; to convert the raw data into a video of the data over time.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>Data in Motion - Population Map</title>
    <link href="http://codesuji.com/2022/05/17/Data-in-Motion-Population/"/>
    <id>http://codesuji.com/2022/05/17/Data-in-Motion-Population/</id>
    <published>2022-05-18T02:48:33.000Z</published>
    <updated>2022-05-19T02:16:20.794Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s “data in motion” post is a quick population over time visualization.  I’ll use U.S. census data over the last one-hundred-ish years.  As is the theme in this series, I’ll convert the raw data into a video of the data over time using primarily <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>.</p><a id="more"></a><video width="600" height="375" controls><br>  <source src="/images/dim3/population.webm" type="video/webm"><br></video><p>The above video represents state-level population data from 1910 to 2020, in decade increments.  The static data is brought together using a combination of tools.  The primary one being F#, along with the libraries Deedle and Plotly.NET for data manipulation and chart creation (respectively).  It is pulled together using ffmpeg in order to transform a series of images into a final video.</p><p>Source Data: U.S. Census Bureau. <a href="https://www.census.gov/data/tables/time-series/dec/popchange-data-text.html" target="_blank" rel="noopener">https://www.census.gov/data/tables/time-series/dec/popchange-data-text.html</a></p><p>For posterity sake, here are the package versions. Plotly.NET has made a lot of great progress lately.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Deedle --version <span class="number">2.5</span><span class="number">.0</span></span><br><span class="line">dotnet add package Plotly.NET --version <span class="number">2.0</span><span class="number">.0</span></span><br><span class="line">dotnet add package Plotly.NET.ImageExport --version <span class="number">2.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>And here is the code. As you can imagine, it is similar to the other posts in this series.  The changes are mostly a result of different data formats and newer Plotly.NET versions.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Diagnostics</span><br><span class="line"><span class="keyword">open</span> Deedle</span><br><span class="line"><span class="keyword">open</span> Plotly.NET</span><br><span class="line"><span class="keyword">open</span> Plotly.NET.ImageExport</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Execute command</span></span><br><span class="line"><span class="keyword">let</span> exec command args =</span><br><span class="line">  <span class="keyword">let</span> startInfo = ProcessStartInfo(FileName = command, Arguments = args)</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> Process(StartInfo = startInfo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> success = p.Start()</span><br><span class="line">  <span class="keyword">if</span> not success <span class="keyword">then</span></span><br><span class="line">    printfn <span class="string">"Process Failed"</span></span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    p.WaitForExit()</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Build a video (mp4) using all pngs in the sourceDir</span></span><br><span class="line"><span class="keyword">let</span> buildVideo sourceDir dstFile =</span><br><span class="line">  exec <span class="string">"ffmpeg"</span> $<span class="string">"-y -framerate 1 -i &#123;sourceDir&#125;/image_%%04d.png -c:v libx264 -r 1 -pix_fmt yuv420p &#123;dstFile&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert an mp4 to a different file format (i.e. webm or .gif)</span></span><br><span class="line"><span class="keyword">let</span> convertVideo (inputFile: string) (outputFile: string) =</span><br><span class="line">  exec <span class="string">"ffmpeg"</span> $<span class="string">"-i &#123;inputFile&#125; &#123;outputFile&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> imageDir = <span class="string">"../images/"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Used to convert state names to abbreviations</span></span><br><span class="line">  <span class="keyword">let</span> stateLookup =</span><br><span class="line">    Frame.ReadCsv(<span class="string">"../data/states.csv"</span>, <span class="keyword">true</span>, separators = <span class="string">","</span>)</span><br><span class="line">    |&gt; Frame.indexRows <span class="string">"Name"</span></span><br><span class="line">    |&gt; Frame.getCol <span class="string">"Code"</span></span><br><span class="line">    |&gt; Series.observations</span><br><span class="line">    |&gt; Map.ofSeq</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Population data</span></span><br><span class="line">  <span class="keyword">let</span> data = Frame.ReadCsv(<span class="string">"../data/population.csv"</span>, <span class="keyword">true</span>, separators = <span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get all years in the file</span></span><br><span class="line">  <span class="keyword">let</span> years =</span><br><span class="line">    data</span><br><span class="line">    |&gt; Frame.getCol <span class="string">"Year"</span></span><br><span class="line">    |&gt; Series.values</span><br><span class="line">    |&gt; Seq.distinct</span><br><span class="line">    |&gt; Seq.mapi (<span class="keyword">fun</span> i x -&gt; (i, x))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (index, year) <span class="keyword">in</span> years <span class="keyword">do</span></span><br><span class="line">    <span class="comment">// Build an image for each year in file</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// State abbreviations</span></span><br><span class="line">    <span class="keyword">let</span> statesForYear =</span><br><span class="line">      data</span><br><span class="line">      |&gt; Frame.filterRowValues (<span class="keyword">fun</span> row -&gt; row.GetAs&lt;string&gt;(<span class="string">"Year"</span>) = year)</span><br><span class="line">      |&gt; Frame.getCol <span class="string">"Name"</span></span><br><span class="line">      |&gt; Series.values</span><br><span class="line">      |&gt; Seq.map (<span class="keyword">fun</span> state -&gt; stateLookup.Item state)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// State populations</span></span><br><span class="line">    <span class="keyword">let</span> populationsForYear =</span><br><span class="line">      data</span><br><span class="line">      |&gt; Frame.filterRowValues (<span class="keyword">fun</span> row -&gt; row.GetAs&lt;string&gt;(<span class="string">"Year"</span>) = year)</span><br><span class="line">      |&gt; Frame.getCol <span class="string">"Resident Population"</span></span><br><span class="line">      |&gt; Series.values</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Build chart</span></span><br><span class="line">    Chart.ChoroplethMap (</span><br><span class="line">      locations = statesForYear,</span><br><span class="line">      z = populationsForYear,</span><br><span class="line">      LocationMode = StyleParam.LocationFormat.USA_states,</span><br><span class="line">      FeatureIdKey = <span class="string">"id"</span>,</span><br><span class="line">      ColorScale = </span><br><span class="line">        StyleParam.Colorscale.Custom([</span><br><span class="line">          (<span class="number">0.</span>, Color.fromHex(<span class="string">"#00ca00"</span>))</span><br><span class="line">          (<span class="number">1.</span>, Color.fromHex(<span class="string">"#002400"</span>))</span><br><span class="line">        ])</span><br><span class="line">    |&gt; Chart.withGeoStyle(Scope = StyleParam.GeoScope.Usa)</span><br><span class="line">    |&gt; Chart.withColorBarStyle (<span class="string">"Population"</span>, Len = <span class="number">0.75</span>)</span><br><span class="line">    |&gt; Chart.withTitle (title=$<span class="string">"&#123;year&#125; population"</span>,</span><br><span class="line">                        TitleFont=Font.init(Family=StyleParam.FontFamily.Courier_New, Size=<span class="number">32.</span>))</span><br><span class="line">    |&gt; Chart.withSize (<span class="number">800.</span>, <span class="number">500.</span>)</span><br><span class="line">    |&gt; Chart.savePNG (path = (sprintf <span class="string">"%s/image_%04d"</span> imageDir index),</span><br><span class="line">                      Width = <span class="number">800</span>,</span><br><span class="line">                      Height = <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Convert images to a video</span></span><br><span class="line">  buildVideo <span class="string">"../images"</span> <span class="string">"population.mp4"</span> |&gt; ignore</span><br><span class="line">  convertVideo <span class="string">"population.mp4"</span> <span class="string">"population.webm"</span> |&gt; ignore</span><br><span class="line"></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s “data in motion” post is a quick population over time visualization.  I’ll use U.S. census data over the last one-hundred-ish years.  As is the theme in this series, I’ll convert the raw data into a video of the data over time using primarily &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>Taking Stock of More Anomalies with F# and ML.NET</title>
    <link href="http://codesuji.com/2022/01/30/F-and-MLNet-Anomaly-2/"/>
    <id>http://codesuji.com/2022/01/30/F-and-MLNet-Anomaly-2/</id>
    <published>2022-01-30T11:52:44.000Z</published>
    <updated>2022-05-27T18:49:11.033Z</updated>
    
    <content type="html"><![CDATA[<p>It has been <a href="https://www.codesuji.com/2019/05/24/F-and-MLNet-Anomaly" target="_blank" rel="noopener">awhile</a> since I posted about Anomaly detection using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a>.  Since the ML.NET framework continues to evolve, so it is worth a revisit to investigate changes.  This also provides a good opportunity to dig deeper into the anomaly detection options that are provided.</p><a id="more"></a><p>Setting up dependencies is a two-part process, depending on the operating system. First, add the necessary packages.  Second, <code>Mkl.Redist</code> may require an additional library install.  Microsoft has details at <a href="https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/install-extra-dependencies" target="_blank" rel="noopener">install extra dependencies</a> for the specific requirements, but I include an example of installing and loading the library on Ubuntu.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Microsoft.ML --version 1.7.1</span><br><span class="line">dotnet add package Microsoft.ML.FastTree --version 1.7.1</span><br><span class="line">dotnet add package Microsoft.ML.Mkl.Components --version 1.7.1</span><br><span class="line">dotnet add package Microsoft.ML.MklRedist --version 1.7.1</span><br><span class="line">dotnet add package Microsoft.ML.TimeSeries --version 1.7.1</span><br><span class="line">dotnet add package Plotly.NET --version 2.0.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Additional requirement installation (For Linux)</span><br><span class="line">sudo bash</span><br><span class="line">cd /tmp</span><br><span class="line">wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB</span><br><span class="line">apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB</span><br><span class="line">rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB</span><br><span class="line">exit</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install intel-mkl-64bit-2020.4-912</span><br><span class="line">sudo ldconfig /opt/intel/compilers_and_libraries_2020.4.304/linux/compiler/lib/intel64_lin</span><br></pre></td></tr></table></figure><p>Last time I used the Dow Jones stock index for my example.  This time I’m going to shift a bit, and use the NASDAQ index.  I’m using the same data format as before, below is a snippet of the source data.  It is extensive stock price data, but I will only use Date and Close price today.  It was exported from <a href="https://finance.yahoo.com/quote/%5EIXIC?p=^IXIC&amp;.tsrc=fin-srch" target="_blank" rel="noopener">Yahoo! Finance</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">Date,Open,High,Low,Close,Adj Close,Volume</span><br><span class="line">2010-01-04,2294.409912,2311.149902,2294.409912,2308.419922,2308.419922,1931380000</span><br><span class="line">2010-01-05,2307.270020,2313.729980,2295.620117,2308.709961,2308.709961,2367860000</span><br><span class="line">2010-01-06,2307.709961,2314.070068,2295.679932,2301.090088,2301.090088,2253340000</span><br><span class="line">2010-01-07,2298.090088,2301.300049,2285.219971,2300.050049,2300.050049,2270050000</span><br><span class="line">2010-01-08,2292.239990,2317.600098,2290.610107,2317.169922,2317.169922,2145390000</span><br><span class="line">2010-01-11,2324.780029,2326.280029,2302.209961,2312.409912,2312.409912,2077890000</span><br><span class="line">2010-01-12,2297.280029,2298.850098,2272.699951,2282.310059,2282.310059,2368320000</span><br><span class="line">2010-01-13,2289.459961,2313.030029,2274.120117,2307.899902,2307.899902,2318350000</span><br><span class="line">2010-01-14,2303.310059,2322.560059,2303.290039,2316.739990,2316.739990,2254170000</span><br></pre></td></tr></table></figure><p>The setup is similar to before. I need to setup a PriceData type for data loading, and PricePrediction for the anomaly detection. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Transforms.TimeSeries</span><br><span class="line"><span class="keyword">open</span> Plotly.NET</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">PriceData</span> </span>() =</span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(0)&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Date: string</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(1)&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Open: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(2)&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> High: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(3)&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Low: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(4)&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Close: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(5)&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> AdjClose: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(6)&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Volume: float32</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">PricePrediction</span> </span>() =</span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Date: string</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Prediction: double[]</span><br></pre></td></tr></table></figure><p>Before I get into the detection, there is some work to be done.  First is setting up the MLContext that will be used in the transformations and detections.  I will also load the actual price data into its own array and chart,, so I can use it in the final display phase later. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"nasdaq.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> context = MLContext()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = </span><br><span class="line">  context</span><br><span class="line">    .Data</span><br><span class="line">    .LoadFromTextFile&lt;PriceData&gt; (</span><br><span class="line">      path = dataPath,</span><br><span class="line">      hasHeader = <span class="keyword">true</span>,</span><br><span class="line">      separatorChar = ',')</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////</span></span><br><span class="line"><span class="comment">// Pricing data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> priceData =</span><br><span class="line">  context</span><br><span class="line">    .Data</span><br><span class="line">    .CreateEnumerable&lt;PriceData&gt;(data, <span class="keyword">false</span>)</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; (x.Date, float (x.Close)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> priceChart =</span><br><span class="line">  Chart.Line(priceData, Name = <span class="string">"Price"</span>)</span><br></pre></td></tr></table></figure><p>The first anomaly detection method to look at is IidSpike.  This is the method used in the original <a href="https://www.codesuji.com/2019/05/24/F-and-MLNet-Anomaly" target="_blank" rel="noopener">post</a>.  Creating an anomaly detector hasn’t changed too much between versions. There are a couple small parameter issues, but the transition is pretty clean.  As is often the case, the values for confidence and pvalueHistoryLength can/will be situation dependent, but for example purposes these work reasonably well.  After determining the anomalies for the data, I pair the detected anomalies with the price data for a chart.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iidSpikeData = </span><br><span class="line">  context</span><br><span class="line">    .Transforms</span><br><span class="line">    .DetectIidSpike(</span><br><span class="line">      outputColumnName = <span class="string">"Prediction"</span>,</span><br><span class="line">      inputColumnName = <span class="string">"Close"</span>,</span><br><span class="line">      side = AnomalySide.TwoSided,</span><br><span class="line">      confidence = <span class="number">95.</span>, </span><br><span class="line">      pvalueHistoryLength = <span class="number">50</span>)</span><br><span class="line">    .Fit(data)</span><br><span class="line">    .Transform(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iidSpikeAnomalies = </span><br><span class="line">  context</span><br><span class="line">    .Data</span><br><span class="line">    .CreateEnumerable&lt;PricePrediction&gt;(iidSpikeData, reuseRowObject = <span class="keyword">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iidSpikeChartData = </span><br><span class="line">  (priceData, iidSpikeAnomalies)</span><br><span class="line">  ||&gt; Seq.zip</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (p, a) -&gt;</span><br><span class="line">      <span class="comment">// For all anomalies, use closing price to show on the chart</span></span><br><span class="line">      (a.Date, <span class="keyword">if</span> (a.Prediction).[<span class="number">0</span>] = <span class="number">0.</span> <span class="keyword">then</span> None <span class="keyword">else</span> Some (snd p)))</span><br><span class="line">  |&gt; Seq.filter (<span class="keyword">fun</span> (_x, y) -&gt; y.IsSome)</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (x, y) -&gt; (x, y.Value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iidSpikeChart = </span><br><span class="line">  Chart.Scatter (iidSpikeChartData, StyleParam.Mode.Markers, Name = <span class="string">"iidSpike"</span>)</span><br><span class="line"></span><br><span class="line">[ priceChart; iidSpikeChart ]</span><br><span class="line">|&gt; Chart.combine</span><br><span class="line">|&gt; Chart.withTitle <span class="string">"Close Price (IidSpike)"</span></span><br><span class="line">|&gt; Chart.show</span><br></pre></td></tr></table></figure><p><img src="/images/anomaly2/iidspike.png" alt="Price Anomalies - IidSpike"></p><p>One of the main goals of this posts is to investigate additional anomaly detection methods that ML.NET provides.  The second anomaly detection method to look at is SrCnn.  Its methodology is based on leveraging Spectral Residual and a Convolutional Neural Network.  You can read more details on the underlying mechanisms and reasoning on their website <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.timeseries.srcnnanomalyestimator?view=ml-dotnet" target="_blank" rel="noopener"> SrCnnAnomalyEstimator</a> and whitepaper <a href="https://arxiv.org/pdf/1906.03821.pdf" target="_blank" rel="noopener">Time-Series Anomaly Detection Service at Microsoft</a>.  Below is a pipeline for detection using SrCnn. One takeaway is the code is nearly identical to the IidSpike example; just replace the <code>DetectIidSpike</code> call with <code>DetectAnomalyBySrCnn</code>.  Perhaps this isn’t surprising, but it makes experimentation easy as snapping pieces in and out.  Since the parameter support is different for the calls there is a bit more work.  I’m only using windowSize to define the sliding window, but it does have more knobs (like threshold) to tweak.  Like before, I pair the detected anomalies with the price data for a chart.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> srCnnData = </span><br><span class="line">  context</span><br><span class="line">    .Transforms</span><br><span class="line">    .DetectAnomalyBySrCnn(</span><br><span class="line">      outputColumnName = <span class="string">"Prediction"</span>,</span><br><span class="line">      inputColumnName = <span class="string">"Close"</span>,</span><br><span class="line">      windowSize = <span class="number">50</span>)</span><br><span class="line">    .Fit(data)</span><br><span class="line">    .Transform(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> srCnnAnomalies = </span><br><span class="line">  context</span><br><span class="line">    .Data</span><br><span class="line">    .CreateEnumerable&lt;PricePrediction&gt;(srCnnData, reuseRowObject = <span class="keyword">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> srCnnChartData = </span><br><span class="line">  (priceData, srCnnAnomalies)</span><br><span class="line">  ||&gt; Seq.zip</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (p, a) -&gt;</span><br><span class="line">      <span class="comment">// For all anomalies, use closing price to show on the chart</span></span><br><span class="line">      (a.Date, <span class="keyword">if</span> (a.Prediction).[<span class="number">0</span>] = <span class="number">0.</span> <span class="keyword">then</span> None <span class="keyword">else</span> Some (snd p)))</span><br><span class="line">  |&gt; Seq.filter (<span class="keyword">fun</span> (_x, y) -&gt; y.IsSome)</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (x, y) -&gt; (x, y.Value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> srCnnChart = </span><br><span class="line">  Chart.Scatter (srCnnChartData, StyleParam.Mode.Markers, Name = <span class="string">"srCnn"</span>)</span><br><span class="line"></span><br><span class="line">[ priceChart; srCnnChart ]</span><br><span class="line">|&gt; Chart.combine</span><br><span class="line">|&gt; Chart.withTitle <span class="string">"Close Price (SrCnn)"</span></span><br><span class="line">|&gt; Chart.show</span><br></pre></td></tr></table></figure><p><img src="/images/anomaly2/srcnn.png" alt="Price Anomalies - SrCnn"></p><p>The next anomaly detection method up for experimentation is spikeSSa.  This method uses Singular spectrum analysis to detect anomalies.  Microsoft has more details regarding its methodology at <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.timeseries.ssaspikeestimator?view=ml-dotnet" target="_blank" rel="noopener">SsaSpikeEstimator</a> and with the whitepaper <a href="https://arxiv.org/pdf/1206.6910.pdf" target="_blank" rel="noopener">Basic Singular Spectrum Analysis and Forecasting with R</a>.  As with SrCnn, I can snap in the <code>DetectBySsa</code> estimator into the pipeline.  This does have more knobs to tweak, so some experimentation is worthwhile to determine the best settings for your particular situation.  Once detected, I link the anomalies with the data to make a nice chart.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> spikeSsaData = </span><br><span class="line">  context</span><br><span class="line">    .Transforms</span><br><span class="line">    .DetectSpikeBySsa(</span><br><span class="line">      outputColumnName = <span class="string">"Prediction"</span>,</span><br><span class="line">      inputColumnName = <span class="string">"Close"</span>,</span><br><span class="line">      confidence = <span class="number">95.</span>,</span><br><span class="line">      pvalueHistoryLength = <span class="number">100</span>,</span><br><span class="line">      trainingWindowSize = <span class="number">1000</span>,</span><br><span class="line">      seasonalityWindowSize = <span class="number">100</span>,</span><br><span class="line">      side = AnomalySide.TwoSided)</span><br><span class="line">    .Fit(data)</span><br><span class="line">    .Transform(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> spikeSsaAnomalies = </span><br><span class="line">  context</span><br><span class="line">    .Data</span><br><span class="line">    .CreateEnumerable&lt;PricePrediction&gt;(spikeSsaData, reuseRowObject = <span class="keyword">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> spikeSsaChartData = </span><br><span class="line">  (priceData, spikeSsaAnomalies)</span><br><span class="line">  ||&gt; Seq.zip</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (p, a) -&gt;</span><br><span class="line">      <span class="comment">// For all anomalies, use closing price to show on the chart</span></span><br><span class="line">      (a.Date, <span class="keyword">if</span> (a.Prediction).[<span class="number">0</span>] = <span class="number">0.</span> <span class="keyword">then</span> None <span class="keyword">else</span> Some (snd p)))</span><br><span class="line">  |&gt; Seq.filter (<span class="keyword">fun</span> (_x, y) -&gt; y.IsSome)</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (x, y) -&gt; (x, y.Value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> spikeSsaChart = </span><br><span class="line">  Chart.Scatter (spikeSsaChartData, StyleParam.Mode.Markers, Name = <span class="string">"spikeSsa"</span>)</span><br><span class="line"></span><br><span class="line">[ priceChart; spikeSsaChart ]</span><br><span class="line">|&gt; Chart.combine</span><br><span class="line">|&gt; Chart.withTitle <span class="string">"Close Price (SpikeSsa)"</span></span><br><span class="line">|&gt; Chart.show</span><br></pre></td></tr></table></figure><p><img src="/images/anomaly2/spikessa.png" alt="Price Anomalies - SpikeSsa"></p><p>Now that we’ve gone over these three methods, you can see from their charts they have differing sensitivies to anomalies.  This doesn’t even take into account hyperparameter optimization for options such as window-size, confidence, and ovaluehistory.  As always, its great to have options, and I’ve found that depending on my needs I graviate to different methods.  This has been a short foray into additional anomaly detection methods provided by ML.NET.  Examples can go a long way to help wrapping your head around the possiblities.  I hope you found this useful in your ML.NET projects, or perhaps has intrigued you enough to try it.  Until next time. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It has been &lt;a href=&quot;https://www.codesuji.com/2019/05/24/F-and-MLNet-Anomaly&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;awhile&lt;/a&gt; since I posted about Anomaly detection using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt;.  Since the ML.NET framework continues to evolve, so it is worth a revisit to investigate changes.  This also provides a good opportunity to dig deeper into the anomaly detection options that are provided.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Signals" scheme="http://codesuji.com/tags/Signals/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term="Timeseries" scheme="http://codesuji.com/tags/Timeseries/"/>
    
  </entry>
  
  <entry>
    <title>Discriminated Unions and Dapper</title>
    <link href="http://codesuji.com/2021/12/11/Discriminated-Unions-and-Dapper/"/>
    <id>http://codesuji.com/2021/12/11/Discriminated-Unions-and-Dapper/</id>
    <published>2021-12-11T14:18:39.000Z</published>
    <updated>2021-12-31T14:06:05.449Z</updated>
    
    <content type="html"><![CDATA[<p>Persisting data can be a subtle art.  Today I am taking a look at how <a href="http://fsharp.org/" target="_blank" rel="noopener">F#’s</a> Discriminated Unions can interact with <a href="https://github.com/StackExchange/Dapper" target="_blank" rel="noopener">Dapper</a>.  I’ve discussed Dapper before, but never really discussed its facilities for interacting with Discriminated Unions.  It is a useful bit of knowledge when determining project data structures.</p><a id="more"></a><p>For example purposes, I have a snippet from a financial tracking application.  The part of interest is the definition of an Account along with it’s AccountType.  For explanatory purposes, I am using abbreviated record and type definitions.  Since it is so convenient, examples will leverage <a href="https://sqlite.org/" target="_blank" rel="noopener">SQLite</a> as a database.  For reference, below are the package versions I’m using, along with .NET 5.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet add package Dapper --version <span class="number">2.0</span><span class="number">.123</span></span><br><span class="line">$ dotnet add package System.Data.SQLite --version <span class="number">1.0</span><span class="number">.115</span><span class="number">.5</span></span><br><span class="line">$ dotnet add package Thoth.Json.Net --version <span class="number">7.1</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>First, to start with some foundational parts.  Half of this equation, is the database structure.  The examples below use a simple table definition.  For the first (enum) example AccountType is an int.  For the other examples it is stored as a string.  With the structural pieces out of the way I get to the most interesting aspects. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Data.SQLite</span><br><span class="line"><span class="keyword">open</span> Dapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> databaseFileName = <span class="string">"../data/db.sqlite"</span></span><br><span class="line"><span class="keyword">let</span> connectionString = <span class="string">"Data Source=../data/db.sqlite;Version=3;"</span></span><br><span class="line"><span class="keyword">let</span> sqlEnumExample =</span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">    create table Accounts (</span></span><br><span class="line"><span class="string">      AccountId varchar(100),</span></span><br><span class="line"><span class="string">      AccountName varchar(200),</span></span><br><span class="line"><span class="string">      AccountType int,</span></span><br><span class="line"><span class="string">      primary key (accountid)</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sqlOtherExamples =</span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">    create table Accounts (</span></span><br><span class="line"><span class="string">      AccountId varchar(100),</span></span><br><span class="line"><span class="string">      AccountName varchar(200),</span></span><br><span class="line"><span class="string">      AccountType varchar(100),</span></span><br><span class="line"><span class="string">      primary key (accountid)</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line"></span><br><span class="line">SQLiteConnection.CreateFile(databaseFileName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> db = <span class="keyword">new</span> SQLiteConnection(connectionString)</span><br><span class="line">db.Open()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> command = <span class="keyword">new</span> SQLiteCommand(sql, db)</span><br><span class="line"><span class="keyword">let</span> result = command.ExecuteNonQuery()</span><br><span class="line">db.Close()</span><br></pre></td></tr></table></figure><p>Some Discriminated Unions have a simple structure.  Depending on intent, these can simply be represented as an enum.  When this approach is chosen, the numeric value of the Discriminated Union is saved to the database.  If you are looking at a fully normalized database structure with ids to external tables, this can be a perfectly reasonable approach.  This does of course require a manual synchronization of the magic numbers between the type and database table.  Like anything else, there are trade-offs. Digging in a bit deeper, below is one way this can be implemented.  Because it is useful to see some of the underlying details, I include the results of a generic Dapper call as well as the one that directly casts the results into the <code>Account</code> type.</p><p>The example code is typical Dapper/F# example code.  Database inserting and selecting map cleanly to F# record and discriminated union types.  With this approach, everything is just handled.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">AccountType</span> </span>=</span><br><span class="line">  | Checking = <span class="number">100</span></span><br><span class="line">  | CreditCard = <span class="number">200</span></span><br><span class="line">  | Investing = <span class="number">300</span></span><br><span class="line">  | Ira = <span class="number">400</span></span><br><span class="line">  | Savings = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Account</span> </span>=</span><br><span class="line">  &#123; AccountId: string</span><br><span class="line">    AccountName: string</span><br><span class="line">    AccountType: AccountType &#125;</span><br><span class="line">  <span class="keyword">override</span> __.ToString() =</span><br><span class="line">    sprintf <span class="string">"%-10s %-25s %-25s"</span> __.AccountId __.AccountName (__.AccountType.ToString())</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> accounts =</span><br><span class="line">  [ &#123; AccountId = <span class="string">"1001"</span></span><br><span class="line">      AccountName = <span class="string">"Savings Account 1"</span></span><br><span class="line">      AccountType = AccountType.Savings &#125;</span><br><span class="line">    &#123; AccountId = <span class="string">"1002"</span></span><br><span class="line">      AccountName = <span class="string">"Retirement Account 1"</span></span><br><span class="line">      AccountType = AccountType.Ira &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> db = <span class="keyword">new</span> SQLiteConnection(connectionString)</span><br><span class="line">db.Open()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> insertSql = <span class="string">"insert into accounts (accountid, accountname, accounttype) values (@accountid, @accountname, @accounttype)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count =</span><br><span class="line">  accounts</span><br><span class="line">  |&gt; List.sumBy (<span class="keyword">fun</span> record -&gt; db.Execute(insertSql, record))</span><br><span class="line"></span><br><span class="line">printfn $<span class="string">"&#123;count&#125; records inserted."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> selectSql = <span class="string">"select accountid, accountname, accounttype from accounts"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> db.Query(selectSql) <span class="keyword">do</span></span><br><span class="line">  printfn $<span class="string">"&#123;record&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> db.Query&lt;Account&gt;(selectSql) <span class="keyword">do</span></span><br><span class="line">  printfn $<span class="string">"&#123;record&#125;"</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2 records inserted.</span><br><span class="line"></span><br><span class="line">&#123;DapperRow, AccountId = &apos;1001&apos;, AccountName = &apos;Savings Account 1&apos;, AccountType = &apos;500&apos;&#125;</span><br><span class="line">&#123;DapperRow, AccountId = &apos;1002&apos;, AccountName = &apos;Retirement Account 1&apos;, AccountType = &apos;400&apos;&#125;</span><br><span class="line"></span><br><span class="line">1001       Savings Account 1         Savings</span><br><span class="line">1002       Retirement Account 1      Ira</span><br></pre></td></tr></table></figure><p>There are multiple ways to tackle the problem, so it is time to look at a different approach.  Let’s say I don’t want AccountType to be an enum.  Perhaps I want to store data “truer” to the F# type shape. What options do I have.  One way is to treat this simple discriminated union by mapping it’s underlying values to string values (e.g. AccountType.Savings maps to the string “Savings”). It is easy to understand, but this doesn’t work directly with Dapper, with no intervention.  I need to build out a little support for this to work.  First, I create <code>Serialize</code> and <code>Deserialize</code> methods on <code>AccountType</code>.  Second, I need to create a handler to map from/to the discriminated union and the stored sql string.  For this Dapper provides a <code>TypeHandler</code>, from that I inherit and create an <code>AccountTypeHandler</code>.  The contained methods tell Dapper how to proxy the data between the worlds of the database and application.  <code>Parse</code> takes the string value in the database and returns an <code>AccountType</code>.  <code>SetValue</code> does the reverse, by converting an <code>AccountType</code> to a string.  It should be noted at this point I am doing simple string serialization and deserialization.  If I wanted to do something fancier in here I could, but this is a direct approach meets my goals.  The third, and final, piece is to activate the <code>AccountTypeHandler</code> with the <code>SqlMapper.AddTypeHandler</code> method.  Now I can do inserts and selects like I did before. But the data is stored using my specified string serialization.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">AccountType</span> </span>=</span><br><span class="line">  | Checking</span><br><span class="line">  | CreditCard</span><br><span class="line">  | Investing</span><br><span class="line">  | Ira</span><br><span class="line">  | Savings</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> Serialize(accountType: AccountType) = accountType.ToString()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> Deserialize(s: string) =</span><br><span class="line">    <span class="keyword">match</span> s <span class="keyword">with</span></span><br><span class="line">    | nameof Checking -&gt; Ok Checking</span><br><span class="line">    | nameof Savings -&gt; Ok Savings</span><br><span class="line">    | nameof Investing -&gt; Ok Investing</span><br><span class="line">    | nameof Ira -&gt; Ok Ira</span><br><span class="line">    | nameof CreditCard -&gt; Ok CreditCard</span><br><span class="line">    | _ -&gt; Error(sprintf <span class="string">"Invalid account type '%s'"</span> s)</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Account</span> </span>=</span><br><span class="line">  &#123; AccountId: string</span><br><span class="line">    AccountName: string</span><br><span class="line">    AccountType: AccountType &#125;</span><br><span class="line">  <span class="keyword">override</span> __.ToString() =</span><br><span class="line">    sprintf <span class="string">"%-10s %-25s %-25s"</span> __.AccountId __.AccountName (__.AccountType.ToString())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">AccountTypeHandler</span></span>() =</span><br><span class="line">  <span class="keyword">inherit</span> SqlMapper.TypeHandler&lt;AccountType&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> __.Parse(value) =</span><br><span class="line">    <span class="keyword">match</span> AccountType.Deserialize(string value) <span class="keyword">with</span></span><br><span class="line">    | Ok (y) -&gt; y</span><br><span class="line">    | Error (e) -&gt; failwith e</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> __.SetValue(p, value) =</span><br><span class="line">    p.DbType &lt;- Data.DbType.String</span><br><span class="line">    p.Size &lt;- <span class="number">100</span></span><br><span class="line">    p.Value &lt;- AccountType.Serialize value</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> accounts =</span><br><span class="line">  [ &#123; AccountId = <span class="string">"1001"</span></span><br><span class="line">      AccountName = <span class="string">"Savings Account 1"</span></span><br><span class="line">      AccountType = AccountType.Savings &#125;</span><br><span class="line">    &#123; AccountId = <span class="string">"1002"</span></span><br><span class="line">      AccountName = <span class="string">"Retirement Account 1"</span></span><br><span class="line">      AccountType = AccountType.Ira &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> db = <span class="keyword">new</span> SQLiteConnection(connectionString)</span><br><span class="line">db.Open()</span><br><span class="line">SqlMapper.AddTypeHandler(typeof&lt;AccountType&gt;, AccountTypeHandler())</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> insertSql = <span class="string">"insert into accounts (accountid, accountname, accounttype) values (@accountid, @accountname, @accounttype)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count =</span><br><span class="line">  accounts</span><br><span class="line">  |&gt; List.sumBy (<span class="keyword">fun</span> record -&gt; db.Execute(insertSql, record))</span><br><span class="line"></span><br><span class="line">printfn $<span class="string">"&#123;count&#125; records inserted."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> selectSql = <span class="string">"select accountid, accountname, accounttype from accounts"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> db.Query(selectSql) <span class="keyword">do</span></span><br><span class="line">  printfn $<span class="string">"&#123;record&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> db.Query&lt;Account&gt;(selectSql) <span class="keyword">do</span></span><br><span class="line">  printfn $<span class="string">"&#123;record&#125;"</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2 records inserted.</span><br><span class="line"></span><br><span class="line">&#123;DapperRow, AccountId = &apos;1001&apos;, AccountName = &apos;Savings Account 1&apos;, AccountType = &apos;Savings&apos;&#125;</span><br><span class="line">&#123;DapperRow, AccountId = &apos;1002&apos;, AccountName = &apos;Retirement Account 1&apos;, AccountType = &apos;Ira&apos;&#125;</span><br><span class="line"></span><br><span class="line">1001       Savings Account 1         Savings</span><br><span class="line">1002       Retirement Account 1      Ira</span><br></pre></td></tr></table></figure><p>There is a natural next question, what if the discriminated union isn’t so simple? One of F#’s strengths is modeling complex data.  So this seems like another good example of the power of different approaches.  The fundamental question is how to represent the data.  There are a multitude of ways to address this.  I’ve decided on something really simple; use <a href="https://github.com/thoth-org/Thoth.Json.Net" target="_blank" rel="noopener">Thoth</a> to serialize the Discriminated Union.  As you can see below, there are now different types of IRAs, and Savings accounts need a bank name attached.  How does this change the previous approach?  The <code>Serialize</code> and <code>Deserialize</code> methods of <code>AccountType</code> are modified to use Thoth Auto-Encoding and Auto-Decoding (respectively).  Everything else stays the same as the previous example.  This can be a point of debate if this is the best serialization method, but changing the serialization functions give enough flexibility to meet your specific needs.  <em>Addendum:</em> A question was raised that reminded me of something I originally failed to mention. Like the enum solution, there are trade offs when serializing a DU for persistence.  In some cases where the DU structure requires refactoring, you may need to handle data migration to support an updated representation.  This is really only an issue with some structure changes, not additions to the DU.  Even in these cases, there are context-specific mitigation techniques in both design and refactoring to reduce the pain, but it is still worth mentioning.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Thoth.Json.Net</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">IraType</span> </span>=</span><br><span class="line">  | Roth</span><br><span class="line">  | Simple</span><br><span class="line">  | Traditional</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">AccountType</span> </span>=</span><br><span class="line">  | Checking</span><br><span class="line">  | CreditCard</span><br><span class="line">  | Investing</span><br><span class="line">  | Ira <span class="keyword">of</span> IraType</span><br><span class="line">  | Savings <span class="keyword">of</span> string</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> Serialize(accountType: AccountType) = Encode.Auto.toString (<span class="number">2</span>, accountType)</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> Deserialize(s: string) = Decode.Auto.fromString&lt;AccountType&gt; (s)</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Account</span> </span>=</span><br><span class="line">  &#123; AccountId: string</span><br><span class="line">    AccountName: string</span><br><span class="line">    AccountType: AccountType &#125;</span><br><span class="line">  <span class="keyword">override</span> __.ToString() =</span><br><span class="line">    sprintf <span class="string">"%-10s %-25s %-25s"</span> __.AccountId __.AccountName (__.AccountType.ToString())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">AccountTypeHandler</span></span>() =</span><br><span class="line">  <span class="keyword">inherit</span> SqlMapper.TypeHandler&lt;AccountType&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> __.Parse(value) =</span><br><span class="line">    <span class="keyword">match</span> AccountType.Deserialize(string value) <span class="keyword">with</span></span><br><span class="line">    | Ok (y) -&gt; y</span><br><span class="line">    | Error (e) -&gt; failwith e</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> __.SetValue(p, value) =</span><br><span class="line">    p.DbType &lt;- Data.DbType.String</span><br><span class="line">    p.Size &lt;- <span class="number">100</span></span><br><span class="line">    p.Value &lt;- AccountType.Serialize value</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> accounts =</span><br><span class="line">  [ &#123; AccountId = <span class="string">"1001"</span></span><br><span class="line">      AccountName = <span class="string">"Savings Account 1"</span></span><br><span class="line">      AccountType = AccountType.Savings <span class="string">"First Bank"</span> &#125;</span><br><span class="line">    &#123; AccountId = <span class="string">"1002"</span></span><br><span class="line">      AccountName = <span class="string">"Retirement Account 1"</span></span><br><span class="line">      AccountType = AccountType.Ira Roth &#125;</span><br><span class="line">    &#123; AccountId = <span class="string">"1003"</span></span><br><span class="line">      AccountName = <span class="string">"Retirement Account 2"</span></span><br><span class="line">      AccountType = AccountType.Ira Traditional &#125;</span><br><span class="line">    &#123; AccountId = <span class="string">"1004"</span></span><br><span class="line">      AccountName = <span class="string">"Checking Account 1"</span></span><br><span class="line">      AccountType = AccountType.Checking &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> db = <span class="keyword">new</span> SQLiteConnection(connectionString)</span><br><span class="line">db.Open()</span><br><span class="line">SqlMapper.AddTypeHandler(typeof&lt;AccountType&gt;, AccountTypeHandler())</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> insertSql = <span class="string">"insert into accounts (accountid, accountname, accounttype) values (@accountid, @accountname, @accounttype)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count =</span><br><span class="line">  accounts</span><br><span class="line">  |&gt; List.sumBy (<span class="keyword">fun</span> record -&gt; db.Execute(insertSql, record))</span><br><span class="line"></span><br><span class="line">printfn $<span class="string">"&#123;count&#125; records inserted."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> selectSql = <span class="string">"select accountid, accountname, accounttype from accounts"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> db.Query(selectSql) <span class="keyword">do</span></span><br><span class="line">  printfn $<span class="string">"&#123;record&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> db.Query&lt;Account&gt;(selectSql) <span class="keyword">do</span></span><br><span class="line">  printfn $<span class="string">"&#123;record&#125;"</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">4 records inserted.</span><br><span class="line"></span><br><span class="line">&#123;DapperRow, AccountId = &apos;1001&apos;, AccountName = &apos;Savings Account 1&apos;, AccountType = &apos;[</span><br><span class="line">  &quot;Savings&quot;,</span><br><span class="line">  &quot;First Bank&quot;</span><br><span class="line">]&apos;&#125;</span><br><span class="line">&#123;DapperRow, AccountId = &apos;1002&apos;, AccountName = &apos;Retirement Account 1&apos;, AccountType = &apos;[</span><br><span class="line">  &quot;Ira&quot;,</span><br><span class="line">  &quot;Roth&quot;</span><br><span class="line">]&apos;&#125;</span><br><span class="line">&#123;DapperRow, AccountId = &apos;1003&apos;, AccountName = &apos;Retirement Account 2&apos;, AccountType = &apos;[</span><br><span class="line">  &quot;Ira&quot;,</span><br><span class="line">  &quot;Traditional&quot;</span><br><span class="line">]&apos;&#125;</span><br><span class="line"></span><br><span class="line">&#123;DapperRow, AccountId = &apos;1004&apos;, AccountName = &apos;Checking Account 1&apos;, AccountType = &apos;&quot;Checking&quot;&apos;&#125;</span><br><span class="line">1001       Savings Account 1         Savings &quot;First Bank&quot;</span><br><span class="line">1002       Retirement Account 1      Ira Roth</span><br><span class="line">1003       Retirement Account 2      Ira Traditional</span><br><span class="line">1004       Checking Account 1        Checking</span><br></pre></td></tr></table></figure><p>As you can see, Dapper provides good support for flexible data type mapping.  Hopefully these different approaches give you some ideas regarding how you can integrate Dapper and its type handlers with F# for your applications.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Persisting data can be a subtle art.  Today I am taking a look at how &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#’s&lt;/a&gt; Discriminated Unions can interact with &lt;a href=&quot;https://github.com/StackExchange/Dapper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dapper&lt;/a&gt;.  I’ve discussed Dapper before, but never really discussed its facilities for interacting with Discriminated Unions.  It is a useful bit of knowledge when determining project data structures.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Database" scheme="http://codesuji.com/tags/Database/"/>
    
      <category term="Types" scheme="http://codesuji.com/tags/Types/"/>
    
  </entry>
  
  <entry>
    <title>Data in Motion - Precipitation Map</title>
    <link href="http://codesuji.com/2021/11/27/Data-in-Motion-Precipitation/"/>
    <id>http://codesuji.com/2021/11/27/Data-in-Motion-Precipitation/</id>
    <published>2021-11-27T12:03:29.000Z</published>
    <updated>2021-11-27T13:54:00.177Z</updated>
    
    <content type="html"><![CDATA[<p>Today is again a lighter post playing with visualizations.  The data focus is on the Standardized Precipitation Index data for the U.S. over that last one-hundred years.  Static images and data can be useful, but visualizing data over time can be a welcome addition for analysis.  So I’ll be converting data ultimately into a video of the data over time using primarily <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>.</p><a id="more"></a><video width="600" height="375" controls><br>  <source src="/images/dim2/precipitation.webm" type="video/webm"><br></video><p>The above video starts with the data.  In its raw form it is county-level precipitation data from 1895-2016.  More specifically, the Standardized Precipitation Index (SPI) is a standard deviation metric, and for this dataset values range from -3 to 3.  So this shows over time is how much areas deviate from the relative mean.  The static data is brought together using a combination of tools.  The primary one being F#, along with the libraries Deedle and Plotly.NET for data manipulation and chart creation (respectively).  It is pulled together using ffmpeg in order to transform a series of images into a final video.</p><p>Source Data: Centers for Disease Control and Prevention. National Environmental Public Health Tracking Network.  <a href="https://data.cdc.gov/Environmental-Health-Toxicology/Standardized-Precipitation-Index-1895-2016/xbk2-5i4e" target="_blank" rel="noopener">https://data.cdc.gov/Environmental-Health-Toxicology/Standardized-Precipitation-Index-1895-2016/xbk2-5i4e</a></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Diagnostics</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Deedle</span><br><span class="line"><span class="keyword">open</span> Newtonsoft.Json</span><br><span class="line"><span class="keyword">open</span> Plotly.NET</span><br><span class="line"><span class="keyword">open</span> Plotly.NET.ImageExport</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert a datafile into an imagefile name (with no extension)</span></span><br><span class="line"><span class="keyword">let</span> buildImageNameNoExtension i _dataFileName =</span><br><span class="line">  Path.Combine(<span class="string">"images"</span>, sprintf <span class="string">"image_%04d"</span> i)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert a datafile name into a year-month chart title</span></span><br><span class="line"><span class="keyword">let</span> fileNameToTitle dataFileName =</span><br><span class="line">  <span class="keyword">let</span> regex = Text.RegularExpressions.Regex(<span class="string">"precipitation_(\d+)_(\d+).csv"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> matches = regex.Match(dataFileName)</span><br><span class="line">  <span class="keyword">let</span> year = matches.Groups.[<span class="number">1</span>].Captures.[<span class="number">0</span>].ToString() |&gt; int</span><br><span class="line">  <span class="keyword">let</span> month = matches.Groups.[<span class="number">2</span>].Captures.[<span class="number">0</span>].ToString() |&gt; int</span><br><span class="line"></span><br><span class="line">  sprintf <span class="string">"%4d-%02d"</span> year month</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Json object of county code to map coordinates polygon</span></span><br><span class="line"><span class="comment">/// Source: https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json</span></span><br><span class="line"><span class="keyword">let</span> geoJson =</span><br><span class="line">  IO.File.ReadAllText(<span class="string">"data/geojson-counties-fips.json"</span>)</span><br><span class="line">  |&gt; JsonConvert.DeserializeObject</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Build map of precipitation data</span></span><br><span class="line"><span class="keyword">let</span> buildMap index dataFile =</span><br><span class="line">  <span class="keyword">let</span> title = fileNameToTitle dataFile</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> data = Frame.ReadCsv(dataFile, <span class="keyword">true</span>, separators = <span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fips =</span><br><span class="line">    data</span><br><span class="line">    |&gt; Frame.getCol <span class="string">"countyfips"</span></span><br><span class="line">    |&gt; Series.values</span><br><span class="line">    |&gt; Array.ofSeq</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> spi =</span><br><span class="line">    data</span><br><span class="line">    |&gt; Frame.getCol <span class="string">"spi"</span></span><br><span class="line">    |&gt; Series.values</span><br><span class="line">    |&gt; Array.ofSeq</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> chart =</span><br><span class="line">    Chart.ChoroplethMap (</span><br><span class="line">      locations = fips,</span><br><span class="line">      z = spi,</span><br><span class="line">      Locationmode = StyleParam.LocationFormat.GeoJson_Id,</span><br><span class="line">      GeoJson = geoJson,</span><br><span class="line">      FeatureIdKey = <span class="string">"id"</span>,</span><br><span class="line">      Colorscale = </span><br><span class="line">        StyleParam.Colorscale.Custom([</span><br><span class="line">          (<span class="number">0.0</span>,   <span class="string">"#3d0c06"</span>)</span><br><span class="line">          (<span class="number">0.165</span>, <span class="string">"#6d0c06"</span>)</span><br><span class="line">          (<span class="number">0.25</span>,  <span class="string">"#9d0c06"</span>)</span><br><span class="line">          (<span class="number">0.5</span> ,  <span class="string">"#9a9a9a"</span>)</span><br><span class="line">          (<span class="number">0.665</span>, <span class="string">"#060c9d"</span>)</span><br><span class="line">          (<span class="number">0.75</span>,  <span class="string">"#060c6d"</span>)</span><br><span class="line">          (<span class="number">1.0</span>,   <span class="string">"#060c3d"</span>)</span><br><span class="line">          ]),</span><br><span class="line">      Zmin = <span class="number">-3</span>,</span><br><span class="line">      Zmax = <span class="number">3</span>)</span><br><span class="line">    |&gt; Chart.withMap (Geo.init (Scope = StyleParam.GeoScope.Usa))</span><br><span class="line">    |&gt; Chart.withColorBarStyle (<span class="string">"SPI"</span>, Length = <span class="number">0.75</span>)</span><br><span class="line">    |&gt; Chart.withTitle (title=title, Titlefont=Font.init(Family=StyleParam.FontFamily.Courier_New, Size=<span class="number">32.</span>))</span><br><span class="line">    |&gt; Chart.withSize (<span class="number">800.</span>, <span class="number">500.</span>)</span><br><span class="line">    |&gt; Chart.savePNG (path = buildImageNameNoExtension index dataFile, Width = <span class="number">800</span>, Height = <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Execute command</span></span><br><span class="line"><span class="keyword">let</span> exec command args =</span><br><span class="line">  <span class="keyword">let</span> startInfo = ProcessStartInfo(FileName = command, Arguments = args)</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> Process(StartInfo = startInfo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> success = p.Start()</span><br><span class="line">  <span class="keyword">if</span> not success <span class="keyword">then</span></span><br><span class="line">    printfn <span class="string">"Process Failed"</span></span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    p.WaitForExit()</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Build a video (mp4) using all pngs in the sourceDir</span></span><br><span class="line"><span class="keyword">let</span> buildVideo sourceDir dstFile =</span><br><span class="line">  exec <span class="string">"ffmpeg"</span> $<span class="string">"-y -i &#123;sourceDir&#125;/image_%%04d.png -c:v libx264 -vf fps=5 -pix_fmt yuv420p &#123;dstFile&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert an mp4 to a different file format (i.e. webm or .gif)</span></span><br><span class="line"><span class="keyword">let</span> convertVideo (inputFile: string) (outputFile: string) =</span><br><span class="line">  exec <span class="string">"ffmpeg"</span> $<span class="string">"-i &#123;inputFile&#125; &#123;outputFile&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="comment">// Create map images for each month of the data series</span></span><br><span class="line">  <span class="comment">// Name the images numerically, for consumption by ffmpeg  </span></span><br><span class="line">  IO.Directory.GetFiles(<span class="string">"./data"</span>, <span class="string">"precipitation*.csv"</span>)</span><br><span class="line">  |&gt; Array.sort</span><br><span class="line">  |&gt; Array.mapi (<span class="keyword">fun</span> i x -&gt; (i, x))</span><br><span class="line">  |&gt; Array.iter (<span class="keyword">fun</span> (i, x) -&gt; buildMap i x)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Combine images into a video</span></span><br><span class="line">  buildVideo <span class="string">"images"</span> <span class="string">"precipitation.mp4"</span> |&gt; ignore</span><br><span class="line">  convertVideo <span class="string">"precipitation.mp4"</span> <span class="string">"precipitation.webm"</span> |&gt; ignore</span><br><span class="line"></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today is again a lighter post playing with visualizations.  The data focus is on the Standardized Precipitation Index data for the U.S. over that last one-hundred years.  Static images and data can be useful, but visualizing data over time can be a welcome addition for analysis.  So I’ll be converting data ultimately into a video of the data over time using primarily &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>Leveraging RocksDB with F#</title>
    <link href="http://codesuji.com/2021/11/21/F-RocksDB/"/>
    <id>http://codesuji.com/2021/11/21/F-RocksDB/</id>
    <published>2021-11-21T13:13:12.000Z</published>
    <updated>2021-11-23T03:31:56.551Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes an application has a need for a local key/value store.  In these scenarios, there are several options, including <a href="https://rocksdb.org/" target="_blank" rel="noopener">RocksDB</a>.  Today’s exploration will be to dig into using RocksDB with <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>.</p><a id="more"></a><p>If you’re unfamilar with <a href="https://rocksdb.org/" target="_blank" rel="noopener">RocksDB</a>, it is a local key/value store that you can embed in your application.  I’ve found it to be a valuable addition to the application toolbox.  For anyone following along, The below examples use .NET version 5 and the RocksDB wrapper library RocksDbSharp version 6.2.2.  I’ve also included some simple setup and helper functions that are used in the later examples.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet add package RocksDbNative --version 6.2.2</span><br><span class="line">$ dotnet add package RocksDbSharp --version 6.2.2</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> RocksDbSharp</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert a string to a byte array</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">inline</span> toBytes (s: string) = Encoding.UTF8.GetBytes s</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert a byte array to a string</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">inline</span> fromBytes (b: byte[]) = Encoding.UTF8.GetString b</span><br></pre></td></tr></table></figure><p>The obvious place to get started is with some simple saving and retrieval of key/value pairs.  Before jumping right in, it is useful to know that RocksDB stores keys and values as byte arrays.  This provides a good deal of flexibility, but it puts the responsibility on the developer to determine the best serialization method for object storage.  Depending on the data being stored, this can be an extra step to worry about, but I like the power it provides with a raw interface.  To this end, RocksDBSharp supports direct interactions using byte array keys and values.  For convenience is also supports the common case of accepting strings as keys and values, converting them to byte arrays under the covers.  For the following example, the scenario is storing multiple worker states in the key/value store.  The first thing to do is open the database. In this particular case, I’ll also create the database if it doesn’t exist.  The library supports many of the standard RocksDB database configuration options.  Once the database is open, I can start to do something useful.  Data is added using <code>Put</code>, retrieved using <code>Get</code>, and deleted using <code>Remove</code>.  It also provides a handy <code>MultiGet</code> for retrieving multiple values into a collection.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dbPath = <span class="string">"/var/data/worker-data"</span></span><br><span class="line"><span class="keyword">let</span> options = DbOptions().SetCreateIfMissing(<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">use</span> db = RocksDb.Open(options, dbPath)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save worker states to database</span></span><br><span class="line">db.Put(<span class="string">"worker1"</span>, <span class="string">"34,18,72"</span>)</span><br><span class="line">db.Put(<span class="string">"worker2"</span>, <span class="string">"1,42.2,15.4"</span>)</span><br><span class="line">db.Put(<span class="string">"worker3"</span>, <span class="string">"9.8,13.5,3.8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get worker states from database</span></span><br><span class="line">printfn <span class="string">"worker 1: %s"</span> (db.Get(<span class="string">"worker1"</span>))</span><br><span class="line">printfn <span class="string">"worker 2: %s"</span> (db.Get(<span class="string">"worker2"</span>))</span><br><span class="line">printfn <span class="string">"worker 3: %s"</span> (db.Get(<span class="string">"worker3"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete a worker state</span></span><br><span class="line">db.Remove(<span class="string">"worker2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Byte array example</span></span><br><span class="line"><span class="keyword">let</span> worker4Name = toBytes <span class="string">"worker4"</span></span><br><span class="line"><span class="keyword">let</span> worker4State = [| byte <span class="number">26</span>; byte <span class="number">27</span>; byte <span class="number">28</span> |]</span><br><span class="line">db.Put(worker4Name, worker4State)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"worker 4: %A"</span> (db.Get(worker4Name))</span><br><span class="line"></span><br><span class="line"><span class="comment">// MultiGet</span></span><br><span class="line"><span class="keyword">let</span> workerStates = db.MultiGet([| <span class="string">"worker1"</span>; <span class="string">"worker2"</span>; <span class="string">"worker3"</span> |])</span><br><span class="line"></span><br><span class="line">workerStates</span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> worker -&gt; printfn $<span class="string">"&#123;worker.Key&#125; &#123;worker.Value&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> worker <span class="keyword">in</span> workerStates <span class="keyword">do</span></span><br><span class="line">  printfn $<span class="string">"&#123;worker.Key&#125; &#123;worker.Value&#125;</span></span><br></pre></td></tr></table></figure><p>Anyone who has worked with a key/value store recognizes an inherent challenge of key organization.  A lot can be done using naming conventions, but sometimes there is a need for better segmentation.  Although separate databases are an option, RocksDB has a nicer option.  It supports column families.  Column families are a way to group together related data into its own structure within the same database.  By specifying the Column Family when doing gets/puts, the data is segmented appropriately.  In the previous example I was storing just worker states.  Assuming I need to support different types of data, it potentially makes sense to segment worker states from user session data.  Obviously proper naming conventions for keys can provide simple groupings, but column families bring a more proper segmentation of data.  It should be noted, this isn’t a security boundary, but a structural one to assist with data interactions.</p><p>Looking at the example below, there are a couple key parts.  First is that the database must be opened with the available column family definitions.  More specifically, this must include the definitions of all column families in the database.  In this case, I’m defining two column families: one for worker states, and one for user session data.  The second is that <code>Get</code> and <code>Put</code> must specify the column family where the data is located.  Beyond that, the interactions are similar to the previous example.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dbPath = <span class="string">"/var/data/state-data"</span></span><br><span class="line"><span class="keyword">let</span> options =</span><br><span class="line">  DbOptions()</span><br><span class="line">    .SetCreateIfMissing(<span class="keyword">true</span>)</span><br><span class="line">    .SetCreateMissingColumnFamilies(<span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define column families</span></span><br><span class="line"><span class="keyword">let</span> columnFamilies = ColumnFamilies()</span><br><span class="line">columnFamilies.Add(ColumnFamilies.Descriptor(<span class="string">"workers"</span>, ColumnFamilyOptions()))</span><br><span class="line">columnFamilies.Add(ColumnFamilies.Descriptor(<span class="string">"sessions"</span>, ColumnFamilyOptions()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> db = RocksDb.Open(options, dbPath, columnFamilies)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define column family references</span></span><br><span class="line"><span class="keyword">let</span> workersFamily = db.GetColumnFamily(<span class="string">"workers"</span>)</span><br><span class="line"><span class="keyword">let</span> sessionsFamily = db.GetColumnFamily(<span class="string">"sessions"</span>)</span><br><span class="line"></span><br><span class="line">db.Put(<span class="string">"worker5"</span>, <span class="string">"12,34,56"</span>, cf = workersFamily)</span><br><span class="line">db.Put(<span class="string">"session100"</span>, <span class="string">"3000,4021"</span>, cf = sessionsFamily)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"worker5: %s"</span> (db.Get(<span class="string">"worker5"</span>, cf = workersFamily))</span><br><span class="line">printfn <span class="string">"session100: %s"</span> (db.Get(<span class="string">"session100"</span>, cf = sessionsFamily))</span><br></pre></td></tr></table></figure><p>RocksDB isn’t limited to just single key lookups. It also supports iterators.  Say, for example, that I want to grab a set of session data.  Below is an example of how to do that.  To start out, I create a fake set of sessions and store them in the database.  This way I have something to query against.  The iterator can limit by a range of keys.  The Lower bound is defined by the initial <code>Seek()</code> method.  The upper bound is defined by the <code>SetIterateUpperBound()</code> option defined when opening the iterator.  An upper bound isn’t strictly required, if not defined it reads to the end of all keys.  The example below will return all key/value pairs where the key is &gt;= <code>session_40</code> and &lt; <code>session_50</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Setup db options </span></span><br><span class="line"><span class="keyword">let</span> options = DbOptions().SetCreateIfMissing(<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">use</span> db = RocksDb.Open(options, dbPath)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add session data</span></span><br><span class="line"><span class="keyword">let</span> rand = Random() </span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> [<span class="number">1.</span><span class="number">.1000</span>] <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">let</span> sessionId = $<span class="string">"session_%02d&#123;rand.Next(100)&#125;"</span></span><br><span class="line">  <span class="keyword">let</span> sessionData = Array.init <span class="number">5</span> (<span class="keyword">fun</span> _ -&gt; rand.Next(<span class="number">100</span>).ToString()) |&gt; String.concat <span class="string">","</span></span><br><span class="line">  db.Put(sessionId, sessionData)</span><br><span class="line">  printfn $<span class="string">"added: &#123;sessionId&#125; &#123;db.Get(sessionId)&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterate over a segment of the sessions</span></span><br><span class="line"><span class="keyword">use</span> iterator = db.NewIterator(readOptions = ReadOptions().SetIterateUpperBound(<span class="string">"session_50"</span>))</span><br><span class="line">iterator.Seek(<span class="string">"session_40"</span>) |&gt; ignore</span><br><span class="line"><span class="keyword">while</span> iterator.Valid() <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">let</span> key = iterator.Key()</span><br><span class="line">  <span class="keyword">let</span> value = iterator.Value()</span><br><span class="line">  printfn $<span class="string">"session: &#123;fromBytes key&#125; = &#123;fromBytes value&#125;"</span></span><br><span class="line">  iterator.Next() |&gt; ignore</span><br></pre></td></tr></table></figure><p>Sometimes it is useful to save a set of changes to the database in a single batch or to work with a set of data prior to actually writing it to the database.  RocksDB provides a WriteBatch interface that permits just that.  It supports the common actions like Get/Put/Remove. This allows for the ability to keep data in memory to do data manipulation while leveraging the familiar database interface.  Once the new data is in the desired state, then it can be saved to the database by calling <code>Write</code>.  This call is an atomic transaction for saving the data to key/value store.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = DbOptions().SetCreateIfMissing(<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">use</span> db = RocksDb.Open(options, dbPath)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save worker states to batch </span></span><br><span class="line"><span class="keyword">use</span> writeBatch =</span><br><span class="line">  (<span class="keyword">new</span> WriteBatchWithIndex())</span><br><span class="line">    .Put(<span class="string">"worker1"</span>, <span class="string">"34,18,72"</span>)</span><br><span class="line">    .Put(<span class="string">"worker2"</span>, <span class="string">"1,42.2,15.4"</span>)</span><br><span class="line">    .Put(<span class="string">"worker3"</span>, <span class="string">"9.8,13.5,3.8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get worker states from write batch </span></span><br><span class="line">printfn <span class="string">"worker 1: %s"</span> (writeBatch.Get(<span class="string">"worker1"</span>))</span><br><span class="line">printfn <span class="string">"worker 2: %s"</span> (writeBatch.Get(<span class="string">"worker2"</span>))</span><br><span class="line">printfn <span class="string">"worker 3: %s"</span> (writeBatch.Get(<span class="string">"worker3"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write the batch to the persistent store</span></span><br><span class="line">db.Write(writeBatch)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get worker states from persistent store </span></span><br><span class="line">printfn <span class="string">"worker 1: %s"</span> (db.Get(<span class="string">"worker1"</span>))</span><br><span class="line">printfn <span class="string">"worker 2: %s"</span> (db.Get(<span class="string">"worker2"</span>))</span><br><span class="line">printfn <span class="string">"worker 3: %s"</span> (db.Get(<span class="string">"worker3"</span>))</span><br></pre></td></tr></table></figure><p>Next I want to discuss transaction support. This is also the perfect time to address some deficiencies and features in this particular library.  The RocksDbSharp library does not have a nice wrapper for every bit of RocksDB functionality, including transaction support.  Nicely enough, it does provide a reasonable middle ground to fill in those gaps.  It includes “Native” wrappers around the raw apis.  This means even if RocksDbSharp doesn’t have a nice wrapper, it at least provides a lower level mechanism to access the underlying RocksDB APIs.  This is great, and exactly what I need to get transactions working.  For example purposes I’m going to keep all the <code>Native</code> calls together.  In a real project, I’d put this into it’s own module/class to properly abstract the underlying apis for the rest of the application.</p><p>Since this is all lower level, it won’t be as clean as the previous code, but it gets me where I need to go.  The most obvious thing about the code below is all the calls using the <code>Native.Instance.&lt;method&gt;</code> syntax.  This is the RocksDbSharp interface to the lower-level apis.  Although I try to avoid them when possible, I need to use some mutable variables in order to manually cleanup objects with some <code>.Dispose()</code> calls.</p><p>Now to walk through the process.  First, RocksDB uses a specific <code>transaction database</code> object.  It also requires its own options object.  For the particular example I needed to increase the transaction expiration timeout, the default was just too short.  Your mileage may vary.  The transaction object needs a write options object, so I set that up as well.  I then setup a couple mutable variables so I can properly dispose of them in the <code>finally</code> block.</p><p>There are a couple things to call out for the general flow.</p><ul><li>Open the transaction-supporting database<br><code>dbTrans &lt;- Native.Instance.rocksdb_transactiondb_open(options.Handle, transactionOptions, dbPath)</code></li><li>Begin the transaction<br><code>txn &lt;- Native.Instance.rocksdb_transaction_begin(dbTrans, writeOptions, transactionOptions, nullptr)</code></li><li>Add a key/value pair to the transaction<br><code>Native.Instance.rocksdb_transaction_put(txn, key, unativeint key.Length, value, unativeint value.Length, ref err)</code></li><li>Rollback the transaction if necessary<br><code>Native.Instance.rocksdb_transaction_rollback(txn)</code></li><li>Commit the transaction<br><code>Native.Instance.rocksdb_transaction_commit(txn)</code></li><li>In the finally block, perform all the cleanup necessary</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define worker states</span></span><br><span class="line"><span class="keyword">let</span> workerData = </span><br><span class="line">  [</span><br><span class="line">    (<span class="string">"worker1"</span>, [ <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span> ])</span><br><span class="line">    (<span class="string">"worker2"</span>, [ <span class="number">10</span>; <span class="number">20</span>; <span class="number">30</span> ])</span><br><span class="line">    (<span class="string">"worker3"</span>, [ <span class="number">100</span>; <span class="number">200</span>; <span class="number">300</span> ])</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setup db options </span></span><br><span class="line"><span class="keyword">let</span> options = DbOptions().SetCreateIfMissing(<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">let</span> transactionOptions = Native.Instance.rocksdb_transactiondb_options_create()</span><br><span class="line"><span class="comment">// Increase the expiration time for the transaction to complete</span></span><br><span class="line">Native.Instance.rocksdb_transaction_options_set_expiration(transactionOptions, int64 <span class="number">10000</span>)</span><br><span class="line"><span class="keyword">let</span> writeOptions = Native.Instance.rocksdb_writeoptions_create()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep everything in a try block, and cleanup in the finally block </span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> dbTrans = IntPtr.Zero</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> txn = IntPtr.Zero</span><br><span class="line"><span class="keyword">let</span> nullptr = IntPtr.Zero</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">  <span class="comment">// Open database supporting transactions</span></span><br><span class="line">  dbTrans &lt;- Native.Instance.rocksdb_transactiondb_open(options.Handle, transactionOptions, dbPath)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Begin transaction </span></span><br><span class="line">  txn &lt;- Native.Instance.rocksdb_transaction_begin(dbTrans, writeOptions, transactionOptions, nullptr)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Save new workers' states to db</span></span><br><span class="line">  <span class="keyword">for</span> worker <span class="keyword">in</span> workerData <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> workerId =</span><br><span class="line">        fst worker</span><br><span class="line">        |&gt; toBytes</span><br><span class="line">    <span class="keyword">let</span> workerState =</span><br><span class="line">        snd worker</span><br><span class="line">        |&gt; List.map (<span class="keyword">fun</span> x -&gt; x.ToString())</span><br><span class="line">        |&gt; String.concat <span class="string">","</span></span><br><span class="line">        |&gt; toBytes</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mutable</span> err = IntPtr.Zero</span><br><span class="line">    Native.Instance.rocksdb_transaction_put(txn, workerId, unativeint workerId.Length, workerState, unativeint workerState.Length, ref err)</span><br><span class="line">    <span class="keyword">if</span> err &lt;&gt; IntPtr.Zero <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// There was an error, rollback</span></span><br><span class="line">      printfn $<span class="string">"Error: &#123;err&#125;"</span></span><br><span class="line">      Native.Instance.rocksdb_transaction_rollback(txn)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> someRandomError <span class="keyword">then</span></span><br><span class="line">    <span class="comment">// There was an error, rollback</span></span><br><span class="line">    Native.Instance.rocksdb_transaction_rollback(txn)</span><br><span class="line">    printfn <span class="string">"Transaction rolled back"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">// Commit transaction</span></span><br><span class="line">    Native.Instance.rocksdb_transaction_commit(txn)</span><br><span class="line">    printfn <span class="string">"Transaction complete"</span></span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">  <span class="comment">// Cleanup everything created using native interfaces</span></span><br><span class="line">  Native.Instance.rocksdb_transaction_destroy(txn)</span><br><span class="line">  Native.Instance.rocksdb_transactiondb_close(dbTrans)</span><br><span class="line">  Native.Instance.rocksdb_transactiondb_options_destroy(transactionOptions)</span><br><span class="line">  Native.Instance.rocksdb_writeoptions_destroy(writeOptions)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read data after transaction is complete</span></span><br><span class="line"><span class="keyword">use</span> db2 = RocksDb.Open(options, dbPath)</span><br><span class="line"><span class="keyword">for</span> worker <span class="keyword">in</span> [ <span class="string">"worker1"</span>; <span class="string">"worker2"</span>; <span class="string">"worker3"</span>] <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">let</span> workerState = db2.Get(worker)</span><br><span class="line">  printfn $<span class="string">"&#123;worker&#125;: &#123;workerState&#125;"</span></span><br></pre></td></tr></table></figure><p>Using a database is more than just saving and retrieving data.  Backups and snapshots are often something that need to be handled.  RocksDB and the RocksDbSharp library provide a simple way to address these issues using checkpoints.  This is a way to easily snapshot the database state for either a point-in-time reference as a full data store backup.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = DbOptions().SetCreateIfMissing(<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">use</span> db = RocksDb.Open(options, dbPath)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save a checkpoint</span></span><br><span class="line"><span class="keyword">let</span> checkpointPath = $<span class="string">"&#123;dbPath&#125;.chk"</span></span><br><span class="line"><span class="keyword">if</span> IO.Directory.Exists(checkpointPath) <span class="keyword">then</span> IO.Directory.Delete(checkpointPath, recursive = <span class="keyword">true</span>)</span><br><span class="line">db.Checkpoint().Save(checkpointPath)</span><br></pre></td></tr></table></figure><p>There is a lot more of RocksDB I could cover, but the goal is to give a taste of how the RocksDBSharp library can be leveraged.  Hopefully this gives you enough of a start to take your F# project further using RocksDB.  Until next time, rock on.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sometimes an application has a need for a local key/value store.  In these scenarios, there are several options, including &lt;a href=&quot;https://rocksdb.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RocksDB&lt;/a&gt;.  Today’s exploration will be to dig into using RocksDB with &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Database" scheme="http://codesuji.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Examining Boyer-Moore String Search with F#</title>
    <link href="http://codesuji.com/2021/08/07/F-String-Search/"/>
    <id>http://codesuji.com/2021/08/07/F-String-Search/</id>
    <published>2021-08-07T13:28:19.000Z</published>
    <updated>2023-01-02T03:43:48.912Z</updated>
    
    <content type="html"><![CDATA[<p>Text search is something we do everyday.  Fast and reliable search is such a staple, it is easy to forget there can be elegance to those underlying mechanisms.  It is time to pull back the curtain and dig into one of the foundational search algorithms, the Boyer-Moore fast string search.  It is a good algorithm to demonstrate some of the methods used to achieve fast search results.  As typical, I’ll reach for <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> to show implementation details.</p><a id="more"></a><p>For reference, most of what I discuss is pulled from Boyer and Moore’s 1977 paper <a href="/images/fss1/fstrpos.pdf">A Fast String Searching Algorithm</a>.  If you want to read it straight from the source, its a easy to digest paper.  One of the things I love about this algorithm is the cleverness in understanding how the structure of the data can enhance the goal.  This results in an elegant solution.  It also strikes the right balance.  It contains some complexity, but its a comprehendable algorithm without the burden of being too clever.</p><p>Before digging into the algorithm, its worth setting a baseline.  For that I’ll use a naive search.  It starts at the beginning of a string, iterates character by character, checking to see if it matches the first character of the pattern. If/When it hits a character match, it checks deeper into the pattern.  If it mismatches within the pattern, it backtracks and continues from where it left off.  It’s intent is the simplest, most straight-forward approach.  Once I have an extremely basic approach, I can dig into how Boyer-Moore improves upon this concept.  Below is an example of how the process works, and how long it takes to find the pattern “coffeecake” in the string.</p><pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Naive Method:Step 1:String : I like to drink coffee with my coffeecake at breakfast.Pattern: coffeecake         &#8593;Step 2:String : I like to drink coffee with my coffeecake at breakfast.Pattern:  coffeecake          &#8593;Step 3:String : I like to drink coffee with my coffeecake at breakfast.Pattern:   coffeecake           &#8593;...Step 38:String : I like to drink coffee with my coffeecake at breakfast.Pattern:                                coffeecake                                        &#8593;...Step 47:String : I like to drink coffee with my coffeecake at breakfast.Pattern:                                coffeecake                                                 &#8593;</pre><p>The example above takes 47 comparisons from start to finish.  Some of this is taken by backtracking when it finds a partial match at “coffee”. Most of the time is taken by the fact that it has to go character by character.</p><p>If you haven’t guessed by now, there is a better way.  There are a couple preliminary aspects of the Boyer-Moore algorithm to establish.  First, when doing pattern compares, it starts at the end of the pattern.  For the pattern “coffeecake”, it’ll try to match the final ‘e’, then ‘k’, etc. At a minimum, this gives it a bit of a jump start by skipping nearly the length of the search string for non-matches.  This isn’t the big optimization, but this dynamic will come into play later.  Second, the algorithm uses a preprocessing step prior to the actual search.  This is the meat of the optimizations.  It builds up information regarding the search string that allows it to make more efficient choices during the search.  This process leverages knowledge of the pattern’s structure to improve the scanning process.</p><p>The first optimization is a simple one involving a lookup table (described as delta 1 in the paper).  Prior to the search, it makes a pass through the pattern.  During which a table is built for each possible character, and how many positions it can increment the search pointer if the character it hits doesn’t match against the current character in the pattern.  If the character isn’t in the pattern, then it knows it can skip over it entirely, which translates to incrementing the pointer the length of the pattern.  If the character is in the pattern, it determines the last instance of that character within the pattern and uses that to calculate the number of characters that can be skipped. The formula in that case is: patternLength - index - 1.  The result is being able to increment by multiple positions in the string when the current character doesn’t match.  For illustrative purposes, below is an example.</p><pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Pattern: coffeecakeIndex  : 0123456789Resulting lookup table (abbreviated):a: 2 (10 - 7 - 1)b: 10c: 3 (10 - 6 - 1)d: 10e: 0 (10 - 9 - 1)f: 6  (10 - 3 - 1)g: 10...z: 10</pre><pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Step 1:String : I like to drink coffee with my coffeecake at breakfast.Pattern: coffeecakePointer:          &#8593;</pre>Action: It compares ' ' to 'e'.  Looking at the lookup table, blank doesn't exist in the pattern, so it can jump ahead 10 positions.<pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Step 2:String : I like to drink coffee with my coffeecake at breakfast.Pattern:           coffeecakePointer:                    &#8593;</pre>Action: It compares 'f' to 'e'.  They don't match, but it does know that f exists in the pattern, using the lookup table it can increment 6.<pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Step 3:String : I like to drink coffee with my coffeecake at breakfast.Pattern:                 coffeecakePointer:                          &#8593;</pre>Action: Now it is aligned with the previously seen 'f' with an 'f' in the pattern.  The goal here is to jump ahead as far as it can, while attempting alignment with the string and pattern.  This is good, although as you can see, it will now compare 't' with 'e'.  Since 't' isn't in the pattern, it will increment 10 positions.<pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Step 4:String : I like to drink coffee with my coffeecake at breakfast.Pattern:                           coffeecakePointer:                                    &#8593;</pre>Action: Here it find a match, the 'e' matches in the string and pattern. This means it can start comparing backward through the pattern.<pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Step 5:String : I like to drink coffee with my coffeecake at breakfast.Pattern:                           coffeecakePointer:                                   &#8593;</pre>Action: Here 'f' doesn't match 'k', but exists in the pattern, as before, it can increment 6 positions.<pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Step 6:String : I like to drink coffee with my coffeecake at breakfast.Pattern:                                coffeecakePointer:                                         &#8593;</pre>Action:  Again, it aligned the 'f' from string with the 'f' in the pattern.  It get a hit with 'e', so it will start walking backwards through the pattern.  We can also see at this point we've found our match, the algorithm just doesn't know it yet.<pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Steps 7-15:String : I like to drink coffee with my coffeecake at breakfast.Pattern:                                coffeecakePointer:                                        &#8593;Pointer:                                       &#8593;...Pointer:                                &#8593;</pre><p>Action: As you can see, it is in the match. Steps 7 - 15 will be walking backwards through the pattern until it verifies the match.</p><p>What this shows in a total of 15 compares it found the match.  A naive character-by-character check takes considerably more than that.  This is a simple example, but a third the number of checks on a small example feels like a good optimization.  One attribute of this method is longer search patterns allow the algorithm to jump through the string faster on non-matching characters.  How much is obviously pattern specific, but anything is better than one character at a time.  What does this lookup table construction look like in code?  It’s always a joy when we can get such benefits from something so direct.  As a performance sidenote, it is very tempting to build a Map for character lookup, it feels very natural.  Unfortunantly the overhead of using Map in this particular case is high enough to be an issue, so using an array for character lookup is fast enough to be worth the effort.  It is a reminder of the constant trade-offs that need to be made when looking for performance.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Build the delta 1 table</span></span><br><span class="line"><span class="comment">/// If the char is in the string, it is the rightmost value,</span></span><br><span class="line"><span class="comment">/// otherwise it is the length of the pattern.</span></span><br><span class="line"><span class="keyword">let</span> buildDelta1 (pattern: string) =</span><br><span class="line">  <span class="keyword">let</span> patternLength = pattern.Length </span><br><span class="line"></span><br><span class="line">  [| <span class="number">0.</span><span class="number">.127</span> |]</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> x -&gt;</span><br><span class="line">      <span class="keyword">let</span> c = char x</span><br><span class="line">      <span class="keyword">let</span> index = pattern.LastIndexOf(c)</span><br><span class="line">      <span class="keyword">if</span> index = <span class="number">-1</span> <span class="keyword">then</span> patternLength <span class="keyword">else</span> patternLength - index - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>This is great, but Boyer and Moore didn’t stop there, they realized there is even more structure they can extract and leverage from within the pattern.  If a subpattern is repeated within the pattern, there is more that can be done, this is the second optimization.  It is focused on the subpattern anchored at the end of the pattern.  The primary reason for this is searching through the pattern starts at the end and moves backward.  it can use this information in cases where it have started matching against the pattern, but cannot match any further.  It gains the benefit from a repetition of a terminal subpattern, potentially allowing an optimization over the first methodology.</p><p>To build the delta 2 table it looks at the iteratively growing terminal subpatterns.  Looking at the previous example pattern “coffeecake”, that means “e” then “ke”, then “ake”, etc.  To look at the final “e”, although short is a pattern.  Understanding the circumstances to get partway through a match is important.  It is not looking for just another “e”, it specifically wants an “e” not preceded by a “k”.  This is an important distinction.  This is because it is trying to smartly shift to another part of the search string.  But it doesn’t need to do that when it has matched the “ke”, it needs it when there is an “e”, but can’t match the next letter “k”.  Knowing this allows the algorithm to do a smarter alignment if it gets a partial match “e”, but the subpattern stops matching at ‘k’. This is done for all terminal subpatterns. So next, is there another instance of “ke” not preceded by “a”.  Then is there another “ake” not preceded by “c”.  This goes through the entire set of terminal subpatterns.  This is only part of the case.  The other case is what if there is no “e” that isn’t preceded by a “k”.  In cases like this, it knows how far into the pattern match it is, and can do a larger shift as a result when it finds a character that doesn’t match.  Below is the resulting table of pattern shifts based on subpattern, as well as an example use.</p><pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Resulting lookup table for pattern indexes:0 (c): 19 1 (o): 182 (f): 17 3 (f): 16 4 (e): 155 (e): 146 (c): 137 (a): 128 (k):  59 (e):  1</pre><pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Example 1: String : Some coffee pairs well with coffeecake in the morning.Pattern: coffeecakePointer:         &#8593;</pre>Action: When it is matching backwards through the pattern, it has matched the 'e', but don't match the 'k'.  Here is where it leverages the knowledge that there is an 'e' not preceded by a 'k' pattern earlier. So it can shift 5 positions.<pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">String : Some coffee pairs well with coffeecake in the morning.Pattern:      coffeecakePointer:               &#8593;</pre>Action: As you can see, the shift aligned the 'e' between the main string and search string, attempting to optimize the search.<pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">Example 2: String : Small cake is not a match.Pattern: coffeecakePointer       &#8593;</pre>Action: Here is a different case.  It matchs the ' cake' part of the pattern.  Then it mismatch on the ' ' versus 'e'.  It also knows the terminal subpattern isn't seen again.  At this point it can jump past what it has already matched so far.<pre style="font-family: monospace; font-size: 10pt; background: #ffffff; color: #000000;border: none;">String : Small cake is not a match.Pattern:           coffeecakePointer:                    &#8593;</pre><p>Building this lookup table takes a bit more work than the delta1 table.  Searching for the best subpattern match within a string takes a couple steps.  This is the most complex part of the preprocessing since it needs to perform multiple scans through the pattern.  This is a good place to mention that Boyer-Moore does involve some overhead.  In many cases, building the preprocessing tables can dominate the overall search.  It is important to make this part as fast as possible.  For performance I use arrays, indexes, and mutables instead of passing strings around.  It is not my preference, but it is a necessary tradeoff.  The performance cost is too much to bear in this part of the algorithm.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note: rpr is an index from the end of pattern</span></span><br><span class="line"><span class="keyword">let</span> findRpr (pattern:string) (candidateStartIndex: int) (candidateStopIndex: int) :int =</span><br><span class="line">  <span class="keyword">let</span> patternLength = pattern.Length</span><br><span class="line">  <span class="keyword">let</span> candidateLength = candidateStopIndex - candidateStartIndex + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">rec</span> findRpr' i =</span><br><span class="line">    <span class="keyword">if</span> i &gt;= patternLength || i &gt;= candidateLength <span class="keyword">then</span> i</span><br><span class="line">    <span class="keyword">elif</span> pattern.[patternLength - <span class="number">1</span> - i] &lt;&gt; pattern.[candidateStartIndex + (candidateLength - <span class="number">1</span> - i)] <span class="keyword">then</span> i</span><br><span class="line">    <span class="keyword">else</span> findRpr' (i + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  findRpr' <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Check if the pattern starts with the suffix starting at the defined index</span></span><br><span class="line"><span class="comment">/// For my purposes, this is faster than String.StartsWith</span></span><br><span class="line"><span class="keyword">let</span> startsWithSuffix (pattern: string) (subPatternStart: int) :bool =</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">rec</span> startsWithSuffix' i j =</span><br><span class="line">    <span class="keyword">if</span> j = pattern.Length <span class="keyword">then</span> <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">elif</span> i = pattern.Length <span class="keyword">then</span> <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">elif</span> pattern.[i] &lt;&gt; pattern.[j] <span class="keyword">then</span> <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">else</span> startsWithSuffix' (i + <span class="number">1</span>) (j + <span class="number">1</span>)</span><br><span class="line">  startsWithSuffix' <span class="number">0</span> subPatternStart</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Build delta2 table</span></span><br><span class="line"><span class="keyword">let</span> buildDelta2 (pattern: string) =</span><br><span class="line">  <span class="keyword">let</span> last = pattern.Length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> rprs = Array.create pattern.Length <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Find rprs for pattern</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> [| <span class="number">0</span> .. (last - <span class="number">1</span>) |] <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> rpr = findRpr pattern <span class="number">1</span> i</span><br><span class="line">    <span class="keyword">if</span> pattern.[i-rpr] &lt;&gt; pattern.[last-rpr] <span class="keyword">then</span></span><br><span class="line">      rprs.[last - rpr] &lt;- rpr + last - i</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If rpr isn't found for character, default to a shift based on index position (to handle rpr finding off left side</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> lastPrefix = last</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> [| last .. <span class="number">-1</span> .. <span class="number">0</span> |] <span class="keyword">do</span></span><br><span class="line">    <span class="comment">// Only do this where an rpr value wasn't found </span></span><br><span class="line">    <span class="keyword">if</span> startsWithSuffix pattern (i + <span class="number">1</span>) <span class="keyword">then</span> lastPrefix &lt;- i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> rprs.[i] = <span class="number">0</span> <span class="keyword">then</span> rprs.[i] &lt;- lastPrefix + last - i</span><br><span class="line"></span><br><span class="line">  rprs </span><br></pre></td></tr></table></figure><p>Now that I have the two parts, they just need put together.  At each step, the current character in the string attempts to match the current character in the pattern.  If it matches, it keeps trying to match the pattern.  If it doesn’t match, the search index is incremented the maximum of the delta1 and delta2 tables.  This allows the algorithm to jump as far as possible, using the available pattern structural information.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Find pattern in string using a Boyer-Moore fast string search method</span></span><br><span class="line"><span class="keyword">let</span> fastSearch (pattern: string) (s: string) :int option =</span><br><span class="line">  <span class="keyword">let</span> delta1 = buildDelta1 pattern</span><br><span class="line">  <span class="keyword">let</span> delta2 = buildDelta2 pattern</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">rec</span> fastSearch' stringPosition patternPosition =</span><br><span class="line">    <span class="keyword">if</span> patternPosition &lt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      None</span><br><span class="line">    <span class="keyword">elif</span> stringPosition &gt;= s.Length <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// At end of string, pattern not found</span></span><br><span class="line">      None</span><br><span class="line">    <span class="keyword">elif</span> patternPosition = <span class="number">0</span> &amp;&amp; s.[stringPosition] = pattern.[patternPosition] <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// At the end of pattern, match found</span></span><br><span class="line">      Some stringPosition</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="comment">// If chars match, keep comparing (decrement both stringPosition &amp; patternPosition)</span></span><br><span class="line">      <span class="comment">// If chars don't match, jump ahead (stringPosition jumps by max of delta1 and delta2 tables, patternPosition is reset to end of pattern)</span></span><br><span class="line">      <span class="keyword">let</span> (stringPosition', patternPosition') = </span><br><span class="line">        <span class="keyword">if</span> s.[stringPosition] = pattern.[patternPosition] <span class="keyword">then</span></span><br><span class="line">          (stringPosition - <span class="number">1</span>, patternPosition - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          (stringPosition + max (delta1.[int s.[stringPosition]]) (delta2.[patternPosition]), pattern.Length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">      fastSearch' stringPosition' patternPosition'</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> pattern.Length &gt; s.Length <span class="keyword">then</span></span><br><span class="line">    <span class="comment">// If pattern is longer than the string, it can't be found</span></span><br><span class="line">    None</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">// Start searching</span></span><br><span class="line">    fastSearch' (pattern.Length - <span class="number">1</span>) (pattern.Length - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>In a nutshell, these are the not-so-secret weapons of the algorithm.  As I’ve walked through some methods and examples, it becomes obvious it can leverage internal structure to implement smart jumps through the string.  These can provide orders of magnitude larger jumps than a naive search, which translates into a pretty hefty performance boost. Intuitively this makes sense, but a benchmark helps to provide some more concrete data.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">|      Method | StringSize | PatternSize |         Mean |      Error |     StdDev |       Median |     Gen 0 |  Gen 1 | Gen 2 | Allocated |</span><br><span class="line">|------------ |----------- |------------ |-------------:|-----------:|-----------:|-------------:|----------:|-------:|------:|----------:|</span><br><span class="line">|  fastSearch |      10000 |          10 |    12.295 us |  0.0432 us |  0.0383 us |    12.294 us |    5.3711 |      - |     - |     33 KB |</span><br><span class="line">| naiveSearch |      10000 |          10 |    69.570 us |  0.1936 us |  0.1810 us |    69.589 us |   53.1006 |      - |     - |    326 KB |</span><br><span class="line">|  fastSearch |      10000 |          50 |     8.068 us |  0.1575 us |  0.1992 us |     8.178 us |    2.4719 |      - |     - |     15 KB |</span><br><span class="line">| naiveSearch |      10000 |          50 |    71.696 us |  0.2221 us |  0.2077 us |    71.774 us |   53.4668 |      - |     - |    328 KB |</span><br><span class="line">|  fastSearch |      10000 |         100 |     9.702 us |  0.1869 us |  0.2494 us |     9.852 us |    2.7924 |      - |     - |     17 KB |</span><br><span class="line">| naiveSearch |      10000 |         100 |    73.313 us |  0.1421 us |  0.1329 us |    73.284 us |   54.0771 |      - |     - |    331 KB |</span><br><span class="line">|  fastSearch |      10000 |        1000 |    41.977 us |  0.2469 us |  0.2309 us |    42.120 us |    9.8877 | 0.2441 |     - |     61 KB |</span><br><span class="line">| naiveSearch |      10000 |        1000 |    76.811 us |  0.1456 us |  0.1362 us |    76.796 us |   58.9600 |      - |     - |    362 KB |</span><br><span class="line">|  fastSearch |    1000000 |          10 |   989.763 us |  1.5934 us |  1.4905 us |   989.457 us |  476.5625 |      - |     - |  2,921 KB |</span><br><span class="line">| naiveSearch |    1000000 |          10 | 7,069.001 us | 29.2355 us | 27.3469 us | 7,068.265 us | 5312.5000 |      - |     - | 32,548 KB |</span><br><span class="line">|  fastSearch |    1000000 |          50 |   384.506 us |  0.5249 us |  0.4910 us |   384.562 us |  176.2695 | 0.4883 |     - |  1,081 KB |</span><br><span class="line">| naiveSearch |    1000000 |          50 | 6,928.350 us | 22.2543 us | 20.8167 us | 6,920.000 us | 5312.5000 |      - |     - | 32,549 KB |</span><br><span class="line">|  fastSearch |    1000000 |         100 |   266.840 us |  0.7624 us |  0.6759 us |   266.723 us |  120.6055 |      - |     - |    740 KB |</span><br><span class="line">| naiveSearch |    1000000 |         100 | 7,011.172 us | 77.9405 us | 72.9055 us | 6,968.868 us | 5312.5000 |      - |     - | 32,555 KB |</span><br><span class="line">|  fastSearch |    1000000 |        1000 |   433.229 us |  0.8704 us |  0.7716 us |   433.164 us |  191.4063 | 2.9297 |     - |  1,173 KB |</span><br><span class="line">| naiveSearch |    1000000 |        1000 | 6,994.461 us |  9.9059 us | 15.1274 us | 6,994.001 us | 5312.5000 |      - |     - | 32,580 KB |</span><br></pre></td></tr></table></figure><p>As always, you have to take benchmarks with a grain of salt, but the results do match our intuition of a performance boost.  As I mentioned earlier, the benefits can be highly dependent upon not only the length of the string and pattern, but of the strucutre of the data itself.  It at least shows on the surface what is possible.  Hopefully you have enjoyed this dive into the Boyer-Moore string search.  If you found this interesting, search can be a pretty deep topic and I encourage you to go deeper.  Even if you don’t, I hope you at least take some inspiration regarding interesting ways to solve difficult problems.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Text search is something we do everyday.  Fast and reliable search is such a staple, it is easy to forget there can be elegance to those underlying mechanisms.  It is time to pull back the curtain and dig into one of the foundational search algorithms, the Boyer-Moore fast string search.  It is a good algorithm to demonstrate some of the methods used to achieve fast search results.  As typical, I’ll reach for &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; to show implementation details.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Algorithms" scheme="http://codesuji.com/tags/Algorithms/"/>
    
      <category term="Search" scheme="http://codesuji.com/tags/Search/"/>
    
      <category term="Benchmarking" scheme="http://codesuji.com/tags/Benchmarking/"/>
    
  </entry>
  
  <entry>
    <title>Data in Motion - Drought Map</title>
    <link href="http://codesuji.com/2021/07/28/Data-in-Motion-Drought/"/>
    <id>http://codesuji.com/2021/07/28/Data-in-Motion-Drought/</id>
    <published>2021-07-29T00:18:18.000Z</published>
    <updated>2021-11-23T13:18:14.333Z</updated>
    
    <content type="html"><![CDATA[<p>Visualizations like charts and graphs can be powerful tools, but they are often static.  An even more powerful story can be told over time with animations and videos.  Using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>, along with a couple tools, I’ll do just that.  Today’s focus is on the Palmer Drought Severity data for the U.S. over that last one-hundred years.  This is a lighter post, so hopefully the video is mesmerizing enough to compensate for any lack of depth.</p><a id="more"></a><video width="600" height="375" controls><br>  <source src="/images/dim1/drought.webm" type="video/webm"><br></video><p>How is this accomplished?  I reach into F#’s bag of tricks to leverage Deedle, Plotly.NET, and ffmpeg in order to transform a series of data files into a singular video showing county-level drought data from 1900-2016.  Together these bring static data into a dynamic representation.  For reference, the Palmer Drought Severity Index (PDSI) typically ranges from -10 (dry) to 10 (wet).  Putting this all together is pretty straight-forward, but I wanted to call out a couple specific parts.  For this particular example Deedle is overkill, but pairing it with Plotly.NET can often be useful in more complex situations.  Plotly offers some nice customization options, which I take advantage of below.  Once all the images are generated with Plotly, F# can shell out to ffmpeg to perform the video assembly.   I do this in two parts, creating both an mp4 and webm file.</p><p>Source Data: Centers for Disease Control and Prevention. National Environmental Public Health Tracking Network. <a href="https://data.cdc.gov/Environmental-Health-Toxicology/Palmer-Drought-Severity-Index-1895-2016/en5r-5ds4" target="_blank" rel="noopener">https://data.cdc.gov/Environmental-Health-Toxicology/Palmer-Drought-Severity-Index-1895-2016/en5r-5ds4</a></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Diagnostics</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Deedle</span><br><span class="line"><span class="keyword">open</span> Newtonsoft.Json</span><br><span class="line"><span class="keyword">open</span> Plotly.NET</span><br><span class="line"><span class="keyword">open</span> Plotly.NET.ImageExport</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert a datafile into an imagefile name (with no extension)</span></span><br><span class="line"><span class="keyword">let</span> buildImageNameNoExtension i _dataFileName =</span><br><span class="line">  Path.Combine(<span class="string">"images"</span>, sprintf <span class="string">"image_%04d"</span> i)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert a datafile name into a year-month chart title</span></span><br><span class="line"><span class="keyword">let</span> fileNameToTitle dataFileName =</span><br><span class="line">  <span class="keyword">let</span> regex = Text.RegularExpressions.Regex(<span class="string">"drought_(\d+)_(\d+).csv"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> matches = regex.Match(dataFileName)</span><br><span class="line">  <span class="keyword">let</span> year = matches.Groups.[<span class="number">1</span>].Captures.[<span class="number">0</span>].ToString() |&gt; int</span><br><span class="line">  <span class="keyword">let</span> month = matches.Groups.[<span class="number">2</span>].Captures.[<span class="number">0</span>].ToString() |&gt; int</span><br><span class="line"></span><br><span class="line">  sprintf <span class="string">"%4d-%02d"</span> year month</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Json object of county code to map coordinates polygon</span></span><br><span class="line"><span class="comment">/// Source: https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json</span></span><br><span class="line"><span class="keyword">let</span> geoJson =</span><br><span class="line">  IO.File.ReadAllText(<span class="string">"data/geojson-counties-fips.json"</span>)</span><br><span class="line">  |&gt; JsonConvert.DeserializeObject</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Build map of drought data</span></span><br><span class="line"><span class="keyword">let</span> buildMap index dataFile =</span><br><span class="line">  <span class="keyword">let</span> title = fileNameToTitle dataFile</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> data = Frame.ReadCsv(dataFile, <span class="keyword">false</span>, separators = <span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fips =</span><br><span class="line">    data</span><br><span class="line">    |&gt; Frame.getCol <span class="string">"Column4"</span> <span class="comment">// "fips"</span></span><br><span class="line">    |&gt; Series.values</span><br><span class="line">    |&gt; Array.ofSeq</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pdsi =</span><br><span class="line">    data</span><br><span class="line">    |&gt; Frame.getCol <span class="string">"Column5"</span> <span class="comment">// "pdsi"</span></span><br><span class="line">    |&gt; Series.values</span><br><span class="line">    |&gt; Array.ofSeq</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> chart =</span><br><span class="line">    Chart.ChoroplethMap (</span><br><span class="line">      locations = fips,</span><br><span class="line">      z = pdsi,</span><br><span class="line">      Locationmode = StyleParam.LocationFormat.GeoJson_Id,</span><br><span class="line">      GeoJson = geoJson,</span><br><span class="line">      FeatureIdKey = <span class="string">"id"</span>,</span><br><span class="line">      Colorscale = </span><br><span class="line">        StyleParam.Colorscale.Custom([</span><br><span class="line">          (<span class="number">0.0</span> , <span class="string">"#5d0c06"</span>)</span><br><span class="line">          (<span class="number">0.25</span>, <span class="string">"#8d0c06"</span>)</span><br><span class="line">          (<span class="number">0.5</span> , <span class="string">"#dedede"</span>)</span><br><span class="line">          (<span class="number">0.75</span>, <span class="string">"#060c8d"</span>)</span><br><span class="line">          (<span class="number">1.0</span> , <span class="string">"#060c5d"</span>) ]),</span><br><span class="line">      Zmin = <span class="number">-10.0</span>,</span><br><span class="line">      Zmax = <span class="number">10.0</span>)</span><br><span class="line">    |&gt; Chart.withMap (Geo.init (Scope = StyleParam.GeoScope.Usa))</span><br><span class="line">    |&gt; Chart.withColorBarStyle (<span class="string">"PDSI"</span>, Length = <span class="number">0.75</span>)</span><br><span class="line">    |&gt; Chart.withTitle (title=title, Titlefont=Font.init(Family=StyleParam.FontFamily.Courier_New, Size=<span class="number">32.</span>))</span><br><span class="line">    |&gt; Chart.withSize (<span class="number">800.</span>, <span class="number">500.</span>)</span><br><span class="line">    |&gt; Chart.savePNG (path = buildImageNameNoExtension index dataFile, Width = <span class="number">800</span>, Height = <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Execute command</span></span><br><span class="line"><span class="keyword">let</span> exec command args =</span><br><span class="line">  <span class="keyword">let</span> startInfo = ProcessStartInfo(FileName = command, Arguments = args)</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> Process(StartInfo = startInfo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> success = p.Start()</span><br><span class="line">  <span class="keyword">if</span> not success <span class="keyword">then</span></span><br><span class="line">    printfn <span class="string">"Process Failed"</span></span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    p.WaitForExit()</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Build a video (mp4) using all pngs in the sourceDir</span></span><br><span class="line"><span class="keyword">let</span> buildVideo sourceDir dstFile =</span><br><span class="line">  exec <span class="string">"ffmpeg"</span> $<span class="string">"-y -i &#123;sourceDir&#125;/image_%%04d.png -c:v libx264 -vf fps=120 -pix_fmt yuv420p &#123;dstFile&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert an mp4 to a different file format (i.e. webm or .gif)</span></span><br><span class="line"><span class="keyword">let</span> convertVideo (inputFile: string) (outputFile: string) =</span><br><span class="line">  exec <span class="string">"ffmpeg"</span> $<span class="string">"-i &#123;inputFile&#125; &#123;outputFile&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="comment">// Create map images for each month of the data series</span></span><br><span class="line">  <span class="comment">// Name the images numerically, for consumption by ffmpeg  </span></span><br><span class="line">  IO.Directory.GetFiles(<span class="string">"./data"</span>, <span class="string">"drought*.csv"</span>)</span><br><span class="line">  |&gt; Array.sort</span><br><span class="line">  |&gt; Array.mapi (<span class="keyword">fun</span> i x -&gt; (i, x))</span><br><span class="line">  |&gt; Array.iter (<span class="keyword">fun</span> (i, x) -&gt; buildMap i x)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Combine images into a video</span></span><br><span class="line">  buildVideo <span class="string">"images"</span> <span class="string">"drought.mp4"</span> |&gt; ignore</span><br><span class="line">  convertVideo <span class="string">"drought.mp4"</span> <span class="string">"drought.webm"</span> |&gt; ignore</span><br><span class="line"></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Visualizations like charts and graphs can be powerful tools, but they are often static.  An even more powerful story can be told over time with animations and videos.  Using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;, along with a couple tools, I’ll do just that.  Today’s focus is on the Palmer Drought Severity data for the U.S. over that last one-hundred years.  This is a lighter post, so hopefully the video is mesmerizing enough to compensate for any lack of depth.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Data" scheme="http://codesuji.com/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>AC-3 Constraint Solving with F#</title>
    <link href="http://codesuji.com/2021/04/23/F-AC3-Solving/"/>
    <id>http://codesuji.com/2021/04/23/F-AC3-Solving/</id>
    <published>2021-04-24T03:01:45.000Z</published>
    <updated>2023-01-02T03:42:47.164Z</updated>
    
    <content type="html"><![CDATA[<p>Constraint solvers are a useful tool to have in the toolbox.  You can pull one off the shelf, but there is value in understanding how they work.  To that end, I will explore implementing the AC-3 constraint solver using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>.</p><a id="more"></a><p>The field of Constraint Satisfaction Problems (CSP) can be pretty vast.  The variety of solvers provide their own balance of benefits and approaches to a problem.  To provide some focus, it is worth discussing the general approach of the AC-3 constraint solver algorithm.  Before proceeding, I need to provide a couple definitions.  A CSP consists of several components.  It starts with variables.  Those variables can have possible values (domain).  Variables have relationships between each other (arc constraints).  A constraint is ultimately just a function which defines valid combinations of values with respect to a set of variables.</p><p>It often helps to see how a problem is defined and how the components interact, so here is a simple example. Below defines three variables (A, B, C), all with their own set of possible values.  Additionally, there are some constraints.  A must be even, so its possible values are reduced from { 1, 2, 3 } to { 2 }.  B must be odd, so it is reduced to { 1, 3 }.  A must be less than B, so A is still { 2 } and B has to be { 3 } (since 1 will never be greater than any value in A, in this case 2).  C must be greater than A, which means C is reduced to { 3, 4, 5, 6 } (1 and 2 will never be greater than 2).  This is generally how the components interact.  If this doesn’t quite click for you yet, bear with me, I have more explanations below that will help solidify where this is all going.</p><p>Variables:<br>A = { 1, 2, 3 }<br>B = { 1, 2, 3, 4 }<br>C = { 1, 2, 3, 4, 5, 6 }</p><p>Constraints:<br>A, even()<br>B, odd()<br>A, B, lessThan()<br>C, A, greaterThan()</p><p>The AC-3 algorithm makes two passes, one for unary constraints and another for binary constraints.  These passes reduce the domain of variables, eliminating impossible values based on those constraints.  Unary constraints are pretty straight forward, if a value in the domain fails the constraint (returns false), it is eliminated.  Like the previous example, if “A must be even”, odd numbers are removed from A’s domain.  Binary constraints are more involved.  The same rules apply, but it is applied with respect to two variables.  This has the property that constraints can have a cascading effect across variables and their domains; the algorithm needs a way to handle this.  It uses a work queue.  As a variable’s domain is modified, it’s arc neighbors are added onto the work queue.  This ensures the necessary processing is performed as long as domains keep changing.  At some point all variables’ domains are reduced as much as possible, and the work queue empties out.  Once all of this is done, if a variable domain is empty, then the solve “fails”.  There are no possible provided values for at least one of the variables that can adhere to the provided set of constraints.  On the other hand, if each variable has at least one value in its domain, then the solution is considered arc consistent, and the reduced domains are provided back to the caller.  With this brief description out of the way, I’ll dive right into the code and add more details as I move along.  So, like any other F# program, I need some good types to define the problem,  I’m also going to package the logic into a module.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Perform AC-3 constraint solving</span></span><br><span class="line"><span class="meta">[&lt;RequireQualifiedAccessAttribute&gt;]</span></span><br><span class="line"><span class="keyword">module</span> Ac3 =</span><br><span class="line">  <span class="comment">/// Variable domain</span></span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">Domain</span> </span>= int list</span><br><span class="line">  <span class="comment">/// Variable Id (for lookup in map)</span></span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">Id</span> </span>= int</span><br><span class="line">  <span class="comment">/// Variables (key=id, value=domain)</span></span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">Variables</span> </span>= Map&lt;Id, Domain&gt;</span><br><span class="line">  <span class="comment">/// List of unary constraints for variables (&lt;variable id&gt;, &lt;constraint function&gt;)</span></span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">UnaryConstraints</span> </span>= (Id * (int -&gt; bool)) list</span><br><span class="line">  <span class="comment">/// List of binary constraints for variables (&lt;variable id1&gt;, &lt;variable id2&gt;, &lt;constraint function&gt;)</span></span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">BinaryConstraints</span> </span>= (Id * Id * (int -&gt; int -&gt; bool)) list</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Convert an informal list of variables to the Ac3.Variables type</span></span><br><span class="line">  <span class="keyword">let</span> listToVariables (variables: (int list) list) :Variables =</span><br><span class="line">    variables</span><br><span class="line">    |&gt; List.mapi (<span class="keyword">fun</span> i x -&gt; (i, x))</span><br><span class="line">    |&gt; Map.ofList</span><br></pre></td></tr></table></figure><p>Performing domain reduction based on the unary constraints is the first major task.  Conceptually it is a relatively straightforward process.  Process each constraint separately.  For each variable, iterate through each value of it’s respective domain.  Using the constraint, filter out values that won’t work.  Wrap this all in some recursive calls, and return the reduced variable domains.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Reduce a variable's domain based on unary constraints</span></span><br><span class="line"><span class="comment">/// Return the resulting set of Variables with updated domain(s)</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> <span class="keyword">private</span> ucReduce (uc: UnaryConstraints) (variables: Variables) :Variables =</span><br><span class="line">  <span class="comment">// Iterate through all unary constraints, for each impacted variable, update it's domain</span></span><br><span class="line">  <span class="keyword">match</span> uc <span class="keyword">with</span></span><br><span class="line">  | h :: t -&gt;</span><br><span class="line">      <span class="keyword">let</span> (id, f) = h</span><br><span class="line">      <span class="keyword">let</span> d' =</span><br><span class="line">        variables.Item id</span><br><span class="line">        |&gt; List.filter f</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> variables' =</span><br><span class="line">        variables</span><br><span class="line">        |&gt; Map.remove id</span><br><span class="line">        |&gt; Map.add id d'</span><br><span class="line"></span><br><span class="line">      ucReduce t variables'</span><br><span class="line">  | _ -&gt; variables</span><br></pre></td></tr></table></figure><p>The second major task is processing the binary constraints.  Since these functions define the interaction of two variables, it is a bit more involved.  It works off a queue of variables.  After pulling a variable off the queue, it does a domain reduction based on every binary constraint that applies to it.  This means for each constraint, iterating through it’s possible values and a neighbor’s possible values; and removing impossible combinations.  During this process, if it reduces it’s domain, then the algorithm puts all of it’s neighbors on the work queue.  This is because if a variable’s domain is reduced, it is possible that arc-connected variables could now have their domains reduced further.  It is a reasonably efficient method to continuously check all impacted arc constraints without processing more than it needs to.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Get a variable's neighbors (id list)</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> neighbors (bc: BinaryConstraints) (id: Id) :int list =</span><br><span class="line">  <span class="comment">// Get neighbors of a variable (this is based on the binary constraints)</span></span><br><span class="line">  bc</span><br><span class="line">  |&gt; List.filter (<span class="keyword">fun</span> (id1, id2, _) -&gt; id1 = id || id2 = id)</span><br><span class="line">  |&gt; List.map (<span class="keyword">fun</span> (id1, id2, _) -&gt; <span class="keyword">if</span> id1 = id <span class="keyword">then</span> id2 <span class="keyword">else</span> id1)</span><br><span class="line">  |&gt; List.distinct</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Reduce a variable's domain for a specific variable set and function</span></span><br><span class="line"><span class="comment">/// Returns: (&lt;domain changed&gt;, &lt;reduced domain&gt;)</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> reduceDomain (variables: Variables) (bc: BinaryConstraints) (id: Id) :bool * Domain =</span><br><span class="line">  <span class="comment">// Get constraints associated with the variable (id)</span></span><br><span class="line">  <span class="keyword">let</span> relevantConstraints =</span><br><span class="line">    bc</span><br><span class="line">    |&gt; List.filter (<span class="keyword">fun</span> (id1, id2, _) -&gt; id1 = id || id2 = id)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Starting variable domain</span></span><br><span class="line">  <span class="keyword">let</span> d = variables.Item id</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Iterate through constraints, saving the variable's new domain into the state</span></span><br><span class="line">  <span class="comment">// The final result is the reduced domain for the variable (and whether it changed or not)</span></span><br><span class="line">  <span class="keyword">let</span> (_, d') =</span><br><span class="line">    relevantConstraints</span><br><span class="line">    |&gt; List.mapFold</span><br><span class="line">       (<span class="keyword">fun</span> state c -&gt;</span><br><span class="line">         <span class="comment">// Extract constraint parts</span></span><br><span class="line">         <span class="keyword">let</span> (id1, id2, f) = c </span><br><span class="line"></span><br><span class="line">         <span class="comment">// Update the variable's domain based on contraint</span></span><br><span class="line">         <span class="keyword">let</span> d' =</span><br><span class="line">           <span class="keyword">if</span> id1 = id <span class="keyword">then</span></span><br><span class="line">             <span class="comment">// id1 is the variable we are processing (use state), iterate through domain values of id2)</span></span><br><span class="line">             state</span><br><span class="line">             |&gt; List.filter (<span class="keyword">fun</span> v1 -&gt; (variables.Item id2)</span><br><span class="line">                                       |&gt; List.exists (<span class="keyword">fun</span> v2 -&gt; f v1 v2))</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">             <span class="comment">// id2 is the variable we are processing (use state), iterate through domain values of id1)</span></span><br><span class="line">             state</span><br><span class="line">             |&gt; List.filter (<span class="keyword">fun</span> v2 -&gt; (variables.Item id1)</span><br><span class="line">                                       |&gt; List.exists (<span class="keyword">fun</span> v1 -&gt; f v1 v2))</span><br><span class="line"></span><br><span class="line">         <span class="comment">// I don't care about the individual item result, I only care about the state (d' is the updated state of the domain)</span></span><br><span class="line">         (None, d'))</span><br><span class="line">       d</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Determine if the variable's domain is updated</span></span><br><span class="line">  <span class="keyword">let</span> changed = d.Length &lt;&gt; d'.Length</span><br><span class="line">  (changed, d')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Reduce a variable's domain based on binary constraints</span></span><br><span class="line"><span class="comment">/// Return the resulting set of Variables with updated domain(s)</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> bcReduce (bc: BinaryConstraints) (variables: Variables) :Variables =</span><br><span class="line">  <span class="comment">/// Perform a recursive domain reduction based on a variable worklist</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">rec</span> bcReduce' (variables: Variables) (workList: Id list) :Variables =</span><br><span class="line">    <span class="keyword">match</span> workList <span class="keyword">with</span></span><br><span class="line">    | id :: t -&gt;</span><br><span class="line">        <span class="keyword">let</span> (changed, d') = reduceDomain variables bc id</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> changed <span class="keyword">then</span></span><br><span class="line">          <span class="comment">// The variable's domain was changed, update the worklist and continue</span></span><br><span class="line">          <span class="keyword">let</span> variables' =</span><br><span class="line">            variables |&gt; Map.remove id |&gt; Map.add id d'</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> workList' = List.concat [ neighbors bc id; t ]</span><br><span class="line">          bcReduce' variables' workList'</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="comment">// The variable's domain was not changed, continue with remaining worklist</span></span><br><span class="line">          bcReduce' variables t</span><br><span class="line">    | _ -&gt; variables</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Define the initial working list of variables to process</span></span><br><span class="line">  <span class="keyword">let</span> workList =</span><br><span class="line">    bc</span><br><span class="line">    |&gt; List.map (<span class="keyword">fun</span> (id1, _, _) -&gt; id1)</span><br><span class="line">    |&gt; List.distinct</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Perform the arc constraint reduction</span></span><br><span class="line">  bcReduce' variables workList</span><br></pre></td></tr></table></figure><p>The solver puts all of the pieces together.  It takes the variables, and runs them through a unary constraint reducer, then the binary constraint reducer.  Once this is done it just needs to check for success.  If any of the domains are empty, then there are no valid solutions.  This is because during the reduction process it removes impossible values, leaving you with only possible values.  An empty domain is a result of no possibly valid values based on the constraints. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Solve AC-3 constraint problem for the set of unary and binary constraints, and the variable domains.</span></span><br><span class="line"><span class="keyword">let</span> solve (uc: UnaryConstraints) (bc: BinaryConstraints) (variables: Variables) =</span><br><span class="line">  <span class="comment">// Apply unary, then binary constraints </span></span><br><span class="line">  <span class="keyword">let</span> variables' = variables |&gt; ucReduce uc |&gt; bcReduce bc</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If any of domains are empty, no success</span></span><br><span class="line">  <span class="keyword">let</span> success =</span><br><span class="line">    variables'</span><br><span class="line">    |&gt; Map.exists (<span class="keyword">fun</span> k v -&gt; List.isEmpty v)</span><br><span class="line">    |&gt; not</span><br><span class="line"></span><br><span class="line">  (success, variables')</span><br></pre></td></tr></table></figure><p>Now that the building blocks are together, it is time to test a constraint satisfaction problem.  For example purposes, I’ll keep it simple.  There are 4 variables, all with the integer domain { 0, 1, 2, 3, 4, 5, 6, 7 8, 9, 10 }.  For reference sake, I’ll call the first variable (index 0), v0; the second variable (index 1), v1, etc.  For unary constraints, v0 &amp; v1 must be even numbers; v3 must be an odd number.  The combined binary constraints require that v0 &lt; v1 &lt; v2 &lt; v3.  Running <code>solve</code> will apply the AC-3 constraint solver and return true/false (where true means it is arc consistent, false means it is not).  If true, it also returns the [potentially] reduced variable domains based on arc consistency. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> even x = x % <span class="number">2</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> odd x = x % <span class="number">2</span> &lt;&gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> lessThan x y = x &lt; y</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> variables =</span><br><span class="line">  [ [ <span class="number">0</span> .. <span class="number">10</span> ]</span><br><span class="line">    [ <span class="number">0</span> .. <span class="number">10</span> ]</span><br><span class="line">    [ <span class="number">0</span> .. <span class="number">10</span> ]</span><br><span class="line">    [ <span class="number">0</span> .. <span class="number">10</span> ] ]</span><br><span class="line">  |&gt; Ac3.listToVariables</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uc =</span><br><span class="line">  [ (<span class="number">0</span>, even)</span><br><span class="line">    (<span class="number">1</span>, even)</span><br><span class="line">    (<span class="number">3</span>, odd) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bc =</span><br><span class="line">  [ (<span class="number">0</span>, <span class="number">1</span>, lessThan)</span><br><span class="line">    (<span class="number">1</span>, <span class="number">2</span>, lessThan)</span><br><span class="line">    (<span class="number">2</span>, <span class="number">3</span>, lessThan) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> (success, reducedVariables) = Ac3.solve uc bc variables</span><br><span class="line">printfn <span class="string">"%A"</span> success</span><br><span class="line">reducedVariables</span><br><span class="line">|&gt; Map.toList</span><br><span class="line">|&gt; List.iter (<span class="keyword">fun</span> x -&gt; printfn <span class="string">"%A"</span> x)</span><br></pre></td></tr></table></figure><p>The results below show that is arc consistent (yay).  They also show the reduced domains of the variables.  This is a good time to dig into the details.  For explanatory sake, I’ll focus on variable 0 (v0).  First, it’s unary constraint requires it to be even.  So immediately it’s domain has to be reduced to { 0, 2, 4, 6, 8, 10 }.  Second, the complete set of binary constraints require v0 &lt; v1 &lt; v2 &lt; v3.  Working backwards, v3 (which has be be odd due to it’s unary constraint), has a maximum value of 9.  This means the max of v2 is 8, and v1 is 7 (actually 6, since it has to be even).  This means the maximum value of v0 is 4.  So, the reduced domain for v0 is { 0, 2, 4 }, which we see below (perfect).  This example is really simple, but it helps to show how the impact of arc constraints cascading between variables. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line">(<span class="number">0</span>, [<span class="number">0</span>; <span class="number">2</span>; <span class="number">4</span>])</span><br><span class="line">(<span class="number">1</span>, [<span class="number">2</span>; <span class="number">4</span>; <span class="number">6</span>])</span><br><span class="line">(<span class="number">2</span>, [<span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span>; <span class="number">6</span>; <span class="number">7</span>; <span class="number">8</span>])</span><br><span class="line">(<span class="number">3</span>, [<span class="number">5</span>; <span class="number">7</span>; <span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>That was a good starting example, but it is time to test the solver a bit more.  I will add an additional constraint between variables 1 &amp; 3.  It isn’t enough to be less than, but there must be a larger gap (x + 4) between them.  The logic to reduce variable domains work as before, but some variables have been reduced even further.  The results show that this not impacts the domains of 1 and 3, but variable 0 as well; variable 2 seems unphased by this additional constraint.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> bc =</span><br><span class="line">    [ (<span class="number">0</span>, <span class="number">1</span>, lessThan)</span><br><span class="line">      (<span class="number">1</span>, <span class="number">2</span>, lessThan)</span><br><span class="line">      (<span class="number">2</span>, <span class="number">3</span>, lessThan)</span><br><span class="line">      (<span class="number">1</span>, <span class="number">3</span>, (<span class="keyword">fun</span> x y -&gt; x + <span class="number">4</span> &lt; y)) ]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Results:</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">(<span class="number">0</span>, [<span class="number">0</span>; <span class="number">2</span>])</span><br><span class="line">(<span class="number">1</span>, [<span class="number">2</span>; <span class="number">4</span>])</span><br><span class="line">(<span class="number">2</span>, [<span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span>; <span class="number">6</span>; <span class="number">7</span>; <span class="number">8</span>])</span><br><span class="line">(<span class="number">3</span>, [<span class="number">7</span>; <span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>These examples have been insightful, but failures teach too.  Now it is time to take a look at a set of constraints that don’t work.  The constraints up to this point set up a progression where variable 0 &lt; 1 &lt; 2 &lt; 3.  Adding a constraint that v3 must also be less than v0 induces a conflict.  The constraint solver finds this discrepancy.  The solver returns false, the real indicator; but the variable domains are empty as well (bad sign).</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> bc =</span><br><span class="line">    [ (<span class="number">0</span>, <span class="number">1</span>, lessThan)</span><br><span class="line">      (<span class="number">1</span>, <span class="number">2</span>, lessThan)</span><br><span class="line">      (<span class="number">2</span>, <span class="number">3</span>, lessThan)</span><br><span class="line">      (<span class="number">1</span>, <span class="number">3</span>, (<span class="keyword">fun</span> x y -&gt; x + <span class="number">4</span> &lt; y))</span><br><span class="line">      (<span class="number">3</span>, <span class="number">0</span>, lessThan) ]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Results:</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">(<span class="number">0</span>, [])</span><br><span class="line">(<span class="number">1</span>, [])</span><br><span class="line">(<span class="number">2</span>, [])</span><br><span class="line">(<span class="number">3</span>, [])</span><br></pre></td></tr></table></figure><p>These examples give a glimpse into the methodology of a constraint solver, specifically AC-3.  This has been fun.  I hope you enjoyed this small view into how F# can be used to build interesting things, like the AC-3 constraint solver.  There is an endless source of interesting problems, and having powerful tools in your toolbox can go a long way.  Until next time.</p><p><img src="/images/ac31/ac3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Constraint solvers are a useful tool to have in the toolbox.  You can pull one off the shelf, but there is value in understanding how they work.  To that end, I will explore implementing the AC-3 constraint solver using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Algorithms" scheme="http://codesuji.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>F# the Vim way</title>
    <link href="http://codesuji.com/2021/04/10/F-Vim/"/>
    <id>http://codesuji.com/2021/04/10/F-Vim/</id>
    <published>2021-04-11T02:47:42.000Z</published>
    <updated>2021-04-11T22:52:03.127Z</updated>
    
    <content type="html"><![CDATA[<p>When developing <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>, there is a nice selection of quality development environments to choose from.  One option that is often overlooked is Vim.  IDEs have some really nice functionality, but often I just need a good editor with the right plug-ins.  When it comes down to it, I’ll use whatever tools are necessary to get the job done.  But all things being equal, the more I can live in Vim, generally the happier I am.  The Vim muscle-memory built up over time has a strong pull toward a level of efficiency.  So for anyone who falls into that category, this is for you.</p><a id="more"></a><p>Like most vim-addicts, I have my beloved set of plug-ins and customizations to enhance my general working environment.  Although I can drone on about those, today I want to focus on a couple plug-ins that are specific to F#.  The first, and most obvious is <a href="https://ionide.io/Editors/Vim/overview.html" target="_blank" rel="noopener">Ionide-Vim</a>.  It is a sibling of the <a href="https://ionide.io/" target="_blank" rel="noopener">VSCode Ionide extension</a> for F# (which is awesome btw).  Like it’s relative, this leverages <a href="https://ionide.io/Tools/fsac.html" target="_blank" rel="noopener">FSAutoComplete</a> for a backend to provide the typical intellisense and context aware code navigation that most developers are acustom to.  Currently it leverages an <a href="https://github.com/autozimu/LanguageClient-neovim" target="_blank" rel="noopener">LSP plug-in</a> for integration into Vim.  Not to dig into configuration too much, but I use <a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">Plug</a>, and I added some mappings I do to better leverage Ionide and LSP functionality.  The relative parts of my vim config looks like below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Plug &apos;autozimu/LanguageClient-neovim&apos;, &#123;</span><br><span class="line">  \ &apos;branch&apos;: &apos;next&apos;,</span><br><span class="line">  \ &apos;do&apos;: &apos;bash install.sh&apos;,</span><br><span class="line">  \ &#125;</span><br><span class="line">Plug &apos;ionide/Ionide-vim&apos;, &#123;</span><br><span class="line">  \ &apos;do&apos;: &apos;make fsautocomplete&apos;,</span><br><span class="line">  \ &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">function LC_maps()</span><br><span class="line">  if has_key(g:LanguageClient_serverCommands, &amp;filetype)</span><br><span class="line">    nnoremap &lt;F5&gt; :call LanguageClient_contextMenu()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;silent&gt; K :call LanguageClient#textDocument_hover()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;silent&gt; gd :call LanguageClient#textDocument_definition()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;silent&gt; &lt;F2&gt; :call LanguageClient#textDocument_rename()&lt;CR&gt;</span><br><span class="line">    command! Symbols :call LanguageClient_textDocument_documentSymbol()</span><br><span class="line">    command! Fix :call LanguageClient_textDocument_codeAction()</span><br><span class="line"></span><br><span class="line">    nnoremap &lt;leader&gt;ld :call LanguageClient#textDocument_definition()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;leader&gt;lr :call LanguageClient#textDocument_rename()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;leader&gt;lf :call LanguageClient#textDocument_formatting()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;leader&gt;lt :call LanguageClient#textDocument_typeDefinition()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;leader&gt;lx :call LanguageClient#textDocument_references()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;leader&gt;la :call LanguageClient_workspace_applyEdit()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;leader&gt;lc :call LanguageClient#textDocument_completion()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;leader&gt;lh :call LanguageClient#textDocument_hover()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;leader&gt;ls :call LanguageClient_textDocument_documentSymbol()&lt;CR&gt;</span><br><span class="line">    nnoremap &lt;leader&gt;lm :call LanguageClient_contextMenu()&lt;CR&gt;</span><br><span class="line">  endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">autocmd FileType * call LC_maps()</span><br><span class="line"></span><br><span class="line">if has(&apos;nvim&apos;) &amp;&amp; exists(&apos;*nvim_open_win&apos;)</span><br><span class="line">  augroup FSharpShowTooltip</span><br><span class="line">    autocmd!</span><br><span class="line">    autocmd CursorHold *.fs,*.fsi,*.fsx call fsharp#showTooltip()</span><br><span class="line">  augroup END</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p>Additionally, <a href="https://github.com/garbas/vim-snipmate" target="_blank" rel="noopener">snipmate</a> and <a href="https://github.com/honza/vim-snippets" target="_blank" rel="noopener">snippets</a> are great for some simple snippet expansion.  If you’re not familiar with snippets, they are predefined code blocks (sometimes templated) that allow for quick expansion based on keywords.  It’s a small optimization, but it reduces some tedious typing.  The solution here is two parts.  One, snipmate provides the funationality of snippet expansion.  Two, snippets is a aggregation of user-provided language-specific snippets.  You can write your own (and I do), but the repo provides a strong jumping-off point if you just want to get started.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Plug &apos;tomtom/tlib_vim&apos;</span><br><span class="line">Plug &apos;MarcWeber/vim-addon-mw-utils&apos;</span><br><span class="line">Plug &apos;garbas/vim-snipmate&apos;</span><br><span class="line">Plug &apos;honza/vim-snippets&apos;</span><br></pre></td></tr></table></figure><p>Sometimes I need to whip up a quick .fsx script.  There is some typical boiler-plate I like to include.  I could copy a file, but I found it’s a lot easier to leverage vim templates.  Below is my current template, vim takes care of the rest.  The way it works is if you open a new file in vim and a template exists for the filetype, vim will populate the buffer with the template file.  If I open a new file, like <code>foo.fsx</code>, instead of being empty, it’s populated with the template file.  Again, it is one of these small optimizations that helps me get into the code I care about faster.  File: ~/.vim-templates/template.fsx </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env -S dotnet fsi</span><br><span class="line"></span><br><span class="line"><span class="comment">// Purpose: </span></span><br><span class="line"></span><br><span class="line">#r <span class="string">"nuget: Argu"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Argu</span><br><span class="line"></span><br><span class="line"><span class="comment">/// CLI Argument - command</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">CliCommand</span> </span>=</span><br><span class="line">  | Query</span><br><span class="line"></span><br><span class="line"><span class="comment">/// CLI Arguments available</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">CliArguments</span> </span>=</span><br><span class="line">  | <span class="meta">[&lt;MainCommand; ExactlyOnce; Mandatory&gt;]</span> Command <span class="keyword">of</span> command:CliCommand</span><br><span class="line">  | DryRun</span><br><span class="line"></span><br><span class="line">  <span class="keyword">interface</span> IArgParserTemplate <span class="keyword">with</span></span><br><span class="line">    <span class="keyword">member</span> this.Usage =</span><br><span class="line">      <span class="keyword">match</span> this <span class="keyword">with</span></span><br><span class="line">      | Command _ -&gt; <span class="string">"Command to execute [Query]"</span></span><br><span class="line">      | DryRun _ -&gt; <span class="string">"Dry run only"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// CLI Argument exit handler</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Exiter</span></span>() =</span><br><span class="line">  <span class="keyword">interface</span> IExiter <span class="keyword">with</span></span><br><span class="line">    <span class="keyword">member</span> __.Name = <span class="string">""</span></span><br><span class="line">    <span class="keyword">member</span> __.Exit (msg, _) =</span><br><span class="line">      printfn <span class="string">"%s"</span> msg</span><br><span class="line">      exit <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// CLI arguments (raw)</span></span><br><span class="line"><span class="keyword">let</span> argv = fsi.CommandLineArgs |&gt; Array.skip <span class="number">1</span></span><br><span class="line"><span class="comment">/// CLI arguments (structured)</span></span><br><span class="line"><span class="keyword">let</span> arguments :ParseResults&lt;CliArguments&gt; =</span><br><span class="line">  ArgumentParser</span><br><span class="line">    .Create&lt;CliArguments&gt;(programName = <span class="string">""</span>, checkStructure = <span class="keyword">false</span>, errorHandler = Exiter())</span><br><span class="line">    .Parse(argv)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perform command</span></span><br><span class="line"><span class="keyword">match</span> arguments.TryGetResult Command <span class="keyword">with</span></span><br><span class="line">| Some(Query) -&gt; printfn <span class="string">"querying..."</span></span><br><span class="line">| _ -&gt; printfn <span class="string">"Error: Command not supported."</span> </span><br></pre></td></tr></table></figure><p>Along with my other vim plug-ins and customizations, these F#-specific addtitions go a long way to making F# development in Vim a enjoyable experience.  Hopefully you found something useful to make your experience better as well.  Thanks, and happy vimming!<br>:wq</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When developing &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;, there is a nice selection of quality development environments to choose from.  One option that is often overlooked is Vim.  IDEs have some really nice functionality, but often I just need a good editor with the right plug-ins.  When it comes down to it, I’ll use whatever tools are necessary to get the job done.  But all things being equal, the more I can live in Vim, generally the happier I am.  The Vim muscle-memory built up over time has a strong pull toward a level of efficiency.  So for anyone who falls into that category, this is for you.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Tips" scheme="http://codesuji.com/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>F# Scripting</title>
    <link href="http://codesuji.com/2021/03/09/F-Scripting/"/>
    <id>http://codesuji.com/2021/03/09/F-Scripting/</id>
    <published>2021-03-10T00:32:09.000Z</published>
    <updated>2021-03-10T00:42:47.337Z</updated>
    
    <content type="html"><![CDATA[<p>Today I want to provide a quick overview of <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>‘s scripting capabilities and how they can integrate into your daily workflow.  Depending on your current perspective, you may not have considered using F# as a daily scripting tool.  If not, then you should.  Why leave all the untapped power just setting there?</p><a id="more"></a><p>The fact is F# is a great language to bring to the table when you are dealing with either adhoc or periodic scripting jobs.  It doesn’t need to be relegated to just compiled apps.  Taking a step back, in the earlier days F# had a reasonable scripting story.  It was cross-platform, you just needed <a href="https://www.mono-project.com/" target="_blank" rel="noopener">Mono</a> and you could do interactive F# or run <code>.fsx</code> files for scripting.  When .NET Core entered the scene things got a bit muddled.  In the initial incarnation, .NET Core didn’t support interactive F#.  This meant you still needed Mono for scripting, even if you were writing compiled apps for .NET Core.  In the grand scheme of things, not the largest problem in the world, but still a pain.  It also didn’t feel like a very good story to tell, dealing with multiple runtime targets, depending on what you needed to do.  Thankfully we’re past that now.  .NET Core has supported <code>dotnet fsi</code> to run interactive F# and scripting for awhile now.  For me, this closes one of those annoying gaps.</p><p>Where that leaves us today is writing F# scripts for general tasks is again a breeze.  I love bash as much as the next person, but F# brings way more power to the table when I need to do specialized work.  To show what I mean, I have a fictional scenario.  I want a script to do some simple loading of data into my <a href="https://redis.io" target="_blank" rel="noopener">Redis</a> instance.  For this I use the <a href="https://github.com/StackExchange/StackExchange.Redis/" target="_blank" rel="noopener">StackExchange.Redis</a> package.  This example is pretty simple.  I’ll read some data (config) files from a directory and load them into Redis for server consumption.  I’ll also read them back out, just to make sure things look as expected.</p><p>The first thing to notice in the script below is the <code>#!usr/bin/env</code> line at the top.  If you’re a Windows user, ignore this.  But for the Linux users, this allows me to run the script directly instead of needing to run <code>dotnet fsi load-config.fsx</code> from the command line.  The second item to notice is the <code>#r</code> line.  This is how I load packages for the script.  Here I use nuget to grab the <code>StackExchange.Redis</code> package (specifically version 2.2.4).  There are other options for how resources can be loaded and you should checkout the <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/tools/fsharp-interactive/" target="_blank" rel="noopener">F# Interactive</a> docs for more detail.  I’ve also choosen to load a custom library script with <code>#load</code>.  Beyond that, it’s a typical F# script.<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env -S dotnet fsi</span><br><span class="line">#r <span class="string">"nuget: StackExchange.Redis, 2.2.4"</span></span><br><span class="line">#load <span class="string">"/home/codesuji/toolkit/codesuji.os.fsx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> StackExchange.Redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> redis = ConnectionMultiplexer.Connect(<span class="string">"localhost"</span>);</span><br><span class="line"><span class="keyword">let</span> db = redis.GetDatabase()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> fsi.CommandLineArgs.Length &lt; <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">  printfn <span class="string">"Error: Missing config directory"</span></span><br><span class="line">  Environment.Exit <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> configPath = fsi.CommandLineArgs.[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load configs</span></span><br><span class="line">printfn <span class="string">"Loading configs from: %s"</span> configPath</span><br><span class="line">IO.Directory.GetFiles(configPath, <span class="string">"config*"</span>)</span><br><span class="line">|&gt; Array.iter(<span class="keyword">fun</span> filename -&gt; <span class="keyword">let</span> key = filename.Replace(configPath, <span class="string">""</span>).Replace(<span class="string">"/"</span>, <span class="string">""</span>)</span><br><span class="line">                              <span class="keyword">let</span> data = IO.File.ReadAllText(filename)</span><br><span class="line">                              <span class="keyword">let</span> success = db.StringSet(RedisKey(key), RedisValue(data))</span><br><span class="line">                              <span class="keyword">if</span> not success <span class="keyword">then</span> printfn <span class="string">"Error loading: %s"</span> filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Show configs</span></span><br><span class="line">[ <span class="string">"config-website-dev"</span>; <span class="string">"config-website-qa"</span>; <span class="string">"config-website-prod"</span>]</span><br><span class="line">|&gt; List.iter(<span class="keyword">fun</span> key -&gt; <span class="keyword">let</span> value = db.StringGet(RedisKey(key))</span><br><span class="line">                        printfn <span class="string">"%s =\n%s"</span> key (<span class="keyword">if</span> value.HasValue <span class="keyword">then</span> value.ToString() <span class="keyword">else</span> <span class="string">"undefined"</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>This can be run one of two ways (depending on your environment).  One is <code>dotnet fsi redis-load-configs.fsx</code>.  The second (my preference) is <code>./redis-load-configs.fsx</code>.  Below I show the simple script in action.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">~/examples$ ./redis-load-configs.fsx ./configs</span><br><span class="line">Loading configs from: ./configs</span><br><span class="line">config-website-dev =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"debug"</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">"timeout"</span>: <span class="number">30000</span>,</span><br><span class="line">  <span class="string">"suffix"</span>: <span class="string">"dev"</span>,</span><br><span class="line">  <span class="string">"features"</span>: &#123;</span><br><span class="line">    <span class="string">"foo"</span>: <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">"bar"</span>: <span class="keyword">true</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config-website-qa =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"debug"</span>: <span class="keyword">false</span>,</span><br><span class="line">  <span class="string">"timeout"</span>: <span class="number">10000</span>,</span><br><span class="line">  <span class="string">"suffix"</span>: <span class="string">"qa"</span>,</span><br><span class="line">  <span class="string">"features"</span>: &#123;</span><br><span class="line">    <span class="string">"foo"</span>: <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">"bar"</span>: <span class="keyword">false</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config-website-prod =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"debug"</span>: <span class="keyword">false</span>,</span><br><span class="line">  <span class="string">"timeout"</span>: <span class="number">10000</span>,</span><br><span class="line">  <span class="string">"suffix"</span>: <span class="string">"prod"</span>,</span><br><span class="line">  <span class="string">"features"</span>: &#123;</span><br><span class="line">    <span class="string">"foo"</span>: <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">"bar"</span>: <span class="keyword">false</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There isn’t much else to show.  The intent was to provide a quick little post of F# scripting and how you can use it to enhance your daily workflow.  So check it out.  With that, I say go forth and script!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I want to provide a quick overview of &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;‘s scripting capabilities and how they can integrate into your daily workflow.  Depending on your current perspective, you may not have considered using F# as a daily scripting tool.  If not, then you should.  Why leave all the untapped power just setting there?&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Tips" scheme="http://codesuji.com/tags/Tips/"/>
    
  </entry>
  
</feed>
