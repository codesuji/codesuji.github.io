<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codesuji</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codesuji.com/"/>
  <updated>2019-02-20T12:01:20.769Z</updated>
  <id>http://codesuji.com/</id>
  
  <author>
    <name>codesuji.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Building a Game with SignalR and F#</title>
    <link href="http://codesuji.com/2019/02/19/Building-Game-with-SignalR-and-F/"/>
    <id>http://codesuji.com/2019/02/19/Building-Game-with-SignalR-and-F/</id>
    <published>2019-02-20T02:17:32.000Z</published>
    <updated>2019-02-20T12:01:20.769Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s post is a brief example of how to implement a game using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://dotnet.microsoft.com/apps/aspnet/real-time" target="_blank" rel="noopener">SignalR</a>.  Creating a game for bots to play doesn’t have to be overly difficult.  Since interesting emergent qualities can arise from simple rules, it makes for a fun way to show off SignalR, beyond the standard chat application.  As this post will show, F# and SignalR work well together to create a nice communication framework without requiring a complex setup.</p><a id="more"></a><p>What is the game?  It is a bot-played game of multi-player snakes.  The rules are simple: eat food to grow, and run into opponents to slice off their tails.  To give players a goal, they accrue points based on their length over time.  It is a limited enough concept that a game engine and client can be built without overshadowing the SignalR aspects.  A picture, or movie, is worth a thousand words. So below is a sample of the game player viewer.  What is SignalR?  If you’re not familiar, it is a library that provides real-time capabilities to web applications.  Think websockets and other related technologies.  In this particular case there is a web viewer and a console app leveraging the capability.</p><p><img src="/images/sr1/sr1.gif" alt="GamePlay"></p><p>With definitions out of the way, time for the technical components.  We’ll use <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a>.  If you don’t have it installed, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>The post will be broken up into 3 primary parts: SignalR server, SignalR client, SignalR webviewer.  Discussing the specific game code will be out of scope, since it is the interactions that we really care about.</p><h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><p>For the server, <a href="https://github.com/giraffe-fsharp/Giraffe" target="_blank" rel="noopener">Giraffe</a> will be the base.  It will host the SignalR services as well as the weS viewer.  Creation is similiar to a typical dotnet app, but it’ll use the Giraffe template.  If you need the templates you can get them by doing <code>dotnet new -i &quot;giraffe-template::*&quot;</code>.  The Giraffe template includes a reference to the <code>Microsoft.AspNetCore.App</code> package, which includes SignalR, so no additional packages are necessary.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet new giraffe -lang F# -n GameServer  </span><br><span class="line">cd GameServer</span><br></pre></td></tr></table></figure><p>The Giraffe templates thankfully generate all the necessary boilerplate code for a webapp on top of Kestrel.  To simplify, we’ll focus on the components that need to be added to the server code.  Add the necessary namespaces, this is not only for SignalR, but to support the background game engine service.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System.Threading;</span><br><span class="line"><span class="keyword">open</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.SignalR</span><br></pre></td></tr></table></figure><p>The SignalR components must be added to the pipeline.  This is done in two places.  Modify <code>configureApp</code> to include <code>.UseSignalR(...)</code>.  Modify <code>configureServices</code> to include <code>services.AddSignalR()</code>.  In addition, the game runs as a hosted service.  To support this, modify <code>configureServices</code> to also includ <code>services.AddHostedService&lt;GameService&gt;()</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> configureApp (app : IApplicationBuilder) =</span><br><span class="line">  <span class="keyword">let</span> env = app.ApplicationServices.GetService&lt;IHostingEnvironment&gt;()</span><br><span class="line">  (<span class="keyword">match</span> env.IsDevelopment() <span class="keyword">with</span></span><br><span class="line">  | <span class="keyword">true</span>  -&gt; app.UseDeveloperExceptionPage()</span><br><span class="line">  | <span class="keyword">false</span> -&gt; app</span><br><span class="line">              .UseGiraffeErrorHandler errorHandler)</span><br><span class="line">              .UseCors(configureCors)</span><br><span class="line">              .UseStaticFiles()</span><br><span class="line">              .UseSignalR(<span class="keyword">fun</span> routes -&gt; routes.MapHub&lt;GameHub&gt;(PathString <span class="string">"/gameHub"</span>)) <span class="comment">// SignalR</span></span><br><span class="line">              .UseGiraffe(webApp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> configureServices (services : IServiceCollection) =</span><br><span class="line">  services.AddCors()    |&gt; ignore</span><br><span class="line">  services.AddSignalR() |&gt; ignore                    <span class="comment">// SignalR</span></span><br><span class="line">  services.AddGiraffe() |&gt; ignore</span><br><span class="line">  services.AddHostedService&lt;GameService&gt;() |&gt; ignore <span class="comment">// GameService</span></span><br></pre></td></tr></table></figure><p>Now that the components have been injected into the pipeline, they need to be created.  For this we’ll need to create a SignalR hub as well as a GameService.  Starting with the SignalR hub.  We can send messages to the SignalR clients by supplying a function name and payload: <code>this.Clients.All.SendAsync(&quot;Message&quot;, &quot;foo&quot;)</code>.  But, we can do better by defining the interface and making the calls type-safe, so let’s do that.  Below is defined the client api interface.  This ensures that calls from server to client match the required types.  For simplicity, the server only has 3 messages it can send to clients.</p><ul><li><p><code>LoginResponse</code> Reports success or failure, and their PlayerId if login was successful.</p></li><li><p><code>Message</code> Sends general notifications to clients.</p></li><li><p><code>GameState</code> Provides a serialized gamestate that clients act on.</p></li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">IClientApi</span> </span>= </span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">member</span> LoginResponse :bool * string -&gt; System.Threading.Tasks.Task</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">member</span> Message :string -&gt; System.Threading.Tasks.Task</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">member</span> GameState :string -&gt; System.Threading.Tasks.Task</span><br></pre></td></tr></table></figure><p>Now, to define the SignalR hub. This effectively is the listener that all clients connect to.  It leverages the <code>IClientApi</code> that was just created.  Here we need to write the handlers for messages accepted from clients.  Players have four different actions they can signal to the server.</p><ul><li><p><code>Login</code> For brevity, there is no authentication; provide a PlayerName and they get a PlayerId.  It also adds a player to the game.  The below code demonstrates how the server can send messages to all connected clients or just specific ones.</p></li><li><p><code>Logout</code> Removes a player from the game.</p></li><li><p><code>Turn</code> Players have one action they can perform, turn.  They move in a specified direction until they turn, then they proceed in that direction.</p></li><li><p><code>Send</code> Players can blast messages to all clients. Perhaps when the bots become self-aware they can taunt each other.</p></li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">GameHub</span> </span>() =</span><br><span class="line">  <span class="keyword">inherit</span> Hub&lt;IClientApi&gt; ()</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Accept client logins</span></span><br><span class="line">  <span class="keyword">member</span> this.Login (name :string) =</span><br><span class="line">    <span class="keyword">let</span> connectionId = this.Context.ConnectionId</span><br><span class="line">    <span class="keyword">let</span> success, playerId = addPlayer name</span><br><span class="line">    <span class="keyword">if</span> success <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// Tell client login success and their playerId</span></span><br><span class="line">      this.Clients.Client(connectionId).LoginResponse(<span class="keyword">true</span>, playerId)</span><br><span class="line">      <span class="comment">// Tell clients of new player </span></span><br><span class="line">      this.Clients.All.Message(sprintf <span class="string">"New Player: %s (%s)"</span> name playerId)</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="comment">// Tell client login failed</span></span><br><span class="line">      this.Clients.Client(connectionId).LoginResponse(<span class="keyword">false</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Handle client logout</span></span><br><span class="line">  <span class="keyword">member</span> this.Logout (playerId :string) =</span><br><span class="line">    removePlayer playerId</span><br><span class="line">    <span class="comment">// Tell clients of player logout</span></span><br><span class="line">    this.Clients.All.Message(sprintf <span class="string">"Player left: %s"</span> playerId)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Handle player changing direction</span></span><br><span class="line">  <span class="keyword">member</span> this.Turn (playerId :string, direction :string) = </span><br><span class="line">    updatePlayerDirection playerId direction</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Pass along message from one client to all clients</span></span><br><span class="line">  <span class="keyword">member</span> this.Send (message: string) = </span><br><span class="line">    this.Clients.All.Message(message)</span><br></pre></td></tr></table></figure><p>Now that the SignalR hub is done, it’s time to make the GameService that performs the server-side game logic as well as sending updated gamestate to players.  For this a background service is used.  At a set interval it processes current game state <code>updateState</code> and sends it out to all clients.  One note here: because I’ve choosen to use a client interface, the hub context is defined as <code>IHubContext&lt;GameHub, IClientApi&gt;)</code>.  If this wasn’t the case, it would be defined as <code>IHubContext&lt;GameHub&gt;</code> and messages would be sent using <code>this.HubContext.Clients.All.SendAsync(&quot;GameState&quot;, stateSerialized)</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">GameService</span> </span>(hubContext :IHubContext&lt;GameHub, IClientApi&gt;) =</span><br><span class="line">  <span class="keyword">inherit</span> BackgroundService ()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">member</span> this.HubContext :IHubContext&lt;GameHub, IClientApi&gt; = hubContext</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> this.ExecuteAsync (stoppingToken :CancellationToken) =</span><br><span class="line">    <span class="keyword">let</span> pingTimer = <span class="keyword">new</span> System.Timers.Timer(TurnFrequency)</span><br><span class="line">    pingTimer.Elapsed.Add(<span class="keyword">fun</span> _ -&gt; </span><br><span class="line">      updateState ()</span><br><span class="line">      <span class="keyword">let</span> stateSerialized = serializeGameState gState</span><br><span class="line">      this.HubContext.Clients.All.GameState(stateSerialized) |&gt; ignore)</span><br><span class="line"></span><br><span class="line">    pingTimer.Start()</span><br><span class="line">    Task.CompletedTask</span><br></pre></td></tr></table></figure><p>Beyond the specific game logic implementation, that’s all there is to the SignalR server.  It now will send out gamestate updates as well as handle client messages.</p><h1 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h1><p>The next step is building the client.  To do this, a dotnet console app will be created, and then the SignalR package is added.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang f# -n ClientFs</span><br><span class="line">cd ClientFs</span><br><span class="line">dotnet add package Microsoft.AspNetCore.SignalR.Client</span><br></pre></td></tr></table></figure><p>Once that is done, it needs the SignalR namespace. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.SignalR.Client</span><br></pre></td></tr></table></figure><p>The client needs to make a connection to the SignalR hub.  Similar to the server, the client needs some event handlers for server generated messages. </p><ul><li><p><code>LoginResponse</code> A successful login gives the client a playerId.</p></li><li><p><code>Message</code> - Handle general message notifications.</p></li><li><p><code>GameState</code> - When the server sends the current gamestate, the client evaluates and then sends an action message back.</p></li><li><p><code>Closed</code> - When the connection closes, what does the client do? In this case attempts to reconnect.</p></li></ul><p>Once the event handlers are setup, the client connects and performs a login.  The handlers take care of the rest.  As can be seen below, the client uses <code>InvokeAsync</code> to send messages to the server (as seen in the login).  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv = </span><br><span class="line">  <span class="comment">// Create connection to game server</span></span><br><span class="line">  <span class="keyword">let</span> connection = </span><br><span class="line">    (HubConnectionBuilder())</span><br><span class="line">      .WithUrl(<span class="string">"http://localhost:5000/gameHub"</span>)</span><br><span class="line">      .Build()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Event handlers</span></span><br><span class="line">  connection.On&lt;bool, string&gt;(<span class="string">"LoginResponse"</span>, <span class="keyword">fun</span> success id -&gt; loginResponseHandler connection success id) |&gt; ignore</span><br><span class="line">  connection.On&lt;string&gt;(<span class="string">"Message"</span>, <span class="keyword">fun</span> message -&gt; messageHandler message) |&gt; ignore</span><br><span class="line">  connection.On&lt;string&gt;(<span class="string">"GameState"</span>, <span class="keyword">fun</span> gameState -&gt; gameStateHandler connection gameState) |&gt; ignore</span><br><span class="line">  connection.add_Closed(<span class="keyword">fun</span> error -&gt; reconnect connection error)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Start connection and login</span></span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    connection.StartAsync().Wait()</span><br><span class="line">    connection.InvokeAsync(<span class="string">"login"</span>, myName).Wait()</span><br><span class="line">  <span class="keyword">with</span></span><br><span class="line">  | ex -&gt; printfn <span class="string">"Connection error %s"</span> (ex.ToString())</span><br><span class="line">          Environment.Exit(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Listen for 'q' to quit</span></span><br><span class="line">  getCommand connection</span><br><span class="line"></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>The handler logic is uninteresting, but it is useful to see the definitions that match with the handlers.  In addition, I’ve included the client’s response back to the server in the gameState handler.  Again, it uses InvokeAsync when contacting the server.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> loginResponseHandler (connection :HubConnection) (success :bool) (id :string) =</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> messageHandler (message :string) =</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gameStateHandler (connection :HubConnection) (gameState :string) =</span><br><span class="line">  ...</span><br><span class="line">  connection.InvokeAsync(<span class="string">"Turn"</span>, playerId, move.ToString()) |&gt; ignore</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> reconnect (connection :HubConnection) (error :<span class="symbol">'a</span>) = </span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h1 id="Game-Viewer"><a href="#Game-Viewer" class="headerlink" title="Game Viewer"></a>Game Viewer</h1><p>The final piece to address is the game viewer.  This comes in two parts: the layout and the code.  For the layout, we leverage Giraffe’s view engine.  It’s a simple view that contains an html canvas map, player list, messages display, and a state print (for debugging purposes).  This is also where supporting js libraries: signalr, <a href="https://jquery.com/" target="_blank" rel="noopener">jquery</a>, as well as the viewer game-server.js are included.  For this project, the files reside in the <code>WebRoot</code> directory.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Views =</span><br><span class="line">    <span class="keyword">open</span> GiraffeViewEngine</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> layout (content: XmlNode list) =</span><br><span class="line">        html [] [</span><br><span class="line">            head [] [</span><br><span class="line">                title []  [ encodedText <span class="string">"SnakeWorld"</span> ]</span><br><span class="line">                link [ _rel  <span class="string">"stylesheet"</span></span><br><span class="line">                       _type <span class="string">"text/css"</span></span><br><span class="line">                       _href <span class="string">"/main.css"</span> ]</span><br><span class="line">            ]</span><br><span class="line">            body [] content</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> index (model : Message) =</span><br><span class="line">      [</span><br><span class="line">        div [ _class <span class="string">"container"</span>] [ </span><br><span class="line">          div [ _class <span class="string">"row"</span> ] [</span><br><span class="line">            div [ _id <span class="string">"mapWrapper"</span>; _class <span class="string">"col-6"</span> ] [</span><br><span class="line">              canvas [ _id <span class="string">"worldMap"</span>; _class <span class="string">"world-map"</span>; _width <span class="string">"200"</span>; _height <span class="string">"200"</span> ] [];</span><br><span class="line">              div [ _id <span class="string">"playerList"</span>; _class <span class="string">"player-list"</span> ] []</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">          div [ _class <span class="string">"row"</span> ] [</span><br><span class="line">            div [ _id <span class="string">"message"</span>; _class <span class="string">"col-6"</span> ] []</span><br><span class="line">          ]</span><br><span class="line">          div [ _class <span class="string">"row"</span> ] [</span><br><span class="line">            div [ _id <span class="string">"currentState"</span>; _class <span class="string">"col-6"</span> ] []</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">        script [ _src <span class="string">"signalr.js"</span> ] []</span><br><span class="line">        script [ _src <span class="string">"jquery-3.3.1.min.js"</span> ] []</span><br><span class="line">        script [ _src <span class="string">"game-viewer.js"</span> ] []</span><br><span class="line">      ] |&gt; layout</span><br></pre></td></tr></table></figure><p>This may bring up a question, where did <code>signalr.js</code> come from?  Well, there is one more thing we need to add to the project.  In a real project I’d package this differently, but a quick and dirty way will do for now.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @aspnet/signalr</span><br><span class="line">cp ./node_modules/@aspnet/signalr/dist/browser/signalr.js ./WebRoot</span><br></pre></td></tr></table></figure><p>The code part of the game viewer is in javascript.  A similar process is required as was performed with the F# client.  A connection is created to the SignalR hub.  Then event handlers are wired up.  The viewer is read-only, to show messages and draw the map and player score list.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// SignalR connection</span></span><br><span class="line">const connection = <span class="keyword">new</span> signalR.HubConnectionBuilder().withUrl(<span class="string">"/gameHub"</span>).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Handle Connection start</span></span><br><span class="line">connection.start().catch(<span class="keyword">function</span> (err) &#123;</span><br><span class="line">  <span class="keyword">return</span> console.error(err.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Handle incoming message</span></span><br><span class="line">connection.on(<span class="string">"Message"</span>, <span class="keyword">function</span> (message) &#123;</span><br><span class="line">  $(<span class="string">"#message"</span>).text(message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Handle game state updates (draw map, update player list)</span></span><br><span class="line">connection.on(<span class="string">"GameState"</span>, <span class="keyword">function</span> (gameState) &#123;</span><br><span class="line">  handleGameState(JSON.parse(gameState))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>At this point, we have all the necessary parts to support a SignalR F# server, F# client, and javascript client.  That closes the loop on the communication framework.  From here the game logic can be added to the server and client, and drawing can be added to the viewer.  Those components are outside of the scope for this post.  I hope you’ve found this to be a useful guide to leveraging a SignalR implementation with F#.  Until next time…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s post is a brief example of how to implement a game using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://dotnet.microsoft.com/apps/aspnet/real-time&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SignalR&lt;/a&gt;.  Creating a game for bots to play doesn’t have to be overly difficult.  Since interesting emergent qualities can arise from simple rules, it makes for a fun way to show off SignalR, beyond the standard chat application.  As this post will show, F# and SignalR work well together to create a nice communication framework without requiring a complex setup.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="SignalR" scheme="http://codesuji.com/tags/SignalR/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.NET Sentiment Analysis</title>
    <link href="http://codesuji.com/2019/01/14/F-and-MLNet-Sentiment-Analysis/"/>
    <id>http://codesuji.com/2019/01/14/F-and-MLNet-Sentiment-Analysis/</id>
    <published>2019-01-15T00:01:26.000Z</published>
    <updated>2019-01-15T00:04:44.561Z</updated>
    
    <content type="html"><![CDATA[<p>Today we’ll look at performing sentiment analysis using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://dot.net/ml" target="_blank" rel="noopener">ML.NET</a>.  A new version (v0.9.0) has recently been released, so we use this as an opportunity to play with some new functionality.  The goal of today’s post will be to perform sentiment analysis on movie reviews from <a href="https://www.imdb.com" target="_blank" rel="noopener">IMDB</a>.</p><a id="more"></a><p><i>Note: ML.NET is still evolving, this post was written using Microsoft.ML v0.9.0.</i></p><p>We’ll use <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a>.  If you don’t have it installed, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>With that out of the way, create a console F# project, then add the ML.NET package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-SentimentAnalysis</span><br><span class="line">cd MLNet-SentimentAnalysis</span><br><span class="line">dotnet add package Microsoft.ML --version 0.9.0</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source we will use for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Sentiment+Labelled+Sentences" target="_blank" rel="noopener">UCI</a>.  The datafile can be found <a href="https://archive.ics.uci.edu/ml/machine-learning-databases/00331/" target="_blank" rel="noopener">here</a>.  The zip file contains examples for IMDB, Yelp, and Amazon, but we’ll stick with IMDB for this post.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/00331/sentiment%20labelled%20sentences.zip</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is no header row.  The tab separated columns represent 1) the review’s text 2) the sentiment where 1 = positive and 0 = negative.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Long, whiny and pointless.  0</span><br><span class="line">But I recommend waiting for their future efforts, let this one go.  0</span><br><span class="line">Excellent cast, story line, performances.  1</span><br><span class="line">Totally believable.  1</span><br></pre></td></tr></table></figure><p>Now that we have the data, time to get to the code.  First there is some namespace setup.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br></pre></td></tr></table></figure><p>Here are the data types to be used.  <code>SentimentData</code> is for loading data, <code>SentimentPrediction</code> is for performing predictions.  Here we also get our first taste of 0.9.0.  As we’ll see later we can use the <code>SentimentData</code> type for loading.  To enable this we will add <code>[&lt;LoadColumn(column position)&gt;]</code> to the members.  I have also included <code>Probability</code>.  This is not a real column, nor is it needed for training.  I have included it because it is a required field when extracting performance metrics.  I feel like I shouldn’t need to include it here, but for now it’s the only way I got it to work.  The <code>CreateTextReader</code> now accepts a datatype for driving the loading process.  Once the data reader is setup, we also perform a train/test split of 70/30, respectively.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">SentimentData</span> </span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(0)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SentimentText :string</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(1)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label :bool</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Need to add this column to extract metrics</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(2)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Probability :float32</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">SentimentPrediction</span> </span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SentimentData :string</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> PredictedLabel :bool</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Score :float32 </span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> ml = <span class="keyword">new</span> MLContext()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> reader = ml.Data.CreateTextReader&lt;SentimentData&gt;(separatorChar = '\t', hasHeader = <span class="keyword">true</span>)</span><br><span class="line">           </span><br><span class="line">  <span class="keyword">let</span> dataFile = <span class="string">"./data/imdb_labelled.txt"</span></span><br><span class="line">  <span class="keyword">let</span> allData = reader.Read(dataFile);</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">struct</span> (trainData, testData) = ml.Clustering.TrainTestSplit(allData, testFraction = <span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><p>The old way (see below) can still be used, but I find the above newness a nice, more concise, method to load data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pre v0.9.0 way</span></span><br><span class="line"><span class="keyword">let</span> reader = </span><br><span class="line">  ml.Data.CreateTextReader(</span><br><span class="line">    separatorChar = '\t',</span><br><span class="line">    hasHeader = <span class="keyword">true</span>,</span><br><span class="line">    columns = </span><br><span class="line">      [|</span><br><span class="line">          Data.TextLoader.Column(<span class="string">"SentimentText"</span>, Nullable Data.DataKind.Text, <span class="number">0</span>);</span><br><span class="line">          Data.TextLoader.Column(<span class="string">"Label"</span>, Nullable Data.DataKind.Bool, <span class="number">1</span>);</span><br><span class="line">          <span class="comment">// <span class="doctag">NOTE:</span> Need to add this column to extract metrics</span></span><br><span class="line">          Data.TextLoader.Column(<span class="string">"Probability"</span>, Nullable Data.DataKind.R4, <span class="number">2</span>)</span><br><span class="line">      |])</span><br></pre></td></tr></table></figure><p>ML.NET also provides methods to perform inspection into the dataset.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printfn <span class="string">"### Schema"</span></span><br><span class="line">allData.Schema</span><br><span class="line">|&gt; Seq.iter(<span class="keyword">fun</span> x-&gt; printfn <span class="string">"%A"</span> x)</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>Here is what a simple schema view looks like.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### Schema</span><br><span class="line">SentimentText: Text</span><br><span class="line">Label: Bool</span><br><span class="line">Probability: R4</span><br></pre></td></tr></table></figure><p>Next we setup the training pipeline.  There are other options, like <code>FastTree</code>, but we’ll use <code>FastForest</code> for today’s post.  We’ll also take the defaults, but as with previous trainers we’ve looked at, we can provide custom hyperparameters.  Once the pipeline is setup, we run <code>Fit</code> to build the model.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pipeline = </span><br><span class="line">  ml</span><br><span class="line">    .Transforms.Text.FeaturizeText(<span class="string">"SentimentText"</span>, <span class="string">"Features"</span>)</span><br><span class="line">    .Append(ml.BinaryClassification.Trainers.FastForest())</span><br><span class="line">    <span class="comment">// Example of custom hyperparameters</span></span><br><span class="line">    <span class="comment">// .Append(mlContext.BinaryClassification.Trainers.FastForest(numTrees = 500, numLeaves = 100, learningRate = 0.0001))</span></span><br><span class="line"><span class="keyword">let</span> model = pipeline.Fit(trainData)</span><br></pre></td></tr></table></figure><p>Any good machine learning process requires performance evaluation.  For that we’ll look at two aspects.  First, ML.NET provides evaluators for the trainers.  I’ve cherry-picked a couple of the available <code>BinaryClassificationEvaluator</code> metrics.  Second, we can perform a preview of the predictions, which allows us to see the sentiment value along with the actual and predicted labels, as well as the score.  There are other items in the view as well that I left in to show the extent of the reporting.  Then we can run evaluation’s against the train and test sets.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> displayEvaluation description data = </span><br><span class="line">  <span class="keyword">let</span> predictions = model.Transform data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> metrics = ml.BinaryClassification.Evaluate(predictions)</span><br><span class="line"></span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line">  printfn <span class="string">"### %s"</span> description</span><br><span class="line">  printfn <span class="string">"Accuracy          : %0.4f"</span> (metrics.Accuracy)</span><br><span class="line">  printfn <span class="string">"F1                : %0.4f"</span> (metrics.F1Score)</span><br><span class="line">  printfn <span class="string">"Positive Precision: %0.4f"</span> (metrics.PositivePrecision)</span><br><span class="line">  printfn <span class="string">"Positive Recall   : %0.4f"</span> (metrics.PositiveRecall)</span><br><span class="line">  printfn <span class="string">"Negative Precision: %0.4f"</span> (metrics.NegativePrecision)</span><br><span class="line">  printfn <span class="string">"Negative Recall   : %0.4f"</span> (metrics.NegativeRecall)</span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> preview = predictions.Preview()</span><br><span class="line">  preview.RowView</span><br><span class="line">  |&gt; Seq.take <span class="number">5</span></span><br><span class="line">  |&gt; Seq.iter(<span class="keyword">fun</span> row -&gt;</span><br><span class="line">     row.Values</span><br><span class="line">     |&gt; Array.iter (<span class="keyword">fun</span> kv -&gt; printfn <span class="string">"%s: %A"</span> kv.Key kv.Value)</span><br><span class="line">     printfn <span class="string">""</span>)</span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line"></span><br><span class="line">displayEvaluation <span class="string">"Train"</span> trainData</span><br><span class="line">displayEvaluation <span class="string">"Test"</span> testData</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>As imagined, the metrics are better when run against the training data.  The much better view of prediction quality is when run against the testing data.  As expected, the model doesn’t perform as well against the test set, there is probably some more work that needs done here.  The <code>Preview</code> is also useful when diagnosing more detailed problems, since it shows scores and label predictions.  Not related to the results, but the stratification value is used for the train/test split.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">### Train</span><br><span class="line">Accuracy          : 0.9120</span><br><span class="line">F1                : 0.9145</span><br><span class="line">Positive Precision: 0.8987</span><br><span class="line">Positive Recall   : 0.9309</span><br><span class="line">Negative Precision: 0.9267</span><br><span class="line">Negative Recall   : 0.8927</span><br><span class="line"></span><br><span class="line">SentimentText: Not sure who was more lost - the flat characters or the audience, nearly half of whom walked out.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.595641375f</span><br><span class="line">Features: Sparse vector of size 7818, 110 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -54.9804649f</span><br><span class="line"></span><br><span class="line">SentimentText: Attempting artiness with black &amp; white and clever camera angles, the movie disappointed - became even more ridiculous - as the acting was poor and the plot and lines almost non-existent.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.58837676f</span><br><span class="line">Features: Sparse vector of size 7818, 188 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -13.02876f</span><br><span class="line"></span><br><span class="line">SentimentText: Very little music or anything to speak of.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.753678203f</span><br><span class="line">Features: Sparse vector of size 7818, 52 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -5.37574673f</span><br><span class="line"></span><br><span class="line">SentimentText: The best scene in the movie was when Gerardo is trying to find a song that keeps running through his head.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.967485666f</span><br><span class="line">Features: Sparse vector of size 7818, 118 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 41.7043114f</span><br><span class="line"></span><br><span class="line">SentimentText: The rest of the movie lacks art, charm, meaning... If it&apos;s about emptiness, it works I guess because it&apos;s empty.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.929597497f</span><br><span class="line">Features: Sparse vector of size 7818, 119 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -15.2312632f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Test</span><br><span class="line">Accuracy          : 0.6890</span><br><span class="line">F1                : 0.6923</span><br><span class="line">Positive Precision: 0.6471</span><br><span class="line">Positive Recall   : 0.7444</span><br><span class="line">Negative Precision: 0.7385</span><br><span class="line">Negative Recall   : 0.6400</span><br><span class="line"></span><br><span class="line">SentimentText: Wasted two hours.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.171681881f</span><br><span class="line">Features: Sparse vector of size 7818, 21 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 4.22176647f</span><br><span class="line"></span><br><span class="line">SentimentText: Saw the movie today and thought it was a good effort, good messages for kids.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.185497403f</span><br><span class="line">Features: Sparse vector of size 7818, 83 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 25.0270023f</span><br><span class="line"></span><br><span class="line">SentimentText: The movie showed a lot of Florida at it&apos;s best, made it look very appealing.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.250951052f</span><br><span class="line">Features: Sparse vector of size 7818, 86 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 18.1396465f</span><br><span class="line"></span><br><span class="line">SentimentText: </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.128096819f</span><br><span class="line">Features: Sparse vector of size 7818, 0 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 9.73927498f</span><br><span class="line"></span><br><span class="line">SentimentText: In other words, the content level of this film is enough to easily fill a dozen other films.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.229808331f</span><br><span class="line">Features: Sparse vector of size 7818, 90 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 20.8655605f</span><br></pre></td></tr></table></figure><p>Now that model fitting and some evaluation has been performed, we need to make a prediction function.  As with so many things so far, this is simple to do.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> predictor = model.CreatePredictionEngine&lt;SentimentData, SentimentPrediction&gt;(ml)</span><br></pre></td></tr></table></figure><p>Once the prediction function is in place, we can run predictions and see their underlying scores.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tests = </span><br><span class="line">  [</span><br><span class="line">    <span class="string">"It was cool, cute, and funny."</span>; </span><br><span class="line">    <span class="string">"It was slow and boring."</span>; </span><br><span class="line">    <span class="string">"It was the greatest thing I've seen."</span> </span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">tests </span><br><span class="line">|&gt; List.iter (<span class="keyword">fun</span> x -&gt;</span><br><span class="line">  <span class="keyword">let</span> input = SentimentData()</span><br><span class="line">  input.SentimentText &lt;- x</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prediction = predictor.Predict(input)</span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line">  printfn <span class="string">"Text       : %s"</span> x</span><br><span class="line">  printfn <span class="string">"Prediction : %b"</span> (prediction.PredictedLabel)</span><br><span class="line">  printfn <span class="string">"Score      : %0.4f"</span> (prediction.Score)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>And here we can see the predictions.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Text       : It was cool, cute, and funny.</span><br><span class="line">Prediction : true</span><br><span class="line">Score      : 12.2628</span><br><span class="line"></span><br><span class="line">Text       : It was slow and boring.</span><br><span class="line">Prediction : false</span><br><span class="line">Score      : -10.0353</span><br><span class="line"></span><br><span class="line">Text       : It was the greatest thing I&apos;ve seen.</span><br><span class="line">Prediction : true</span><br><span class="line">Score      : 68.4614</span><br></pre></td></tr></table></figure><p>This is all well and good, but to be useful we need to be able to save a model to a file for later use.  Here we have the ability to save and reload a model file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line"><span class="keyword">let</span> saveModel (ml:MLContext) trainedMode = </span><br><span class="line">  <span class="keyword">use</span> fsWrite = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Create, FileAccess.Write, FileShare.Write)</span><br><span class="line">  ml.Model.Save(model, fsWrite)</span><br><span class="line"></span><br><span class="line">saveModel ml model</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file</span></span><br><span class="line"><span class="keyword">use</span> fsRead = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Open, FileAccess.Read, FileShare.Read)</span><br><span class="line"><span class="keyword">let</span> mlReloaded = MLContext()</span><br><span class="line"><span class="keyword">let</span> modelReloaded = TransformerChain.LoadFrom(mlReloaded, fsRead)</span><br><span class="line"><span class="keyword">let</span> predictorReloaded = modelReloaded.CreatePredictionEngine&lt;SentimentData, SentimentPrediction&gt;(mlReloaded)</span><br></pre></td></tr></table></figure><p>Once the model file has been reloaded, we can run a sample prediction.  We just need to create the prediction function against and away we go.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = SentimentData()</span><br><span class="line">test1.SentimentText &lt;- tests.[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionReloaded = predictorReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Text                  : %s"</span> tests.[<span class="number">0</span>]</span><br><span class="line">printfn <span class="string">"Prediction (Reloaded) : %b"</span> (predictionReloaded.PredictedLabel)</span><br><span class="line">printfn <span class="string">"Score (Reloaded)      : %0.4f"</span> (predictionReloaded.Score)</span><br></pre></td></tr></table></figure><p>Here are the prediction results from a saved model.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Text                  : It was cool, cute, and funny.</span><br><span class="line">Prediction (Reloaded) : true</span><br><span class="line">Score (Reloaded)      : 12.2628</span><br></pre></td></tr></table></figure><p>This has been a brief look into sentiment analysis using F# and ML.NET.  It has been a pleasure to see the framework progress.  It is even more enjoyable performing these types of workloads using F#.  Until next time.  Thanks.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today we’ll look at performing sentiment analysis using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://dot.net/ml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt;.  A new version (v0.9.0) has recently been released, so we use this as an opportunity to play with some new functionality.  The goal of today’s post will be to perform sentiment analysis on movie reviews from &lt;a href=&quot;https://www.imdb.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IMDB&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Text" scheme="http://codesuji.com/tags/Text/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>An Introduction to Chiron</title>
    <link href="http://codesuji.com/2019/01/07/Chiron-Introduction/"/>
    <id>http://codesuji.com/2019/01/07/Chiron-Introduction/</id>
    <published>2019-01-08T02:23:57.000Z</published>
    <updated>2019-01-08T02:49:10.433Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s post is a introduction to performing json serialization tasks using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://xyncro.tech/chiron/" target="_blank" rel="noopener">Chiron</a>.</p><a id="more"></a><p>There are various ways to perform serialization in F#, each has their own set of advantages and disadvantages.  In particular, Chiron provides nice control over more complex types.  Within Chiron there are multiple approaches.  The examples provided are not exhaustive, but are meant to be a good starting point for how various types can be serialized and deserialized.  The code will be based on a player object for a theoretical game.  Using that as a premise, there are two major things we’ll look at: records and discriminated unions.  Both will have their own unique variations.</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>First, add the package to the project.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang f# --name Introduction</span><br><span class="line">cd Introduction</span><br><span class="line">dotnet add package Chiron --version 6.3.1</span><br></pre></td></tr></table></figure><p>Second, import the <code>Chiron</code> namespace.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Chiron </span><br></pre></td></tr></table></figure><h3 id="Record-Types"><a href="#Record-Types" class="headerlink" title="Record Types"></a>Record Types</h3><p>Record are perhaps the most common type to serialize.  They are also straightforward, once you understand the mechanisms at work.  This first example uses just primative types that can be handled with no additional code required.  Chiron expects <code>ToJson</code> and <code>FromJson</code> methods when serializing and deserializing (respectively).  Both use a <code>json {...}</code> computation expression.  Serialization is accomplished with a series of <code>do! Json.write &lt;attribute name&gt; &lt;attribute value&gt;</code> statements.  This allows us to define what we want to be serialized.  For Deserialization there are two steps.  First, <code>let! &lt;var&gt; = Json.read &lt;attribute name&gt;</code> extracts the values.  Once we have the values, we need to construct the record and <code>return</code> it.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123;</span><br><span class="line">  Name :string;</span><br><span class="line">  Score :int;</span><br><span class="line">  Notes :string list;</span><br><span class="line">  IntPairs :(int * int) list;</span><br><span class="line">  &#125; <span class="keyword">with</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123;</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"name"</span> p.Name</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"score"</span> p.Score</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"notes"</span> p.Notes</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"int_pairs"</span> p.IntPairs</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> name = Json.read <span class="string">"name"</span></span><br><span class="line">    <span class="keyword">let!</span> score = Json.read <span class="string">"score"</span></span><br><span class="line">    <span class="keyword">let!</span> notes = Json.read <span class="string">"notes"</span></span><br><span class="line">    <span class="keyword">let!</span> intPairs = Json.read <span class="string">"int_pairs"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">      Player.Name = name;</span><br><span class="line">      Score = score;</span><br><span class="line">      Notes = notes;</span><br><span class="line">      IntPairs = intPairs;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Now that the supporting code is in place, let’s look at how to use it.  Conversion in both ways basically requires two steps.  To serialize, the record is serialized, then formatted <code>(Json.serialize &gt;&gt; Json.format)</code>.  This is also where we have addition options.  The default json format is compact, which is typically want we want when passing data around.  But if we want a nicer view, we can <code>(Json.serialize &gt;&gt; Json.formatWith JsonFormattingOptions.Pretty)</code> to pretty print.  The other side of the equation is deserialization.  Here we parse, then deserialize <code>(Json.parse &gt;&gt; Json.deserialize)</code>.  The additional key here is to define the type we want to deserialize into.  At a basic level, that is all there is to it.  Everything else we’ll look at will be incremental expansions on these concepts.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> player1 = &#123; </span><br><span class="line">    Player.Name = <span class="string">"Jane"</span>; </span><br><span class="line">    Score = <span class="number">100</span>; </span><br><span class="line">    Notes = [ </span><br><span class="line">      <span class="string">"This is a note"</span>; </span><br><span class="line">      <span class="string">"This is another note"</span> ]; </span><br><span class="line">    IntPairs = [ </span><br><span class="line">      (<span class="number">1</span>,<span class="number">3</span>); </span><br><span class="line">      (<span class="number">13</span>, <span class="number">87</span>) ];</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">  printfn <span class="string">"Player1: %A"</span> player1</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> player1Json = (Json.serialize &gt;&gt; Json.format) player1</span><br><span class="line">  printfn <span class="string">"Json (compact): \n%s"</span> player1Json</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> player1JsonPretty = (Json.serialize &gt;&gt; Json.formatWith JsonFormattingOptions.Pretty) player1</span><br><span class="line">  printfn <span class="string">"Json (pretty): \n%s"</span> player1JsonPretty</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> player1' :Player = (Json.parse &gt;&gt; Json.deserialize) player1Json</span><br><span class="line">  printfn <span class="string">"Player1': %A"</span> player1'</span><br><span class="line">  </span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Now, let’s take a look at the results.  For the most part they are exactly as expected, which is good.  The one caveat is the list tuples.  Since json doesn’t have a concept of tuples, they are serialized into an array.  This is fine, it’s more about knowing how the default serialization works.  As with other things in Chiron, this could be modified by writing our own serialization code into a different format.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># Player1 object</span><br><span class="line">Player1: &#123;Name = "Jane";</span><br><span class="line"> Score = 100;</span><br><span class="line"> Notes = ["This is a note"; "This is another note"];</span><br><span class="line"> IntPairs = [(1, 3); (13, 87)];&#125;</span><br><span class="line"></span><br><span class="line"># Player1 as json</span><br><span class="line">Json (compact): </span><br><span class="line">&#123;<span class="attr">"int_pairs"</span>:[[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">13</span>,<span class="number">87</span>]],<span class="attr">"name"</span>:<span class="string">"Jane"</span>,<span class="attr">"notes"</span>:[<span class="string">"This is a note"</span>,<span class="string">"This is another note"</span>],<span class="attr">"score"</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"># Player1 as prettified json</span><br><span class="line">Json (pretty): </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"int_pairs"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="number">13</span>,</span><br><span class="line">      <span class="number">87</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Jane"</span>,</span><br><span class="line">  <span class="attr">"notes"</span>: [</span><br><span class="line">    <span class="string">"This is a note"</span>,</span><br><span class="line">    <span class="string">"This is another note"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"score"</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Player1' object (deserialized from json string)</span><br><span class="line">Player1': &#123;Name = "Jane";</span><br><span class="line"> Score = 100;</span><br><span class="line"> Notes = ["This is a note"; "This is another note"];</span><br><span class="line"> IntPairs = [(1, 3); (13, 87)];&#125;</span><br></pre></td></tr></table></figure><p>The remaining examples will be an expansion of this one.  It will allow us to focus on the new stuff without getting lost in a bulk of code.  For completeness, I’ll provide the final version of <code>Player</code> at the end of the post so it can all be seen together.</p><h3 id="Records-within-Records"><a href="#Records-within-Records" class="headerlink" title="Records within Records"></a>Records within Records</h3><p>Next, records within records.  To do this we’ll need to create another record type, <code>Point</code>.  Beyond the base type definition, the <code>ToJson</code> and <code>FromJson</code> functions need to be implemented, in a similar fashion as above.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Point</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Point</span> </span>= &#123; </span><br><span class="line">  X :int; </span><br><span class="line">  Y :int </span><br><span class="line">  &#125; <span class="keyword">with</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Point) = json &#123;</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"x"</span> p.X</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"y"</span> p.Y</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Point) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> x = Json.read <span class="string">"x"</span></span><br><span class="line">    <span class="keyword">let!</span> y = Json.read <span class="string">"y"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; Point.X = x; Point.Y = y &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Adding the new field into the <code>Player</code> record is simple.  The beauty here is that as long as you define the appropriate methods in the <code>Point</code> class, as we did above, Chiron handles the serialization/deserialization with little effort.  We just have to remember there are 3 touch points: definition, ToJson, and FromJson.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a Coordinates field that is a list of Points to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  Coordinates :Point list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"coordinates"</span> p.Coordinates</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> coordinates = Json.read <span class="string">"coordinates"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      Coordinates = coordinates</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the Coordinates field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  Coordinates = [ </span><br><span class="line">    &#123; X = <span class="number">30</span>; Y = <span class="number">40</span> &#125;; </span><br><span class="line">    &#123; X = <span class="number">30</span>; Y = <span class="number">41</span> &#125; ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, the Point list is now part of the player.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><h3 id="Discriminated-Unions-Part-1-Simple"><a href="#Discriminated-Unions-Part-1-Simple" class="headerlink" title="Discriminated Unions - Part 1 (Simple)"></a>Discriminated Unions - Part 1 (Simple)</h3><p>Discriminated Unions manifest themselves in a couple different forms when serializing.  As a result, we’ll look at these from a couple different angles.  They sometimes require slightly more of a decision over records types.  When serializing primative types we just take the defaults, which is great.  With discriminated unions we need to decide how we want our serialization to look.  In this case, we’ll look to add a “current direction” to the player, leveraging a <code>Direction</code> type of North, South, East, or West.  For this we’ll just encode the value as a string; it is the simpliest and most straightforward way.  Of special note regarding the <code>ToJson</code> and <code>FromJson</code> functions, we don’t use the <code>json {...}</code> computation expression.  <code>ToJson</code> encodes the string value as a <code>Json</code> type.  <code>FromJson</code> returns a function that converts the string representation to a value.</p><p>Something that should be addressed, how to handle invalid values. For this example we’ll fail the parsing with an “Invalid Direction” error.  As an alternative, that might make sense in some cases, it could just be encoded to a default value.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Direction</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Direction</span> </span>= N | S | E | W  <span class="keyword">with</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (d :Direction) =</span><br><span class="line">    <span class="keyword">match</span> d <span class="keyword">with</span></span><br><span class="line">    | N -&gt; ToJsonDefaults.ToJson <span class="string">"N"</span></span><br><span class="line">    | E -&gt; ToJsonDefaults.ToJson <span class="string">"E"</span></span><br><span class="line">    | S -&gt; ToJsonDefaults.ToJson <span class="string">"S"</span></span><br><span class="line">    | W -&gt; ToJsonDefaults.ToJson <span class="string">"W"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Direction) = <span class="keyword">fun</span> json -&gt; </span><br><span class="line">    <span class="keyword">match</span> json <span class="keyword">with</span></span><br><span class="line">    | String <span class="string">"N"</span> -&gt; Value N, json</span><br><span class="line">    | String <span class="string">"E"</span> -&gt; Value E, json</span><br><span class="line">    | String <span class="string">"S"</span> -&gt; Value S, json</span><br><span class="line">    | String <span class="string">"W"</span> -&gt; Value W, json</span><br><span class="line">    | _          -&gt; failwith (sprintf <span class="string">"Invalid Direction '%A'"</span> json)</span><br><span class="line">    <span class="comment">// Alternative: Silently fail to a default</span></span><br><span class="line">    <span class="comment">// | _          -&gt; Value N, json</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>As we did before, we need to add the <code>CurrentDirection</code> at 3 points: definition, ToJson, and FromJson.  As we saw in the previous example, with the functions setup on our type, Chiron handles the rest.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a CurrentDirection field to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  CurrentDirection :Direction</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">     <span class="keyword">do!</span> Json.write <span class="string">"current_direction"</span> p.CurrentDirection</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> currentDirection = Json.read <span class="string">"current_direction"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      CurrentDirection = currentDirection</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the CurrentDirection field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  CurrentDirection = Direction.N</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, the current direction is now part of the player.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;sco</span><br></pre></td></tr></table></figure><h3 id="Discriminated-Unions-Part-2-Enums"><a href="#Discriminated-Unions-Part-2-Enums" class="headerlink" title="Discriminated Unions - Part 2 (Enums)"></a>Discriminated Unions - Part 2 (Enums)</h3><p>Discriminated Unions can also be used like enums. This requires a slightly different approach.  Primarily, enums cannot have member functions, so the methods we use before won’t work. We’ll need a little more logic in the player part of the serialization/deserialization functions. For this we’ll define a player’s level.  This is a bit contrived, since using a straight number for levels makes more sense, but this example will at least get the idea across.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Level </span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Level</span> </span>=</span><br><span class="line">  | Zero = <span class="number">0</span></span><br><span class="line">  | One = <span class="number">1</span> </span><br><span class="line">  | Two = <span class="number">2</span></span><br><span class="line">  | Three = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>One thing that is the same is where we need to add <code>Level</code>, the <code>Player</code>: definition, ToJson, and FromJson. This is where we need to provide a bit more information regarding how we want to serialize the value.  I believe the most straight forward way is to convert to the underlying int.  In the <code>ToJson</code> we need to cast as int.  For <code>FromJson</code> we need to cast from int to the <code>Level</code> type.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a Level field to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  Level: Level</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"level"</span> (int p.Level)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> level = Json.read <span class="string">"level"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      Level = enum&lt;Level&gt;(level)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the CurrentDirection field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  Level = Level.Two;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, their level is now part of the player.  And our method of serialization to int works as expected.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;level&quot;:2,&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><h3 id="Discriminated-Unions-Part-3-Complex"><a href="#Discriminated-Unions-Part-3-Complex" class="headerlink" title="Discriminated Unions - Part 3 (Complex)"></a>Discriminated Unions - Part 3 (Complex)</h3><p>Discriminated unions offer more complex ways to represent their data.  This means we have to make a decision about how we want to represent that data.  This is one place where Chiron shines, it provides the power to represent complex types as we see fit.  For this example, we’ll look at a player <code>Role</code> that represents a more complex type.  An object that has a <code>type</code> and <code>value</code> attribute feels like a simple way to serialize.  There are certainly other ways this could be represented, and the attributes don’t neccessarily have to match for the varying types.</p><p><code>ToJson</code> uses a <code>json {...}</code> computation expression.  Since there is a mixture of string and int values withing the discriminated union, we need to put them within the <code>match</code>.  This creates an object representation.  The <code>FromJson</code> function first extracts the <code>type</code> attribute from the Json object, then returns the appropriate <code>Role</code> with its respective value.  Since they all use <code>value</code>, they look similar, but that attribute, or potentially list of attributes could vary depending on role.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Role </span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Role</span> </span>= </span><br><span class="line">  | Scout <span class="keyword">of</span> string</span><br><span class="line">  | Assault <span class="keyword">of</span> string</span><br><span class="line">  | Defense <span class="keyword">of</span> string</span><br><span class="line">  | Swarm <span class="keyword">of</span> int</span><br><span class="line">  <span class="keyword">with</span> </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (r :Role) = </span><br><span class="line">    <span class="keyword">match</span> r <span class="keyword">with</span></span><br><span class="line">    | Scout(x)   -&gt; json &#123;</span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"scout"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line">    | Assault(x) -&gt; json &#123;</span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"assault"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line">    | Defense(x) -&gt; json &#123;</span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"defense"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line">    | Swarm(x)   -&gt; json &#123; </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"swarm"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Role) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> role = Json.read <span class="string">"type"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> role <span class="keyword">with</span></span><br><span class="line">    | <span class="string">"scout"</span>   -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Scout(value)</span><br><span class="line">    | <span class="string">"assault"</span> -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Assault(value)</span><br><span class="line">    | <span class="string">"defense"</span> -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Defense(value)</span><br><span class="line">    | <span class="string">"swarm"</span>   -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Swarm(value)</span><br><span class="line">    | _         -&gt; failwith (sprintf <span class="string">"Invalid Role '%A'"</span> role)</span><br><span class="line">                   <span class="keyword">return</span> Swarm(<span class="number">0</span>) </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>We’re back to the familar process of modifying our 3 touch points: definition, ToJson, and FromJson.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a Role field to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  Role: Role</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"role"</span> p.Role</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> role = Json.read <span class="string">"role"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      Role = role</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the Role field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  Role = Scout(<span class="string">"ax-101"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, the role is now serialized as an object.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;level&quot;:2,&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;role&quot;:&#123;&quot;type&quot;:&quot;scout&quot;,&quot;value&quot;:&quot;ax-101&quot;&#125;,&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><p>Alternatively, if the <code>Role</code> is <code>Swarm</code>, the object is serialized as appropriate. This exactly what we want, a string value when it’s a string, and int value when it’s an int.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">player1 = &#123; ...</span><br><span class="line">  Role = Swarm(<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Result: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;level&quot;:2,&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;role&quot;:&#123;&quot;type&quot;:&quot;swarm&quot;,&quot;value&quot;:200&#125;,&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><p>As promised, here is the complete definition of <code>Player</code>, with all its attributes.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123;</span><br><span class="line">  Name :string;</span><br><span class="line">  Score :int;</span><br><span class="line">  Notes :string list;</span><br><span class="line">  IntPairs :(int * int) list;</span><br><span class="line">  Coordinates :Point list;</span><br><span class="line">  CurrentDirection :Direction;</span><br><span class="line">  Level :Level;</span><br><span class="line">  Role :Role</span><br><span class="line">  &#125; <span class="keyword">with</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123;</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"name"</span> p.Name</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"score"</span> p.Score</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"notes"</span> p.Notes</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"int_pairs"</span> p.IntPairs</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"coordinates"</span> p.Coordinates</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"current_direction"</span> p.CurrentDirection</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"level"</span> (int p.Level)</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"role"</span> p.Role</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> name = Json.read <span class="string">"name"</span></span><br><span class="line">    <span class="keyword">let!</span> score = Json.read <span class="string">"score"</span></span><br><span class="line">    <span class="keyword">let!</span> notes = Json.read <span class="string">"notes"</span></span><br><span class="line">    <span class="keyword">let!</span> intPairs = Json.read <span class="string">"int_pairs"</span></span><br><span class="line">    <span class="keyword">let!</span> coordinates = Json.read <span class="string">"coordinates"</span></span><br><span class="line">    <span class="keyword">let!</span> currentDirection = Json.read <span class="string">"current_direction"</span></span><br><span class="line">    <span class="keyword">let!</span> level = Json.read <span class="string">"level"</span></span><br><span class="line">    <span class="keyword">let!</span> role = Json.read <span class="string">"role"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">      Player.Name = name;</span><br><span class="line">      Score = score;</span><br><span class="line">      Notes = notes;</span><br><span class="line">      IntPairs = intPairs;</span><br><span class="line">      Coordinates = coordinates;</span><br><span class="line">      CurrentDirection = currentDirection;</span><br><span class="line">      Level = enum&lt;Level&gt;(level);</span><br><span class="line">      Role = role</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>This has been a light introduction into using Chiron.  Hopefully you have found it useful.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s post is a introduction to performing json serialization tasks using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://xyncro.tech/chiron/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chiron&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Chiron" scheme="http://codesuji.com/tags/Chiron/"/>
    
      <category term="Serialization" scheme="http://codesuji.com/tags/Serialization/"/>
    
  </entry>
  
  <entry>
    <title>F# Benchmarking</title>
    <link href="http://codesuji.com/2018/12/18/F-Benchmarking/"/>
    <id>http://codesuji.com/2018/12/18/F-Benchmarking/</id>
    <published>2018-12-19T04:17:32.000Z</published>
    <updated>2018-12-19T03:50:11.257Z</updated>
    
    <content type="html"><![CDATA[<p>Occasionally the need arises in an <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> project to perform benchmarking.  <a href="https://benchmarkdotnet.org/" target="_blank" rel="noopener">BenchmarkDotNet</a> is a powerful tool made exactly for this purpose.  Today’s post provides an introductory look into the process.</p><a id="more"></a><p>Although <code>#time</code> and <code>Stopwatch</code> are useful for quick and dirty checks, BenchmarkDotNet allows a more comprehensive look at performance characteristics. This post will use <code>sort</code> for a case study to display a sample of what can be done.  Before getting started ensure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a>.  Select <strong>SDK</strong> for your platform.  After that create a console F# project and install the BenchmarkDotNet package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name BenchmarkSort</span><br><span class="line">cd BenchmarkSort </span><br><span class="line">dotnet add package BenchmarkDotNet --version 0.11.3</span><br></pre></td></tr></table></figure><p>First, the initial stuff.  One note here is that I decided to use a complex type <code>Foo</code> for my sorting benchmark.  I could’ve used <code>int</code>, but .NET has highly optimized methods for sorting native types like <code>int</code>.  To the level the playing field a bit I wanted to take this out of the equation.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Program</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Attributes</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Running</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Foo</span> </span>= &#123; Id: int; Name: string &#125;</span><br></pre></td></tr></table></figure><p>Time to create the test functions.  The comparison targets will be .NET’s built in <code>List.sort</code>, then a hand-written <code>QuickSort</code>, and <code>BubbleSort</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> listSort (l :Foo list) =</span><br><span class="line">  List.sort l</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> quickSort (l :Foo list) =</span><br><span class="line">  <span class="keyword">match</span> l <span class="keyword">with</span> </span><br><span class="line">  | []   -&gt; []</span><br><span class="line">  | h::t -&gt; <span class="keyword">let</span> (smaller, larger) = List.partition (<span class="keyword">fun</span> x -&gt; x.Id &lt;= h.Id) t</span><br><span class="line">            List.concat [ quickSort smaller; [h]; quickSort larger ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bubbleSortMutable (l :Foo list) = </span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> l' = l |&gt; Array.ofList</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> keepGoing = <span class="keyword">true</span></span><br><span class="line">  <span class="keyword">while</span> keepGoing <span class="keyword">do</span></span><br><span class="line">    keepGoing &lt;- <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1.</span>.(Array.length l' - <span class="number">1</span>)] <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> l'.[i<span class="number">-1</span>] &gt; l'.[i] <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">let</span> t = l'.[i<span class="number">-1</span>]</span><br><span class="line">        l'.[i<span class="number">-1</span>] &lt;- l'.[i]</span><br><span class="line">        l'.[i] &lt;- t</span><br><span class="line">        keepGoing &lt;- <span class="keyword">true</span></span><br><span class="line">  l' |&gt; List.ofArray</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bubbleSortRecursive (l :Foo list) = </span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">rec</span> bubbleSort' a rev l =</span><br><span class="line">    <span class="keyword">match</span> l, rev <span class="keyword">with</span></span><br><span class="line">    | [], <span class="keyword">true</span>     -&gt; List.rev a</span><br><span class="line">    | [], <span class="keyword">false</span>    -&gt; List.rev a |&gt; bubbleSort' [] <span class="keyword">true</span></span><br><span class="line">    | h1::h2::t, _ -&gt; <span class="keyword">if</span> h1 &gt; h2 </span><br><span class="line">                      <span class="keyword">then</span> bubbleSort' (h2::a) <span class="keyword">false</span> (h1::t)</span><br><span class="line">                      <span class="keyword">else</span> bubbleSort' (h1::a) rev (h2::t)</span><br><span class="line">    | h::t, _      -&gt; bubbleSort' (h::a) rev t</span><br><span class="line">  bubbleSort' [] <span class="keyword">true</span> l</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> initList n = </span><br><span class="line">  [<span class="number">1.</span>.n] </span><br><span class="line">  |&gt; List.map (<span class="keyword">fun</span> _ -&gt;</span><br><span class="line">    <span class="keyword">let</span> id = rand.Next(<span class="number">10</span>*n)</span><br><span class="line">    &#123; Foo.Id = id; Name = id.ToString() &#125;)</span><br></pre></td></tr></table></figure><p>Now it is time to setup the benchmarking methods.  First, I make a type <code>SortComparison</code>.  I have attached a <code>MemoryDiagnoser</code> attribute so that I’ll get GC statistics back from the benchmarking run.  The sorting methods will be tested against different list sizes (10, 1000, and 10000).  This is defined in <code>ListSize</code>, where the <code>Params</code> attribute defines what BenchmarkDotNet should use for parameterization during the tests.  Next, it is time to define what will be compared.  To do this there are member functions marked with the <code>Benchmark</code> attribute.  That’s all there is to setting up the tests.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;MemoryDiagnoser&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">SortComparison</span> </span>() =</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Params (10,1000,10000)&gt;]</span> </span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> ListSize :int = <span class="number">0</span> <span class="keyword">with</span> get, set</span><br><span class="line"></span><br><span class="line">  <span class="keyword">member</span> self.mainList = initList self.ListSize</span><br><span class="line">  </span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListSort() = listSort self.mainList</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListQuickSort () = quickSort self.mainList</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListBubbleSortMutable () = bubbleSortMutable self.mainList</span><br><span class="line">  </span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListBubbleSortRecursive () = bubbleSortRecursive self.mainList</span><br></pre></td></tr></table></figure><p>In Main, all that is needed is a simple runner.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> Main args =</span><br><span class="line">  BenchmarkRunner.Run typeof&lt;SortComparison&gt; |&gt; ignore</span><br></pre></td></tr></table></figure><p>Once everything is together, they just need to run.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Benchmark(master)$ dotnet run -c release</span><br></pre></td></tr></table></figure><p>Time to look at the results. The benchmark spews a ton of data, but I’ll just focus on the final results here.</p><p><img src="/images/be1/results.png" alt="Results"></p><p>The test results aren’t too surprising.  .NET’s built in sort is more efficient for large lists, although QuickSort holds its own as long as the list isn’t too large.  Both are faster than BubbleSort.  With the GC stats, we can also see where additional GC’s start to hinder some of the algorithms.</p><p>This is great, and time to make it a bit more advanced.  Multiple benchmarks can be placed and run in the same file.  Here I add <code>FakeComparison</code> and add a selector when the application is run.  This is helpful when you want to keep different sets of benchmarking tests.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">FakeComparison</span> </span>() =</span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.Fake1 () = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.Fake2 () = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> defaultSwitch () = BenchmarkSwitcher [| typeof&lt;SortComparison&gt;; typeof&lt;FakeComparison&gt; |]</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> Main args =</span><br><span class="line">  defaultSwitch().Run args |&gt; ignore </span><br></pre></td></tr></table></figure><p>Now, when running, a prompt is provided.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~/Benchmark(master)$ dotnet run -c release</span><br><span class="line">Available Benchmarks:</span><br><span class="line">  #0 SortComparison</span><br><span class="line">  #1 FakeComparison</span><br><span class="line"></span><br><span class="line">You should select the target benchmark(s). Please, print a number of a benchmark (e.g. &apos;0&apos;) or a contained benchmark caption (e.g. &apos;SortComparison&apos;):</span><br><span class="line">If you want to select few, please separate them with space ` ` (e.g. `1 2 3`)</span><br><span class="line">You can also provide the class name in console arguments by using --filter. (e.g. &apos;--filter *SortComparison*&apos;):</span><br></pre></td></tr></table></figure><p>There is one more aspect of reporting, and that is the final results.  What I’ve shown has been part of the console output, but there is more.  A <code>BenchmarkDotNet.Artifacts</code> directory contains a detailed run log.  It also contains specially formatted results, namely: csv, html, and github markdown.  All of these being very useful for more advanced reporting or just simply dropping into a repo.</p><p>This provides the basis to explore BenchmarkDotNet in your next performance comparison endeavor.  Be sure to check out the <a href="https://benchmarkdotnet.org/" target="_blank" rel="noopener">BenchmarkDotNet</a> site for additional documentation. Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Occasionally the need arises in an &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; project to perform benchmarking.  &lt;a href=&quot;https://benchmarkdotnet.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BenchmarkDotNet&lt;/a&gt; is a powerful tool made exactly for this purpose.  Today’s post provides an introductory look into the process.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Benchmarking" scheme="http://codesuji.com/tags/Benchmarking/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.Net Clustering (V2)</title>
    <link href="http://codesuji.com/2018/11/30/F-and-MLNet-Clustering-V2/"/>
    <id>http://codesuji.com/2018/11/30/F-and-MLNet-Clustering-V2/</id>
    <published>2018-12-01T03:17:49.000Z</published>
    <updated>2018-12-02T14:08:01.052Z</updated>
    
    <content type="html"><![CDATA[<p>With the release of v0.7.0, it is time to revisit K-means clustering using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and Microsoft’s new <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a> framework.  The api has changed enough to warrant a minor rework.  This post is a re-examination of a previous post <a href="/2018/07/07/F-and-MLNet-Clustering/">F# and ML.NET Clustering</a>.  The use case will be to use examination attributes to classify mammogram results.</p><a id="more"></a><p><i>Note: ML.NET is still evolving, this post was written using Microsoft.ML v0.7.0.</i></p><p>Make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.1</a> installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>First, create a console F# project, then add the ML.NET package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-Mammogram</span><br><span class="line">cd MLNet-Mammogram</span><br><span class="line">dotnet add package Microsoft.ML --version 0.7.0</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source I used for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Mammographic+Mass" target="_blank" rel="noopener">UCI</a>.  The datafile can be found [here] (<a href="https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data" target="_blank" rel="noopener">https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is no header row.  The columns represent 5 features and 1 classification column:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- BI-RADS assessment (1-5)</span><br><span class="line">- Age (Patient&apos;s age)</span><br><span class="line">- Shape (mass shape: round=1 oval=2 lobular=3 irregular=4 (nominal))</span><br><span class="line">- Margin (mass margin: circumscribed=1 microlobulated=2 obscured=3 ill-defined=4 spiculated=5 (nominal))</span><br><span class="line">- Density: (mass density high=1 iso=2 low=3 fat-containing=4 (ordinal))</span><br><span class="line">- Severity: (benign=0 or malignant=1)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">5,67,3,5,3,1</span><br><span class="line">4,43,1,1,?,1</span><br><span class="line">5,58,4,5,3,1</span><br><span class="line">4,28,1,1,3,0</span><br><span class="line">5,57,1,5,3,1</span><br></pre></td></tr></table></figure><p>Now that the project is setup and data is local, we can get to the code.  Time to open up the already created <code>Program.fs</code>.  First, add the necessary namespaces.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Api</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Data</span><br></pre></td></tr></table></figure><p>The ML.NET pipeline expects the data in a specific format.  In the C# world, this is a class, for F# we can use a type.  Below are the required types; <code>MammogramData</code> is the input data, <code>MammogramPrediction</code> is the output prediction.  For <code>MammogramData</code>, this is basically a a map of columns to member variables.  There are a couple notable points to ensure the pipeline can properly consume the data.  Each attribute must be <code>mutable public</code>, it also requires the <code>[&lt;Column(&quot;#&quot;)&gt;]</code> to specify it’s column position, and <code>[&lt;DefaultValue&gt;]</code> attributes.  For <code>MammogramPrediction</code>, <code>PredictionLabel</code> for the cluster id, and <code>Score</code> for calculated distances from all clusters is required.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MammogramPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;Column("0")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> BiRads:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("1")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Age:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("2")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Shape:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("3")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Margin:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("4")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Density:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("5")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label :float32</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MammogramPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;ColumnName("PredictedLabel")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SelectedClusterId:uint32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;ColumnName("Score")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Distance: float32[]</span><br></pre></td></tr></table></figure><p>Here is one of the big changes from early versions.  Where the pipeline object is gone, it has been replaced with an <code>MLContext</code>.  Although different, it still maintains intuitiveness, and gains additional functionality.  First, create an MLContext, if desired a <code>seed</code> can be defined to ensure the same results between executions.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mlContext = MLContext()</span><br><span class="line"><span class="comment">// let mlContext = MLContext(seed = Nullable 1)</span></span><br></pre></td></tr></table></figure><p>Time to load the data. This is another method that has updated since earlier versions.  First create a <code>TextReader</code> with a file format definition.  Then use that object to read the data from the data file.  The entire file can be used for training.  Alternatively, <code>TrainTestSplit</code> (another new function) can be used to easily divide a single dataset into train and test sets.  This is especially handy during the development process.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"./data/mammographic_masses.data"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////</span></span><br><span class="line"><span class="comment">// Load data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataLoader = </span><br><span class="line">  mlContext.Data.TextReader(</span><br><span class="line">    TextLoader.Arguments(</span><br><span class="line">      Separator = <span class="string">","</span>,</span><br><span class="line">      HasHeader = <span class="keyword">true</span>,</span><br><span class="line">      Column = </span><br><span class="line">        [|</span><br><span class="line">            TextLoader.Column(<span class="string">"BiRads"</span>, Nullable DataKind.R4, <span class="number">0</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Age"</span>, Nullable DataKind.R4, <span class="number">1</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Shape"</span>, Nullable DataKind.R4, <span class="number">2</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Margin"</span>, Nullable DataKind.R4, <span class="number">3</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Density"</span>, Nullable DataKind.R4, <span class="number">4</span>)</span><br><span class="line">        |]</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> allData = dataLoader.Read dataPath</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">struct</span> (trainingData, testingData) = mlContext.Clustering.TrainTestSplit(allData, testFraction = <span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><p>After the data is loaded, feature columns need to be added to the transforms.  I’m going to use all feature columns from the file, and exclude severity.  The clustering model requires features to be numeric, which if fine here.  As the other posts show, you can convert text to numeric mappings if necessary.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataProcessPipeline = mlContext.Transforms.Concatenate(<span class="string">"Features"</span>, <span class="string">"BiRads"</span>, <span class="string">"Age"</span>, <span class="string">"Shape"</span>, <span class="string">"Margin"</span>, <span class="string">"Density"</span>)</span><br></pre></td></tr></table></figure><p>Now that the features are defined, it is time to create a model.  This will be <code>KMeans</code>.  Similar to the other trainers, custom parameters can be defined, I have decided to use <code>K = 4</code>.  It also has other options as as <code>MaxIterations</code>, <code>OptTol</code> (convergence tolerance), and <code>NormalizeFeatures</code>.  The KMeans trainer/estimator must be combined with the training data to create a model.  The last part, create a prediction function from the model.  Note the <code>MammogramData</code> and <code>MammogramPrediction</code> types as part of the call.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> trainer = mlContext.Clustering.Trainers.KMeans(features = <span class="string">"Features"</span>, clustersCount = <span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> estimator = dataProcessPipeline.Append trainer</span><br><span class="line"><span class="keyword">let</span> trainedModel = estimator.Fit trainingData</span><br><span class="line"><span class="keyword">let</span> model = trainedModel.MakePredictionFunction&lt;MammogramData, MammogramPrediction&gt;(mlContext) </span><br></pre></td></tr></table></figure><p>Validation of any model is important.  With the data split into train and test sets, it is easy to get metrics against the training data and then validate against the previously unseen test data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Evaluate results (train)</span></span><br><span class="line"><span class="keyword">let</span> metricsTrain = </span><br><span class="line">  <span class="keyword">let</span> predictions = trainedModel.Transform trainingData</span><br><span class="line">  mlContext.Clustering.Evaluate(predictions, score = <span class="string">"Score"</span>, features = <span class="string">"Features"</span>)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Train Data:"</span></span><br><span class="line">printfn <span class="string">"Avg Min Score: %f"</span> &lt;| metricsTrain.AvgMinScore</span><br><span class="line"><span class="comment">// Davies-Bouldin Index</span></span><br><span class="line">printfn <span class="string">"DBI          : %A"</span> &lt;| metricsTrain.Dbi</span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Evaluate results (test)</span></span><br><span class="line"><span class="keyword">let</span> metricsTest = </span><br><span class="line">  <span class="keyword">let</span> predictions = trainedModel.Transform testingData</span><br><span class="line">  mlContext.Clustering.Evaluate(predictions, score = <span class="string">"Score"</span>, features = <span class="string">"Features"</span>)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Test Data:"</span></span><br><span class="line">printfn <span class="string">"Avg Min Score: %f"</span> &lt;| metricsTest.AvgMinScore</span><br><span class="line"><span class="comment">// Davies-Bouldin Index</span></span><br><span class="line">printfn <span class="string">"DBI          : %A"</span> &lt;| metricsTest.Dbi</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Train Data:</span><br><span class="line">Avg Min Score: <span class="number">31.570207</span></span><br><span class="line">DBI          : <span class="number">0.6515402653</span></span><br><span class="line"></span><br><span class="line">Test Data:</span><br><span class="line">Avg Min Score: <span class="number">27.217818</span></span><br><span class="line">DBI          : <span class="number">0.6298469451</span></span><br></pre></td></tr></table></figure><p>With the initial evaluation out of the way, it is time to move onto individual predictions.  I want to create aggregate classification percentages for each cluster.  To do this I take the predictive model and apply it against the the training file.  Using the predicted cluster and the training label, I create a mapping for detailed predictions.  Each cluster gets its own raw benign/malignant count, which can be converted into percentage likelihood for each classification.  I have the details annotated in comments, to make it easier to follow.  Honestly, this is the most labor-intensive part of the process.  I’d love to be able to pass an cluster-aggregate-score function in as part of the trainer to eliminate this work or reprocessing the data.  Once I have these results as a <code>Map</code>, I can query results easy enough.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create classifications by cluster </span></span><br><span class="line"><span class="keyword">let</span> clusterClassification = </span><br><span class="line">  <span class="comment">// Read file</span></span><br><span class="line">  System.IO.File.ReadAllLines(dataPath)</span><br><span class="line">  <span class="comment">// Filter incomplete rows</span></span><br><span class="line">  |&gt; Array.filter (<span class="keyword">fun</span> line -&gt; not (line.Contains(<span class="string">"?"</span>)))</span><br><span class="line">  <span class="comment">// Run predictions </span></span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> line -&gt; </span><br><span class="line">    <span class="comment">// Convert line to float array</span></span><br><span class="line">    <span class="keyword">let</span> row = line.Split(',') |&gt; Array.map float32</span><br><span class="line">    <span class="comment">// Predict the clusterId of the row</span></span><br><span class="line">    <span class="keyword">let</span> predictedCluster = </span><br><span class="line">      model.Predict(</span><br><span class="line">        MammogramData(</span><br><span class="line">          BiRads = row.[<span class="number">0</span>],</span><br><span class="line">          Age = row.[<span class="number">1</span>],</span><br><span class="line">          Shape = row.[<span class="number">2</span>],</span><br><span class="line">          Margin = row.[<span class="number">3</span>],</span><br><span class="line">          Density = row.[<span class="number">4</span>])) </span><br><span class="line">    <span class="comment">// Populate benign/maligant counter for cluster (0=benign, 1=malignant)</span></span><br><span class="line">    <span class="keyword">if</span> int row.[<span class="number">5</span>] = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">then</span> (predictedCluster.SelectedClusterId, [| <span class="number">1</span>; <span class="number">0</span> |])</span><br><span class="line">    <span class="keyword">else</span> (predictedCluster.SelectedClusterId, [| <span class="number">0</span>; <span class="number">1</span> |]))</span><br><span class="line">  <span class="comment">// Group by ClusterId</span></span><br><span class="line">  |&gt; Array.groupBy (<span class="keyword">fun</span> (clusterId, _) -&gt; clusterId)</span><br><span class="line">  <span class="comment">// Sum each cluster's classification counts</span></span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> (clusterId, data) -&gt; </span><br><span class="line">    <span class="keyword">let</span> countSums = </span><br><span class="line">      data</span><br><span class="line">      |&gt; Array.map (<span class="keyword">fun</span> (_, z) -&gt; z)</span><br><span class="line">      |&gt; Array.fold (<span class="keyword">fun</span> a (x:int []) -&gt; </span><br><span class="line">          [| a.[<span class="number">0</span>] + x.[<span class="number">0</span>]; a.[<span class="number">1</span>] + x.[<span class="number">1</span>] |]) [| <span class="number">0</span>; <span class="number">0</span> |] </span><br><span class="line"></span><br><span class="line">    (clusterId, countSums))</span><br><span class="line">  |&gt; Map.ofArray</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Provide a prediction based on cluster id</span></span><br><span class="line"><span class="keyword">let</span> clusterIdToPrediction (clusterClassification:Map&lt;uint32, int[]&gt;) (clusterId:uint32) =</span><br><span class="line">  <span class="keyword">let</span> classifications = clusterClassification.Item clusterId</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> total = classifications |&gt; Array.sum |&gt; float</span><br><span class="line">  <span class="keyword">let</span> benignPct = float classifications.[<span class="number">0</span>] / total</span><br><span class="line">  <span class="keyword">let</span> malignantPct = float classifications.[<span class="number">1</span>] / total</span><br><span class="line"></span><br><span class="line">  sprintf <span class="string">"Benign: %0.2f Malignant: %0.2f (%d, %d)"</span> </span><br><span class="line">    benignPct </span><br><span class="line">    malignantPct </span><br><span class="line">    classifications.[<span class="number">0</span>] </span><br><span class="line">    classifications.[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>Now that the <code>clusterIdToPrediction</code> is defined, I can pair the ML.NET cluster prediction with the aggregated cluster classification percentages.  First, create a <code>MammogramData</code> object and provide it to the <code>Predict</code> method.  Second, use the predicted clusterId with the aggregated cluster classification percentages to get a classification result.  For this example, I pull one of those rows from the training data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prediction</span></span><br><span class="line"><span class="keyword">let</span> test1 = MammogramData()</span><br><span class="line">test1.BiRads &lt;- <span class="number">5.</span>f</span><br><span class="line">test1.Age &lt;- <span class="number">67.</span>f</span><br><span class="line">test1.Shape &lt;- <span class="number">3.</span>f</span><br><span class="line">test1.Margin &lt;- <span class="number">5.</span>f</span><br><span class="line">test1.Density &lt;- <span class="number">3.</span>f</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionTest1 = model.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted ClusterId: %d"</span> predictionTest1.SelectedClusterId</span><br><span class="line">printfn <span class="string">"Predicted Distances: %A"</span> predictionTest1.Distance</span><br><span class="line">printfn <span class="string">"Predicted Result: %s"</span> (clusterIdToPrediction clusterClassification predictionTest1.SelectedClusterId)</span><br><span class="line">printfn <span class="string">"Actual Result   : 1 (Malignant)"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>The results show the prediction falls into cluster 1, which has a 80% likelihood it is malignant, which matches the actual value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result:</span><br><span class="line">Predicted ClusterId: 1</span><br><span class="line">Predicted Distances: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>Once a model has been created, it is often useful to save for later use.  The save method has changed from previous versions.  Once saved, this model can then be loaded for future use.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line"><span class="keyword">let</span> saveModel (mlContext:MLContext) trainedMode = </span><br><span class="line">  <span class="keyword">use</span> fsWrite = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Create, FileAccess.Write, FileShare.Write)</span><br><span class="line">  mlContext.Model.Save(trainedModel, fsWrite);</span><br><span class="line"></span><br><span class="line">saveModel mlContext trainedModel</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file and run a prediction</span></span><br><span class="line"><span class="keyword">use</span> fsRead = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Open, FileAccess.Read, FileShare.Read)</span><br><span class="line"><span class="keyword">let</span> mlContextReloaded = MLContext()</span><br><span class="line"><span class="keyword">let</span> trainedModelReloaded = TransformerChain.LoadFrom(mlContextReloaded, fsRead)</span><br><span class="line"><span class="keyword">let</span> modelReloaded = trainedModel.MakePredictionFunction&lt;MammogramData, MammogramPrediction&gt;(mlContextReloaded);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionReloaded = modelReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted ClusterId RL: %d"</span> predictionReloaded.SelectedClusterId</span><br><span class="line">printfn <span class="string">"Predicted Distances RL: %A"</span> predictionReloaded.Distance</span><br><span class="line">printfn <span class="string">"Predicted Result RL: %s"</span> (clusterIdToPrediction clusterClassification predictionReloaded.SelectedClusterId)</span><br><span class="line">printfn <span class="string">"Actual Result RL   : 1 (Malignant)"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>As expected, the prediction results are the same with the reloaded model.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result: (model reloaded):</span><br><span class="line">Predicted ClusterId: 1</span><br><span class="line">Predicted Distances: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>Throughout the post, portions of the output have been provided out of band.  Here is how the whole thing looks when run with <code>dotnet run</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Train Data:</span><br><span class="line">Avg Min Score: 31.872808</span><br><span class="line">DBI          : 0.6556137903</span><br><span class="line"></span><br><span class="line">Test Data:</span><br><span class="line">Avg Min Score: 27.691496</span><br><span class="line">DBI          : 0.6635021486</span><br><span class="line"></span><br><span class="line">ClusterId 1u =&gt; Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">ClusterId 2u =&gt; Benign: 0.90 Malignant: 0.10 (95, 11)</span><br><span class="line">ClusterId 3u =&gt; Benign: 0.49 Malignant: 0.51 (151, 156)</span><br><span class="line">ClusterId 4u =&gt; Benign: 0.66 Malignant: 0.34 (141, 73)</span><br><span class="line"></span><br><span class="line">Predicted ClusterId: 1</span><br><span class="line">Predicted Distances: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br><span class="line"></span><br><span class="line">Predicted ClusterId RL: 1</span><br><span class="line">Predicted Distances RL: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result RL: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result RL   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>This has been a brief look into training and using an ML.NET k-means cluster model.  As seen with the other models, ML.NET is providing a nice consistent interface and has some good components.  It is a framework that continues to grow in a positive direction.  Kudos and thanks to all the people making this a reality.  That’s all for now.  Until next time.</p><p><img src="/images/mlnet3/320px-Abnormal_mammogram.jpg" alt=""></p><!-- Mammogram image is in the public domain: https://commons.wikimedia.org/wiki/File:Abnormal_mammogram.jpg -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With the release of v0.7.0, it is time to revisit K-means clustering using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and Microsoft’s new &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt; framework.  The api has changed enough to warrant a minor rework.  This post is a re-examination of a previous post &lt;a href=&quot;/2018/07/07/F-and-MLNet-Clustering/&quot;&gt;F# and ML.NET Clustering&lt;/a&gt;.  The use case will be to use examination attributes to classify mammogram results.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>F# and Elasticsearch</title>
    <link href="http://codesuji.com/2018/10/10/F-and-Elasticsearch/"/>
    <id>http://codesuji.com/2018/10/10/F-and-Elasticsearch/</id>
    <published>2018-10-11T00:51:50.000Z</published>
    <updated>2018-10-11T02:35:34.034Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I was working on a project using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="noopener">Elasticsearch</a>.  I thought it would be fun to post a light introduction.  Nicely enough, Elastic provides a .NET client, two actually <a href="https://www.elastic.co/guide/en/elasticsearch/client/net-api/current/index.html" target="_blank" rel="noopener">here</a>.  They are a combination of low level and high level interfaces.  As is sometimes the case, using F# and C#-style libraries requires some clever navigation of the interface.  For this post I will only focus on the high level interface (NEST).</p><a id="more"></a><p>Before getting into the code, an Elasticsearch server is needed.  This isn’t a tutorial on Elasticsearch, so I won’t go into a lot of setup and configuration detail; here are the <a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">instructions</a>.  Its a quick install, and here is what I did below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># Download</span><br><span class="line">curl -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.0.deb</span><br><span class="line"></span><br><span class="line"># Install</span><br><span class="line">sudo dpkg -i elasticsearch-6.4.0.deb</span><br><span class="line"></span><br><span class="line"># Configure: Edit /etc/elasticsearch/elasticsearch.yml</span><br><span class="line">cluster.name: simple-search</span><br><span class="line">node.name: node-1</span><br><span class="line"></span><br><span class="line"># Start service</span><br><span class="line">sudo systemctl start elasticsearch.service</span><br><span class="line"></span><br><span class="line"># Quick test</span><br><span class="line">curl -X GET &apos;http://localhost:9200&apos;</span><br><span class="line"></span><br><span class="line"># Results:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;node-1&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;simple-search&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;qAfHvbAgTC6O-r_jKS6qmA&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;6.4.0&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;deb&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;595516e&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-10-07T23:18:47.308994Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;7.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That was easy.  Continuing with the other prerequisites, I used <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.1</a>.  Select <strong>SDK</strong> for your platform.  After that, create a console F# project, then add the NEST package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name SimpleSearch</span><br><span class="line">cd SimpleSearch</span><br><span class="line">dotnet add package NEST --version 6.3.1 </span><br><span class="line"></span><br><span class="line"># Not required, but here is the other (low-level) .NET package</span><br><span class="line">dotnet add package Elasticsearch.Net --version=6.3.1</span><br></pre></td></tr></table></figure><p>There are a couple things to construct prior to the interesting things.  Include necessary namespaces.  The example will index files, and Elasticsearch needs a datatype.  <code>FileData</code> is a good structure to use for indexing.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Globalization</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> System.Security.Cryptography</span><br><span class="line"><span class="keyword">open</span> System.Text</span><br><span class="line"><span class="keyword">open</span> Nest</span><br><span class="line"></span><br><span class="line"><span class="comment">/// elasticsearch index name</span></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> SearchIndex = <span class="string">"simple-search"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Datatype for indexing</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">FileData</span> </span>= &#123;</span><br><span class="line">  Id: string;</span><br><span class="line">  Directoryname: string;</span><br><span class="line">  Filename: string;</span><br><span class="line">  Filetype: string;</span><br><span class="line">  Contents: string;</span><br><span class="line">  CreateDate: DateTime;</span><br><span class="line">  ModifyDate: DateTime;</span><br><span class="line">  IndexDate: DateTime &#125;</span><br></pre></td></tr></table></figure><p>There are a couple supporting functions to support the process.  <code>nullable</code> is used to support the NEST interface.  To create document ids I use a hash of the filename.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Convert int to Nullable int</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">inline</span> nullable (a:int) :Nullable&lt;int&gt; = System.Nullable&lt;int&gt;(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Hashing algorithm</span></span><br><span class="line"><span class="keyword">let</span> hashAlgorithm= <span class="keyword">new</span> SHA1Managed()</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Hash a string</span></span><br><span class="line"><span class="keyword">let</span> hash (s:string) =</span><br><span class="line">  <span class="keyword">let</span> bytes = Encoding.Unicode.GetBytes(s)</span><br><span class="line">  hashAlgorithm.ComputeHash(bytes)</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> x -&gt; String.Format(<span class="string">"&#123;0:x2&#125;"</span>, x))</span><br><span class="line">  |&gt; String.concat <span class="string">""</span></span><br></pre></td></tr></table></figure><p>Now to the interesting part.  It turns out connecting to the Elasticsearch service is straight forward.  Setting up a default index makes later calls more convenient.  There are more defaults that could be setup here as well.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="comment">// Configuration</span></span><br><span class="line">  <span class="keyword">let</span> node = <span class="keyword">new</span> Uri(<span class="string">"http://127.0.0.1:9200"</span>)</span><br><span class="line">  <span class="keyword">let</span> settings = <span class="keyword">new</span> ConnectionSettings(node)</span><br><span class="line">  settings.DefaultIndex(SearchIndex) |&gt; ignore</span><br><span class="line">  <span class="keyword">let</span> client = <span class="keyword">new</span> ElasticClient(settings)</span><br></pre></td></tr></table></figure><p>Adding a document to the index can be done using an F# record.  For this case I’ll take my <code>Program.fs</code> file and add it to the document index.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> filename = <span class="string">"Program.fs"</span></span><br><span class="line"><span class="keyword">let</span> data = &#123; </span><br><span class="line">  FileData.Id = (hash filename); </span><br><span class="line">  Directoryname = Path.GetDirectoryName(filename);</span><br><span class="line">  Filename = Path.GetFileName(filename);</span><br><span class="line">  Filetype = Path.GetExtension(filename);</span><br><span class="line">  Contents = File.ReadAllText(filename);</span><br><span class="line">  CreateDate = File.GetCreationTime(filename);</span><br><span class="line">  ModifyDate = File.GetLastWriteTime(filename);</span><br><span class="line">  IndexDate = DateTime.Now &#125;</span><br><span class="line"></span><br><span class="line">client.Index&lt;FileData&gt;(</span><br><span class="line">  <span class="keyword">new</span> IndexRequest&lt;FileData&gt;(</span><br><span class="line">    <span class="keyword">new</span> DocumentPath&lt;FileData&gt;(data)))</span><br></pre></td></tr></table></figure><p>Once the document is indexed, it can be displayed by showing all documents in the index.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> showContents = <span class="keyword">true</span></span><br><span class="line"><span class="keyword">let</span> searchResults = client.Search&lt;FileData&gt;(<span class="keyword">new</span> SearchRequest&lt;FileData&gt;())</span><br><span class="line">searchResults.Documents</span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> doc -&gt; </span><br><span class="line">  printfn <span class="string">"%s (%A)"</span> (Path.Combine(doc.Directoryname, doc.Filename)) (doc.ModifyDate)</span><br><span class="line">  <span class="keyword">if</span> showContents <span class="keyword">then</span> printfn <span class="string">"%s"</span> doc.Contents <span class="keyword">else</span> ())</span><br></pre></td></tr></table></figure><p>Showing all documents is fine, but not very interesting.  Here is a more useful example, performing a boolean search for text in either the <code>filename</code> or <code>contents</code> attributes of the document.  A couple notes here, constructing the search is a bit more involved.  When building the <code>SearchRequest</code> additional attributes can be set, like <code>Size</code> (the number of records to return).  It must also be upcast to <code>ISearchRequest</code> to be consumed.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Search and display results</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">"fsharp"</span></span><br><span class="line"><span class="keyword">let</span> result = client.Search&lt;FileData&gt;(<span class="keyword">fun</span> (s:SearchDescriptor&lt;FileData&gt;) -&gt;</span><br><span class="line">  <span class="keyword">new</span> SearchRequest(</span><br><span class="line">    Size = (nullable <span class="number">1000</span>), </span><br><span class="line">    Query = <span class="keyword">new</span> QueryContainer(query = BoolQuery(Should = [</span><br><span class="line">      <span class="keyword">new</span> QueryContainer(query = <span class="keyword">new</span> TermQuery(Field = <span class="keyword">new</span> Field(<span class="string">"filename"</span>), Value = text));</span><br><span class="line">      <span class="keyword">new</span> QueryContainer(query = <span class="keyword">new</span> TermQuery(Field = <span class="keyword">new</span> Field(<span class="string">"contents"</span>), Value = text))</span><br><span class="line">    ]))</span><br><span class="line">  ) :&gt; ISearchRequest)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"MaxScore: %f"</span> result.MaxScore</span><br><span class="line">result.Documents</span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> doc -&gt; </span><br><span class="line">  printfn <span class="string">"%s (%A)"</span> (Path.Combine(doc.Directoryname, doc.Filename)) (doc.ModifyDate)</span><br><span class="line">  <span class="keyword">if</span> showContents <span class="keyword">then</span> printfn <span class="string">"%s"</span> doc.Contents <span class="keyword">else</span> ())</span><br></pre></td></tr></table></figure><p>The above approach is typical.  But in the spirit of there-is-more-than-one-way-to-do-it, queries can be created in raw form.  Below is the same query.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Search and display results (use raw query)</span></span><br><span class="line"><span class="keyword">let</span> result = client.Search&lt;FileData&gt;(<span class="keyword">fun</span> (s:SearchDescriptor&lt;FileData&gt;) -&gt;</span><br><span class="line">  <span class="keyword">let</span> sr = <span class="keyword">new</span> Nest.SearchRequest(Size = (nullable <span class="number">1000</span>))</span><br><span class="line">  <span class="keyword">let</span> query = <span class="keyword">new</span> QueryContainerDescriptor&lt;FileData&gt;()</span><br><span class="line">  <span class="comment">// query.Raw((sprintf "&#123; \"match\": &#123; \"contents\": \"%s\"&#125; &#125;" text)) |&gt; ignore</span></span><br><span class="line">  <span class="keyword">let</span> queryString =</span><br><span class="line">    sprintf <span class="string">"</span></span><br><span class="line"><span class="string">              &#123;</span></span><br><span class="line"><span class="string">                \"bool\": &#123;</span></span><br><span class="line"><span class="string">                  \"should\": [</span></span><br><span class="line"><span class="string">                    &#123; \"term\": &#123; \"filename\": \"%s\" &#125;&#125;,</span></span><br><span class="line"><span class="string">                    &#123; \"term\": &#123; \"contents\": \"%s\" &#125;&#125; ] &#125; &#125;"</span> </span><br><span class="line">            text text</span><br><span class="line"></span><br><span class="line">  query.Raw(queryString) |&gt; ignore</span><br><span class="line">  sr.Query &lt;- query</span><br><span class="line">  sr :&gt; ISearchRequest)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"MaxScore: %f"</span> result.MaxScore</span><br><span class="line">result.Documents</span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> doc -&gt; </span><br><span class="line">  printfn <span class="string">"%s (%A)"</span> (Path.Combine(doc.Directoryname, doc.Filename)) (doc.ModifyDate)</span><br><span class="line">  <span class="keyword">if</span> showContents <span class="keyword">then</span> printfn <span class="string">"%s"</span> doc.Contents <span class="keyword">else</span> ())</span><br></pre></td></tr></table></figure><p>Now that I’ve shown an insert and searches, here is how to delete an index.  Deleting an index is easy enough, but it doesn’t take an index name as a string directly.  So an <code>Indices</code> object needs created from the index name string.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = client.DeleteIndex(<span class="keyword">new</span> DeleteIndexRequest(Indices.Parse(SearchIndex)))</span><br><span class="line">printfn <span class="string">"%A"</span> result</span><br></pre></td></tr></table></figure><p>There you have it.  This has been a short introduction into using F# with the Elasticsearch NEST library.  There is certainly more, but most of interesting composition exists in constructing custom searches.  The above patterns should be enough to guide the rest of the way.  One way this process could improve is to use discriminated and records.  To that end, a quick search found some projects in various states of completeness. I certainly enjoy finding these, since coding the F#-way is often more pleasant.  That puts these on my list for future evaluation.  That is all for today, until next time.  Thanks.</p><p><img src="/images/es1/es1.png" alt="Elasticsearch Client"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I was working on a project using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://www.elastic.co/products/elasticsearch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Elasticsearch&lt;/a&gt;.  I thought it would be fun to post a light introduction.  Nicely enough, Elastic provides a .NET client, two actually &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/net-api/current/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.  They are a combination of low level and high level interfaces.  As is sometimes the case, using F# and C#-style libraries requires some clever navigation of the interface.  For this post I will only focus on the high level interface (NEST).&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Text" scheme="http://codesuji.com/tags/Text/"/>
    
      <category term="Search" scheme="http://codesuji.com/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.Net Clustering</title>
    <link href="http://codesuji.com/2018/07/07/F-and-MLNet-Clustering/"/>
    <id>http://codesuji.com/2018/07/07/F-and-MLNet-Clustering/</id>
    <published>2018-07-07T11:41:19.000Z</published>
    <updated>2018-12-02T03:21:49.961Z</updated>
    
    <content type="html"><![CDATA[<p>The discovering ML.NET series continues.  With the release of v0.3.0, it is time to look at performing K-means clustering using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and Microsoft’s new <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a> framework.  The use case will be to use examination attributes to classify mammogram results.</p><a id="more"></a><p><strong>NOTE: Due to ML.NET changes, this post is superceded by the post <a href="/2018/11/30/F-and-MLNet-Clustering-V2/">Clustering-V2</a>.</strong></p><p>For reference, previous ML.NET series posts are below:</p><ul><li><a href="/2018/06/09/F-and-MLNet-Regression">F# and ML.NET Regression</a> </li><li><a href="/2018/06/23/F-and-MLNet-Classification">F# and ML.NET Classification</a></li></ul><p>As I mentioned in the previous posts, there is a disclaimer: ML.NET is in its early stages.  I found a couple interface idiosyncrasies I suspect will change over time.  Just keep that in mind.  I am happy with what I have seen so far, and I’m excited to see it grow and mature.</p><p><i>Note: The post was written using Microsoft.ML v0.3.0.</i></p><p>Make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.1</a> installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>First, create a console F# project, then add the ML.NET package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-Mammogram</span><br><span class="line">cd MLNet-Mammogram</span><br><span class="line">dotnet add package Microsoft.ML</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source I used for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Mammographic+Mass" target="_blank" rel="noopener">UCI</a>.  The datafile can be found [here] (<a href="https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data" target="_blank" rel="noopener">https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is no header row.  The columns represent 5 features and 1 classification column:</p><ul><li>BI-RADS assessment (1-5)</li><li>Age (Patient’s age)</li><li>Shape (mass shape: round=1 oval=2 lobular=3 irregular=4 (nominal))</li><li>Margin (mass margin: circumscribed=1 microlobulated=2 obscured=3 ill-defined=4 spiculated=5 (nominal))</li><li>Density: (mass density high=1 iso=2 low=3 fat-containing=4 (ordinal))</li><li>Severity: (benign=0 or malignant=1)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">5,67,3,5,3,1</span><br><span class="line">4,43,1,1,?,1</span><br><span class="line">5,58,4,5,3,1</span><br><span class="line">4,28,1,1,3,0</span><br><span class="line">5,57,1,5,3,1</span><br></pre></td></tr></table></figure><p>Now that the project is setup and data is local, we can get to the code.  Time to open up the already created <code>Program.fs</code>.  First, add the necessary namespaces.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Api</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Trainers</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Transforms</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Models</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br></pre></td></tr></table></figure><p>The ML.NET pipeline expects the data in a specific format.  In the C# world, this is a class, for F# we can use a type.  Below are the required types; <code>MammogramData</code> is the input data, <code>MammogramPrediction</code> is the output prediction.  For <code>MammogramData</code>, this is basically a a map of columns to member variables.  There are a couple notable points to ensure the pipeline can properly consume the data.  Each attribute must be <code>mutable public</code>, it also requires the <code>[&lt;Column(&quot;#&quot;)&gt;]</code> to specify it’s column position, and <code>[&lt;DefaultValue&gt;]</code> attributes.  For <code>MammogramPrediction</code>, <code>PredictionLabel</code> for the cluster id, and <code>Score</code> for calculated distances from all clusters is required.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MammogramPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;Column("0")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> BiRads:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("1")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Age:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("2")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Shape:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("3")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Margin:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("4")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Density:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("5")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label :float32</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MammogramPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;ColumnName("PredictedLabel")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SelectedClusterId:uint32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;ColumnName("Score")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Distance: float32[]</span><br></pre></td></tr></table></figure><p>As the other examples, building the pipeline structure is intuitive.  First, create a pipeline.  Then, add components to the pipeline in the order to be executed.  So first, load the data with a <code>TextLoader</code>.  This data is comma delimited and has a header row.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pipeline = <span class="keyword">new</span> LearningPipeline()</span><br><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"./data/mammographic_masses.data"</span></span><br><span class="line">pipeline.Add((<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;MammogramData&gt;(separator = ',', useHeader = <span class="keyword">false</span>))</span><br></pre></td></tr></table></figure><p>After the data is loaded, feature columns need to be added to the pipeline.  I’m going to use all feature columns from the file, and exclude severity.  The clustering model requires features to be numeric, which if fine here.  As the other posts show, you can convert text to numeric mappings if necessary.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> ColumnConcatenator(<span class="string">"Features"</span>, <span class="string">"BiRads"</span>, <span class="string">"Age"</span>, <span class="string">"Shape"</span>, <span class="string">"Margin"</span>, <span class="string">"Density"</span>))</span><br></pre></td></tr></table></figure><p>Now that the features are defined, it is time to define the training method.  This will be <code>KMeansPlusPlusClusterer</code>.  Similar to the other trainers, custom parameters can be defined, I have decided to use <code>K = 4</code>.  It also has other options as as <code>MaxIterations</code>, <code>OptTol</code> (convergence tolerance), and <code>NormalizeFeatures</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> KMeansPlusPlusClusterer(K = <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>The last part, train the model.  Note the <code>MammogramData</code> and <code>MammogramPrediction</code> types as part of the <code>Train</code> call.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> model = pipeline.Train&lt;MammogramData, MammogramPrediction&gt;()</span><br></pre></td></tr></table></figure><p>Validation of any model is important.  For a real case, I would train on one dataset and validate against a previously unseen dataset.  Since this is just an example, I validate against the training data.  As a result, I expect the predictions to be really accurate.  ML.NET offers multiple Evaluator classes, based on specific needs.  For this, the obvious choice is <code>ClusterEvaluator</code>, it takes a trained model and a dataset, and produces critical metrics.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Evaluate results</span></span><br><span class="line"><span class="keyword">let</span> testData = (<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;MammogramData&gt;(separator = ',', useHeader = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">let</span> evaluator = <span class="keyword">new</span> ClusterEvaluator()</span><br><span class="line"><span class="keyword">let</span> metrics = evaluator.Evaluate(model, testData)</span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Avg Min Score: %f"</span> &lt;| metrics.AvgMinScore</span><br><span class="line"><span class="comment">// Davies-Bouldin Index</span></span><br><span class="line">printfn <span class="string">"DBI          : %A"</span> &lt;| metrics.Dbi</span><br><span class="line"><span class="comment">// Normalized Mutual Information</span></span><br><span class="line">printfn <span class="string">"NMI          : %A"</span> &lt;| metrics.Nmi</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Automatically adding a MinMax normalization transform, <span class="keyword">use</span> 'norm=Warn' <span class="keyword">or</span> 'norm=No' <span class="keyword">to</span> turn this behavior off.</span><br><span class="line">Initializing centroids</span><br><span class="line">Centroids initialized, starting main trainer</span><br><span class="line">Model trained successfully on <span class="number">829</span> instances</span><br><span class="line">Not training a calibrator because it is not needed.</span><br><span class="line"></span><br><span class="line">Avg Min Score: <span class="number">0.049841</span></span><br><span class="line">DBI          : <span class="number">0.0</span></span><br><span class="line">NMI          : <span class="number">0.3012495931</span></span><br></pre></td></tr></table></figure><p>With the initial evaluation out of the way, it is time to move onto individual predictions.  I want to create aggregate classification percentages for each cluster.  To do this I take the predictive model and apply it against the the training file.  Using the predicted cluster and the training label, I create a mapping for detailed predictions.  Each cluster gets its own raw benign/malignant count, which can be converted into percentage likelihood for each classification.  I have the details annotated in comments, to make it easier to follow.  Honestly, this is the most labor-intensive part of the process.  I’d love to be able to pass an cluster-aggregate-score function in as part of the trainer to eliminate this work or reprocessing the data.  Once I have these results as a <code>Map</code>, I can query results easy enough.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Create classifications by cluster </span></span><br><span class="line">  <span class="keyword">let</span> clusterClassification = </span><br><span class="line">    <span class="comment">// Read file</span></span><br><span class="line">    System.IO.File.ReadAllLines(dataPath)</span><br><span class="line">    <span class="comment">// Filter incomplete rows</span></span><br><span class="line">    |&gt; Array.filter (<span class="keyword">fun</span> line -&gt; not (line.Contains(<span class="string">"?"</span>)))</span><br><span class="line">    <span class="comment">// Run predictions </span></span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> line -&gt; </span><br><span class="line">      <span class="comment">// Convert line to float array</span></span><br><span class="line">      <span class="keyword">let</span> row = line.Split(',') |&gt; Array.map float32</span><br><span class="line">      <span class="comment">// Predict the clusterId of the row</span></span><br><span class="line">      <span class="keyword">let</span> predictedCluster = </span><br><span class="line">        model.Predict(</span><br><span class="line">          MammogramData(</span><br><span class="line">            BiRads = row.[<span class="number">0</span>],</span><br><span class="line">            Age = row.[<span class="number">1</span>],</span><br><span class="line">            Shape = row.[<span class="number">2</span>],</span><br><span class="line">            Margin = row.[<span class="number">3</span>],</span><br><span class="line">            Density = row.[<span class="number">4</span>])) </span><br><span class="line">      <span class="comment">// Populate benign/maligant counter for cluster (0=benign, 1=malignant)</span></span><br><span class="line">      <span class="keyword">if</span> int row.[<span class="number">5</span>] = <span class="number">0</span> </span><br><span class="line">      <span class="keyword">then</span> (predictedCluster.SelectedClusterId, [| <span class="number">1</span>; <span class="number">0</span> |])</span><br><span class="line">      <span class="keyword">else</span> (predictedCluster.SelectedClusterId, [| <span class="number">0</span>; <span class="number">1</span> |]))</span><br><span class="line">    <span class="comment">// Group by ClusterId</span></span><br><span class="line">    |&gt; Array.groupBy (<span class="keyword">fun</span> (clusterId, _) -&gt; clusterId)</span><br><span class="line">    <span class="comment">// Sum each cluster's classification counts</span></span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> (clusterId, data) -&gt; </span><br><span class="line">      <span class="keyword">let</span> countSums = </span><br><span class="line">        data</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> (_, z) -&gt; z)</span><br><span class="line">        |&gt; Array.fold (<span class="keyword">fun</span> a (x:int []) -&gt; </span><br><span class="line">            [| a.[<span class="number">0</span>] + x.[<span class="number">0</span>]; a.[<span class="number">1</span>] + x.[<span class="number">1</span>] |]) [| <span class="number">0</span>; <span class="number">0</span> |] </span><br><span class="line">      (clusterId, countSums))</span><br><span class="line">    |&gt; Map.ofArray</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Provide a prediction based on cluster id</span></span><br><span class="line"><span class="keyword">let</span> clusterIdToPrediction (clusterClassification:Map&lt;uint32, int[]&gt;) (clusterId:uint32) =</span><br><span class="line">  <span class="keyword">let</span> classifications = clusterClassification.Item clusterId</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> total = classifications |&gt; Array.sum |&gt; float</span><br><span class="line">  <span class="keyword">let</span> benignPct = float classifications.[<span class="number">0</span>] / total</span><br><span class="line">  <span class="keyword">let</span> malignantPct = float classifications.[<span class="number">1</span>] / total</span><br><span class="line"></span><br><span class="line">  sprintf <span class="string">"Benign: %0.2f Malignant: %0.2f (%d, %d)"</span> </span><br><span class="line">    benignPct </span><br><span class="line">    malignantPct </span><br><span class="line">    classifications.[<span class="number">0</span>] </span><br><span class="line">    classifications.[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>Now that the <code>clusterIdToPrediction</code> is defined, I can pair the ML.NET cluster prediction with the aggregated cluster classification percentages.  First, create a <code>MammogramData</code> object and provide it to the <code>Predict</code> method.  Second, use the predicted clusterId with the aggregated cluster classification percentages to get a classification result.  For this example, I pull one of those rows from the training data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = MammogramData()</span><br><span class="line">test1.BiRads &lt;- <span class="number">5.</span>f</span><br><span class="line">test1.Age &lt;- <span class="number">67.</span>f</span><br><span class="line">test1.Shape &lt;- <span class="number">3.</span>f</span><br><span class="line">test1.Margin &lt;- <span class="number">5.</span>f</span><br><span class="line">test1.Density &lt;- <span class="number">3.</span>f</span><br><span class="line"><span class="comment">// Actual: 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionTest1 = model.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted ClusterId: %d"</span> predictionTest1.SelectedClusterId</span><br><span class="line">printfn <span class="string">"Predicted Distances: %A"</span> predictionTest1.Distance</span><br><span class="line">printfn <span class="string">"Predicted Result: %s"</span> (clusterIdToPrediction clusterClassification predictionTest1.SelectedClusterId)</span><br><span class="line">printfn <span class="string">"Actual Result   : 1 (Malignant)"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>The results show the prediction falls into cluster 3, which has a 84% likelihood it is malignant, which matches the actual value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result:</span><br><span class="line">Predicted ClusterId: 3</span><br><span class="line">Predicted Distances: [|0.128789425f; 0.166862488f; 0.0578770638f; 0.80590868f|]</span><br><span class="line">Predicted Result: Benign: 0.16 Malignant: 0.84 (19, 99)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>Like the other models before it, the cluster model can be saved to a file and reloaded later.  This is supported by the <code>WriteAsync</code> and <code>ReadAsync</code> methods of a model.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line">model.WriteAsync(<span class="string">"test-model"</span>)</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; ignore</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file and run a prediction</span></span><br><span class="line"><span class="keyword">let</span> modelReloaded =</span><br><span class="line">  PredictionModel.ReadAsync&lt;MammogramData, MammogramPrediction&gt;(<span class="string">"test-model"</span>) </span><br><span class="line">  |&gt; Async.AwaitTask </span><br><span class="line">  |&gt; Async.RunSynchronously</span><br><span class="line"><span class="keyword">let</span> predictionReloaded = modelReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted ClusterId RL: %d"</span> predictionReloaded.SelectedClusterId</span><br><span class="line">printfn <span class="string">"Predicted Distances RL: %A"</span> predictionReloaded.Distance</span><br><span class="line">printfn <span class="string">"Predicted Result RL: %s"</span> (clusterIdToPrediction clusterClassification predictionReloaded.SelectedClusterId)</span><br><span class="line">printfn <span class="string">"Actual Result RL   : 1 (Malignant)"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>As expected, the prediction results are the same with the reloaded model.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result: (model reloaded):</span><br><span class="line">Predicted ClusterId RL: 3</span><br><span class="line">Predicted Distances RL: [|0.128789425f; 0.166862488f; 0.0578770638f; 0.80590868f|]</span><br><span class="line">Predicted Result RL: Benign: 0.16 Malignant: 0.84 (19, 99)</span><br><span class="line">Actual Result RL   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>Throughout the post, portions of the output have been provided out of band.  Here is how the whole thing looks when run with <code>dotnet run</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Automatically adding a MinMax normalization transform, use &apos;norm=Warn&apos; or &apos;norm=No&apos; to turn this behavior off.</span><br><span class="line">Initializing centroids</span><br><span class="line">Centroids initialized, starting main trainer</span><br><span class="line">Model trained successfully on 829 instances</span><br><span class="line">Not training a calibrator because it is not needed.</span><br><span class="line"></span><br><span class="line">Avg Min Score: 0.049841</span><br><span class="line">DBI          : 0.0</span><br><span class="line">NMI          : 0.3012495931</span><br><span class="line"></span><br><span class="line">ClusterId 1u =&gt; Benign: 0.26 Malignant: 0.74 (83, 236)</span><br><span class="line">ClusterId 2u =&gt; Benign: 0.59 Malignant: 0.41 (41, 29)</span><br><span class="line">ClusterId 3u =&gt; Benign: 0.16 Malignant: 0.84 (19, 99)</span><br><span class="line">ClusterId 4u =&gt; Benign: 0.88 Malignant: 0.12 (284, 39)</span><br><span class="line"></span><br><span class="line">Predicted ClusterId: 3</span><br><span class="line">Predicted Distances: [|0.128789425f; 0.166862488f; 0.0578770638f; 0.80590868f|]</span><br><span class="line">Predicted Result: Benign: 0.16 Malignant: 0.84 (19, 99)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br><span class="line"></span><br><span class="line">Predicted ClusterId RL: 3</span><br><span class="line">Predicted Distances RL: [|0.128789425f; 0.166862488f; 0.0578770638f; 0.80590868f|]</span><br><span class="line">Predicted Result RL: Benign: 0.16 Malignant: 0.84 (19, 99)</span><br><span class="line">Actual Result RL   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>This has been a brief look into training and using an ML.NET k-means cluster model.  As seen with the other models, ML.NET is providing a nice consistent interface and has some good components.  It is a framework that continues to grow in a positive direction.  Kudos and thanks to all the people making this a reality.  That’s all for now.  Until next time.</p><p><img src="/images/mlnet3/320px-Abnormal_mammogram.jpg" alt=""></p><!-- Mammogram image is in the public domain: https://commons.wikimedia.org/wiki/File:Abnormal_mammogram.jpg -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The discovering ML.NET series continues.  With the release of v0.3.0, it is time to look at performing K-means clustering using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and Microsoft’s new &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt; framework.  The use case will be to use examination attributes to classify mammogram results.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.Net Classification</title>
    <link href="http://codesuji.com/2018/06/23/F-and-MLNet-Classification/"/>
    <id>http://codesuji.com/2018/06/23/F-and-MLNet-Classification/</id>
    <published>2018-06-23T12:34:25.000Z</published>
    <updated>2018-06-30T21:26:39.099Z</updated>
    
    <content type="html"><![CDATA[<p>Expanding on my previous post, <a href="/2018/06/09/F-and-MLNet-Regression">F# and ML.NET Regression</a>, the current post will take a look at performing classification using Microsoft’s new <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a> framework.  The task at hand will be to use biomechanical attributes to classify patient vertebra conditions into normal (NO), disk hernia (DH), or spondilolysthesis (SL) categories.</p><a id="more"></a><p>As I mentioned in the previous post, there is a disclaimer: ML.NET is in its early stages.  I found a couple implementation and interface idiosyncrasies I suspect will change over time.  Just keep that in mind moving forward.  But knowing that, I’ve been pleased with what I’ve seen so far. </p><p><i>Update: The post was written using Microsoft.ML v0.1.0, and v0.2.0 has since been released.  I have noted interfaces changes below, for the example it is just TextLoader.</i></p><p>Make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.1</a> installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>First, create a console F# project, then add the ML.NET package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-Vertebral</span><br><span class="line">cd MLNet-Vertebral</span><br><span class="line">dotnet add package Microsoft.ML</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source I used for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Vertebral+Column" target="_blank" rel="noopener">UCI</a>.  The datafile can be found <a href="https://archive.ics.uci.edu/ml/machine-learning-databases/00212/vertebral_column_data.zip" target="_blank" rel="noopener">here</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/00212/vertebral_column_data.zip</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is no header row.  The columns represent 6 features and 1 classification column:</p><ul><li>pelvic_incidence</li><li>pelvic_tilt</li><li>lumbar_lordosis_angle</li><li>sacral_slope</li><li>pelvic_radius</li><li>degree_spondylolisthesis</li><li>class</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">63.03,22.55,39.61,40.48,98.67,-0.25,DH</span><br><span class="line">39.06,10.06,25.02,29,114.41,4.56,DH</span><br><span class="line">68.83,22.22,50.09,46.61,105.99,-3.53,DH</span><br><span class="line">69.3,24.65,44.31,44.64,101.87,11.21,DH</span><br></pre></td></tr></table></figure><p>Now that the project is setup and data is local, we can get to the code.  Time to open up the already created <code>Program.fs</code>.  First, add the necessary namespaces.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Api</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Trainers</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Transforms</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Models</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Learners</span><br><span class="line"></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br></pre></td></tr></table></figure><p>The ML.NET pipeline expects the data in a specific format.  In the C# world, this is a class, for F# we can use a type.  Below are the required types; <code>VertebralData</code> is the input data, <code>VertebralPrediction</code> is the output prediction.  For <code>VertebralData</code>, this is basically a a map of columns to member variables.  There are a couple notable points to ensure the pipeline can properly consume the data.  Each attribute must be <code>mutable public</code>, it also requires the <code>[&lt;Column(&quot;#&quot;)&gt;]</code> to specify it’s column position, and <code>[&lt;DefaultValue&gt;]</code> attributes.  For <code>VertebralPrediction</code>, a single attribute is required, the prediction value.  For the input data, the label variable must be named <code>Label</code>.  For the prediction type, the variable must be labeled <code>PredictedLabel</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">VertebralData</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;Column("0")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> PelvicIncidence :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("1")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> PelvicTilt :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("2")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> LumbarLordosisAngle :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("3")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SacralSlope :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("4")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> PelvicRadius :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("5")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> DegreeSpondylolisthesis :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("6")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label:string</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">VertebralPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> PredictedLabel:string</span><br></pre></td></tr></table></figure><p>Building the pipeline structure is reasonably intuitive.  First, create a pipeline.  Then, add components to the pipeline in the order to be executed.  So first, load the data with a <code>TextLoader</code>.  This data is comma delimited and has a header row.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pipeline = <span class="keyword">new</span> LearningPipeline()</span><br><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"./data/column_3C.dat"</span></span><br><span class="line"><span class="comment">// v0.1.0 </span></span><br><span class="line"><span class="comment">// pipeline.Add(new TextLoader&lt;VertebralData&gt;(dataPath, separator = ",", useHeader = false))</span></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line">pipeline.Add((<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;VertebralData&gt;(separator = ',', useHeader = <span class="keyword">false</span>))</span><br></pre></td></tr></table></figure><p>After the data is loaded, feature columns need to be added to the pipeline.  I’m going to use all feature columns from the file, but I don’t have to.  The classification model requires features to be numeric.  The features don’t need anything special done to them, but the class does need converted to numeric values.  For this I use <code>Dictionarizer</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> Dictionarizer(<span class="string">"Label"</span>))</span><br><span class="line">pipeline.Add(<span class="keyword">new</span> ColumnConcatenator(<span class="string">"Features"</span>, <span class="string">"PelvicIncidence"</span>, <span class="string">"PelvicTilt"</span>, <span class="string">"LumbarLordosisAngle"</span>, <span class="string">"SacralSlope"</span>, <span class="string">"PelvicRadius"</span>, <span class="string">"DegreeSpondylolisthesis"</span>))</span><br></pre></td></tr></table></figure><p>Now that the features are defined, it is time to determine what training method to use.  For this post <code>StochasticDualCoordinateAscentClassifier</code> is used.  Custom hyperparameters can also be defined.  I have a commented out example that changes bias and convergence tolerance.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> StochasticDualCoordinateAscentClassifier())</span><br><span class="line"><span class="comment">// pipeline.Add(new StochasticDualCoordinateAscentClassifier(BiasLearningRate = 0.1f, ConvergenceTolerance = 0.3f))</span></span><br></pre></td></tr></table></figure><p>For the dataset in question, the <code>StochasticDualCoordinateAscentClassifier</code> worked well, but I could’ve used a <code>NaiveBayesClassifier</code> as well.  Since this is multiclass, I had less options, but ML.NET seems to have a fair amount of binary classifiers, when that is the desired use case.</p><p>The last part, train the model.  Note the <code>VertebralData</code> and <code>VertebralPrediction</code> types as part of the <code>Train</code> call.  I also need to define the prediction label column name.  Unfortunantly the function name is really long, but it is at least descriptive…</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> PredictedLabelColumnOriginalValueConverter(PredictedLabelColumn = <span class="string">"PredictedLabel"</span>) )    </span><br><span class="line"><span class="keyword">let</span> model = pipeline.Train&lt;VertebralData, VertebralPrediction&gt;()</span><br></pre></td></tr></table></figure><p>Validation of any model is important.  For a real case, I would train on one dataset and validate against a previously unseen dataset.  Since this is just an example, I validate against the training data.  As a result, I expect the results to be very good, and they are.  ML.NET offers multiple Evaluator classes, based on specific needs. This makes getting some of those crucial high-level numbers pretty easy.  It takes a trained model and a dataset, and produces critical metrics.  One specific call-out I will make is to the <code>TopKAccuracy</code>.  The evaluator allows an additional accuracy result based on if the correct class was in the top <code>k</code> rankings for a prediction.  Here I have choosen <code>2</code>, which is a little silly in a 3 class problem, but obviously in larger problems this is a valuable analysis tool.  The confusion matrix takes a bit of coercing to print nicely, but at least the data is there.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Evaluate results</span></span><br><span class="line"><span class="comment">// v0.1.0</span></span><br><span class="line"><span class="comment">// let testData = new TextLoader&lt;VertebralData&gt;(dataPath, separator = ",", useHeader = false)</span></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line"><span class="keyword">let</span> testData = (<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;VertebralData&gt;(separator = ',', useHeader = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">let</span> evaluator = <span class="keyword">new</span> ClassificationEvaluator()</span><br><span class="line">evaluator.OutputTopKAcc &lt;- Option.toNullable(Some(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">let</span> metrics = evaluator.Evaluate(model, testData) </span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Macro-Average Accuracy : %f"</span> &lt;| metrics.AccuracyMacro</span><br><span class="line">printfn <span class="string">"Micro-Average Accuracy : %f"</span> &lt;| metrics.AccuracyMicro</span><br><span class="line">printfn <span class="string">"Average Log-loss       : %f"</span> &lt;| metrics.LogLoss</span><br><span class="line">printfn <span class="string">"Relative Log-loss      : %f"</span> &lt;| metrics.LogLossReduction</span><br><span class="line">printfn <span class="string">"Classes                : %A"</span> &lt;| metrics.ConfusionMatrix.ClassNames</span><br><span class="line">printfn <span class="string">"Log-loss by class      : %A"</span> &lt;| metrics.PerClassLogLoss</span><br><span class="line">printfn <span class="string">"Top-k Accuracy         : %f"</span> &lt;| metrics.TopKAccuracy</span><br><span class="line"></span><br><span class="line"><span class="comment">// Confusion Matrix Header</span></span><br><span class="line">printfn <span class="string">"Confusion Matrix       :"</span></span><br><span class="line">[<span class="number">0.</span>.metrics.ConfusionMatrix.Order - <span class="number">1</span>]</span><br><span class="line">|&gt; List.map (<span class="keyword">fun</span> a -&gt; sprintf <span class="string">"%4s "</span> (metrics.ConfusionMatrix.ClassNames.[a]))</span><br><span class="line">|&gt; List.fold (+) <span class="string">"     "</span></span><br><span class="line">|&gt; printfn <span class="string">"%s"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Confusion Matrix Data </span></span><br><span class="line">[<span class="number">0.</span>.metrics.ConfusionMatrix.Order - <span class="number">1</span>]</span><br><span class="line">|&gt; List.iter (<span class="keyword">fun</span> a -&gt; </span><br><span class="line">  [<span class="number">0.</span>.metrics.ConfusionMatrix.Order - <span class="number">1</span>]</span><br><span class="line">  |&gt; List.map (<span class="keyword">fun</span> b -&gt; sprintf <span class="string">"%4d "</span> (int (metrics.ConfusionMatrix.Item(a,b))))</span><br><span class="line">  |&gt; List.fold (+) (sprintf <span class="string">"%4s "</span> (metrics.ConfusionMatrix.ClassNames.[a]))</span><br><span class="line">  |&gt; printfn <span class="string">"%s"</span></span><br><span class="line">)</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Evaluator Results:</span><br><span class="line">Macro-Average Accuracy : 0.817778</span><br><span class="line">Micro-Average Accuracy : 0.858065</span><br><span class="line">Average Log-loss       : 0.313334</span><br><span class="line">Relative Log-loss      : 69.699239</span><br><span class="line">Classes                : [|&quot;DH&quot;; &quot;SL&quot;; &quot;NO&quot;|]</span><br><span class="line">Log-loss by class      : [|0.5853304274; 0.1233100547; 0.4351712598|]</span><br><span class="line">Top-k Accuracy         : 0.996774</span><br><span class="line"></span><br><span class="line">Confusion Matrix       :</span><br><span class="line">       DH   SL   NO </span><br><span class="line">  DH   40    1   19 </span><br><span class="line">  SL    3  142    5 </span><br><span class="line">  NO   13    3   84 </span><br></pre></td></tr></table></figure><p>With the initial evaluation out of the way, here is an example of how individual predictions can be made.  Create a <code>VertebralData</code> object and provide it to the <code>Predict</code> method.  For this example, I pull one of those rows from the training data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = VertebralData()</span><br><span class="line">test1.PelvicTilt &lt;- <span class="number">63.03</span>f</span><br><span class="line">test1.LumbarLordosisAngle &lt;- <span class="number">22.55</span>f</span><br><span class="line">test1.SacralSlope &lt;- <span class="number">39.61</span>f</span><br><span class="line">test1.PelvicRadius &lt;- <span class="number">40.48</span>f</span><br><span class="line">test1.DegreeSpondylolisthesis &lt;- <span class="number">-0.25</span>f</span><br><span class="line"><span class="keyword">let</span> prediction = model.Predict(test1)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"Predicted Category: %s"</span> prediction.PredictedLabel</span><br><span class="line">printfn <span class="string">"Actual Category   : DH"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result:</span><br><span class="line">Predicted Category: DH</span><br><span class="line">Actual Category   : DH</span><br></pre></td></tr></table></figure><p>Once a model is trained, it can also be saved to a file a reloaded at a later time.  This is supported by the <code>WriteAsync</code> and <code>ReadAsync</code> methods of a model.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file </span></span><br><span class="line">model.WriteAsync(<span class="string">"test-model"</span>)</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; ignore</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file and run a prediction</span></span><br><span class="line"><span class="keyword">let</span> modelReloaded =</span><br><span class="line">  PredictionModel.ReadAsync&lt;VertebralData, VertebralPrediction&gt;(<span class="string">"test-model"</span>) </span><br><span class="line">  |&gt; Async.AwaitTask </span><br><span class="line">  |&gt; Async.RunSynchronously</span><br><span class="line"><span class="keyword">let</span> predictionReloaded = modelReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted Category (Reloaded): %s"</span> predictionReloaded.PredictedLabel</span><br><span class="line">printfn <span class="string">"Actual Category (Reloaded)   : DH"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result: (model reloaded):</span><br><span class="line">Predicted Category (Reloaded): DH</span><br><span class="line">Actual Category (Reloaded)   : DH</span><br></pre></td></tr></table></figure><p>Throughout the post, portions of the output have been provided out of band.  Here is how the whole thing looks when run with <code>dotnet run</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Automatically adding a MinMax normalization transform, use &apos;norm=Warn&apos; or &apos;norm=No&apos; to turn this behavior off.</span><br><span class="line">Using 2 threads to train.</span><br><span class="line">Automatically choosing a check frequency of 2.</span><br><span class="line">Auto-tuning parameters: maxIterations = 4836.</span><br><span class="line">Auto-tuning parameters: L2 = 2.668161E-05.</span><br><span class="line">Auto-tuning parameters: L1Threshold (L1/L2) = 0.</span><br><span class="line">Using best model from iteration 448.</span><br><span class="line">Not training a calibrator because it is not needed.</span><br><span class="line"></span><br><span class="line">Macro-Average Accuracy : 0.817778</span><br><span class="line">Micro-Average Accuracy : 0.858065</span><br><span class="line">Average Log-loss       : 0.313334</span><br><span class="line">Relative Log-loss      : 69.699239</span><br><span class="line">Classes                : [|&quot;DH&quot;; &quot;SL&quot;; &quot;NO&quot;|]</span><br><span class="line">Log-loss by class      : [|0.5853304274; 0.1233100547; 0.4351712598|]</span><br><span class="line">Top-k Accuracy         : 0.996774</span><br><span class="line">Confusion Matrix       :</span><br><span class="line">       DH   SL   NO </span><br><span class="line">  DH   40    1   19 </span><br><span class="line">  SL    3  142    5 </span><br><span class="line">  NO   13    3   84 </span><br><span class="line"></span><br><span class="line">Predicted Category: DH</span><br><span class="line">Actual Category   : DH</span><br><span class="line"></span><br><span class="line">Predicted Category (Reloaded): DH</span><br><span class="line">Actual Category (Reloaded)   : DH</span><br></pre></td></tr></table></figure><p>This has been a brief look into training and using an ML.NET classification model.  There were two interesting takeaways for me.  The first is just how to interact with the framework for classification.  The second, and more interesting, is how little is different between the regressor and classification pipelines.  I really appreciate a consistent framework where I can leverage a similar pipeline for most of my projects, and only really need to change out the appropriate logic bits for my specfic current problem.  ML.NET has some really good components, and it will be interesting to see it grows, hopefully with more F#-centric support as well. Until next time.</p><p><img src="/images/mlnet2/184px-SpondylolisthesisL5S1.jpg" alt=""></p><!-- Image available under the Creative Commons license.  Source: https://commons.wikimedia.org/wiki/File:SpondylolisthesisL5S1.jpg Author: Lucien Monfils -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Expanding on my previous post, &lt;a href=&quot;/2018/06/09/F-and-MLNet-Regression&quot;&gt;F# and ML.NET Regression&lt;/a&gt;, the current post will take a look at performing classification using Microsoft’s new &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt; framework.  The task at hand will be to use biomechanical attributes to classify patient vertebra conditions into normal (NO), disk hernia (DH), or spondilolysthesis (SL) categories.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.Net Regression</title>
    <link href="http://codesuji.com/2018/06/09/F-and-MLNet-Regression/"/>
    <id>http://codesuji.com/2018/06/09/F-and-MLNet-Regression/</id>
    <published>2018-06-09T12:48:41.000Z</published>
    <updated>2018-06-30T21:27:35.364Z</updated>
    
    <content type="html"><![CDATA[<p>Recently Microsoft announced <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a>, a machine learning framework for .NET.  This is exciting news.  So my mind immediately goes to: how does this look with <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>?  The current post will take a look at using ML.NET’s regression module to predict concrete compressive strength based on its composite ingredients.</p><a id="more"></a><p>Before jumping in too far, there is a disclaimer: ML.NET is in its early stages.  I found a couple implementation and interface idiosyncrasies I suspect will change over time.  Just keep that in mind moving forward.  The short version is, I’ve been pleased with what I’ve seen so far.  There is some room for improvement, especially having more F#-centric support for calling methods.  It will be an interesting journey as the framework matures.</p><p><i>Update: The post was written using Microsoft.ML v0.1.0, and v0.2.0 has since been released.  I have noted interfaces changes below, for the example it is just TextLoader.</i></p><p>With that out of the way, make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.0</a> installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>First, create the project and add the ML.NET package.  This will be a console app in F# (obviously).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-Concrete</span><br><span class="line">cd MLNet-Concrete</span><br><span class="line">dotnet add package Microsoft.ML</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source I used for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Concrete+Compressive+Strength" target="_blank" rel="noopener">UCI</a>.  The dataset is an Excel file (xls), and I need it as a csv.  I used <code>ssource</code> (from <code>apt install gnumeric</code>) to convert from Excel to CSV, but feel free to use whatever works for you.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls</span><br><span class="line">ssource Concrete_Data.xls Concrete_Data.csv</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is a header row, I’ve transposed this to a vertical list for readablity.  The first 8 columns are features, the last is the concrete compressive strength.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Header Row</span><br><span class="line">Cement (component 1)(kg in a m^3 mixture)</span><br><span class="line">Blast Furnace Slag (component 2)(kg in a m^3 mixture)</span><br><span class="line">Fly Ash (component 3)(kg in a m^3 mixture)</span><br><span class="line">Water  (component 4)(kg in a m^3 mixture)</span><br><span class="line">Superplasticizer (component 5)(kg in a m^3 mixture)</span><br><span class="line">Coarse Aggregate  (component 6)(kg in a m^3 mixture)</span><br><span class="line">Fine Aggregate (component 7)(kg in a m^3 mixture)</span><br><span class="line">Age (day)</span><br><span class="line">Concrete compressive strength(MPa, megapascals)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">540,0,0,162,2.5,1040,676,28,79.98611076</span><br><span class="line">540,0,0,162,2.5,1055,676,28,61.887365759999994</span><br><span class="line">332.5,142.5,0,228,0,932,594,270,40.269535256000005</span><br><span class="line">332.5,142.5,0,228,0,932,594,365,41.052779992</span><br></pre></td></tr></table></figure><p>Now that the project is setup and data is local, we can get to the code.  Time to open up the already created <code>Program.fs</code>.  First, add the necessary namespaces.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Api</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Trainers</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Transforms</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Models</span><br><span class="line"></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br></pre></td></tr></table></figure><p>The ML.NET pipeline expects the data in a specific format.  In the C# world, this is a class, for F# we can use a type.  Below are the required types; <code>ConcreteData</code> is the input data, <code>ConcretePrediction</code> is the output prediction.  For <code>ConcreteData</code>, this is basically a a map of columns to member variables.  There are a couple notable points to ensure the pipeline can properly consume the data.  Each attribute must be <code>mutable public</code>, it also requires the <code>[&lt;Column(&quot;#&quot;)&gt;]</code> to specify it’s column position, and <code>[&lt;DefaultValue&gt;]</code> attributes.  For <code>ConcretePrediction</code>, a single attribute is required, the prediction value.  For the input data, the label variable must be named <code>Label</code>.  For the prediction type, the variable must be labeled <code>Score</code>.  There are methods where you are supposed to be able to define a <code>ColumnName</code> attribute, or copy a label column into the pipeline.  But frankly they didn’t work for me.  I’m unclear if I was doing something wrong if its a current early-state problem.  Over time I expect this will be resolved, but for now I don’t mind working within tighter constraints.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ConcreteData</span></span>() =</span><br><span class="line">  <span class="meta">[&lt;Column("0")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Cement:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("1")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Slag:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("2")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Ash:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("3")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Water:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("4")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Superplasticizer:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("5")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> CoarseAggregate:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("6")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> FineAggregate:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("7")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Age:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("8")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label :float32</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ConcretePrediction</span></span>() =</span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Score:float32</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The structure of building a pipeline is pretty intuitive.  First, create a pipeline.  Then, add components to the pipeline in the order to be executed.  So first, load the data with a <code>TextLoader</code>.  This data is comma delimited and has a header row.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pipeline = <span class="keyword">new</span> LearningPipeline()</span><br><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"./data/Concrete_Data.csv"</span></span><br><span class="line"><span class="comment">// v0.1.0 </span></span><br><span class="line"><span class="comment">// pipeline.Add(new TextLoader&lt;ConcreteData&gt;(dataPath, separator = ",", useHeader = true))</span></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line">pipeline.Add((<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;ConcreteData&gt;(separator = ',', useHeader = <span class="keyword">true</span>))</span><br></pre></td></tr></table></figure><p>After the data is loaded, feature columns need to be added to the pipeline.  I’m going to use all feature columns from the file, but I don’t have to.  The regressor model requires features to be numeric. In this example, that is the case and nothing special needs to be done.  In cases where columns are strings, the <code>CategoricalOneHotVectorizer()</code> will convert string columns to numeric mappings.  I’ve provided an example line below.  Even though I don’t need it, its a handy reference to have.  Note the order, since it is a pipeline, the string to numeric column conversion needs to happen prior to adding the feature columns.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example how to convert text to numeric</span></span><br><span class="line"><span class="comment">// pipeline.Add(new CategoricalOneHotVectorizer("CementBrandName", "SlagBrandName"));</span></span><br><span class="line">pipeline.Add(<span class="keyword">new</span> ColumnConcatenator(<span class="string">"Features"</span>, <span class="string">"Cement"</span>, <span class="string">"Slag"</span>, <span class="string">"Ash"</span>, <span class="string">"Water"</span>, <span class="string">"Superplasticizer"</span>, <span class="string">"CoarseAggregate"</span>, <span class="string">"FineAggregate"</span>, <span class="string">"Age"</span>))</span><br></pre></td></tr></table></figure><p>Now that the features are defined, it is time to determine what training method to use.  For this post <code>FastTreeRegressor</code> is used.  This is a boosted decision tree and generally offers pretty good results.  Custom hyperparameters can also be defined.  I found the defaults to be fine, but its good to see the option to tweak those values.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> FastTreeRegressor())</span><br><span class="line"></span><br><span class="line"><span class="comment">// FastTreeRegressor with hyperparameters</span></span><br><span class="line"><span class="comment">// pipeline.Add(new FastTreeRegressor(NumTrees = 500, DropoutRate = 0.2))</span></span><br></pre></td></tr></table></figure><p>For the dataset in question, the <code>FastTreeRegressor</code> worked the best, but there are alternatives.  I’ve listed them below.  Most had worst performance, with the <code>FastTreeTweedieRegressor</code> being similar.  As will anything, it is good to investigate options.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Similar performance</span></span><br><span class="line"><span class="comment">// pipeline.Add(new FastTreeTweedieRegressor())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Worse performance</span></span><br><span class="line"><span class="comment">// pipeline.Add(new PoissonRegressor())</span></span><br><span class="line"><span class="comment">// pipeline.Add(new StochasticDualCoordinateAscentRegressor())</span></span><br><span class="line"><span class="comment">// pipeline.Add(new FastForestRegressor())</span></span><br><span class="line"><span class="comment">// pipeline.Add(new OnlineGradientDescentRegressor())</span></span><br></pre></td></tr></table></figure><p>The last part, train the model.  Note the <code>ConcreteData</code> and <code>ConcretePrediction</code> types as part of the <code>Train</code> call. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> model = pipeline.Train&lt;ConcreteData, ConcretePrediction&gt;()  </span><br></pre></td></tr></table></figure><p>Validation of any model is important.  For a real case, I would train on one dataset and validate against a previously unseen dataset.  Since this is just an example, I validate against the training data.  As a result, I expect the results to be very good, and they are.  ML.NET offers an Evaluator class, which makes getting some of those crucial high-level numbers pretty easy.  It takes a trained model and a dataset, and produces critical metrics.  Again, this is one of those components that is crucial to an ML framework and I’m glad to see it here.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Evaluate results</span></span><br><span class="line"><span class="comment">// v0.1.0 </span></span><br><span class="line"><span class="comment">// let testData = new TextLoader&lt;ConcreteData&gt;(dataPath, separator = ",", useHeader = true)</span></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line"><span class="keyword">let</span> testData = (<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;ConcreteData&gt;(separator = ',', useHeader = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">let</span> evaluator = <span class="keyword">new</span> RegressionEvaluator()</span><br><span class="line"><span class="keyword">let</span> metrics = evaluator.Evaluate(model, testData) </span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"R-Squared: %f"</span> &lt;| metrics.RSquared</span><br><span class="line">printfn <span class="string">"RMS      : %f"</span> &lt;| metrics.Rms</span><br><span class="line">printfn <span class="string">"L1       : %f"</span> &lt;| metrics.L1</span><br><span class="line">printfn <span class="string">"L2       : %f"</span> &lt;| metrics.L2</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Evaluator Results:</span><br><span class="line">R-Squared: 0.988533</span><br><span class="line">RMS      : 1.788017</span><br><span class="line">L1       : 1.139818</span><br><span class="line">L2       : 3.197006</span><br></pre></td></tr></table></figure><p>Backtracking to the hyperparameter example, here are those results.  As you can tell, my randomly picked hyperparameter choices were not better.  Certainly it seems like a fun opportunity to pair some optimization searches with the pipeline to see how methods can be improved. Of course, this is more meaningful if it is not validating against the training data, there is already a risk of overfitting that we’re not seeing.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Evaluator Results (with hyperparameters):</span><br><span class="line">R-Squared: 0.947057</span><br><span class="line">RMS      : 3.841995</span><br><span class="line">L1       : 2.846822</span><br><span class="line">L2       : 14.760922</span><br></pre></td></tr></table></figure><p>Here is an example of how individual predictions can be made.  Create a <code>ConcreteData</code> object and provide it to the <code>Predict</code> method.  For this example, I pull one of those rows from the training data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = ConcreteData()</span><br><span class="line">test1.Cement &lt;- <span class="number">198.6</span>f</span><br><span class="line">test1.Slag &lt;- <span class="number">132.4</span>f</span><br><span class="line">test1.Ash &lt;- <span class="number">0.</span>f</span><br><span class="line">test1.Water &lt;- <span class="number">192.</span>f</span><br><span class="line">test1.Superplasticizer &lt;- <span class="number">0.</span>f</span><br><span class="line">test1.CoarseAggregate &lt;- <span class="number">978.4</span>f</span><br><span class="line">test1.FineAggregate &lt;- <span class="number">825.5</span>f</span><br><span class="line">test1.Age &lt;- <span class="number">90.</span>f</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionTest1 = model.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted Strength: %f"</span> predictionTest1.Score</span><br><span class="line">printfn <span class="string">"Actual Strength   : 38.074243671999994"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result:</span><br><span class="line">Predicted Strength: 38.882920</span><br><span class="line">Actual Strength   : 38.074243671999994</span><br></pre></td></tr></table></figure><p>On a lark, let’s see what happens if slag is increased, and the water content is reduced.  It looks like compressive strength gets stronger.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test2 = ConcreteData()</span><br><span class="line">test2.Cement &lt;- <span class="number">198.6</span>f</span><br><span class="line">test2.Slag &lt;- <span class="number">150.0</span>f</span><br><span class="line">test2.Ash &lt;- <span class="number">0.</span>f</span><br><span class="line">test2.Water &lt;- <span class="number">172.</span>f</span><br><span class="line">test2.Superplasticizer &lt;- <span class="number">0.</span>f</span><br><span class="line">test2.CoarseAggregate &lt;- <span class="number">978.4</span>f</span><br><span class="line">test2.FineAggregate &lt;- <span class="number">825.5</span>f</span><br><span class="line">test2.Age &lt;- <span class="number">90.</span>f</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionTest2 = model.Predict(test2)</span><br><span class="line">printfn <span class="string">"Predicted Strength: %f"</span> predictionTest2.Score</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result:</span><br><span class="line">Predicted Strength: 45.623180</span><br></pre></td></tr></table></figure><p>Once a model is trained, it can also be saved to a file a reloaded at a later time.  This is supported by the <code>WriteAsync</code> and <code>ReadAsync</code> methods of a model.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line">model.WriteAsync(<span class="string">"test-model"</span>)</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; ignore</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file and run a prediction</span></span><br><span class="line"><span class="keyword">let</span> modelReloaded =</span><br><span class="line">  PredictionModel.ReadAsync&lt;ConcreteData, ConcretePrediction&gt;(<span class="string">"test-model"</span>) </span><br><span class="line">  |&gt; Async.AwaitTask </span><br><span class="line">  |&gt; Async.RunSynchronously</span><br><span class="line"><span class="keyword">let</span> predictionReloaded = modelReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted Strength RL: %f"</span> predictionReloaded.Score</span><br><span class="line">printfn <span class="string">"Actual Strength      : 38.074243671999994"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result (model reloaded):</span><br><span class="line">Predicted Strength RL: 38.882920</span><br><span class="line">Actual Strength      : 38.074243671999994</span><br></pre></td></tr></table></figure><p>Throughout the post, portions of the output have been provided out of band.  Here is how the whole thing looks when run with <code>dotnet run</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Not adding a normalizer.</span><br><span class="line">Making per-feature arrays</span><br><span class="line">Changing data from row-wise to column-wise</span><br><span class="line">Processed 1030 instances</span><br><span class="line">Binning and forming Feature objects</span><br><span class="line">Reserved memory for tree learner: 234780 bytes</span><br><span class="line">Starting to train ...</span><br><span class="line">Not training a calibrator because it is not needed.</span><br><span class="line"></span><br><span class="line">R-Squared: 0.988533</span><br><span class="line">RMS      : 1.788017</span><br><span class="line">L1       : 1.139818</span><br><span class="line">L2       : 3.197006</span><br><span class="line"></span><br><span class="line">Predicted Strength: 38.882920</span><br><span class="line">Actual Strength   : 38.074243671999994</span><br><span class="line"></span><br><span class="line">Predicted Strength: 45.623180</span><br><span class="line"></span><br><span class="line">Predicted Strength RL: 38.882920</span><br><span class="line">Actual Strength      : 38.074243671999994</span><br></pre></td></tr></table></figure><p>There you have it.  A brief look into training and using an ML.NET regressor model.  Although there are a couple quirks, I’m excited to see this released.  This will only get better over time and if F# can be a part of that, even better.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently Microsoft announced &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt;, a machine learning framework for .NET.  This is exciting news.  So my mind immediately goes to: how does this look with &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;?  The current post will take a look at using ML.NET’s regression module to predict concrete compressive strength based on its composite ingredients.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>F# and Word Stems</title>
    <link href="http://codesuji.com/2018/04/24/FSharp-and-Word-Stems/"/>
    <id>http://codesuji.com/2018/04/24/FSharp-and-Word-Stems/</id>
    <published>2018-04-25T03:01:12.000Z</published>
    <updated>2018-04-26T01:08:36.534Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s post discusses performing word stemming with <a href="http://fsharp.org" target="_blank" rel="noopener">F#</a>.  This will be an expansion on a <a href="/2018/01/06/Tackling-Kaggle-FSharp-XGBoost/">previous post</a>, <a href="https://www.kaggle.com/c/quora-question-pairs" target="_blank" rel="noopener">Comparing Quora question intent</a>.  As a result, it will also address some feature engineering.  </p><a id="more"></a><p>For those not familar with word stems, in this context it basically refers to word bases, excluding suffixes.  Stems are helpful when doing text compares, especially when dealing with data of a content-based nature.  This aligns well with the Quora question comparisons.  The <code>Annytab.Stemmer</code> library meets the needs well.</p><p>Before getting started, everything here will be an enhancement of existing code from the Kaggle Quora duplicate questions post.</p><p>First, add the <code>Annytab.Stemmer</code> package to the project by adding  it to <code>paket.dependencies</code>.  Then open the namespaces and create a stemmer object.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget Annytab.Stemmer</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/Annytab.Stemmer/lib/netstandard1.4/Annytab.Stemmer.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> Annytab</span><br><span class="line"><span class="keyword">open</span> Annytab.Stemmer</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stemmer = EnglishStemmer()</span><br></pre></td></tr></table></figure><p>Now that the basic components are in place, I can provide a simple stem example.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sentence1 = <span class="string">"When birds fly, they are soaring above the trees while people are watching and talking"</span></span><br><span class="line"><span class="keyword">let</span> sentence2 = <span class="string">"When birds are flying, they soar above the trees while people watch and talk"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sentenceToWords (s:string) = s.Split([|' '|]) </span><br><span class="line"><span class="keyword">let</span> sentence1Words = sentenceToWords sentence1</span><br><span class="line"><span class="keyword">let</span> sentence2Words = sentenceToWords sentence2</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matches = Set.intersect (set sentence1Words) (set sentence2Words)</span><br><span class="line">printfn <span class="string">"Matches: %A"</span> (Set.count matches)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sentenceToStemWords (s:string) = </span><br><span class="line">  sentenceToWords s</span><br><span class="line">  |&gt; stemmer.GetSteamWords</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sentence1StemWords = sentenceToStemWords sentence1</span><br><span class="line"><span class="keyword">let</span> sentence2StemWords = sentenceToStemWords sentence2</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stemMatches = Set.intersect (set sentence1StemWords) (set sentence2StemWords)</span><br><span class="line">printfn <span class="string">"Stem Matches: %A"</span> (Set.count stemMatches)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"sentence1: %A"</span> sentence1StemWords</span><br><span class="line">printfn <span class="string">"sentence2: %A"</span> sentence2StemWords</span><br><span class="line">printfn <span class="string">"Matches     : %d\nStem Matches: %d"</span> (Set.count matches) (Set.count stemMatches)</span><br></pre></td></tr></table></figure><p>Here are the results.  Notice in the stemmed word list only the bases are listed <code>birds</code> -&gt; <code>bird</code> and <code>watching</code> to <code>watch</code>, etc.  This allows for concepts to be matched better.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stem words:</span></span><br><span class="line">sentence1: [|<span class="string">"when"</span>; <span class="string">"bird"</span>; <span class="string">"fly,"</span>; <span class="string">"they"</span>; <span class="string">"are"</span>; <span class="string">"soar"</span>; <span class="string">"abov"</span>; <span class="string">"the"</span>; <span class="string">"tree"</span>; <span class="string">"while"</span>;</span><br><span class="line">  <span class="string">"peopl"</span>; <span class="string">"are"</span>; <span class="string">"watch"</span>; <span class="string">"and"</span>; <span class="string">"talk"</span>|]</span><br><span class="line">sentence2: [|<span class="string">"when"</span>; <span class="string">"bird"</span>; <span class="string">"are"</span>; <span class="string">"flying,"</span>; <span class="string">"they"</span>; <span class="string">"soar"</span>; <span class="string">"abov"</span>; <span class="string">"the"</span>; <span class="string">"tree"</span>;</span><br><span class="line">  <span class="string">"while"</span>; <span class="string">"peopl"</span>; <span class="string">"watch"</span>; <span class="string">"and"</span>; <span class="string">"talk"</span>|]</span><br><span class="line"></span><br><span class="line">&gt; printfn <span class="string">"Matches     : %d\nStem Matches: %d"</span> (Set.count matches) (Set.count stemMatches)</span><br><span class="line">Matches     : <span class="number">10</span></span><br><span class="line">Stem Matches: <span class="number">13</span></span><br></pre></td></tr></table></figure><p>Time to update the feature generation.  A valuable reminder is that feature generation is part art, part science.  Often it is an iterative, and experimental, process.  Don’t worry, intuition of what a good feature might be grows with time and experience.  Using the now defined <code>sentenceToStemWords</code> to extract words from the questions, a comparison can be doing using a <code>Set.intersect</code>.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rowFeatures (metadata:Metadata) (input:CsvProvider&lt;TrainFilename&gt;.Row) =</span><br><span class="line">  <span class="keyword">let</span> question1Words = sentenceToStemWords input.Question1</span><br><span class="line">  <span class="keyword">let</span> question2Words = sentenceToStemWords input.Question2</span><br><span class="line">  <span class="keyword">let</span> wordShareCount = </span><br><span class="line">    Set.intersect (set question1Words) (set question2Words) </span><br><span class="line">    |&gt; Set.count</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> wordShareFeature = ((float32 wordShareCount) * <span class="number">2.</span>f) / (float32 question1Words.Length + float32 question2Words.Length)</span><br><span class="line"></span><br><span class="line">  [|</span><br><span class="line">    float32 input.Question1.Length;</span><br><span class="line">    float32 input.Question2.Length;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question1;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question2;</span><br><span class="line">    (abs &gt;&gt; float32) (wordCount input.Question1 - wordCount input.Question2);</span><br><span class="line">    wordShareFeature</span><br><span class="line">  |]</span><br></pre></td></tr></table></figure><p>Add matching word stems between questions as a feature has improved the accuracy by about 8%.  That is a decent ROI for adding a feature.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; evaluatePredictionResults finalModel trainInput trainOutput</span><br><span class="line">Accuracy: <span class="number">0.755652</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">84299</span>  <span class="number">43153</span></span><br><span class="line">F     <span class="number">35877</span> <span class="number">160103</span></span><br><span class="line"></span><br><span class="line">&gt; evaluatePredictionResults finalModel validationInput validationOutput</span><br><span class="line">Accuracy: <span class="number">0.704828</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">18281</span>  <span class="number">13061</span></span><br><span class="line">F     <span class="number">10806</span>  <span class="number">38710</span></span><br></pre></td></tr></table></figure><p>There is one downside to this approach, common words like “a”, “and”, “the” are included in the matching word feature.  This can result in a deceptively high percentage word match.  To get a more representative match, these “stop words” can be excluded.  Time to make another feature change.  I built a stopwords list, here is a sample.  The full file is <a href="/data/stopwords.txt">here</a>. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i</span><br><span class="line">a</span><br><span class="line">about</span><br><span class="line">after</span><br><span class="line">all</span><br><span class="line">also</span><br><span class="line">an</span><br></pre></td></tr></table></figure><p>Then alter <code>sentenceToFilteredStemWords</code> to be <code>sentenceToFilteredStemWords</code> that excludes stop words.  This will get me to where I want to be. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> StopWordsFilename = <span class="string">"../data/stopwords.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stopWords = </span><br><span class="line">  File.ReadAllLines StopWordsFilename</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> x -&gt; (x, <span class="number">1</span>))</span><br><span class="line">  |&gt; Map.ofArray</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sentenceToFilteredStemWords s =</span><br><span class="line">  sentenceToStemWords s</span><br><span class="line">  |&gt; Array.filter (<span class="keyword">fun</span> w -&gt; not (Map.containsKey w stopWords))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rowFeatures (metadata:Metadata) (input:CsvProvider&lt;TrainFilename&gt;.Row) =</span><br><span class="line">  <span class="keyword">let</span> question1Words = sentenceToFilteredStemWords input.Question1</span><br><span class="line">  <span class="keyword">let</span> question2Words = sentenceToFilteredStemWords input.Question2</span><br><span class="line">  <span class="keyword">let</span> wordShareCount = </span><br><span class="line">    Set.intersect (set question1Words) (set question2Words) </span><br><span class="line">    |&gt; Set.count</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> wordShareFeature =</span><br><span class="line">    <span class="keyword">if</span> question1Words.Length + question2Words.Length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">then</span> <span class="number">0.</span>f</span><br><span class="line">    <span class="keyword">else</span> ((float32 wordShareCount) * <span class="number">2.</span>f) / (float32 question1Words.Length + float32 question2Words.Length)</span><br><span class="line"></span><br><span class="line">  [|</span><br><span class="line">    float32 input.Question1.Length;</span><br><span class="line">    float32 input.Question2.Length;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question1;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question2;</span><br><span class="line">    (abs &gt;&gt; float32) (wordCount input.Question1 - wordCount input.Question2);</span><br><span class="line">    wordShareFeature;</span><br><span class="line">  |]</span><br></pre></td></tr></table></figure><p>Filtering out stop words gained another 3%.  Admittedly I expected a bit more, but still upwards.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; evaluatePredictionResults finalModel trainInput trainOutput</span><br><span class="line">Accuracy: <span class="number">0.777598</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">88157</span>  <span class="number">39913</span></span><br><span class="line">F     <span class="number">32019</span> <span class="number">163343</span></span><br><span class="line"></span><br><span class="line">&gt; evaluatePredictionResults finalModel validationInput validationOutput</span><br><span class="line">Accuracy: <span class="number">0.730577</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">19373</span>  <span class="number">12071</span></span><br><span class="line">F      <span class="number">9714</span>  <span class="number">39700</span></span><br></pre></td></tr></table></figure><p>As you can see, using word stems and stop words to extend the features can be a useful tactic.  This also serves as a good reminder that F# has the tools for interesting analysis.  I hope you found this post useful.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s post discusses performing word stemming with &lt;a href=&quot;http://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  This will be an expansion on a &lt;a href=&quot;/2018/01/06/Tackling-Kaggle-FSharp-XGBoost/&quot;&gt;previous post&lt;/a&gt;, &lt;a href=&quot;https://www.kaggle.com/c/quora-question-pairs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Comparing Quora question intent&lt;/a&gt;.  As a result, it will also address some feature engineering.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Kaggle" scheme="http://codesuji.com/tags/Kaggle/"/>
    
      <category term="Text" scheme="http://codesuji.com/tags/Text/"/>
    
      <category term="Analytics" scheme="http://codesuji.com/tags/Analytics/"/>
    
  </entry>
  
  <entry>
    <title>F# and DotEnv</title>
    <link href="http://codesuji.com/2018/02/28/F-and-DotEnv/"/>
    <id>http://codesuji.com/2018/02/28/F-and-DotEnv/</id>
    <published>2018-03-01T01:03:12.000Z</published>
    <updated>2018-03-01T02:33:22.317Z</updated>
    
    <content type="html"><![CDATA[<p>Often the question arises, what is the best way to manage environment variables for a project.  Many languages have libaries precisely for this issue.  A common approach is the use of a <code>.env</code> file, .NET and <a href="http://fsharp.org" target="_blank" rel="noopener">F#</a> are no different.  In today’s post I’ll take a brief look at leveraging DotEnv in an F# application.</p><a id="more"></a><p>For those not familiar with the concept, an application’s configuration is managed through environment variables.  Although great for deployment, manually setting them locally and/or passing them to other developers can be a pain.  For development, management of environment variables can be easily done using a <code>.env</code> file.  This file resides in the project root.  The DotEnv library loads those environment variables into the executing process.  This allows for the ability to easily share application configuration.  It depends on the library implementation, but often a bonus is that comments are permitted in this file as well.  </p><p>There are several packages available that meet this need, I will specifically be looking at <a href="https://www.nuget.org/packages/dotenv.net/" target="_blank" rel="noopener">dotenv.net</a>.</p><p>Step one, setup a <code>.env</code> file.  This is simply a list of <code>&lt;key&gt;=&lt;value&gt;</code> pairs.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># My custom environment variables</span><br><span class="line">FOO=myfoo</span><br><span class="line">BAR=mybar</span><br></pre></td></tr></table></figure><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is the paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget dotenv.net </span><br></pre></td></tr></table></figure><p>Below is sample code, along with a sample execution.  Honestly, as an example there isn’t much to look at.  But that is kind of the point.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"./packages/dotenv.net/lib/netstandard2.0/dotenv.net.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> dotenv.net</span><br><span class="line"></span><br><span class="line">DotEnv.Config()</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"foo: %A"</span> (Environment.GetEnvironmentVariable(<span class="string">"FOO"</span>))</span><br><span class="line">printfn <span class="string">"bar: %A"</span> (Environment.GetEnvironmentVariable(<span class="string">"BAR"</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/dotenv1/dotenv_1.png" alt="Execution Results"></p><p>Including packages makes life easy, especially for quick proof-of-concepting.  With that said, the basics of <code>.env</code> are pretty simple to implement.  Below is an F# version.  I’m going to pick on C# a bit too.  I looked at a couple of the implemenations available through nuget.  They share a common theme, they are all drastically longer than the code below.  This is one of the reasons I enjoy F#, it allows me to quickly execute on ideas and not get bogged down in syntax.  As an aside, one notable difference is that my version doesn’t overwrite existing environment variables.  This may be personal preference, but I like the ability to override <code>.env</code> values by explicitly setting environment values.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Text.RegularExpressions</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Load .env file</span></span><br><span class="line"><span class="keyword">let</span> loadDotEnv() = </span><br><span class="line">  <span class="keyword">let</span> envFile = <span class="string">".env"</span></span><br><span class="line">  <span class="keyword">if</span> IO.File.Exists(envFile)</span><br><span class="line">  <span class="keyword">then</span> </span><br><span class="line">    IO.File.ReadAllLines(envFile)</span><br><span class="line">    |&gt; Array.iter (<span class="keyword">fun</span> line -&gt;</span><br><span class="line">      <span class="comment">// Remove comments</span></span><br><span class="line">      <span class="keyword">let</span> line' = Regex.Replace(line, <span class="string">"#.*"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Split into &lt;key&gt;=&lt;value&gt;</span></span><br><span class="line">      <span class="keyword">let</span> parts = line'.Split([|'='|]) |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Trim())</span><br><span class="line">      <span class="keyword">if</span> Array.length parts = <span class="number">2</span> </span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">let</span> (key, value) = (parts.[<span class="number">0</span>], parts.[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Only add key if not already there</span></span><br><span class="line">        <span class="keyword">if</span> String.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable(key))</span><br><span class="line">        <span class="keyword">then</span> Environment.SetEnvironmentVariable(key, value)</span><br><span class="line">        <span class="keyword">else</span> ()</span><br><span class="line">      <span class="keyword">else</span> ())</span><br><span class="line"></span><br><span class="line">loadDotEnv()</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"foo: %A"</span> (Environment.GetEnvironmentVariable(<span class="string">"FOO"</span>))</span><br><span class="line">printfn <span class="string">"bar: %A"</span> (Environment.GetEnvironmentVariable(<span class="string">"BAR"</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/dotenv1/dotenv_2.png" alt="Execution Results"></p><p>As you can see, the environment variables now populated as desired.  That’s all for today.  Hopefully at least some found this short post useful.  Until next time… </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Often the question arises, what is the best way to manage environment variables for a project.  Many languages have libaries precisely for this issue.  A common approach is the use of a &lt;code&gt;.env&lt;/code&gt; file, .NET and &lt;a href=&quot;http://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; are no different.  In today’s post I’ll take a brief look at leveraging DotEnv in an F# application.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
  </entry>
  
  <entry>
    <title>Coding with Color</title>
    <link href="http://codesuji.com/2018/02/10/Coding-with-Color/"/>
    <id>http://codesuji.com/2018/02/10/Coding-with-Color/</id>
    <published>2018-02-10T16:42:52.000Z</published>
    <updated>2018-02-11T14:04:34.648Z</updated>
    
    <content type="html"><![CDATA[<p>Code comes in many shapes and sizes.  Often this means differing paradigms with text or gui workflow tools, but there are other ways.  Enter <a href="https://ozobot.com/products/ozobot-evo" target="_blank" rel="noopener">Evo</a>, a robot that leverages coding in the form of color.  I recently had the opportunity to play with one of the little bots.  It is intended as an educational toy for kids, and it fits the bill perfectly.  More than that, it is an interesting case study in seeing the world differently.  Take code beyond text, and into a realm that can easily appeal to kids (young and old).</p><a id="more"></a><p>Although the Evo has multiple levels of functionality, the one of interest here is the sensor on its underside.  The intended interaction with the bot is to draw black lines on a white piece of paper, the Evo will follow the lines.  Where it really gets interesting is using markers other than black.  The Evo responds to patterns of black, red, green, and blue.  It is an elegant method of code, instead of thinking in binary, it uses a quaternary system. Using patterns of these 4 colors, the Evo can be programmed to perform actions.  A program looks like a series of lines with dots of color.  </p><p><img src="/images/evo1/colorcodes.png" alt="Color Codes"></p><p><a href="http://play.ozobot.com/print/guides/ozobot-ozocodes-reference.pdf" target="_blank" rel="noopener">Color Codes PDF</a></p><p>Here is an example program.</p><p><img src="/images/evo1/example.png" alt="Example"></p><p>Do you see the bug?  <em>Hint: Green-Red-Green jumps to the next line on the robot’s left. Go the wrong way at the top and he’ll run off the paper</em><br>This isn’t just about play, but it is about diagnosising bugs and figuring out solutions to them.</p><p>These codes provide a fun way for the bot to interact with the world, and allow kids to program with tools, and in a way, they feel comfortable.  This alone is enough, but I appreciate the forethought into some of the codes.  Knowing the Evo could run in either direction on a line, many of the codes work in both directions.  </p><p>When coding with markers isn’t enough, <a href="http://ozoblockly.com/" target="_blank" rel="noopener">Blockly</a> is available.  For those not familiar with Blockly, it is meant to be a kid-friendly drag-and-drop coding experience.  It is a great option for taking the next step.  They also offer a clever program upload method.  The Evo can be placed against the screen as the program uploads to the Evo using flashes of color. Again, data encoding and transfer can happen in cool and interesting ways.</p><p>The Evo is fascinating, and a great reminder how code comes in many forms.  Keep a lookout for different approaches to coding, you may be surprised what you find.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Code comes in many shapes and sizes.  Often this means differing paradigms with text or gui workflow tools, but there are other ways.  Enter &lt;a href=&quot;https://ozobot.com/products/ozobot-evo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Evo&lt;/a&gt;, a robot that leverages coding in the form of color.  I recently had the opportunity to play with one of the little bots.  It is intended as an educational toy for kids, and it fits the bill perfectly.  More than that, it is an interesting case study in seeing the world differently.  Take code beyond text, and into a realm that can easily appeal to kids (young and old).&lt;/p&gt;
    
    </summary>
    
    
      <category term="Robotics" scheme="http://codesuji.com/tags/Robotics/"/>
    
  </entry>
  
  <entry>
    <title>Tackling Kaggle with F# and XGBoost</title>
    <link href="http://codesuji.com/2018/01/06/Tackling-Kaggle-FSharp-XGBoost/"/>
    <id>http://codesuji.com/2018/01/06/Tackling-Kaggle-FSharp-XGBoost/</id>
    <published>2018-01-06T15:06:32.000Z</published>
    <updated>2018-01-05T02:53:07.683Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s topic will be to demonstrate tackling a <a href="https://www.kaggle.com/" target="_blank" rel="noopener">Kaggle</a> problem with <a href="https://github.com/dmlc/xgboost" target="_blank" rel="noopener">XGBoost</a> and <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>.  <a href="https://www.kaggle.com/c/quora-question-pairs" target="_blank" rel="noopener">Comparing Quora question intent</a> offers a perfect opportunity to work with XGBoost, a common tool used in Kaggle competitions.  Luckily there is a .NET wrapper around the XGBoost library, <a href="https://github.com/PicNet/XGBoost.Net" target="_blank" rel="noopener">XGBoost.Net</a>.</p><a id="more"></a><p>Before going too far, let’s break down the data formats.  First, Kaggle provides a <code>train.csv</code> which is used for training models.  This contains question pairs and the ground truth regarding their duplicated-ness.  Second, <code>test.csv</code> is questions pairs with no ground truth.  This is used for generating the submission file to Kaggle.  Third, <code>submission.csv</code> are the results to submit to Kaggle for judging. <code>is_duplicate</code> represents a percentage likelihood of being a duplicate.  Below are example rows from each dataset.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// train.csv</span><br><span class="line">&quot;id&quot;,&quot;qid1&quot;,&quot;qid2&quot;,&quot;question1&quot;,&quot;question2&quot;,&quot;is_duplicate&quot;                                                                </span><br><span class="line">&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;What is the step by step guide to invest in share market in india?&quot;,&quot;What is the step by step guide to inves</span><br><span class="line">t in share market?&quot;,&quot;0&quot;                                                                                                  </span><br><span class="line">&quot;1&quot;,&quot;3&quot;,&quot;4&quot;,&quot;What is the story of Kohinoor (Koh-i-Noor) Diamond?&quot;,&quot;What would happen if the Indian government stole the K</span><br><span class="line">ohinoor (Koh-i-Noor) diamond back?&quot;,&quot;0&quot;                                                                                  </span><br><span class="line"></span><br><span class="line">// test.csv</span><br><span class="line">&quot;test_id&quot;,&quot;question1&quot;,&quot;question2&quot;</span><br><span class="line">0,&quot;How does the Surface Pro himself 4 compare with iPad Pro?&quot;,&quot;Why did Microsoft choose core m3 and not core i3 home Surface Pro 4?&quot;</span><br><span class="line">1,&quot;Should I have a hair transplant at age 24? How much would it cost?&quot;,&quot;How much cost does hair transplant require?&quot;</span><br><span class="line"></span><br><span class="line">// submission.csv</span><br><span class="line">test_id,is_duplicate</span><br><span class="line">0,0.425764</span><br><span class="line">1,0.212075</span><br></pre></td></tr></table></figure><p>Now that the data is out of the way, time to get started.  Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget FSharp.Data</span><br><span class="line">nuget PicNet.XGBoost</span><br></pre></td></tr></table></figure><p>Here is the boilerplate and initial variables.  Most of this is self-explanatory, although I want to call out a couple things specifically.  As expected, TypeProviders will be used to load the csv datasets.  When I get to the model training section, there will be hyperparameters.  This object will be managed by <code>ModelParameterType</code> and <code>ModelParameter</code>.  Feature extraction will use dataset-level metadata.  Since this is meant to be a simple example, the only metadata will be the average number of words in a question.  As shown above, the train and test files are slightly different formats.  Whatever method I use, I want to be able to run the same code against train and test.  <code>StandardRow</code> enables this by standardizing the input row format for transformation.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">System.IO.Directory.SetCurrentDirectory(__SOURCE_DIRECTORY__)</span><br><span class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></span><br><span class="line">#r <span class="string">"../packages/PicNet.XGBoost/lib/net40/XGBoost.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FSharp.Data</span><br><span class="line"><span class="keyword">open</span> XGBoost</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Percent of training dataset to use for training</span></span><br><span class="line"><span class="comment">/// Note: ValidationPct = 1. - TrainPct</span></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> TrainPct = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Training filename</span></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> TrainFilename = <span class="string">"../data/train.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Kaggle test filename (used to generate submission)</span></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> TestFilename = <span class="string">"../data/test.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Kaggle submission filename</span></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> SubmissionFilename = <span class="string">"../data/submission.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Type of hyperparameter value</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ModelParameterType</span> </span>= | Int | Float32 </span><br><span class="line"><span class="comment">/// Model hyperparameter</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ModelParameter</span> </span>= &#123; Name: string; Type: ModelParameterType; Value: float &#125;</span><br><span class="line"><span class="comment">/// Dataset Metadata (Used for feature calculation)</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Metadata</span> </span>= &#123; AverageWordCount: float32 &#125;</span><br><span class="line"><span class="comment">// Standarized row</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">StandardRow</span> </span>= &#123; QuestionId: int; Label: float32; Features: float32[] &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Training dataset</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">TrainData</span> </span>= CsvProvider&lt;TrainFilename&gt;</span><br><span class="line"><span class="comment">/// Test/Submission dataset</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">TestData</span> </span>= CsvProvider&lt;TestFilename&gt;</span><br></pre></td></tr></table></figure><p>To ensure proper model training, the provided train.csv will be broken into a train and validation set.  This method could be more advanced, but take the first x% for training and 100-x% for validation works well enough in this case. Since the train and test files are different, a conversion function is needed.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Sample dataset into train and validation datasets</span></span><br><span class="line"><span class="keyword">let</span> sample (input:CsvProvider&lt;TrainFilename&gt;) trainPct = </span><br><span class="line">  <span class="keyword">let</span> trainRows = int (float (input.Rows |&gt; Seq.length) * trainPct) </span><br><span class="line">  <span class="keyword">let</span> trainData = input.Rows |&gt; Seq.take trainRows |&gt; Seq.toArray</span><br><span class="line">  <span class="keyword">let</span> validatationData = input.Rows |&gt; Seq.skip trainRows |&gt; Seq.toArray</span><br><span class="line">  (trainData, validatationData)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert the test data format to train data format</span></span><br><span class="line"><span class="comment">/// Note: This is necessary because their train and test datasets differ slightly</span></span><br><span class="line"><span class="keyword">let</span> convertTestToTrainFormat (input:CsvProvider&lt;TestFilename&gt;.Row []) :(CsvProvider&lt;TrainFilename&gt;.Row []) =</span><br><span class="line">  input</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> x -&gt; <span class="keyword">new</span> CsvProvider&lt;TrainFilename&gt;.Row(x.Test_id, <span class="number">0</span>, <span class="number">0</span>, x.Question1, x.Question2, <span class="keyword">false</span>))</span><br></pre></td></tr></table></figure><p>Here are the feature generating, and supporting, functions.  For pedagogical reasons the feature set is going to be overly simplistic.  This won’t result in a great prediction result, but proper feature creation can be involved.  More advanced feature extraction will be addressed in a later post.  For now, this will be enough to get some results, without losing the primary goal in a forest of feature extraction code.</p><p>Some features will/may need aggregate information about the dataset.  This is commonly used to for scaling or comparison for averages.  This will be stored in a dataset metadata object that all rows will have access to during row transformation and feature extraction.  The row-specific features are length and wordcount for the two questions being compared.  In addition, the difference in wordcount between the questions is considered.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Number of words in sentence</span></span><br><span class="line"><span class="keyword">let</span> wordCount (s:string) = Array.length (s.Split([| ' ' |])) </span><br><span class="line"></span><br><span class="line"><span class="comment">/// Absolute value</span></span><br><span class="line"><span class="keyword">let</span> abs (x:int) = Math.Abs(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Calculate dataset metadata for feature calculation</span></span><br><span class="line"><span class="keyword">let</span> metadata (input:CsvProvider&lt;TrainFilename&gt;.Row []) =</span><br><span class="line">  <span class="keyword">let</span> averageWordCount = </span><br><span class="line">    input</span><br><span class="line">    |&gt; Array.collect (<span class="keyword">fun</span> row -&gt; [|</span><br><span class="line">      Array.length (row.Question1.Split([| ' ' |])); </span><br><span class="line">      Array.length (row.Question2.Split([| ' ' |])) |])</span><br><span class="line">    |&gt; Array.sum</span><br><span class="line">    |&gt; (<span class="keyword">fun</span> total -&gt; float32 total / float32 (input.Length * <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">  &#123; Metadata.AverageWordCount = averageWordCount &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Calculate features for a row</span></span><br><span class="line"><span class="keyword">let</span> rowFeatures (metadata:Metadata) (input:CsvProvider&lt;TrainFilename&gt;.Row) =</span><br><span class="line">  [|</span><br><span class="line">    float32 input.Question1.Length;</span><br><span class="line">    float32 input.Question2.Length;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question1;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question2;</span><br><span class="line">    (abs &gt;&gt; float32) (wordCount input.Question1 - wordCount input.Question2);</span><br><span class="line">  |]</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Transform csv row into label + features</span></span><br><span class="line"><span class="keyword">let</span> transform (metadata:Metadata) (input:CsvProvider&lt;TrainFilename&gt;.Row []) =</span><br><span class="line">  input</span><br><span class="line">  |&gt; Array.map(<span class="keyword">fun</span> row -&gt; </span><br><span class="line">    &#123;</span><br><span class="line">      StandardRow.QuestionId = row.Id;</span><br><span class="line">      Label = <span class="keyword">if</span> row.Is_duplicate <span class="keyword">then</span> float32 <span class="number">1.</span> <span class="keyword">else</span> float32 <span class="number">0.</span>;</span><br><span class="line">      Features = rowFeatures metadata row</span><br><span class="line">    &#125;  </span><br><span class="line">  )  </span><br></pre></td></tr></table></figure><p>Now it is time to look at the XGBoost functionality.  Generating a model is as simple as creating a classifier, applying a hyperparameter set, and then running <code>.Fit</code> using the training data (features, and labels).  One small mention, as can be seen, the library uses <code>float32[]</code> for most of it’s numeric interations.</p><p>Once the model is trained, it can be applied using <code>PredictProba</code> against an array of features (that match the structure of the training data).  The result is an array of probabilities per class.  Since this is a binary classification, <code>[0.34, 0.66]</code> means there is a 34% chance the result is false, and 66% chance the result is true.  For the final submission, a percentage is desired, but for training, it is useful to know the binary true/false regarding duplicate question status.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Given training data and hyperparameters, create an xgboost classification model</span></span><br><span class="line"><span class="keyword">let</span> buildXgClassModel (trainInput:float32[][]) (trainOutput:float32[]) (parameters:ModelParameter list) = </span><br><span class="line">    <span class="keyword">let</span> model = XGBClassifier()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// To handle xgboost types, I carry along the type with parameter values, </span></span><br><span class="line">    <span class="comment">// and cast accordingly when I set the values</span></span><br><span class="line">    parameters </span><br><span class="line">    |&gt; List.iter (<span class="keyword">fun</span> parameter -&gt; </span><br><span class="line">        <span class="keyword">match</span> parameter.Type <span class="keyword">with</span></span><br><span class="line">        | Int     -&gt; model.SetParameter(parameter.Name, (int parameter.Value))</span><br><span class="line">        | Float32 -&gt; model.SetParameter(parameter.Name, (float32 parameter.Value)))</span><br><span class="line"></span><br><span class="line">    model.Fit(trainInput, trainOutput)</span><br><span class="line">    model</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionProbabilities (model:XGBClassifier) (inputs:float32[][]) =</span><br><span class="line">    <span class="comment">// Note, provides prob for each class (ex: 0=0.67, 1=0.33)</span></span><br><span class="line">    model.PredictProba(inputs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionValues (model:XGBClassifier) (inputs:float32[][]) =</span><br><span class="line">    <span class="comment">// Note, provides prob for each class (ex: 0=0.67, 1=0.33)</span></span><br><span class="line">    <span class="comment">// Higher probability is the class that "wins"</span></span><br><span class="line">    predictionProbabilities model inputs</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; <span class="keyword">if</span> x.[<span class="number">0</span>] &gt; x.[<span class="number">1</span>] <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>To faciliate debugging and improvement, a confusion matrix is very useful.  This, along with an overall accuracy reporting will assign in future developmental interations.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Compares target vs. predicted values</span></span><br><span class="line"><span class="keyword">let</span> comparePredictions (target:float32[]) predicted = </span><br><span class="line">  (target, predicted)</span><br><span class="line">  ||&gt; Array.zip</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> (t, p) -&gt; ((int t) - p) = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Create confusion matrix of results (represented as an array of arrays)</span></span><br><span class="line"><span class="comment">/// Result:</span></span><br><span class="line"><span class="comment">/// [ </span></span><br><span class="line"><span class="comment">///  T=1,P=1  T=1,P=0</span></span><br><span class="line"><span class="comment">///  T=0,P=1  T=0,P=0</span></span><br><span class="line"><span class="comment">/// ]</span></span><br><span class="line"><span class="keyword">let</span> createConfusionMatrix (target:int[]) (predict:int[]) =</span><br><span class="line">  <span class="keyword">let</span> combined = (target, predict) ||&gt; Array.zip</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> aggregateRow combined filter = </span><br><span class="line">    combined</span><br><span class="line">    |&gt; Array.filter (<span class="keyword">fun</span> (_,p) -&gt; p=filter)</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> (t,p) -&gt; ((<span class="keyword">if</span> t=<span class="number">1</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>), (<span class="keyword">if</span> t=<span class="number">0</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>)))</span><br><span class="line">    |&gt; Array.fold (<span class="keyword">fun</span> (a,b) (x,y) -&gt; (a+x, b+y)) (<span class="number">0</span>,<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pTrue = aggregateRow combined <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> pFalse = aggregateRow combined <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  [|</span><br><span class="line">    [| fst pTrue; snd pTrue |];</span><br><span class="line">    [| fst pFalse; snd pFalse |]</span><br><span class="line">  |]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Print confusion matrix</span></span><br><span class="line"><span class="keyword">let</span> printConfusionMatrix targetValues predictedValues =</span><br><span class="line">  createConfusionMatrix targetValues predictedValues </span><br><span class="line">  |&gt; (<span class="keyword">fun</span> m -&gt; </span><br><span class="line">    printfn <span class="string">"T\P  %6s %6s"</span> <span class="string">"T"</span> <span class="string">"F"</span></span><br><span class="line">    printfn <span class="string">"T    %6d %6d"</span> (m.[<span class="number">0</span>].[<span class="number">0</span>]) (m.[<span class="number">0</span>].[<span class="number">1</span>])</span><br><span class="line">    printfn <span class="string">"F    %6d %6d"</span> (m.[<span class="number">1</span>].[<span class="number">0</span>]) (m.[<span class="number">1</span>].[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Use a model to create predictions from input values, </span></span><br><span class="line"><span class="comment">/// then compare target output to predicted output </span></span><br><span class="line"><span class="keyword">let</span> evaluatePredictionResults model input targetOutput = </span><br><span class="line">  <span class="keyword">let</span> predictedValidationValues = predictionValues model input </span><br><span class="line">  <span class="keyword">let</span> predictedValidationMatches = comparePredictions targetOutput predictedValidationValues</span><br><span class="line">  <span class="keyword">let</span> pctValidationMatches = float (predictedValidationMatches |&gt; Array.filter id |&gt; Array.length) / float (predictedValidationMatches |&gt; Array.length)</span><br><span class="line"></span><br><span class="line">  printfn <span class="string">"Accuracy: %f"</span> pctValidationMatches</span><br><span class="line">  printConfusionMatrix (targetOutput |&gt; Array.map int) predictedValidationValues </span><br></pre></td></tr></table></figure><p>Since the submission file has specific criteria, there are some functions to create the submission file. This is primarily formatting the percents as Kaggle expects and then writing the dataset to a file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Convert probabilities per classification to a single probability</span></span><br><span class="line"><span class="comment">/// Note: if class 0 "wins", invert its percent, since the final result expects low percents to map to class 0.</span></span><br><span class="line"><span class="keyword">let</span> convertPredictionToProbability (probabilities: float32[]) = </span><br><span class="line">  <span class="keyword">if</span> probabilities.[<span class="number">0</span>] &gt; probabilities.[<span class="number">1</span>] </span><br><span class="line">  <span class="keyword">then</span> <span class="number">1.</span>f - probabilities.[<span class="number">0</span>] </span><br><span class="line">  <span class="keyword">else</span> probabilities.[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Combine question ids with prediction results</span></span><br><span class="line"><span class="keyword">let</span> formatSubmissionData (rows:StandardRow[]) (predictions:float32[][]) = </span><br><span class="line">  (rows, predictions)</span><br><span class="line">  ||&gt; Array.zip</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> (input, prediction) -&gt;</span><br><span class="line">    <span class="keyword">let</span> questionId = input.QuestionId</span><br><span class="line">    <span class="keyword">let</span> probability = convertPredictionToProbability prediction</span><br><span class="line">    (questionId, probability))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write submission data to file</span></span><br><span class="line"><span class="keyword">let</span> writeSubmissionFile (submissionFilename:string) (submissionData: (int * float32)[]) =</span><br><span class="line">    <span class="keyword">let</span> fileStream = <span class="keyword">new</span> StreamWriter(submissionFilename)</span><br><span class="line">    fileStream.WriteLine(<span class="string">"test_id,is_duplicate"</span>)</span><br><span class="line">    submissionData </span><br><span class="line">    |&gt; Array.iter(<span class="keyword">fun</span> (id, probability) -&gt;</span><br><span class="line">        <span class="keyword">let</span> line = sprintf <span class="string">"%d,%f"</span> id probability</span><br><span class="line">        fileStream.WriteLine(line)) </span><br><span class="line">    fileStream.Flush()</span><br><span class="line">    fileStream.Close()</span><br></pre></td></tr></table></figure><p>Now that all the hard work is done, it is time to put it all together.  The first step is data preparation.  First, load the training data and split into train and validation sets.  Second, build dataset level metadata.  Third, run transformations (feature creation) against the datasets.  Fourth, structure the data for model training by generating the appropriate label and features arrays. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Training data</span></span><br><span class="line"><span class="keyword">let</span> allData = TrainData.Load(TrainFilename)</span><br><span class="line"><span class="keyword">let</span> (trainData, validationData) = sample allData TrainPct</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> trainMetadata = metadata trainData </span><br><span class="line"><span class="keyword">let</span> transformedTrainData = transform trainMetadata trainData</span><br><span class="line"><span class="keyword">let</span> transformedValidationData = transform trainMetadata validationData</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> trainInput = transformedTrainData |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.Features)</span><br><span class="line"><span class="keyword">let</span> trainOutput = transformedTrainData |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.Label)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> validationInput = transformedValidationData |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.Features)</span><br><span class="line"><span class="keyword">let</span> validationOutput = transformedValidationData |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.Label)</span><br></pre></td></tr></table></figure><p>Time to train the model.  XGBoost supports the below parameters.  The values shown are populated with some reasonable values for the dataset in question.  Out of scope for this post, but hyperparameter optimization should be leveraged here to find the best training model. In a later post I’ll discuss a simple method to approach this topic.  </p><p>Once trained, report on prediction capability against the original training set as well as the validation set (which the model hasn’t seen).  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Model training parameters</span></span><br><span class="line"><span class="keyword">let</span> modelParameters =  [</span><br><span class="line">  &#123; Name = <span class="string">"max_depth"</span>;        Type = ModelParameterType.Int;     Value = <span class="number">10.</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"learning_rate"</span>;    Type = ModelParameterType.Float32; Value = <span class="number">0.76</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"gamma"</span>;            Type = ModelParameterType.Float32; Value = <span class="number">1.9</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"min_child_weight"</span>; Type = ModelParameterType.Int;     Value = <span class="number">5.</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"max_delta_step"</span>;   Type = ModelParameterType.Int;     Value = <span class="number">0.</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"subsample"</span>;        Type = ModelParameterType.Float32; Value = <span class="number">0.75</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"colsample"</span>;        Type = ModelParameterType.Float32; Value = <span class="number">0.75</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"reg_lambda"</span>;       Type = ModelParameterType.Float32; Value = <span class="number">4.</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"reg_alpha"</span>;        Type = ModelParameterType.Float32; Value = <span class="number">1.</span> &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Trained model</span></span><br><span class="line"><span class="keyword">let</span> finalModel = buildXgClassModel trainInput trainOutput modelParameters </span><br><span class="line"></span><br><span class="line"><span class="comment">// Predict train values</span></span><br><span class="line">evaluatePredictionResults finalModel trainInput trainOutput</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validate Step</span></span><br><span class="line">evaluatePredictionResults finalModel validationInput validationOutput</span><br></pre></td></tr></table></figure><p>Here are the prediction results of train and test.  The prediction capability isn’t great, but the validation set holds up comparatively well.  At least overfitting isn’t a concern (for now).  This also shows how more and better features have plenty of room for improvement. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; evaluatePredictionResults finalModel trainInput trainOutput</span><br><span class="line">Accuracy: <span class="number">0.680396</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">53352</span>  <span class="number">36546</span></span><br><span class="line">F     <span class="number">66824</span> <span class="number">166710</span></span><br><span class="line"></span><br><span class="line">&gt; evaluatePredictionResults finalModel validationInput validationOutput</span><br><span class="line">Accuracy: <span class="number">0.651030</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">11625</span>  <span class="number">10755</span></span><br><span class="line">F     <span class="number">17462</span>  <span class="number">41016</span></span><br></pre></td></tr></table></figure><p>Now it is time to create the final predictions and submission file for Kaggle.  To do this, replicate the validate workflow, with a couple caveats.  First, the test dataset is formatted slightly differently.  Since this is data with no known classificaions, there is no class in the file.  So I need to load the test data, then run the convert so the test data matches the format of the training data.  Second, the submission file needs to be populated with a percent likelihood of the questions being duplicates (not with a straight classification).  Lastly, write the id along with the result to the submission file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testData = TestData.Load(TestFilename).Rows |&gt; Seq.toArray</span><br><span class="line"><span class="keyword">let</span> transformedTestData = transform trainMetadata (convertTestToTrainFormat testData)</span><br><span class="line"><span class="keyword">let</span> testInput = transformedTestData |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.Features)</span><br><span class="line"><span class="keyword">let</span> testPredictions = predictionProbabilities finalModel testInput </span><br><span class="line"><span class="keyword">let</span> submissionData = formatSubmissionData transformedTestData testPredictions</span><br><span class="line">writeSubmissionFile SubmissionFilename submissionData</span><br></pre></td></tr></table></figure><p>All that is left to do is submit the file for judging.  Spolier alert, because this is an overly simplified model, it faired poorly.  Like I mentioned in the beginning, the current feature set isn’t good.  In addition, the hyper-parameters could benefit from some search of their own.  These are both topics I plan on discussing in future posts.  F# and .NET still have a couple more tricks up their sleeves to get these results even better.  Hopefully this has provided a bit of inspiration to try F# in your own projects, perhaps even a Kaggle.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s topic will be to demonstrate tackling a &lt;a href=&quot;https://www.kaggle.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kaggle&lt;/a&gt; problem with &lt;a href=&quot;https://github.com/dmlc/xgboost&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XGBoost&lt;/a&gt; and &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  &lt;a href=&quot;https://www.kaggle.com/c/quora-question-pairs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Comparing Quora question intent&lt;/a&gt; offers a perfect opportunity to work with XGBoost, a common tool used in Kaggle competitions.  Luckily there is a .NET wrapper around the XGBoost library, &lt;a href=&quot;https://github.com/PicNet/XGBoost.Net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XGBoost.Net&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Kaggle" scheme="http://codesuji.com/tags/Kaggle/"/>
    
      <category term="Analytics" scheme="http://codesuji.com/tags/Analytics/"/>
    
  </entry>
  
  <entry>
    <title>The Power of the Forward Pipe</title>
    <link href="http://codesuji.com/2017/12/26/The-Power-of-the-Forward-Pipe/"/>
    <id>http://codesuji.com/2017/12/26/The-Power-of-the-Forward-Pipe/</id>
    <published>2017-12-27T03:52:52.000Z</published>
    <updated>2018-03-01T02:08:09.100Z</updated>
    
    <content type="html"><![CDATA[<p>… or <code>Why I &lt;3 the |&gt;</code> …</p><p>This is a light post, but I wanted to provide some advocacy for the <code>|&gt;</code> (forward pipe).  To F# developers, it is a well-known operator.  It hardly needs introduction or promotion for heavier use.  With that said, it can be underappreciated that F# provides native tooling for easy data processing development models.  If F# is the ETL language, then <code>|&gt;</code> is the glue that holds all of the processing components together.</p><a id="more"></a><p>When talking to people about F#, a recurring theme is readability.  It is worth leveraging this strength.  Using <code>|&gt;</code> to implement data transformations and processing is an intuitive way to enhance readability.  It encourages a natural reading of the flow of data through the application.  It can be simply described as: the data flows from top to bottom, being pushed through the pipes as directed.  F#’s indentation aids in calling out sub-processing when necessary.  Admittedly, this concept isn’t unique to F#.  But the contructs of the language make this a natural approach.  Most languages would be hard pressed to match such a clean and readable syntax for such common, and sometimes involved, tasks.  In the end, it is not just about accomplishing a goal, but ensuring that future developers can easily decipher the intent.  I believe <code>|&gt;</code> assists in that result.  With all that said, it is time to show some code.</p><p>First, I’ll make an arbitrary dataset.  To keep things simple, it is a sequence of tuples (x, y), where x is random values between 0 and 10, and y is cosine(x).  See, I’m using it already :) It truly is a workhorse of pushing data, but this is hardly exciting.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">let</span> rows =</span><br><span class="line">  <span class="keyword">let</span> r = <span class="keyword">new</span> System.Random()</span><br><span class="line">  [<span class="number">0</span> .. <span class="number">10000</span>]</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> _ -&gt; </span><br><span class="line">    <span class="keyword">let</span> x = r.NextDouble() * <span class="number">10.</span></span><br><span class="line">    (x, Math.Cos(x)))</span><br></pre></td></tr></table></figure><p>Any good ETL process needs some transformation and filtering functions. In a real program, these would be the main blocks of business logic.  For here, filtering will only include evens, and transformations will be <code>y&#39; = (y + x) + 2</code>.  I also use this as an opportunity to use composition to chain transformations.  F#’s function composition operator shares a linguistic theme, the <code>&gt;&gt;</code> shows an underlying movement of data.  I realize function composition isn’t typically described in such terms, but ultimately a similar intent is being accomplished.   Additionally I make a functional version of <code>floor</code> because, to my functional sensiblities, it feels cleaner.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floor (x:float) = Math.Floor(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isEven (x:float) = (floor x) % <span class="number">2.</span> = <span class="number">0.</span></span><br><span class="line"><span class="keyword">let</span> filterRow (x:float, y:float) = isEven y</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xPlusY (x:float, y:float) = (x, y + x)</span><br><span class="line"><span class="keyword">let</span> yPlus2 (x:float, y:float) = (x, y + <span class="number">2.</span>)</span><br><span class="line"><span class="keyword">let</span> transformRow = (xPlusY &gt;&gt; yPlus2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> averageYs (x:float, items:seq&lt;float*float&gt;) = </span><br><span class="line">  <span class="keyword">let</span> avg = </span><br><span class="line">    items </span><br><span class="line">    |&gt; Seq.averageBy (<span class="keyword">fun</span> (_, y) -&gt; y)</span><br><span class="line">  (x,avg)</span><br></pre></td></tr></table></figure><p>Now it is time to process the dataset.  I use a series of filtering, transforms, and grouping.  This is a simple example, but what I enjoy is how clean it is to reason about.  The data flows from top to bottom.  <code>filter</code> and <code>map</code> perform row-level processing while data-set level grouping is just as easy.  The syntax is light enough to get out of the way, but descriptive enough to be instructive. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> transformedRows = </span><br><span class="line">  rows </span><br><span class="line">  <span class="comment">// Filter</span></span><br><span class="line">  |&gt; Seq.filter filterRow</span><br><span class="line">  <span class="comment">// Transform</span></span><br><span class="line">  |&gt; Seq.map transformRow</span><br><span class="line">  <span class="comment">// Dataset-level grouping</span></span><br><span class="line">  |&gt; Seq.groupBy (<span class="keyword">fun</span> (x, _) -&gt; floor x)</span><br><span class="line">  |&gt; Seq.sortBy (<span class="keyword">fun</span> (x, _) -&gt; x)</span><br><span class="line">  <span class="comment">// Results (x, avg(y))</span></span><br><span class="line">  |&gt; Seq.map averageYs</span><br></pre></td></tr></table></figure><p>Since it is always helpful to see the data, here is what my test set and results look like.  Have I mentioned how useful F#’s repl is when doing data processing?</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; rows</span><br><span class="line">- ;;</span><br><span class="line"><span class="keyword">val</span> it : seq&lt;float * float&gt; =</span><br><span class="line">  seq</span><br><span class="line">    [(<span class="number">6.769300023</span>, <span class="number">0.88415471</span>); (<span class="number">2.243308668</span>, <span class="number">-0.6229532528</span>);</span><br><span class="line">     (<span class="number">0.623326558</span>, <span class="number">0.8119411099</span>); (<span class="number">9.159116824</span>, <span class="number">-0.9649191321</span>); ...]</span><br><span class="line"></span><br><span class="line">&gt; transformedRows |&gt; Seq.iter (printfn <span class="string">"%A"</span>)</span><br><span class="line">- ;;</span><br><span class="line">(<span class="number">0.0</span>, <span class="number">3.34397848</span>)</span><br><span class="line">(<span class="number">1.0</span>, <span class="number">3.563359213</span>)</span><br><span class="line">(<span class="number">4.0</span>, <span class="number">6.996100278</span>)</span><br><span class="line">(<span class="number">5.0</span>, <span class="number">8.178838086</span>)</span><br><span class="line">(<span class="number">6.0</span>, <span class="number">9.440792772</span>)</span><br><span class="line">(<span class="number">7.0</span>, <span class="number">9.827865885</span>)</span><br></pre></td></tr></table></figure><p>This is all well and good, not even really that exciting (is cleaniness anticlimatic?).  But I can take this a little further.  Let’s say I want to introduce parallelism, but don’t want to sacrifice readablity. If I use arrays instead, I can use <code>Array.Parallel.map</code>. I get parallelism with the smallest of modifications.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rowsArray = Seq.toArray rows</span><br><span class="line"><span class="keyword">let</span> transformedRowsArray = </span><br><span class="line">  rowsArray </span><br><span class="line">  <span class="comment">// Filter</span></span><br><span class="line">  |&gt; Array.filter filterRow</span><br><span class="line">  <span class="comment">// Transform</span></span><br><span class="line">  |&gt; Array.Parallel.map transformRow</span><br><span class="line">  <span class="comment">// Dataset-level grouping</span></span><br><span class="line">  |&gt; Array.groupBy (<span class="keyword">fun</span> (x, _) -&gt; floor x)</span><br><span class="line">  |&gt; Array.sortBy (<span class="keyword">fun</span> (x, _) -&gt; x)</span><br><span class="line">  <span class="comment">// Results (x, avg(y))</span></span><br><span class="line">  |&gt; Array.Parallel.map averageYs</span><br></pre></td></tr></table></figure><p>It is nice to have options; here is another one, <code>ParallelSeq</code>.  This requires a package, but its a pretty simple inclusion. Again, parallelism with minimal changes.  Do you sense a theme yet? </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">paket add FSharp.Collections.ParallelSeq</span><br><span class="line"></span><br><span class="line">#r <span class="string">"./packages/FSharp.Collections.ParallelSeq/lib/net45/FSharp.Collections.ParallelSeq.dll"</span></span><br><span class="line"><span class="keyword">open</span> FSharp.Collections.ParallelSeq</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> transformedRowsArray2 = </span><br><span class="line">  rowsArray </span><br><span class="line">  <span class="comment">// Filter</span></span><br><span class="line">  |&gt; PSeq.filter filterRow</span><br><span class="line">  <span class="comment">// Transform</span></span><br><span class="line">  |&gt; PSeq.map transformRow</span><br><span class="line">  <span class="comment">// Dataset-level grouping</span></span><br><span class="line">  |&gt; PSeq.groupBy (<span class="keyword">fun</span> (x, _) -&gt; floor x)</span><br><span class="line">  |&gt; PSeq.sortBy (<span class="keyword">fun</span> (x, _) -&gt; x)</span><br><span class="line">  <span class="comment">// Results (x, avg(y))</span></span><br><span class="line">  |&gt; PSeq.map averageYs</span><br></pre></td></tr></table></figure><p>Oh, but there is more.  Conveniently <code>async</code> is provided natively as another way to provide parallelism.  This takes a couple extra steps, but it is worth the effort.  First, deciding what to parallelize. For sake of this post, filtering and row transformation will be done in parallel.  Second, make an async transform function.  This requires a minor adaptation of the code.  Extract the part of the process, and wrap it in an <code>async { ... }</code>.  Well, that was easy.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> transformRowsAsync (rows) = async &#123;</span><br><span class="line">  <span class="keyword">return</span> </span><br><span class="line">    rows</span><br><span class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> (x, _) -&gt; isEven x)</span><br><span class="line">    |&gt; Seq.map transformRow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once that is in place, the data needs to be broken into segments that can be run in parallel.  Luckily <code>Seq.chunkBySize</code> does exactly what I need.  It converts a sequence into a sequence of sequences (of equal length, so the load is balanced).  I then feed these sub-sequences into <code>Async.Parallel</code>, and wait for them to complete.  Once they are done processing, <code>concat</code> them back into a single sequence for dataset-level processing.  As you can imagine, expensive transforms would benefit from this parallelism.  And the dataflow hardly changes. It’s still easy to read and reason about.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> transformedRowsAsync = </span><br><span class="line">  rows</span><br><span class="line">  <span class="comment">// Split into subsets</span></span><br><span class="line">  |&gt; Seq.chunkBySize <span class="number">10</span></span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> subList -&gt; transformRowsAsync subList)</span><br><span class="line">  <span class="comment">// Parallel processinng</span></span><br><span class="line">  |&gt; Async.Parallel</span><br><span class="line">  |&gt; Async.RunSynchronously </span><br><span class="line">  <span class="comment">// Put back together</span></span><br><span class="line">  |&gt; Seq.concat</span><br><span class="line">  <span class="comment">// Do set-level processing</span></span><br><span class="line">  |&gt; Seq.groupBy (<span class="keyword">fun</span> (x, _) -&gt; floor x)</span><br><span class="line">  |&gt; Seq.sortBy (<span class="keyword">fun</span> (x, _) -&gt; x)</span><br><span class="line">  <span class="comment">// Results (x, avg(y))</span></span><br><span class="line">  |&gt; Seq.map averageYs</span><br></pre></td></tr></table></figure><p>These are just some of the native ways data flows can be represented.  To work with real data, pair this with <a href="http://fsharp.github.io/FSharp.Data/" target="_blank" rel="noopener">F#’s Data Type Providers</a>, and this can be a strong, but simple paradigm for data processing.  I think this can take most people a long way.  But what if you need more.  Then you can take the extra step to use frameworks like <a href="http://mbrace.io/" target="_blank" rel="noopener">MBrace</a>, <a href="http://getakka.net/" target="_blank" rel="noopener">Akka.NET</a>, and <a href="https://github.com/Hopac/Hopac" target="_blank" rel="noopener">Hopac</a>.  Hopefully this provides a bit of inspiration to embrace the <code>|&gt;</code> and leverage the power of F# for ETL in the future.  Until next year…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;… or &lt;code&gt;Why I &amp;lt;3 the |&amp;gt;&lt;/code&gt; …&lt;/p&gt;
&lt;p&gt;This is a light post, but I wanted to provide some advocacy for the &lt;code&gt;|&amp;gt;&lt;/code&gt; (forward pipe).  To F# developers, it is a well-known operator.  It hardly needs introduction or promotion for heavier use.  With that said, it can be underappreciated that F# provides native tooling for easy data processing development models.  If F# is the ETL language, then &lt;code&gt;|&amp;gt;&lt;/code&gt; is the glue that holds all of the processing components together.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="FSAdvent" scheme="http://codesuji.com/tags/FSAdvent/"/>
    
  </entry>
  
  <entry>
    <title>K-Means Clustering with F#</title>
    <link href="http://codesuji.com/2017/08/27/K-Means-Clustering-with-F/"/>
    <id>http://codesuji.com/2017/08/27/K-Means-Clustering-with-F/</id>
    <published>2017-08-27T09:53:01.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>The topic for today is leveraging K-Means clustering to perform simple Las Vegas hotel data analysis.  This will be done using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="http://accord-framework.net/" target="_blank" rel="noopener">Accord.NET</a>.</p><a id="more"></a><p>K-Means clustering can be a useful tool when performing data analysis, and F# is an obvious tool for some quick transforms and reporting.  This post will use customer satisfaction survey data for several Las Vegas hotels.  I will focus on hotel similarity based on available ammenties.  Based on this similarity I will then compare hotels against their relative counterparts.  The data was obtained from the <a href="https://archive.ics.uci.edu/ml/datasets/Las+Vegas+Strip" target="_blank" rel="noopener">UCI Machine Learning Repository</a>.  This data is from “Stripping customers’ feedback on hotels through data mining: The case of Las Vegas Strip. Tourism Management Perspectives”<sub>[1]</sub>.  If you want to follow along, go out and grab the data.  Now, without further delay.</p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is the paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line">nuget Accord</span><br><span class="line">nuget Accord.MachineLearning</span><br><span class="line">nuget Accord.Math</span><br><span class="line">nuget FSharp.Data</span><br><span class="line">nuget FSharp.Charting</span><br></pre></td></tr></table></figure><p>First, setup the libraries and defaults.  <code>k</code> will be the number of clusters, which is 5.  I’ll go into more detail later why that is my magic number.  The datafile is a <code>;</code> delimited file, and the <code>CSVProvider</code> from <code>FSharp.Data</code> makes loading the data easy money. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">System.IO.Directory.SetCurrentDirectory(__SOURCE_DIRECTORY__)</span><br><span class="line"></span><br><span class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></span><br><span class="line">#r <span class="string">"../packages/FSharp.Charting/lib/net45/FSharp.Charting.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord/lib/net45/Accord.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.MachineLearning/lib/net45/Accord.MachineLearning.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.Core.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Accord.Statistics/lib/net45/Accord.Statistics.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FSharp.Data</span><br><span class="line"><span class="keyword">open</span> Accord</span><br><span class="line"><span class="keyword">open</span> Accord.MachineLearning</span><br><span class="line"><span class="keyword">open</span> Accord.Math</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> k = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> VegasDataFilename = <span class="string">"../data/LasVegasTripAdvisorReviews-Dataset.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">VegasData</span> </span>= CsvProvider&lt;VegasDataFilename, <span class="string">";"</span>&gt;</span><br></pre></td></tr></table></figure><p>The data is structured as multiple review instances per hotel.  To get the data in the desired format, some quick transformation steps are required.  For the First step, group data by Hotel into <code>allData</code>.  Second, grab a distinct record for each hotel.  For this I use <code>(snd &gt;&gt; Array.head)</code> to extract the first record from each hotel group.  Third, aggregate each hotel’s specific scores so an average can be calculated into <code>hotelScores</code>.  Finally, grab a list of hotel names for later reporting.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> allData = </span><br><span class="line">  VegasData.Load(VegasDataFilename).Rows</span><br><span class="line">  |&gt; Seq.toArray</span><br><span class="line">  |&gt; Array.groupBy (<span class="keyword">fun</span> x -&gt; x.``Hotel name``)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hotelAmmenities =</span><br><span class="line">  allData </span><br><span class="line">  |&gt; Array.map (snd &gt;&gt; Array.head)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hotelScores = </span><br><span class="line">  allData</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> (hotelName, rows) -&gt; </span><br><span class="line">    hotelName, </span><br><span class="line">    (rows |&gt; Array.averageBy (<span class="keyword">fun</span> x -&gt; float x.Score)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataNames = </span><br><span class="line">  hotelAmmenities </span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.``Hotel name``)</span><br></pre></td></tr></table></figure><p>There is one final transformation.  The Accord.NET K-Means object expects data as an array of arrays of floats.  Here I pull out the ammenities that I care about.  Does it have a pool, gym, tennis court, spa, casino <em>(you can have a hotel in vegas without a casino?)</em>, free internet, and it’s star rating.  From the dataset provided, these are the most interesting.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> boolToFloat x = <span class="keyword">if</span> x <span class="keyword">then</span> <span class="number">1.</span> <span class="keyword">else</span> <span class="number">0.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataValues = </span><br><span class="line"> hotelAmmenities </span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> row -&gt; </span><br><span class="line">    [|</span><br><span class="line">      boolToFloat row.Pool;</span><br><span class="line">      boolToFloat row.Gym;</span><br><span class="line">      boolToFloat row.``Tennis court``;</span><br><span class="line">      boolToFloat row.Spa;</span><br><span class="line">      boolToFloat row.Casino;</span><br><span class="line">      boolToFloat row.``Free internet``;</span><br><span class="line">      float row.``Hotel stars``</span><br><span class="line">    |]) </span><br></pre></td></tr></table></figure><p>Accord.NET makes the calls pretty easy.  Setup a <code>KMeans</code> object with a specified number of clusters, then learn based on the data provided.  Since I’m peforming analysis on existing data, I then obtain the cluster labels for my data.  If the problem was a prediction problem, <code>clusters</code> would be the object I could use elsewhere for predicting what future hotels are similar to existing hotels.  Additionally, the <code>KMeans</code> class provides functionality to evaluate cluster details, such as centroids and error.  I’ll dig into these more toward the end.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> kmeans = KMeans(k)</span><br><span class="line"><span class="keyword">let</span> clusters = kmeans.Learn(dataValues)</span><br><span class="line"><span class="keyword">let</span> labels = clusters.Decide(dataValues)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Model analysis</span></span><br><span class="line">clusters.Centroids</span><br><span class="line">clusters.Clusters</span><br><span class="line">kmeans.Error</span><br></pre></td></tr></table></figure><p>Once the cluster labeling is complete I combine my earlier generated <code>hotelScores</code> with the cluster label for each hotel.  Since I kept the data in the same order, it can simply be zipped together as a <code>(&lt;hotelScore&gt;, &lt;cluster #&gt;)</code> tuple. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> combinedData = </span><br><span class="line">  (hotelScores, labels)</span><br><span class="line">  ||&gt; Array.zip</span><br></pre></td></tr></table></figure><p>For comparative analysis, the average hotel review score for each cluster must be obtained.  It is a matter of taking the newly created <code>combinedData</code>, grouping by cluster, then averaging the score of each hotel in the cluster.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> avgClusterScore = </span><br><span class="line"> combinedData </span><br><span class="line">  |&gt; Array.groupBy (<span class="keyword">fun</span> (scores, cluster) -&gt; cluster)</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> (cluster, scores) -&gt; </span><br><span class="line">    cluster, </span><br><span class="line">    (scores |&gt; Array.map (fst&gt;&gt;snd) |&gt; Array.average)) </span><br><span class="line">  |&gt; Map  </span><br></pre></td></tr></table></figure><p>This code deserves a bit of an explanation.  In my defense, this is a small exercise.  In production I try to avoid tuples of tuples of tuples all the way down. This is currently at the border of reasonable readability.  Below is a deeper breakdown into what is going on.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Source</span></span><br><span class="line">combinedData </span><br><span class="line"></span><br><span class="line"><span class="comment">// Groups by cluster</span></span><br><span class="line">|&gt; Array.groupBy (<span class="keyword">fun</span> (scores, cluster) -&gt; cluster)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gives something that looks like this: </span></span><br><span class="line">[|(<span class="number">3</span>,</span><br><span class="line">    [|((<span class="string">"Circus Circus Hotel &amp; Casino Las Vegas"</span>, <span class="number">3.208333333</span>), <span class="number">3</span>);</span><br><span class="line">      ((<span class="string">"Hilton Grand Vacations at the Flamingo"</span>, <span class="number">3.958333333</span>), <span class="number">3</span>)|]);</span><br><span class="line">   (<span class="number">4</span>,</span><br><span class="line">    [|((<span class="string">"Excalibur Hotel &amp; Casino"</span>, <span class="number">3.708333333</span>), <span class="number">4</span>);</span><br><span class="line">      ((<span class="string">"Tuscany Las Vegas Suites &amp; Casino"</span>, <span class="number">4.208333333</span>), <span class="number">4</span>)|]);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a tuple of (&lt;cluster #&gt;, &lt;average cluster score&gt;)</span></span><br><span class="line">|&gt; Array.map (<span class="keyword">fun</span> (cluster, scores) -&gt; </span><br><span class="line">  <span class="comment">// Cluster #</span></span><br><span class="line">  cluster, </span><br><span class="line">  <span class="comment">// Extracts the score from ((&lt;hotel name&gt;, &lt;score&gt;), &lt;cluster#&gt;) </span></span><br><span class="line">  <span class="comment">// fst&gt;&gt;snd navigates to the first tuple, second item</span></span><br><span class="line">  (scores |&gt; Array.map (fst&gt;&gt;snd) |&gt; Array.average)) </span><br><span class="line"></span><br><span class="line"><span class="comment">// Turns it all into a map so I can do average score lookups based on cluster.</span></span><br><span class="line">|&gt; Map  </span><br></pre></td></tr></table></figure><p>Whew, now that is done.  Time to see some results.  The report is sorted by cluster number and hotel score (descending).  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printfn <span class="string">"%7s %-55s %5s %s"</span> <span class="string">"Cluster"</span> <span class="string">"Hotel"</span> <span class="string">"Score"</span> <span class="string">"ClusterScore"</span></span><br><span class="line">combinedData</span><br><span class="line">|&gt; Array.sortBy (<span class="keyword">fun</span> (x, cluster) -&gt; cluster, (snd x) * <span class="number">-1.</span>)</span><br><span class="line">|&gt; Array.iter (<span class="keyword">fun</span> (x, cluster ) -&gt; printfn <span class="string">"%7d %-55s  %0.2f         %0.2f"</span> cluster (fst x) (snd x) (avgClusterScore.Item cluster))</span><br></pre></td></tr></table></figure><p>Based on relative ammenties (and 5 clusters), here are the results.  With a small bit of code I’ve gone from data file to cluster score hotel comparisons.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Cluster Hotel                                                   Score ClusterScore</span><br><span class="line">      <span class="number">0</span> Wynn Las Vegas                                           <span class="number">4.63</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> The Venetian Las Vegas Hotel                             <span class="number">4.58</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Encore at wynn Las Vegas                                 <span class="number">4.54</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> The Palazzo Resort Hotel Casino                          <span class="number">4.38</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Trump International Hotel Las Vegas                      <span class="number">4.38</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> The Cosmopolitan Las Vegas                               <span class="number">4.25</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Bellagio Las Vegas                                       <span class="number">4.21</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Caesars Palace                                           <span class="number">4.13</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Tropicana Las Vegas - A Double Tree by Hilton Hotel      <span class="number">4.04</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Paris Las Vegas                                          <span class="number">4.04</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Treasure Island- TI Hotel &amp; Casino                       <span class="number">3.96</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> The Westin las Vegas Hotel Casino &amp; Spa                  <span class="number">3.92</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">0</span> Monte Carlo Resort&amp;Casino                                <span class="number">3.29</span>         <span class="number">4.18</span></span><br><span class="line">      <span class="number">1</span> Marriott's Grand Chateau                                 <span class="number">4.54</span>         <span class="number">4.36</span></span><br><span class="line">      <span class="number">1</span> Wyndham Grand Desert                                     <span class="number">4.38</span>         <span class="number">4.36</span></span><br><span class="line">      <span class="number">1</span> Hilton Grand Vacations on the Boulevard                  <span class="number">4.17</span>         <span class="number">4.36</span></span><br><span class="line">      <span class="number">2</span> The Cromwell                                             <span class="number">4.08</span>         <span class="number">4.08</span></span><br><span class="line">      <span class="number">3</span> Hilton Grand Vacations at the Flamingo                   <span class="number">3.96</span>         <span class="number">3.58</span></span><br><span class="line">      <span class="number">3</span> Circus Circus Hotel &amp; Casino Las Vegas                   <span class="number">3.21</span>         <span class="number">3.58</span></span><br><span class="line">      <span class="number">4</span> Tuscany Las Vegas Suites &amp; Casino                        <span class="number">4.21</span>         <span class="number">3.96</span></span><br><span class="line">      <span class="number">4</span> Excalibur Hotel &amp; Casino                                 <span class="number">3.71</span>         <span class="number">3.96</span></span><br></pre></td></tr></table></figure><p>I want to backtrack now, and investigate the cluster details.</p><p>Where are the centroids for each cluster?</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clusters.Centroids</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it : float [] [] =</span><br><span class="line">  [|[|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.2307692308</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.9230769231</span>; <span class="number">4.615384615</span>|];</span><br><span class="line">    [|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.3333333333</span>; <span class="number">0.3333333333</span>; <span class="number">0.6666666667</span>; <span class="number">1.0</span>; <span class="number">35.0</span>|];</span><br><span class="line">    [|<span class="number">1.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">45.0</span>|];</span><br><span class="line">    [|<span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">3.0</span>|];</span><br><span class="line">    [|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">3.0</span>|]|]</span><br></pre></td></tr></table></figure><p>What are the cluster details?</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">clusters.Clusters</span><br><span class="line">|&gt; Array.iter(<span class="keyword">fun</span> cluster -&gt;</span><br><span class="line">  printfn <span class="string">"%d %0.2f"</span> cluster.Index cluster.Proportion <span class="comment">// Index and proportion of data</span></span><br><span class="line">  printfn <span class="string">"   %A"</span> cluster.Centroid                    <span class="comment">// Centroids (like above)</span></span><br><span class="line">  printfn <span class="string">"   %A"</span> cluster.Covariance                  <span class="comment">// Covariances  </span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0.62</span></span><br><span class="line">   [|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.2307692308</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.9230769231</span>; <span class="number">4.615384615</span>|]</span><br><span class="line">   [|[|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; [|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; ...|]</span><br><span class="line"><span class="number">1</span> <span class="number">0.14</span></span><br><span class="line">   [|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.3333333333</span>; <span class="number">0.3333333333</span>; <span class="number">0.6666666667</span>; <span class="number">1.0</span>; <span class="number">35.0</span>|]</span><br><span class="line">   [|[|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; [|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; ...|]</span><br><span class="line"><span class="number">2</span> <span class="number">0.05</span></span><br><span class="line">   [|<span class="number">1.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">45.0</span>|]</span><br><span class="line">   [|[|nan; nan; nan; nan; nan; nan; nan|]; [|nan; nan; nan; nan; nan; nan; nan|]; ...|]</span><br><span class="line"><span class="number">3</span> <span class="number">0.10</span></span><br><span class="line">   [|<span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">3.0</span>|]</span><br><span class="line">   [|[|<span class="number">0.5</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">-0.5</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; [|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; ...]|]</span><br><span class="line"><span class="number">4</span> <span class="number">0.10</span></span><br><span class="line">   [|<span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">0.5</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">1.0</span>; <span class="number">3.0</span>|]</span><br><span class="line">   [|[|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; [|<span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>; <span class="number">0.0</span>|]; ...|]</span><br></pre></td></tr></table></figure><p>What is the calculated error?</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kmeans.Error</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> it : float = <span class="number">0.467032967</span></span><br></pre></td></tr></table></figure><p>Taking this a little further.  How many clusters should be used?  What are the clustering dynamics?  There are 21 hotels with 7 dimensions.  My gut feeling is somewhere between 3 and 7 clusters probably makes sense.  That should be enough to provide some distinction, but allow for large enough groupings to be useful.  When generating the clusters, the initial centroids are random.  This means the data could be clustered differently depending on starting points.  To test this I’ll look at between 2 and 15 clusters.  I’ll also run 100 trials per cluster size, and average the error score for that cluster.  This should give a reasonable view into the clustering performance.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2.</span><span class="number">.15</span>]</span><br><span class="line">|&gt; List.map (<span class="keyword">fun</span> k -&gt;</span><br><span class="line">  <span class="keyword">let</span> error =</span><br><span class="line">    [<span class="number">0.</span><span class="number">.100</span>]</span><br><span class="line">    |&gt; List.map (<span class="keyword">fun</span> trial -&gt;</span><br><span class="line">      <span class="keyword">let</span> kmeans = <span class="keyword">new</span> KMeans(k)</span><br><span class="line">      <span class="keyword">let</span> clusters = kmeans.Learn(dataValues)</span><br><span class="line">      <span class="keyword">let</span> labels = clusters.Decide(dataValues)</span><br><span class="line">      kmeans.Error)</span><br><span class="line">    |&gt; List.average</span><br><span class="line">  k, error)</span><br><span class="line">|&gt; List.map (<span class="keyword">fun</span> (k, error) -&gt; </span><br><span class="line">  printfn <span class="string">"%2d %0.2f"</span> k error</span><br><span class="line">  (k,error))</span><br><span class="line">|&gt; Chart.Line</span><br><span class="line">|&gt; Chart.WithXAxis(Title = <span class="string">"Clusters (k)"</span>)</span><br><span class="line">|&gt; Chart.WithYAxis(Title = <span class="string">"Error"</span>)</span><br><span class="line">|&gt; Chart.Show</span><br><span class="line"></span><br><span class="line"><span class="comment">// Results</span></span><br><span class="line"> <span class="number">2</span> <span class="number">4.61</span></span><br><span class="line"> <span class="number">3</span> <span class="number">1.62</span></span><br><span class="line"> <span class="number">4</span> <span class="number">0.85</span></span><br><span class="line"> <span class="number">5</span> <span class="number">0.45</span></span><br><span class="line"> <span class="number">6</span> <span class="number">0.35</span></span><br><span class="line"> <span class="number">7</span> <span class="number">0.28</span></span><br><span class="line"> <span class="number">8</span> <span class="number">0.21</span></span><br><span class="line"> <span class="number">9</span> <span class="number">0.17</span></span><br><span class="line"><span class="number">10</span> <span class="number">0.11</span></span><br><span class="line"><span class="number">11</span> <span class="number">0.07</span></span><br><span class="line"><span class="number">12</span> <span class="number">0.03</span></span><br><span class="line"><span class="number">13</span> <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span> <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span> <span class="number">0.00</span></span><br></pre></td></tr></table></figure><p><img src="/images/km1/ErrorChart.png" alt="Error Chart"></p><p>Looking at the results, error goes down as k goes up.  This makes sense, with only 7 ammenity dimensions, most of them being standard, distinction completely falling off at around 12 clusters.  But that’s not useful.  So I can’t just take the smallest error.  The most dramatic error reduction happens at 4 clusters, but the slope seems to really level off after k=5.  From these results 4 or 5 seem like reasonable bets.  I choose 5 because it provides a bit more separation, and it’s a prime number. :)  </p><p>With all this done.  I have a reasonable expectation that I’m clustering properly.  I can now go back to the original report and see how similar hotels compare.  This post has just been one example of how you can use K-Means clustering.  I hope you found it useful.  Until next time…</p><p><strong>References</strong><br>[1] ref: Moro, S., Rita, P., &amp; Coelho, J. (2017). Stripping customers’ feedback on hotels through data mining: The case of Las Vegas Strip. Tourism Management Perspectives, 23, 41-52.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The topic for today is leveraging K-Means clustering to perform simple Las Vegas hotel data analysis.  This will be done using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://accord-framework.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Accord.NET&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Accord.NET" scheme="http://codesuji.com/tags/Accord-NET/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Statistics" scheme="http://codesuji.com/tags/Statistics/"/>
    
      <category term="Analytics" scheme="http://codesuji.com/tags/Analytics/"/>
    
  </entry>
  
  <entry>
    <title>F# and Serilog</title>
    <link href="http://codesuji.com/2017/08/20/F-and-Serilog/"/>
    <id>http://codesuji.com/2017/08/20/F-and-Serilog/</id>
    <published>2017-08-20T19:12:47.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Today I’ll discuss two topics.  The primary topic is implementing logging by leveraging <a href="https://serilog.net/" target="_blank" rel="noopener">Serilog</a> with <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>.  The secondary topic is <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.0</a>.  Due to the recent release of .NET Core 2.0 (now with better F# support), I thought this would be a good time to show how to implement an F# .NET Core project.</p><a id="more"></a><p>Going forward I’ll assume you have .NET Core 2.0 installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>Getting started, create the project.  For this post, the example will be a console app.  I also have a preference for the <a href="https://fsprojects.github.io/Paket/" target="_blank" rel="noopener">Paket</a> package manager.  This isn’t strictly necessary, but the benefits are worth the adjustment.  To do this I need to convert the project to use Paket.  If you want to stick with the default nuget, that’s fine, you’ll just need to do ignore a couple commands and mentally map <code>paket add</code> to <code>nuget install</code>. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name SerilogExample</span><br><span class="line">cd SerilogExample</span><br><span class="line">paket convert-from-nuget</span><br></pre></td></tr></table></figure><p>Next, add the required packages for configuration and logging.  Since I will use config file based configuration, I use the <code>ConfigurationBuilder</code> that .NET Core apps commonly use.  At this point I should note that Serilog has additional Sinks as logging targets.  Check them out if you want more than plain logfiles.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">paket add Microsoft.Extensions.ConfigurationBuilder --project SerilogExample.fsproj</span><br><span class="line">paket add Microsoft.Extensions.ConfigurationBuilder.Json --project SerilogExample.fsproj</span><br><span class="line">paket add Serilog --project SerilogExample.fsproj</span><br><span class="line">paket add Serilog.Settings.Configuration --project SerilogExample.fsproj</span><br><span class="line">paket add Serilog.Sinks.Literate --project SerilogExample.fsproj</span><br><span class="line">paket add Serilog.Sinks.RollingFile --project SerilogExample.fsproj</span><br></pre></td></tr></table></figure><p>Time to open up <code>Program.fs</code> and get to work.  First, add the necessary namespaces.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Configuration</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> Serilog</span><br><span class="line"><span class="keyword">open</span> Serilog.Configuration</span><br><span class="line"><span class="keyword">open</span> Serilog.Events</span><br><span class="line"><span class="keyword">open</span> Serilog.Formatting.Json</span><br><span class="line"><span class="keyword">open</span> Serilog.Sinks</span><br></pre></td></tr></table></figure><p>The logger object can be created in a couple different ways.  The first way I’ll examine is being entirely configuration file driven.  To do this I need a Configuration object loaded from a json formatted file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> configuration = </span><br><span class="line">    ConfigurationBuilder()</span><br><span class="line">      .AddJsonFile(<span class="string">"config.json"</span>)</span><br><span class="line">      .Build();</span><br></pre></td></tr></table></figure><p>Before going any further, the configuration file needs created.  Add a <code>config.json</code> file to the root of the project and populate as below.  Other application-specific configuration can be in here as well, but the Serilog settings need to be under the <code>Serilog</code> section.  This example will only log messages with a log level of <code>Information</code> and higher.  The Serilog <code>LiterateConsole</code> is used for outputting to STDOUT.  <code>RollingFile</code> is used for the logfile creation (including a templated name, max file size, and max file count).   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Serilog"</span>: &#123;</span><br><span class="line">    <span class="attr">"MinimumLevel"</span>: <span class="string">"Information"</span>,</span><br><span class="line">    <span class="attr">"WriteTo"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"Name"</span>: <span class="string">"LiterateConsole"</span>,</span><br><span class="line">        <span class="attr">"Args:"</span>: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"Name"</span>: <span class="string">"RollingFile"</span>,</span><br><span class="line">        <span class="attr">"Args"</span>: &#123;</span><br><span class="line">          <span class="attr">"pathFormat"</span>: <span class="string">"log-&#123;Date&#125;.log"</span>,</span><br><span class="line">          <span class="attr">"fileSizeLimitBytes"</span>: <span class="number">10000000</span>,</span><br><span class="line">          <span class="attr">"retainedFileCountLimit"</span>: <span class="number">100</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now that a configuration file is created, there is an additional need to address.  By default the config file does not get copied to the bin directory on compilation.  To ensure the config file ends up where desired (and needed), the <code>.fsproj</code> file needs modified.  Adding <code>config.json</code> as a content file, copies it to the output directory when building the project. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ItemGroup&gt;</span><br><span class="line">  &lt;Compile Include=<span class="string">"Program.fs"</span> /&gt;</span><br><span class="line">  &lt;Content Include=<span class="string">"config.json"</span>&gt;</span><br><span class="line">    &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;</span><br><span class="line">  &lt;/Content&gt;</span><br><span class="line">&lt;/ItemGroup&gt;</span><br></pre></td></tr></table></figure><p>By this point, most of the work has been done.  All that is left to do is feed the configuration object to the Serilog constructor.  Logger created.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> logger = </span><br><span class="line">  LoggerConfiguration()</span><br><span class="line">    .ReadFrom.Configuration(configuration)</span><br><span class="line">    .CreateLogger()</span><br></pre></td></tr></table></figure><p>Using the logger is straight forward.  If you haven’t used Serilog before, it also supports string interpolation. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">"bar"</span></span><br><span class="line"></span><br><span class="line">logger.Debug(<span class="string">"A debug message."</span>)</span><br><span class="line">logger.Information(<span class="string">"An info message. Details: &#123;foo&#125;"</span>, foo)</span><br><span class="line">logger.Error(<span class="string">"An error message."</span>)</span><br><span class="line">logger.Warning(<span class="string">"A warning message."</span>)</span><br></pre></td></tr></table></figure><p>Note, the logging level is set to <code>Information</code> in the config file, so the debug message doesn’t display.  Here is how it looks in the console and logfile.</p><p><img src="/images/sl1/output_stdout1.png" alt="Logger console output"></p><p><img src="/images/sl1/output_logfile1.png" alt="Logger logfile output"></p><p>Done, right?  Not so fast.  Serilog does not need to be entirely config file driven.  I’m going to replace the previous logger creation with the below code. There are a couple difference.  First, I make the log level <code>Debug</code>.  More interestly I leverage Serilog’s ability for structured logging.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> logger = </span><br><span class="line">  LoggerConfiguration()</span><br><span class="line">    .MinimumLevel.Debug()</span><br><span class="line">    .WriteTo.LiterateConsole()</span><br><span class="line">    .WriteTo.RollingFile(<span class="keyword">new</span> JsonFormatter(), <span class="string">"log-&#123;Date&#125;.log"</span>)</span><br><span class="line">    .CreateLogger()</span><br></pre></td></tr></table></figure><p>Now I run the same logger calls, and here is how it looks in the console and logfile. You can see the debug messages, but more importantly, the log file now has structured events.</p><p><img src="/images/sl1/output_stdout2.png" alt="Logger console output"></p><p><img src="/images/sl1/output_logfile2.png" alt="Logger logfile output"></p><p>Hopefully you have found these Serilog examples useful when integrating logging into your new .NET Core F# applications.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I’ll discuss two topics.  The primary topic is implementing logging by leveraging &lt;a href=&quot;https://serilog.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Serilog&lt;/a&gt; with &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  The secondary topic is &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://www.microsoft.com/net/download/core&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;.NET Core version 2.0&lt;/a&gt;.  Due to the recent release of .NET Core 2.0 (now with better F# support), I thought this would be a good time to show how to implement an F# .NET Core project.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
      <category term="Logging" scheme="http://codesuji.com/tags/Logging/"/>
    
  </entry>
  
  <entry>
    <title>F# and Dapper</title>
    <link href="http://codesuji.com/2017/07/29/F-and-Dapper/"/>
    <id>http://codesuji.com/2017/07/29/F-and-Dapper/</id>
    <published>2017-07-29T10:15:42.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Continuing with the database theme, here is a quick example of using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> with <a href="https://github.com/StackExchange/Dapper" target="_blank" rel="noopener">Dapper</a>.</p><a id="more"></a><p>For comparison sake,  I will continue to use <a href="https://sqlite.org/" target="_blank" rel="noopener">SQLite</a> and Bitcoin trade data as I did in the <a href="/2017/07/28/F-and-SQLite/">previous post</a>.  Since Dapper is a light-weight ORM that leverages classes, it makes data access much cleaner than just using a raw SqlReader.  Its implementation also facilitates building some functional wrappers around the database calls.  Note, there will be some repetive setup code in the beginning of the post, since the basic database creation and setup has not changed.</p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is the paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget System.Data.SQLite</span><br><span class="line">nuget Dapper</span><br></pre></td></tr></table></figure><p>The initial setup is similar to the previous post, with the major addition of Dapper references.  The code is identical to the previous post.  I will use the same <code>TradeData</code> record type and sample data.  Dapper extends the sql connection object, so I perform database creation and connection opening as I did before.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/System.Data.SQLite.Core/lib/net46/System.Data.SQLite.dll"</span></span><br><span class="line">#r <span class="string">"../packages/Dapper/lib/net451/Dapper.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Collections.Generic</span><br><span class="line"><span class="keyword">open</span> System.Data.SQLite</span><br><span class="line"><span class="keyword">open</span> Dapper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">TradeData</span> </span>= &#123; </span><br><span class="line">    Symbol:string; </span><br><span class="line">    Timestamp:DateTime; </span><br><span class="line">    Price:float;</span><br><span class="line">    TradeSize:float &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sample Data</span></span><br><span class="line"><span class="keyword">let</span> trades = [</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">33</span>); Price = <span class="number">2751.20</span>; TradeSize = <span class="number">0.01000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.20</span>; TradeSize = <span class="number">0.01000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.40000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.55898959</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">03</span>); Price = <span class="number">2750.00</span>; TradeSize = <span class="number">0.86260000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">03</span>); Price = <span class="number">2750.00</span>; TradeSize = <span class="number">0.03000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">43</span>, <span class="number">31</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.44120000</span> &#125; </span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize connectionstring</span></span><br><span class="line"><span class="keyword">let</span> databaseFilename = <span class="string">"sample.sqlite"</span></span><br><span class="line"><span class="keyword">let</span> connectionStringFile = sprintf <span class="string">"Data Source=%s;Version=3;"</span> databaseFilename  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Create database</span></span><br><span class="line">SQLiteConnection.CreateFile(databaseFilename)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open connection</span></span><br><span class="line"><span class="keyword">let</span> connection = <span class="keyword">new</span> SQLiteConnection(connectionStringFile)</span><br><span class="line">connection.Open()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create table structure</span></span><br><span class="line"><span class="keyword">let</span> structureSql =</span><br><span class="line">    <span class="string">"create table Trades ("</span> +</span><br><span class="line">    <span class="string">"Symbol varchar(20), "</span> +</span><br><span class="line">    <span class="string">"Timestamp datetime, "</span> + </span><br><span class="line">    <span class="string">"Price float, "</span> + </span><br><span class="line">    <span class="string">"TradeSize float)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> structureCommand = <span class="keyword">new</span> SQLiteCommand(structureSql, connection)</span><br><span class="line">structureCommand.ExecuteNonQuery() </span><br></pre></td></tr></table></figure><p>Now, the new stuff.  I will look at inserting first.  Dapper passes parameters as anonymous classes.  This has several implications.  For my purpose, this means I can use the <code>TradeData</code> type and its fields will auto-map to the parameters in the <code>connection.Execute</code> call.  As before, I use <code>map</code> and <code>sum</code> to total up the records inserted.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> insertTradeSql = </span><br><span class="line">    <span class="string">"insert into trades(symbol, timestamp, price, tradesize) "</span> + </span><br><span class="line">    <span class="string">"values (@symbol, @timestamp, @price, @tradesize)"</span></span><br><span class="line"></span><br><span class="line">trades</span><br><span class="line">|&gt; List.map (<span class="keyword">fun</span> x -&gt; connection.Execute(insertTradeSql, x))</span><br><span class="line">|&gt; List.sum</span><br><span class="line">|&gt; (<span class="keyword">fun</span> recordsAdded -&gt; printfn <span class="string">"Records added  : %d"</span> recordsAdded)</span><br></pre></td></tr></table></figure><p>This works, but it would be nice to have a more functional interface.  To do that, I create a <code>dbExecute</code> that takes a connection, sql string, and data object.  Before I run more inserts, I delete the previously added records, just to keep things clean.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Clear out records from insert1, so I don't end up with duplicate records</span></span><br><span class="line"><span class="keyword">let</span> deleteCount = connection.Execute(<span class="string">"delete from trades"</span>)</span><br><span class="line">printfn <span class="string">"Records deleted: %A"</span> deleteCount</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dbExecute (connection:SQLiteConnection) (sql:string) (data:_) = </span><br><span class="line">    connection.Execute(sql, data)</span><br><span class="line"></span><br><span class="line">trades</span><br><span class="line">|&gt; List.map (dbExecute connection insertTradeSql)</span><br><span class="line">|&gt; List.sum</span><br><span class="line">|&gt; (<span class="keyword">fun</span> recordsAdded -&gt; printfn <span class="string">"Records added  : %d"</span> recordsAdded)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Now that there are records in the database, it is time to perform a parameterized select.  Dapper’s <code>Query</code> uses generics to return a sequence of the specified class type, or in this case, F# type <code>TradeData</code>.  This is a convenient method to access the results. As before, I could pass a type in for the parameters, but I would need to custom build a type for any query.  A more dynamic alternative is to use an <code>IDictionary&lt;string, obj&gt;</code> for the key/value pairs, where key is the parameter name and value is the value of the parameter. The big note is the value must be an object, and it must be boxed.  This isn’t a problem, more of a syntax annoyance.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> filteredSql = </span><br><span class="line">    <span class="string">"select symbol, timestamp, price, tradesize From trades "</span> +</span><br><span class="line">    <span class="string">"where symbol = @symbol and tradesize &gt;= @mintradesize"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> results1 = </span><br><span class="line">    connection.Query&lt;TradeData&gt;(</span><br><span class="line">        filteredSql, </span><br><span class="line">        dict [ <span class="string">"symbol"</span>, box <span class="string">"BTC/USD"</span>; <span class="string">"mintradesize"</span>, box <span class="number">0.4</span> ])</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"Query (1):"</span></span><br><span class="line">results1 </span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> x -&gt; </span><br><span class="line">    printfn <span class="string">"%-7s %-19s %.2f [%.8f]"</span> x.Symbol (x.Timestamp.ToString(<span class="string">"s"</span>)) x.Price x.TradeSize)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This is all well and good, but it doesn’t feel very idiomatic.  It can better; for this I add two supporting components.  First, the fat arrow provides a cleaner syntax for building the key/value pair.  Second, a <code>dbQuery</code> function similar to the previous <code>dbExecute</code> function. To make it flexible, the output type is a generic, and the input parameters are optional.  After all this, the end result is the same, but the code just feels cleaner.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">inline</span> (=&gt;) k v = k, box v</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dbQuery&lt;<span class="symbol">'T</span>&gt; (connection:SQLiteConnection) (sql:string) (parameters:IDictionary&lt;string, obj&gt; option) = </span><br><span class="line">    <span class="keyword">match</span> parameters <span class="keyword">with</span></span><br><span class="line">    | Some(p) -&gt; connection.Query&lt;<span class="symbol">'T</span>&gt;(sql, p)</span><br><span class="line">    | None    -&gt; connection.Query&lt;<span class="symbol">'T</span>&gt;(sql)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> results2 = dbQuery&lt;TradeData&gt; connection filteredSql (Some (dict [ <span class="string">"symbol"</span> =&gt; <span class="string">"BTC/USD"</span>; </span><br><span class="line">                                                                       <span class="string">"mintradesize"</span> =&gt; <span class="number">0.4</span> ]))</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"Query (2):"</span></span><br><span class="line">results2 </span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> x -&gt; </span><br><span class="line">    printfn <span class="string">"%-7s %-19s %.2f [%.8f]"</span> x.Symbol (x.Timestamp.ToString(<span class="string">"s"</span>)) x.Price x.TradeSize)</span><br></pre></td></tr></table></figure><p>Now that I’m done, close the connection.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.Close()</span><br></pre></td></tr></table></figure><p>Here is the output from the above actions.</p><p><img src="/images/db2/output.png" alt="Insert and query output"></p><p>As you can see, leveraging Dapper not only provides a cleaner interface, but facilitates a more functional approach to database interaction.  Hopefully you have found this short exploration into F# and Dapper useful.  Until next time.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Continuing with the database theme, here is a quick example of using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; with &lt;a href=&quot;https://github.com/StackExchange/Dapper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dapper&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Database" scheme="http://codesuji.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>F# and SQLite</title>
    <link href="http://codesuji.com/2017/07/28/F-and-SQLite/"/>
    <id>http://codesuji.com/2017/07/28/F-and-SQLite/</id>
    <published>2017-07-28T11:25:33.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Today I have a quick example of using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> with <a href="https://sqlite.org/" target="_blank" rel="noopener">SQLite</a>.  </p><a id="more"></a><p>Using Bitcoin trade data from <a href="https://www.gdax.com" target="_blank" rel="noopener">GDAX</a> I will show a simple SQLite example.  As fair warning, the SQLite interface is a raw sql connection targeted generically at the .NET Framework.  As a quick introduction this is fine.  Future posts will investigate a more F# idiomatic way of doing things. <em>[Edit from the future: <a href="/2017/07/29/F-and-Dapper/">F# and Dapper</a>]</em></p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is the paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget System.Data.SQLite</span><br></pre></td></tr></table></figure><p>As usual there is some initial setup.  First, include references. Second, create the recordtype for the Bitcoin trade data.  Third, create the sample data to be used for this exercise.   </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/System.Data.SQLite.Core/lib/net46/System.Data.SQLite.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Data.SQLite</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">TradeData</span> </span>= &#123; </span><br><span class="line">    Symbol:string; </span><br><span class="line">    Timestamp:DateTime; </span><br><span class="line">    Price:float;</span><br><span class="line">    TradeSize:float &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sample Data</span></span><br><span class="line"><span class="keyword">let</span> trades = [</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">33</span>); Price = <span class="number">2751.20</span>; TradeSize = <span class="number">0.01000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.20</span>; TradeSize = <span class="number">0.01000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.40000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">21</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.55898959</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">03</span>); Price = <span class="number">2750.00</span>; TradeSize = <span class="number">0.86260000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">44</span>, <span class="number">03</span>); Price = <span class="number">2750.00</span>; TradeSize = <span class="number">0.03000000</span> &#125;;</span><br><span class="line">    &#123; Symbol = <span class="string">"BTC/USD"</span>; Timestamp = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">43</span>, <span class="number">31</span>); Price = <span class="number">2750.01</span>; TradeSize = <span class="number">0.44120000</span> &#125; </span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>Now it is time to create the database.  I need a filename for creation, the <code>connectionString</code> is for later.  As you can see, creating a database is straightforward.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> databaseFilename = <span class="string">"sample.sqlite"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> connectionString = sprintf <span class="string">"Data Source=%s;Version=3;"</span> databaseFilename  </span><br><span class="line"></span><br><span class="line">SQLiteConnection.CreateFile(databaseFilename)</span><br></pre></td></tr></table></figure><p>Once created, I open the connection for future use.  As a note, this example is just a single fsx script. Because of this, I use let.  In a real implementation I would most likely have this in a function somewhere.  In cases like that, I use <code>use</code> instead of <code>let</code> when creating connections and commands.  That way the connection properly disposes when it goes out of scope.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> connection = <span class="keyword">new</span> SQLiteConnection(connectionString)</span><br><span class="line">connection.Open()</span><br></pre></td></tr></table></figure><p>As an aside, perhaps I want my instance to be an in-memory database.  Instead of doing the above <code>CreateFile</code> and connect, I can use SQLite’s <code>:memory:</code> datasource to spin this up in memory.  For particular use-cases, this can be a nice option, so I thought it was worth mentioning.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> connectionStringMemory = sprintf <span class="string">"Data Source=:memory:;Version=3;New=True;"</span> </span><br><span class="line"><span class="keyword">let</span> connection = <span class="keyword">new</span> SQLiteConnection(connectionStringMemory)</span><br><span class="line">connection.Open()</span><br></pre></td></tr></table></figure><p>Time to give the database some structure. A simple table will suffice.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> structureSql =</span><br><span class="line">    <span class="string">"create table Trades ("</span> +</span><br><span class="line">    <span class="string">"Symbol varchar(20), "</span> +</span><br><span class="line">    <span class="string">"Timestamp datetime, "</span> + </span><br><span class="line">    <span class="string">"Price float, "</span> + </span><br><span class="line">    <span class="string">"TradeSize float)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> structureCommand = <span class="keyword">new</span> SQLiteCommand(structureSql, connection)</span><br><span class="line">structureCommand.ExecuteNonQuery() </span><br></pre></td></tr></table></figure><p>Once the structure is created, I can start to do more interesting things.  First I need to insert some records. Since <code>ExecuteNonQuery()</code> returns records impacted, I can leverage <code>map</code> and <code>sum</code> to count the number of records added.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add records</span></span><br><span class="line"><span class="keyword">let</span> insertSql = </span><br><span class="line">    <span class="string">"insert into trades(symbol, timestamp, price, tradesize) "</span> + </span><br><span class="line">    <span class="string">"values (@symbol, @timestamp, @price, @tradesize)"</span></span><br><span class="line"></span><br><span class="line">trades</span><br><span class="line">|&gt; List.map(<span class="keyword">fun</span> x -&gt;</span><br><span class="line">    <span class="keyword">use</span> command = <span class="keyword">new</span> SQLiteCommand(insertSql, connection)</span><br><span class="line">    command.Parameters.AddWithValue(<span class="string">"@symbol"</span>, x.Symbol) |&gt; ignore</span><br><span class="line">    command.Parameters.AddWithValue(<span class="string">"@timestamp"</span>, x.Timestamp) |&gt; ignore</span><br><span class="line">    command.Parameters.AddWithValue(<span class="string">"@price"</span>, x.Price) |&gt; ignore</span><br><span class="line">    command.Parameters.AddWithValue(<span class="string">"@tradesize"</span>, x.TradeSize) |&gt; ignore</span><br><span class="line"></span><br><span class="line">    command.ExecuteNonQuery())</span><br><span class="line">|&gt; List.sum</span><br><span class="line">|&gt; (<span class="keyword">fun</span> recordsAdded -&gt; printfn <span class="string">"Records added: %d"</span> recordsAdded)</span><br></pre></td></tr></table></figure><p>Once the records are inserted, it is trival to query them.  Below is a simple select and iteration through the recordset.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> selectSql = <span class="string">"select * from trades order by timestamp desc"</span></span><br><span class="line"><span class="keyword">let</span> selectCommand = <span class="keyword">new</span> SQLiteCommand(selectSql, connection)</span><br><span class="line"><span class="keyword">let</span> reader = selectCommand.ExecuteReader()</span><br><span class="line"><span class="keyword">while</span> reader.Read() <span class="keyword">do</span></span><br><span class="line">    printfn <span class="string">"%-7s %-19s %.2f [%.8f]"</span> </span><br><span class="line">        (reader.[<span class="string">"symbol"</span>].ToString()) </span><br><span class="line">        (System.Convert.ToDateTime(reader.[<span class="string">"timestamp"</span>]).ToString(<span class="string">"s"</span>))</span><br><span class="line">        (System.Convert.ToDouble(reader.[<span class="string">"price"</span>])) </span><br><span class="line">        (System.Convert.ToDouble(reader.[<span class="string">"tradesize"</span>])) </span><br></pre></td></tr></table></figure><p>Finally, the connection cleanup.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.Close()</span><br></pre></td></tr></table></figure><p>Here is the output from the above actions.</p><p><img src="/images/db1/output.png" alt="Insert and query output"></p><p>Hopefully you found this simple SQLite example useful.  In future posts I will discuss more idiomatic methods of interacting with the database.    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I have a quick example of using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; with &lt;a href=&quot;https://sqlite.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SQLite&lt;/a&gt;.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Database" scheme="http://codesuji.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Facial Recognition using F# and EmguCV</title>
    <link href="http://codesuji.com/2017/05/20/F-and-EmguCV/"/>
    <id>http://codesuji.com/2017/05/20/F-and-EmguCV/</id>
    <published>2017-05-21T00:32:04.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>As the future rushes upon us, there is the growing desire to have a more integrated interaction with our computers.  One way is to have our computers recognize us; enter facial recognition.  Often this can be done with complex tools, but it is encouraging to be able to do it with something as simple as <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="http://www.emgu.com" target="_blank" rel="noopener">EmguCV</a>.  With these tools in hand, facial recognition can be built into personal projects with ease.</p><a id="more"></a><p>For those not familiar, EmguCV is a one of the available <a href="http://opencv.org/" target="_blank" rel="noopener">OpenCV</a> .NET wrapper packages.  OpenCV has facial recognition built in, so this post will mostly devolve into the details of wiring it up using F#.  But once complete, this is a good integration point for additional functionality.  Time to get started.</p><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget EmguCV</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> This project requires an additional step.  I prefer Paket for package management, but that has it’s own set of implications.  For this project there is a manual step after Paket has downloaded the packages.  To get all things to work, the native dlls must be copied into the same directory as the EmguCV dlls.  For me, the command looked like:</p><p><code>cp packages\EmguCV\build\native\x64\* packages\EmguCV\lib\net30</code></p><p>If you don’t do this, you’re likely to get an error that looks like this:</p><p><code>System.TypeInitializationException: The type initializer for &#39;Emgu.CV.CvInvoke&#39; threw an exception. ---&gt; System.DllNotFoundException: cvextern ...</code></p><p>Once package installation is complete, it is time to link up the library references.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">System.IO.Directory.SetCurrentDirectory(__SOURCE_DIRECTORY__)</span><br><span class="line"></span><br><span class="line">#I <span class="string">"../packages"</span></span><br><span class="line">#r <span class="string">"../packages/EmguCV/lib/net30/Emgu.CV.UI.dll"</span></span><br><span class="line">#r <span class="string">"../packages/EmguCV/lib/net30/Emgu.CV.World.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Drawing</span><br><span class="line"><span class="keyword">open</span> System.Drawing.Imaging</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Emgu</span><br><span class="line"><span class="keyword">open</span> Emgu.CV</span><br><span class="line"><span class="keyword">open</span> Emgu.CV.CvEnum</span><br><span class="line"><span class="keyword">open</span> Emgu.CV.Structure</span><br><span class="line"><span class="keyword">open</span> Emgu.CV.UI</span><br><span class="line"><span class="keyword">open</span> Emgu.Util</span><br></pre></td></tr></table></figure><p>Aiming toward my goal of higher interactivity, I put together a little starter app that uses the webcam to see who is sitting at the computer.  If it doesn’t recognize the person, it prompts to add them to its database so they can be recognized in the future.  Once it knows who they are, it just says hi.  There are also some exploratory commands.  I know, it isn’t much, but its a nice start to a larger, long-term project.</p><p>Building from the ground up, the first part is interacting with the camera.  A simple <code>capture.QueryFrame().Bitmap</code> pulls a bitmap.  I use a couple wrapper functions to support returning an image appropriate (<code>Image&lt;Gray,Byte&gt;</code>) for the FacialRecognition calls as well as the ability to save a single and series of images from the camera.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Camera/photo code</span></span><br><span class="line"><span class="keyword">module</span> Camera =</span><br><span class="line">    <span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Capture image from webcam as a bitmap </span></span><br><span class="line">    <span class="keyword">let</span> captureImageBitmap () =</span><br><span class="line">        <span class="keyword">let</span> (capture:Capture) = <span class="keyword">new</span> Capture() </span><br><span class="line">        <span class="keyword">let</span> (imageBitmap:Bitmap) = capture.QueryFrame().Bitmap </span><br><span class="line">        imageBitmap </span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Capture image from webcam and return a FacialRecognition image</span></span><br><span class="line">    <span class="keyword">let</span> captureImage () = </span><br><span class="line">        <span class="keyword">let</span> (image:Image&lt;Gray,Byte&gt;) = <span class="keyword">new</span> Emgu.CV.Image&lt;Gray,Byte&gt;(captureImageBitmap())</span><br><span class="line">        image</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Capture image from webcam and save as jpg</span></span><br><span class="line">    <span class="keyword">let</span> captureAndSaveImage (filename:string) = </span><br><span class="line">        <span class="keyword">let</span> imageBitmap = captureImageBitmap()</span><br><span class="line">        imageBitmap.Save(filename, ImageFormat.Jpeg)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take photos of person and return list of result photo files</span></span><br><span class="line">    <span class="keyword">let</span> takePhotos count (delayMs:int) dir person =</span><br><span class="line">        [<span class="number">1.</span>.count]</span><br><span class="line">        |&gt; List.map (<span class="keyword">fun</span> i -&gt; </span><br><span class="line">            <span class="keyword">let</span> filename = Path.Combine(dir, (sprintf <span class="string">"%s_%d.jpg"</span> person (rand.Next(<span class="number">1000000000</span>))))</span><br><span class="line">            captureAndSaveImage filename</span><br><span class="line">            System.Threading.Thread.Sleep(delayMs)</span><br><span class="line">            filename)</span><br></pre></td></tr></table></figure><p><em>Note: One extra take-away from the above code is that F# supports triple slash comments that show up in tooltips.</em></p><p><img src="/images/emgu1/tooltip-captureimagebitmap.png" alt="Triple-slash Tooltip"></p><p>Next, I setup a simple database of photos and people.  There are two components to the database module.  The first is general db-ish type things.  This includes person id/name lookup (person.txt), as well as a list of all photos taken (photos.txt).  I wrap a couple lookup functions using <code>Map</code> as well as the ability to add to the files.  In the future, these will be refactored into a real database, but simple text files work well for a demo.  The second component is the OpenCV trained facial recognizer.  It consists of the ability to train, as well as save the training results (trained.txt).</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Recognition database</span></span><br><span class="line"><span class="keyword">module</span> Db =</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Number of photos during image capture</span></span><br><span class="line">    <span class="keyword">let</span> photosToTake = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Delay (ms) between photos during image capture</span></span><br><span class="line">    <span class="keyword">let</span> delayMs = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Data directory</span></span><br><span class="line">    <span class="keyword">let</span> dataDir = <span class="string">"../data/"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Lookup table filename: Person id, name</span></span><br><span class="line">    <span class="keyword">let</span> personFilename = Path.Combine(dataDir, <span class="string">"person.txt"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Lookup table filename: Photos id, path</span></span><br><span class="line">    <span class="keyword">let</span> photosFilename = Path.Combine(dataDir,  <span class="string">"photos.txt"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Trained data filename</span></span><br><span class="line">    <span class="keyword">let</span> trainedFilename = Path.Combine(dataDir, <span class="string">"trained.txt"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Person-level summary of prediction match v total result</span></span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">ValidationResult</span> </span>= &#123; name:string; matchCount:int; totalCount:int &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Create a map from a lookup file</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> makeMap filename fn = </span><br><span class="line">        <span class="keyword">if</span> File.Exists(filename) </span><br><span class="line">        <span class="keyword">then</span> </span><br><span class="line">            File.ReadAllLines(filename)</span><br><span class="line">            |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Split [| '|' |])</span><br><span class="line">            |&gt; Array.map fn</span><br><span class="line">            |&gt; Map.ofArray</span><br><span class="line">        <span class="keyword">else</span> Map.ofList []</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/// Lookup person's id (using name)</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> lookupId () = makeMap personFilename (<span class="keyword">fun</span> x -&gt; (x.[<span class="number">1</span>], int x.[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Lookup person's name (using id)</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> lookupName () = makeMap personFilename (<span class="keyword">fun</span> x -&gt; (int x.[<span class="number">0</span>], x.[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Get a new id for a person</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> getNewId () = </span><br><span class="line">        <span class="keyword">let</span> ids = </span><br><span class="line">            Map.toArray (lookupName())</span><br><span class="line">            |&gt; Array.map fst</span><br><span class="line">        <span class="keyword">if</span> Array.length ids = <span class="number">0</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> (Array.max ids) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Get person's id (by name)</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> getPersonId (map:Collections.Map&lt;string,int&gt;) (name:string) =</span><br><span class="line">        <span class="keyword">if</span> map.ContainsKey name <span class="keyword">then</span> Some (map.Item name) <span class="keyword">else</span> None</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Get person's name (by id)</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> getPersonName (map:Collections.Map&lt;int,string&gt;) (id:int) =</span><br><span class="line">        <span class="keyword">if</span> map.ContainsKey id <span class="keyword">then</span> Some (map.Item id) <span class="keyword">else</span> None</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Append to new entries to photo db</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> appendPhotosLines photosFilename lines =</span><br><span class="line">        IO.File.AppendAllLines(photosFilename, lines)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Add a person to the person lookup file</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> addPersonId filename person id = </span><br><span class="line">        File.AppendAllLines(filename, [| sprintf <span class="string">"%d|%s"</span> id person |])</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Add new photos just taken to photos file</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> appendToPhotosFile dbFilename imageNames person = </span><br><span class="line">        <span class="keyword">let</span> id =</span><br><span class="line">            <span class="keyword">match</span> getPersonId (lookupId()) person <span class="keyword">with</span></span><br><span class="line">            | Some(x) -&gt; x</span><br><span class="line">            | None    -&gt;</span><br><span class="line">                        <span class="keyword">let</span> id' = getNewId()</span><br><span class="line">                        addPersonId personFilename person id' |&gt; ignore</span><br><span class="line">                        id'</span><br><span class="line"></span><br><span class="line">        imageNames</span><br><span class="line">        |&gt; List.map (<span class="keyword">fun</span> x -&gt; sprintf <span class="string">"%d|%s"</span> id x)</span><br><span class="line">        |&gt; appendPhotosLines dbFilename  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/// ... Face Detection Functions (see below) ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// List of people in the db</span></span><br><span class="line">    <span class="keyword">let</span> PersonList () =</span><br><span class="line">        lookupId() </span><br><span class="line">        |&gt; Map.toSeq </span><br><span class="line">        |&gt; Seq.map fst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take a photo and lookup person's name</span></span><br><span class="line">    <span class="comment">/// Return their name</span></span><br><span class="line">    <span class="keyword">let</span> lookupPerson () =</span><br><span class="line">        <span class="comment">// take photo</span></span><br><span class="line">        <span class="keyword">let</span> image = Camera.captureImage()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Lookup in db</span></span><br><span class="line">        <span class="comment">// if found, return name, else return none</span></span><br><span class="line">        <span class="keyword">let</span> trainer = getTrainer()</span><br><span class="line">        <span class="keyword">match</span> trainer <span class="keyword">with</span></span><br><span class="line">        | Some(trainer) -&gt; getPersonName (lookupName()) (trainer.Predict(image).Label)</span><br><span class="line">        | _             -&gt; None</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take photos and add person to database</span></span><br><span class="line">    <span class="keyword">let</span> addPerson name =</span><br><span class="line">        <span class="comment">// take photos</span></span><br><span class="line">        <span class="keyword">let</span> photoList = Camera.takePhotos photosToTake delayMs dataDir name </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add to photosfile</span></span><br><span class="line">        appendToPhotosFile photosFilename photoList name </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Train with new photos</span></span><br><span class="line">        <span class="keyword">let</span> trainer = trainFaceDetector photosFilename trainedFilename</span><br><span class="line">        trainer.Save trainedFilename</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Create a blank user (with a smiley face photo)</span></span><br><span class="line">    <span class="keyword">let</span> createBlankUser () =</span><br><span class="line">        <span class="keyword">let</span> blankUserId = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> blankUserName = <span class="string">"blank"</span></span><br><span class="line">        <span class="keyword">let</span> blankImageName = Path.Combine(dataDir, <span class="string">"blank.jpg"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> createBlankImage (filename:string) =</span><br><span class="line">            <span class="keyword">let</span> blankImage = <span class="keyword">new</span> Bitmap(<span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">            <span class="keyword">let</span> g = Graphics.FromImage(blankImage)</span><br><span class="line">            g.FillEllipse(<span class="keyword">new</span> SolidBrush(Color.Yellow), <span class="number">220</span>, <span class="number">140</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">            g.FillEllipse(<span class="keyword">new</span> SolidBrush(Color.White), <span class="number">260</span>, <span class="number">180</span>, <span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">            g.FillEllipse(<span class="keyword">new</span> SolidBrush(Color.White), <span class="number">340</span>, <span class="number">180</span>, <span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">            g.DrawArc(<span class="keyword">new</span> Pen(Color.White, <span class="number">5.</span>F), <span class="keyword">new</span> Rectangle(<span class="number">260</span>, <span class="number">230</span>, <span class="number">120</span>, <span class="number">70</span>), <span class="number">10.</span>F, <span class="number">160.</span>F)</span><br><span class="line">            blankImage.Save(filename, ImageFormat.Jpeg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> not (File.Exists(personFilename)) </span><br><span class="line">        <span class="keyword">then</span> </span><br><span class="line">            addPersonId personFilename blankUserName blankUserId</span><br><span class="line">            createBlankImage blankImageName</span><br><span class="line">            appendPhotosLines photosFilename [ sprintf <span class="string">"%d|%s"</span> blankUserId blankImageName ]</span><br><span class="line">        <span class="keyword">else</span> ()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Db initial setup</span></span><br><span class="line">    <span class="keyword">let</span> init() = </span><br><span class="line">        createBlankUser()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The application is a fun way to demonstrate functionality, but the really interesting parts (the OpenCV calls) can get lost of big blocks of code. I’ve pulled them out to make scanning for the interesting bits easier.  Training turns out to be pretty easy.  I’ve opted to use the <code>FisherFace</code> model, but Emgu also supports <code>EigenFace</code> and <code>LBPHFace</code> models.  To train, call the <code>CV.Face.FischerFaceRecognizer.Train</code> function. It takes two arrays; one of images, and a corresponding one of int labels.  It also assumes you have multiple classes, which makes sense, since what would you be training otherwise?  To accomodate always having at least two classes, I created a Db.init() function that creates a blank user with a single smiley face image.  Hopefully I don’t get classified as a &#9786;. Currently the training is one big pass, a future refactor will include iterative training.  </p><p>Once trained, face prediction is done with the <code>CV.Face.FischerFaceRecognizer.Predict</code> call.  It returns the predicted int label of the face.  This maps to id, so its a simple lookup at that point for the name.  All of the other stuff is boilerplate to load images and return results.  The last part of this puzzle is loading saved predictions, using <code>CV.Face.FisherFaceRecognizer.Load</code>. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Train face detector</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> trainFaceDetector photosFilename trainedFilename =</span><br><span class="line">    <span class="comment">// Get labels and photos for training</span></span><br><span class="line">    <span class="keyword">let</span> (ids, photos) = </span><br><span class="line">        IO.File.ReadAllLines(photosFilename)</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> x -&gt; </span><br><span class="line">            <span class="keyword">let</span> columns = x.Split [| '|' |]</span><br><span class="line">            (int columns.[<span class="number">0</span>], columns.[<span class="number">1</span>]))</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> (id, photoFilename) -&gt;</span><br><span class="line">            <span class="keyword">let</span> image = <span class="keyword">new</span> Image&lt;Gray, Byte&gt;(photoFilename)</span><br><span class="line">            (id, image))</span><br><span class="line">        |&gt; Array.unzip </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Train based on photos</span></span><br><span class="line">    <span class="keyword">let</span> trainer = <span class="keyword">new</span> CV.Face.FisherFaceRecognizer() </span><br><span class="line">    trainer.Train&lt;Gray, Byte&gt;(photos, ids)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save trained data</span></span><br><span class="line">    trainer.Save(trainedFilename)</span><br><span class="line"></span><br><span class="line">    trainer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Perform prediction validation for a set of photos and trainer</span></span><br><span class="line"><span class="keyword">let</span> validatePredictions photosFilename (trainer:Face.FisherFaceRecognizer) =</span><br><span class="line">        File.ReadAllLines(photosFilename)</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Split [| '|' |])</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> x -&gt;</span><br><span class="line">            <span class="keyword">let</span> image = <span class="keyword">new</span> Image&lt;Gray, Byte&gt;(x.[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">let</span> predicted = trainer.Predict(image)</span><br><span class="line">            &#123; </span><br><span class="line">                ValidationResult.name = lookupName().Item predicted.Label;</span><br><span class="line">                matchCount = (<span class="keyword">if</span> int x.[<span class="number">0</span>] = predicted.Label <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>);</span><br><span class="line">                totalCount = <span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">        |&gt; Array.groupBy (<span class="keyword">fun</span> x -&gt; x.name)</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> x -&gt; </span><br><span class="line">            &#123; </span><br><span class="line">                ValidationResult.name = fst x;</span><br><span class="line">                matchCount = snd x |&gt; Array.map (<span class="keyword">fun</span> y -&gt; y.matchCount) |&gt; Array.sum;</span><br><span class="line">                totalCount = snd x |&gt; Array.map (<span class="keyword">fun</span> y -&gt; y.totalCount) |&gt; Array.sum</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Load the trained face recognizer</span></span><br><span class="line"><span class="keyword">let</span> getTrainer () =</span><br><span class="line">    <span class="keyword">let</span> trainer = <span class="keyword">new</span> CV.Face.FisherFaceRecognizer()</span><br><span class="line">    <span class="keyword">if</span> File.Exists(trainedFilename) </span><br><span class="line">    <span class="keyword">then</span> </span><br><span class="line">        trainer.Load(trainedFilename)</span><br><span class="line">        Some trainer</span><br><span class="line">    <span class="keyword">else</span> None</span><br></pre></td></tr></table></figure><p>Next, putting it all together.  By this point the interesting things are already complete, all that’s left is wrapper code.  In the <code>App</code> module I build out the commands as well as the main loop.  I also have a small Db.init() call to create the blank image that I mentioned earlier.  Beyond that, the functions speak for themselves (and there are comments), so I won’t go into detail here.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Application</span></span><br><span class="line"><span class="keyword">module</span> App = </span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Add a person to the photo db</span></span><br><span class="line">    <span class="keyword">let</span> addPerson () = </span><br><span class="line">        printfn <span class="string">"Name to add (ensure person is in front of the camera): "</span></span><br><span class="line">        <span class="keyword">let</span> name = Console.ReadLine()</span><br><span class="line">        printfn <span class="string">"Taking photos and training..."</span></span><br><span class="line">        Db.addPerson name</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Lookup person currently in front of camera</span></span><br><span class="line">    <span class="keyword">let</span> whoAmI () =</span><br><span class="line">        <span class="keyword">let</span> person = Db.lookupPerson()</span><br><span class="line">        <span class="keyword">match</span> person <span class="keyword">with</span> </span><br><span class="line">        | Some(person) -&gt;</span><br><span class="line">            printfn <span class="string">"You are %s"</span> person</span><br><span class="line">        | None -&gt; </span><br><span class="line">            printfn <span class="string">"I don't recognize you.  Sorry."</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Display a list of known people in the db</span></span><br><span class="line">    <span class="keyword">let</span> reportPeople () =</span><br><span class="line">        printfn <span class="string">"People"</span></span><br><span class="line">        printfn <span class="string">"------"</span></span><br><span class="line">        Db.PersonList()</span><br><span class="line">        |&gt; Seq.iter (printfn <span class="string">"%s"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Display a validation report for recognition</span></span><br><span class="line">    <span class="keyword">let</span> reportValidation () =</span><br><span class="line">        <span class="comment">// run validation against existing photos</span></span><br><span class="line">        <span class="keyword">let</span> trainer = Db.getTrainer()</span><br><span class="line">        <span class="keyword">match</span> trainer <span class="keyword">with</span></span><br><span class="line">        | Some(trainer) -&gt; </span><br><span class="line">            Db.validatePredictions Db.photosFilename trainer</span><br><span class="line">            |&gt; Array.iter (<span class="keyword">fun</span> x -&gt; printfn <span class="string">"%10s %5d %5d %5.2f"</span> x.name x.matchCount x.totalCount ((float x.matchCount) / (float x.totalCount)))</span><br><span class="line">        | _             -&gt; printfn <span class="string">"No training data"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Show available commands</span></span><br><span class="line">    <span class="keyword">let</span> showHelp() =</span><br><span class="line">        printfn <span class="string">"Commands: [addperson|whoami|people|validate|help|exit]"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Execute provided command</span></span><br><span class="line">    <span class="comment">/// Return true to keep processing, false to exit</span></span><br><span class="line">    <span class="keyword">let</span> doCommand (command:string) = </span><br><span class="line">        <span class="keyword">match</span> command.ToLower() <span class="keyword">with</span></span><br><span class="line">        | <span class="string">"addperson"</span>   -&gt; addPerson(); <span class="keyword">true</span></span><br><span class="line">        | <span class="string">"whoami"</span>      -&gt; whoAmI(); <span class="keyword">true</span></span><br><span class="line">        | <span class="string">"people"</span>      -&gt; reportPeople(); <span class="keyword">true</span></span><br><span class="line">        | <span class="string">"validate"</span>    -&gt; reportValidation(); <span class="keyword">true</span></span><br><span class="line">        | <span class="string">"help"</span>        -&gt; showHelp(); <span class="keyword">true</span></span><br><span class="line">        | <span class="string">"exit"</span>        -&gt; <span class="keyword">false</span></span><br><span class="line">        | _             -&gt; printfn <span class="string">"unknown command"</span>; <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Get a person's name (by lookup or prompt to add to db)</span></span><br><span class="line">    <span class="keyword">let</span> getName() =</span><br><span class="line">        <span class="keyword">let</span> person = Db.lookupPerson()</span><br><span class="line">        <span class="keyword">match</span> person <span class="keyword">with</span> </span><br><span class="line">        | Some(person) -&gt;</span><br><span class="line">            printfn <span class="string">"Hi %s"</span> person</span><br><span class="line">            Some person</span><br><span class="line">        | None -&gt; </span><br><span class="line">            printfn <span class="string">"I don't recognize you. What is your name? "</span></span><br><span class="line">            <span class="keyword">let</span> name = Console.ReadLine()</span><br><span class="line">            printfn <span class="string">"Taking photos and training..."</span></span><br><span class="line">            Db.addPerson name</span><br><span class="line">            <span class="comment">// Note: Could return name, but I want to explicitly force a lookup</span></span><br><span class="line">            <span class="comment">//Some name    </span></span><br><span class="line">            None</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Main</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> main name = </span><br><span class="line">        <span class="keyword">match</span> name <span class="keyword">with</span></span><br><span class="line">        | Some(name) -&gt;</span><br><span class="line">            Console.Write(<span class="string">"&gt; "</span>)</span><br><span class="line">            <span class="keyword">let</span> line = Console.ReadLine()</span><br><span class="line">            <span class="keyword">let</span> keepGoing = doCommand line</span><br><span class="line">            <span class="keyword">if</span> keepGoing <span class="keyword">then</span> main (Some name) <span class="keyword">else</span> ()</span><br><span class="line">        | None       -&gt;</span><br><span class="line">            <span class="keyword">let</span> name = getName()</span><br><span class="line">            main name</span><br><span class="line"></span><br><span class="line">Db.init()</span><br><span class="line">App.main None</span><br></pre></td></tr></table></figure><p>The code is all together, it’s time to take the application for a test drive.  </p><p><img src="/images/emgu1/demo.png" alt="Application Execution"></p><p>Great! It can tell the difference between people. <em>(Sidebar: the detection isn’t perfect; but more, and better quality, data often helps with accuracy.)</em> But I can’t leave well enough alone.  It feels too impersonal, if only it knew how I was feeling.  Lucky for me, Amazon’s <a href="https://aws.amazon.com/rekognition/" target="_blank" rel="noopener">Rekognition</a> api holds the key to some fun bits.  The TLDR; the api provides, among other things, its prediction of how a person in a picture is feeling.  Other interesting components are: age range, gender, do they have glasses, and feature location.</p><p>Before I get into the code, the first requirement is an AWS account.  Second, an IAM must be created with Rekognition service permissions.  Third, add the IAM credentials to the credentials file, <code>~/.aws/credentials</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">aws_access_key_id = &lt;your id here&gt;</span><br><span class="line">aws_secret_access_key = &lt;your key here&gt;</span><br></pre></td></tr></table></figure><p><em>Note: I’ll make a quick mention here about SSL certs.  There was an easy to overcome snag when making the AWS call.  When running the code in VSCode/Ionide, it ran fine.  When running it from the commandline using <code>fsharpi</code>, I got an error.  Specifically this: <code>Amazon.Runtime.AmazonServiceException: A WebException with status TrustFailure was thrown. ---&gt; System.Net.WebException:    Error: TrustFailure (The authentication or decryption has failed.) ---&gt; System.IO.IOException: The authentication or decryption has failed. ---&gt; System.IO.IOException: The authentication or decryption has failed. ---&gt; Mono.Security.Protocol.Tls.TlsException: Invalid certificate received from server. Error code: 0xffffffff800b010a at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord (System.IAsyncResult asyncResult) ...</code>.  There are several ways to resolve this error.  I opt’d to solve this by importing the mozilla certs for mono using <code>mozroots.exe</code>.  Other options can be found at (<a href="http://www.mono-project.com/docs/faq/security/" target="_blank" rel="noopener">http://www.mono-project.com/docs/faq/security/</a>); your mileage may vary.</em></p><p>Once these components are in place, a couple small modifications are required.  First, add a new package to my package.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget AWSSDK.Rekognition </span><br></pre></td></tr></table></figure><p>Next, add the Rekognition dll’s and namespace.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/AWSSDK.Core/lib/net45/AWSSDK.Core.dll"</span></span><br><span class="line">#r <span class="string">"../packages/AWSSDK.Rekognition/lib/net45/AWSSDK.Rekognition.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> Amazon</span><br><span class="line"><span class="keyword">open</span> Amazon.Rekognition</span><br></pre></td></tr></table></figure><p>I’m going to put all the code into a new module.  To get what we need out of the api, the basic workflow is:</p><ol><li>Take photo as Bitmap.</li><li>Create a request object (with the image attached).</li><li>Call the Rekognition api with the request object.</li><li>Grab the attributes of the response object I care about.</li></ol><p>For details on the api, I recommend looking at the <a href="http://docs.aws.amazon.com/rekognition/latest/dg/API_DetectFaces.html" target="_blank" rel="noopener">Rekognition DetectFaces Documentation</a>.  There are a couple small details for my implementation I want to mention.  The api grabs all faces it can find, so FaceDetail is an array.  My use case presumes one person, or if more, it just takes the first one it finds.  The api emotion is a list of possible emotions with their probabilities.  This isn’t very friendly looking, so I only show the highest probability emotion.  The <code>whoAmI</code> function provides some addition interesting reporting from the image.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Additional face analysis features</span></span><br><span class="line"><span class="keyword">module</span> FaceExtra = </span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take an image and return an aws Model.Image</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> bitmapToModelImage (image:Bitmap) = </span><br><span class="line">        <span class="comment">// Load image into memorystream</span></span><br><span class="line">        <span class="keyword">let</span> ms = <span class="keyword">new</span> MemoryStream()</span><br><span class="line">        image.Save(ms, ImageFormat.Jpeg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Convert memorystream to aws' Model.Image</span></span><br><span class="line">        <span class="keyword">let</span> modelImage = <span class="keyword">new</span> Model.Image()</span><br><span class="line">        modelImage.Bytes &lt;- ms</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return model image</span></span><br><span class="line">        modelImage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take an image filename and return an aws DetectFacesRequest </span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">private</span> buildRequest (image:Bitmap) = </span><br><span class="line">        <span class="keyword">let</span> request = <span class="keyword">new</span> Model.DetectFacesRequest()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get all attributes back from api</span></span><br><span class="line">        <span class="keyword">let</span> attributeList = <span class="keyword">new</span> Collections.Generic.List&lt;string&gt;()</span><br><span class="line">        attributeList.Add(<span class="string">"ALL"</span>)</span><br><span class="line">        request.Attributes &lt;- attributeList</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set Image</span></span><br><span class="line">        request.Image &lt;- bitmapToModelImage image</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return request</span></span><br><span class="line">        request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Given a list of emotions, return the highest confidence one (in tuple form)</span></span><br><span class="line">    <span class="keyword">let</span> getMainEmotion (emotions:Collections.Generic.List&lt;Model.Emotion&gt;) = </span><br><span class="line">        <span class="keyword">if</span> emotions.Count &lt;&gt; <span class="number">0</span> </span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            emotions</span><br><span class="line">            |&gt; Seq.sortByDescending (<span class="keyword">fun</span> x -&gt; x.Confidence)</span><br><span class="line">            |&gt; Seq.head</span><br><span class="line">            |&gt; (<span class="keyword">fun</span> e -&gt; (e.Type.Value, e.Confidence))</span><br><span class="line">        <span class="keyword">else</span> (<span class="string">"Unknown"</span>, float32 <span class="number">0.</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Query the rekognition api using the provided bitmap image</span></span><br><span class="line">    <span class="keyword">let</span> getFaceDetails (image:Bitmap) = </span><br><span class="line">        <span class="keyword">let</span> request = buildRequest image</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> rekognition = <span class="keyword">new</span> Amazon.Rekognition.AmazonRekognitionClient(Amazon.RegionEndpoint.USEast1)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> detectedFaces = rekognition.DetectFaces(request)</span><br><span class="line"></span><br><span class="line">        detectedFaces</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Take a snapshot and determine the person's emotional state.</span></span><br><span class="line">    <span class="keyword">let</span> getCurrentEmotion () =</span><br><span class="line">        <span class="keyword">let</span> details = getFaceDetails (Camera.captureImageBitmap())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> details.FaceDetails.Count &lt;&gt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">then</span> Some ((fst (getMainEmotion details.FaceDetails.[<span class="number">0</span>].Emotions)).ToLower())</span><br><span class="line">        <span class="keyword">else</span> None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Make a friendly description string for showing if face has an attribute</span></span><br><span class="line">    <span class="keyword">let</span> attributeDisplay (value:bool) (description:string) =</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">then</span> sprintf <span class="string">"Has %s"</span> description <span class="keyword">else</span> sprintf <span class="string">"No %s"</span> description </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Build a simple report string</span></span><br><span class="line">    <span class="keyword">let</span> getFaceReport () = </span><br><span class="line">        <span class="keyword">let</span> details = getFaceDetails (Camera.captureImageBitmap())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> details.FaceDetails.Count &lt;&gt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">let</span> face = details.FaceDetails.[<span class="number">0</span>]</span><br><span class="line">            sprintf </span><br><span class="line">                <span class="string">"Gender: %s\r\nAge: %d - %d\r\nEmotions: %s\r\n%s\r\n%s\r\n%s\r\n%s"</span> </span><br><span class="line">                face.Gender.Value.Value </span><br><span class="line">                face.AgeRange.Low </span><br><span class="line">                face.AgeRange.High</span><br><span class="line">                (String.Join(<span class="string">", "</span>, face.Emotions |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; sprintf <span class="string">"%s (%f)"</span> x.Type.Value x.Confidence)))</span><br><span class="line">                (attributeDisplay face.Beard.Value <span class="string">"beard"</span>)</span><br><span class="line">                (attributeDisplay face.Mustache.Value <span class="string">"mustache"</span>)</span><br><span class="line">                (attributeDisplay face.Eyeglasses.Value <span class="string">"glasses"</span>)</span><br><span class="line">                (attributeDisplay face.Sunglasses.Value <span class="string">"sunglasses"</span>)</span><br><span class="line">        <span class="keyword">else</span> <span class="string">""</span></span><br></pre></td></tr></table></figure><p>The additional functionality gets wired into the <code>whoAmI</code> and <code>getName</code> calls.  This is a pretty simple add.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Lookup person currently in front of camera</span></span><br><span class="line"><span class="keyword">let</span> whoAmI () =</span><br><span class="line">    <span class="keyword">let</span> person = Db.lookupPerson()</span><br><span class="line">    <span class="keyword">match</span> person <span class="keyword">with</span> </span><br><span class="line">    | Some(person) -&gt;</span><br><span class="line">        <span class="keyword">let</span> report = FaceExtra.getFaceReport()</span><br><span class="line">        printfn <span class="string">"You are %s\r\n%s"</span> person report </span><br><span class="line">    | None -&gt; </span><br><span class="line">        printfn <span class="string">"I don't recognize you.  Sorry."</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Get a person's name (by lookup or prompt to add to db)</span></span><br><span class="line"><span class="keyword">let</span> getName() =</span><br><span class="line">    <span class="keyword">let</span> person = Db.lookupPerson()</span><br><span class="line">    <span class="keyword">match</span> person <span class="keyword">with</span> </span><br><span class="line">    | Some(person) -&gt;</span><br><span class="line">        <span class="keyword">let</span> emotion = FaceExtra.getCurrentEmotion()</span><br><span class="line">        <span class="keyword">match</span> emotion <span class="keyword">with</span></span><br><span class="line">        | Some(emotion) -&gt; printfn <span class="string">"Hi %s, you seem %s"</span> person emotion</span><br><span class="line">        | None          -&gt; printfn <span class="string">"Hi %s"</span> person</span><br><span class="line">        Some person</span><br><span class="line">    | None -&gt; </span><br><span class="line">        printfn <span class="string">"I don't recognize you. What is your name? "</span></span><br><span class="line">        <span class="keyword">let</span> name = Console.ReadLine()</span><br><span class="line">        printfn <span class="string">"Taking photos and training..."</span></span><br><span class="line">        Db.addPerson name</span><br><span class="line">        <span class="comment">// Note: Could return name, but I want to explicitly force a lookup</span></span><br><span class="line">        <span class="comment">//Some name    </span></span><br><span class="line">        None</span><br></pre></td></tr></table></figure><p>Time to checkout how the new functionality looks.</p><p><img src="/images/emgu1/demo-emotion.png" alt="With Emotion"></p><p>Cool.  It did a pretty good job.  The great thing is, this kind of technology will only get better.  This has been fun, but the post has already gone longer than intended, so I’ll end it here.  I hope you enjoyed this little glimpse into facial recognition and information extraction.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As the future rushes upon us, there is the growing desire to have a more integrated interaction with our computers.  One way is to have our computers recognize us; enter facial recognition.  Often this can be done with complex tools, but it is encouraging to be able to do it with something as simple as &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://www.emgu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EmguCV&lt;/a&gt;.  With these tools in hand, facial recognition can be built into personal projects with ease.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Images" scheme="http://codesuji.com/tags/Images/"/>
    
      <category term="EmguCV" scheme="http://codesuji.com/tags/EmguCV/"/>
    
      <category term="OpenCV" scheme="http://codesuji.com/tags/OpenCV/"/>
    
      <category term="Computer Vision" scheme="http://codesuji.com/tags/Computer-Vision/"/>
    
      <category term="Faces" scheme="http://codesuji.com/tags/Faces/"/>
    
      <category term="Rekognition" scheme="http://codesuji.com/tags/Rekognition/"/>
    
  </entry>
  
  <entry>
    <title>BF Compiler Part 4 - Optimization</title>
    <link href="http://codesuji.com/2017/03/13/bf-compiler-part4-optimization/"/>
    <id>http://codesuji.com/2017/03/13/bf-compiler-part4-optimization/</id>
    <published>2017-03-14T01:47:39.000Z</published>
    <updated>2017-12-23T19:03:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>Now that the BF compiler is together, it’s time to add some obvious optimizations.</p><a id="more"></a><p><strong>Series:</strong><br><a href="/2017/02/19/bf-compiler-part1-parsing">Part 1 (Parsing)</a><br><a href="/2017/02/26/bf-compiler-part2-msil">Part 2 (IL Generation)</a><br><a href="/2017/03/04/bf-compiler-part3-compiler">Part 3 (Compiler)</a><br>Part 4 (Optimization)</p><p>I’m going to approach this post a bit differently than most before it.  Typically a post’s code stands on its own, but this post is largely a refactor of Part 3.  I’ll focus on the diffs necessary to implement the desired optimizations.  Along the way I’ll add some handy debugging code.  Before I get started, this post assumes knowledge from the previous posts (especially post 3), so feel free to go back and peruse earlier posts in this series.  Getting started, I want optimizations to be optional.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> optimizationsEnabled = <span class="keyword">true</span> </span><br></pre></td></tr></table></figure><p>First up, the internal BF language representation as F#’s discriminated unions.  I add addtional the intermediate representation (IR) ops to support my optimizations and debugging support.  There are a multitude of optimizations that can be done.  For this post I’m only going to focus on folding contiguous pointer shifts, contiguous data increment/decrements, setting a cell to zero.  In addition to these optimizations, I add a debug print <strong>?</strong> that works like <strong>.</strong>, but prints the int value instead of the standard char.  It is mildly controversial to extend BF, but I find this is a minimally helpful tool for debugging.</p><p>I’ve decided, for demonstrative purposes, to extend the IR instead of replace existing operators.  Where you see operators such as <em>Gtx</em>  or <em>Plusx</em>, I could have just as easily rewired the existing <em>Gt</em> and <em>Plus</em>, respectively.  In a more formal setting, I would’ve most likely refactored the existing operators.  It makes for a cleaner codebase, but this method allows me to show a couple more F#isms.</p><p><strong>Extended Examples:</strong></p><p><strong>&gt;&gt;&gt;&gt;</strong> : Compresses to <strong>Gtx 4</strong></p><p><strong>&lt;&lt;&lt;&gt;</strong> : Compresses to <strong>Ltx 3</strong></p><p><strong>++++</strong> : Compresses to <strong>Plusx 4</strong></p><p><strong>++- -</strong> : Compresses to <strong>Nop</strong> (Since they cancel out, there isn’t anything to do.)</p><p><strong>[-]</strong> : Compresses to <strong>Set0</strong> (This is a common way to set a cell to 0.  I can do a direct set without looping.)</p><p>Once I create the extended operators, I add them to <em>AllOps</em> DU.  I also add a “No Op” operator (<em>Nop</em>) for cases where my folds zero out.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ExtendedOps</span> </span>= </span><br><span class="line">    | Gtx <span class="keyword">of</span> int </span><br><span class="line">    | Ltx <span class="keyword">of</span> int </span><br><span class="line">    | Plusx <span class="keyword">of</span> int </span><br><span class="line">    | Minusx <span class="keyword">of</span> int</span><br><span class="line">    | Set0 </span><br><span class="line">    | DebugPrint</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">AllOps</span> </span>= </span><br><span class="line">    | Op <span class="keyword">of</span> ActionOps </span><br><span class="line">    | Loop <span class="keyword">of</span> AllOps list</span><br><span class="line">    | Program <span class="keyword">of</span> AllOps list</span><br><span class="line">    | Comment</span><br><span class="line">    | Extended <span class="keyword">of</span> ExtendedOps</span><br><span class="line">    | Nop</span><br></pre></td></tr></table></figure><p>Here is one of the places where F# shines, code correctness.  Now that I’ve added these types, my code doesn’t compile anymore.  The error message is this: <strong>Incomplete pattern matches on this expression. For example, the value ‘Extended (_)’ may indicate a case not covered by the pattern(s).</strong> Looking at the code below you can see I have a match expression against the <em>AllOps</em> type, but I clearly don’t handle all cases, namely the ones I just added.  I knew this was the case, but I’m happy when the compiler can figure out these cases.  In a larger codebase that might not even be mine, this is a powerful dynamic.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> processAst (ilGenerator:ILGenerator) (data:MemArray) (dataPointer:DpPointer) (ast:AllOps) =</span><br><span class="line">    <span class="keyword">match</span> ast <span class="keyword">with</span></span><br><span class="line">    | Op op         -&gt; emitOp ilGenerator op data dataPointer</span><br><span class="line">    | Loop block    -&gt; emitLoop ilGenerator data dataPointer block</span><br><span class="line">    | Program block -&gt; emitOpList ilGenerator data dataPointer block</span><br><span class="line">    | Comment       -&gt; ()</span><br></pre></td></tr></table></figure><p>Here is the new version of the match, problem solved.  This obviously causes it’s own cascading effect, now I need a <em>emitExtendedOp</em> function.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> processAst (ilGenerator:ILGenerator) (data:MemArray) (dataPointer:DpPointer) (ast:AllOps) =</span><br><span class="line">    <span class="keyword">match</span> ast <span class="keyword">with</span></span><br><span class="line">    | Op op         -&gt; emitOp ilGenerator op data dataPointer</span><br><span class="line">    | Loop block    -&gt; emitLoop ilGenerator data dataPointer block</span><br><span class="line">    | Program block -&gt; emitOpList ilGenerator data dataPointer block</span><br><span class="line">    | Comment       -&gt; ()</span><br><span class="line">    | Nop           -&gt; ()</span><br><span class="line">    | Extended op   -&gt; emitExtendedOp ilGenerator op data dataPointer</span><br></pre></td></tr></table></figure><p>I handle the extended operators in a similar fashion to normal operators.  This also a prime time for a minor refactor. Pointer shifts and data increment/decrements for the extended versions are identical to the orignal ones except for the amount.  As a result I will make the <em>emit[Gt|Lt|Plus|Minus]</em> to be more generic, and take a modifer amount.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Generate IL for an operator</span></span><br><span class="line"><span class="keyword">let</span> emitOp (ilGenerator:ILGenerator) (op:ActionOps) (data:MemArray) (dataPointer:DpPointer) =</span><br><span class="line">    <span class="keyword">match</span> op <span class="keyword">with</span> </span><br><span class="line">    | Gt    -&gt; emitGt ilGenerator dataPointer <span class="number">1</span></span><br><span class="line">    | Lt    -&gt; emitLt ilGenerator dataPointer <span class="number">1</span></span><br><span class="line">    | Plus  -&gt; emitPlus ilGenerator data dataPointer <span class="number">1</span></span><br><span class="line">    | Minus -&gt; emitMinus ilGenerator data dataPointer <span class="number">1</span></span><br><span class="line">    | Read  -&gt; emitComma ilGenerator data dataPointer</span><br><span class="line">    | Write -&gt; emitPeriod ilGenerator data dataPointer</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> emitExtendedOp (ilGenerator:ILGenerator) (op:ExtendedOps) (data:MemArray) (dataPointer:DpPointer) =</span><br><span class="line">    <span class="keyword">match</span> op <span class="keyword">with</span></span><br><span class="line">    | Gtx i      -&gt; emitGt ilGenerator dataPointer i </span><br><span class="line">    | Ltx i      -&gt; emitLt ilGenerator dataPointer i </span><br><span class="line">    | Plusx i    -&gt; emitPlus ilGenerator data dataPointer i </span><br><span class="line">    | Minusx i   -&gt; emitMinus ilGenerator data dataPointer i </span><br><span class="line">    | Set0       -&gt; emitSetx ilGenerator data dataPointer <span class="number">0</span></span><br><span class="line">    | DebugPrint -&gt; emitDebugPrint ilGenerator data dataPointer</span><br></pre></td></tr></table></figure><p>Continuing the cascading changes, I refactor the operator-specific emit functions.  These all have the same refactor to include the parameter and use that instead of the fixed value of 1:</p><ol><li><p>Add <em>(i:int)</em> as a parameter</p></li><li><p>Replace <em>ilGenerator.Emit(OpCodes.Ldc_I4_1)</em> with <em>ilGenerator.Emit(OpCodes.Ldc_I4, i)</em></p></li></ol><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Increment dataPointer</span></span><br><span class="line"><span class="keyword">let</span> emitGt (ilGenerator:ILGenerator) (DP(dataPointer):DpPointer) (i:int) = </span><br><span class="line">    addLocalInt ilGenerator dataPointer i</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decrement dataPointer</span></span><br><span class="line"><span class="keyword">let</span> emitLt (ilGenerator:ILGenerator) (DP(dataPointer):DpPointer) (i:int) = </span><br><span class="line">    subLocalInt ilGenerator dataPointer i</span><br><span class="line"></span><br><span class="line"><span class="comment">// Increment value in data[dataPointer]</span></span><br><span class="line"><span class="keyword">let</span> emitPlus (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) (i:int) =  </span><br><span class="line">    <span class="comment">// Load array reference for setting</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load value of array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldelem_I4)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add i to value</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldc_I4, i)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Add)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save back into array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Stelem_I4)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decrement value in data[dataPointer]</span></span><br><span class="line"><span class="keyword">let</span> emitMinus (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) (i:int) =  </span><br><span class="line">    <span class="comment">// Load array reference for setting</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load value of array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldelem_I4)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Subtract i to value</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldc_I4, i)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Sub)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save back into array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Stelem_I4)</span><br></pre></td></tr></table></figure><p>Implementing <em>emitSetx</em> takes a value and does an explict value set to <em>data[dataPointer]</em>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set value at data[dataPointer]</span></span><br><span class="line"><span class="keyword">let</span> emitSetx (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) (i:int) =  </span><br><span class="line">    <span class="comment">// Load array reference for setting</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Value to set</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldc_I4, i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save into array</span></span><br><span class="line">    ilGenerator.Emit(OpCodes.Stelem_I4)</span><br></pre></td></tr></table></figure><p>The debug print provides two pieces of information, the current dataPointer value and the integer value at data[dataPointer].  <code>String.Format</code> is a bit more involved than some of the other function calls.  I need to load the format string, and box the corresponding integer values.  Then I can do a <code>Console.WriteLine</code> of the formatted string with the variable values injected.   </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Print decimal value at data[dataPointer] &amp; index value to stdout</span></span><br><span class="line"><span class="keyword">let</span> emitDebugPrint (ilGenerator:ILGenerator) (MEM(data):MemArray) (DP(dataPointer):DpPointer) =</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldstr, <span class="string">"[&#123;0&#125;]  &#123;1&#125;"</span>)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Box, typeof&lt;int&gt;)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, data)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldloc, dataPointer)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Ldelem_I4)</span><br><span class="line">    ilGenerator.Emit(OpCodes.Box, typeof&lt;int&gt;)</span><br><span class="line">    ilGenerator.EmitCall(OpCodes.Call,typeof&lt;String&gt;.GetMethod(<span class="string">"Format"</span>, [| typeof&lt;string&gt;; typeof&lt;Object&gt;; typeof&lt;Object&gt; |]), <span class="keyword">null</span>); </span><br><span class="line">    ilGenerator.EmitCall(OpCodes.Call,typeof&lt;Console&gt;.GetMethod(<span class="string">"WriteLine"</span>, [| typeof&lt;string&gt; |]), <span class="keyword">null</span>); </span><br></pre></td></tr></table></figure><p>Now that I have addressed the compilation issues and all the new emitting code, it’s time to look at the parsing code.  I would typically separate parsing from optimization, making it a secondary step in the compilation.  But BF is so simple, plus I can tie this back to the original goal, leverage FParsec.</p><p>The parser changes leverage existing parsers and then implement additional logic on top.  <em>pGreaterLesser</em> reads any number of consecutive <em>&gt;</em> and <em>&lt;</em>, then it counts them and determines the difference.  This results in the optimized operator <em>Gtx</em>, <em>Ltx</em>, or <em>Nop</em>.  <em>pPlusMinus</em> works the same way.  <em>pSet</em> matches “[-]” (loop at current position until data[dataPointer] = 0), it a straightforward match, but you may notice this is a pstring, versus pchar match. <em>pDebugPrint</em> is a character match.  After adding the new parsers, it’s a matter of just wiring them into their respective parser groups.  This is also where I check to see if optimizations are enabled or not. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">let</span> commentChar c =</span><br><span class="line">       c &lt;&gt; '&gt;' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '&lt;' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '+' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '-' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '[' &amp;&amp; </span><br><span class="line">       c &lt;&gt; ']' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '.' &amp;&amp; </span><br><span class="line">       c &lt;&gt; ',' &amp;&amp; </span><br><span class="line">       c &lt;&gt; '?'</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> pComment:Parser&lt;_&gt; =         </span><br><span class="line">       many1Satisfy commentChar |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Comment</span><br><span class="line">   </span><br><span class="line"><span class="keyword">let</span> pGreaterLesser:Parser&lt;_&gt; = </span><br><span class="line">       many1 (pGreater &lt;|&gt; pLesser) |&gt;&gt; <span class="keyword">fun</span> x -&gt; </span><br><span class="line">           <span class="keyword">let</span> gCount = (x |&gt; List.filter (<span class="keyword">fun</span> y -&gt; y = Op Gt)) |&gt; List.length</span><br><span class="line">           <span class="keyword">let</span> lCount = (x |&gt; List.filter (<span class="keyword">fun</span> y -&gt; y = Op Lt)) |&gt; List.length</span><br><span class="line">           <span class="keyword">if</span> gCount = lCount <span class="keyword">then</span> Nop </span><br><span class="line">           <span class="keyword">elif</span> gCount &gt; lCount <span class="keyword">then</span> Extended (Gtx (gCount - lCount)) </span><br><span class="line">           <span class="keyword">else</span> Extended (Ltx (lCount - gCount))</span><br><span class="line">       </span><br><span class="line">   <span class="keyword">let</span> pPlusMinus:Parser&lt;_&gt; = </span><br><span class="line">       many1 (pPlus &lt;|&gt; pMinus) |&gt;&gt; <span class="keyword">fun</span> x -&gt; </span><br><span class="line">           <span class="keyword">let</span> pCount = (x |&gt; List.filter (<span class="keyword">fun</span> y -&gt; y = Op Plus)) |&gt; List.length</span><br><span class="line">           <span class="keyword">let</span> mCount = (x |&gt; List.filter (<span class="keyword">fun</span> y -&gt; y = Op Minus)) |&gt; List.length</span><br><span class="line">           <span class="keyword">if</span> pCount = mCount <span class="keyword">then</span> Nop </span><br><span class="line">           <span class="keyword">elif</span> pCount &gt; mCount <span class="keyword">then</span> Extended (Plusx (pCount - mCount)) </span><br><span class="line">           <span class="keyword">else</span> Extended (Minusx (mCount - pCount))</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> pSet0:Parser&lt;_&gt; = </span><br><span class="line">       pstring <span class="string">"[-]"</span> |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Extended Set0    </span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> pDebugPrint:Parser&lt;_&gt; = </span><br><span class="line">       pchar '?' |&gt;&gt; <span class="keyword">fun</span> _ -&gt; Extended DebugPrint    </span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> pCommands =</span><br><span class="line">       <span class="keyword">if</span> optimizationsEnabled</span><br><span class="line">       <span class="keyword">then</span> pGreaterLesser &lt;|&gt; pPlusMinus &lt;|&gt; pSet0 &lt;|&gt; pGreater &lt;|&gt; pLesser &lt;|&gt; pPlus &lt;|&gt; pMinus &lt;|&gt; pPeriod &lt;|&gt; pComma </span><br><span class="line">       <span class="keyword">else</span> pGreater &lt;|&gt; pLesser &lt;|&gt; pPlus &lt;|&gt; pMinus &lt;|&gt; pPeriod &lt;|&gt; pComma </span><br><span class="line"></span><br><span class="line">   <span class="keyword">do</span> pLoopImpl := pLBracket &gt;&gt;. (many (pCommands &lt;|&gt; pLoop &lt;|&gt; pComment &lt;|&gt; pDebugPrint)) .&gt;&gt; pRBracket |&gt;&gt; <span class="keyword">fun</span> x -&gt; </span><br><span class="line">       Loop x</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Build ast from source code</span></span><br><span class="line">   <span class="keyword">let</span> buildAst code = </span><br><span class="line">       run (many (pCommands &lt;|&gt; pLoop &lt;|&gt; pComment &lt;|&gt; pDebugPrint)) code </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>With refactoring complete, I look at the Hello World program from the last post.  First, debug prints.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code  = <span class="string">"++++++++++++?[&gt;++++++&gt;++++++++&gt;+++&lt;&lt;&lt;-]&gt;?&gt;?&gt;?&lt;&lt;.&gt;+++++.+++++++..+++.&gt;----.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+."</span> </span><br></pre></td></tr></table></figure><p><img src="/images/bf1/helloworld_debug_execute.png" alt="Hello World - Debug"></p><p>Second, a look at the optimizations.  I perform two compilations; one normal, one optimized.  The results are what I’d expect to see.  This sample is so short there isn’t really a peformance gain, the code is is just cleaner.  On a more intense application, it’s easy to see how this code compression could add up to at least a minimal performance boost.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code  = <span class="string">"++++++++++++[&gt;++++++&gt;++++++++&gt;+++&lt;&lt;&lt;-]&gt;.&gt;+++++.+++++++..+++.&gt;----.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+."</span> </span><br></pre></td></tr></table></figure><p>Below shows the compilation differences of the normal versus optimized compilation.<br><img src="/images/bf1/decompiled_helloworld.png" alt="Hello World - Optimization"></p><p>There is it.  A simple refactor to add debugging and minor optimizations.  I didn’t expect this to be much work, but it is nice how F# can guide me along the refactor, once I have my intentions defined.  I hope you found this post to be at least a mildly useful example of the power of F# and FParsec.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Now that the BF compiler is together, it’s time to add some obvious optimizations.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Compiler" scheme="http://codesuji.com/tags/Compiler/"/>
    
      <category term="MSIL" scheme="http://codesuji.com/tags/MSIL/"/>
    
      <category term="FParsec" scheme="http://codesuji.com/tags/FParsec/"/>
    
      <category term="Parsing" scheme="http://codesuji.com/tags/Parsing/"/>
    
  </entry>
  
</feed>
