<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codesuji</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codesuji.com/"/>
  <updated>2020-05-10T23:37:04.725Z</updated>
  <id>http://codesuji.com/</id>
  
  <author>
    <name>codesuji.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Propagator Networks in F#</title>
    <link href="http://codesuji.com/2020/05/10/Propagator-Networks-in-F/"/>
    <id>http://codesuji.com/2020/05/10/Propagator-Networks-in-F/</id>
    <published>2020-05-10T12:32:07.000Z</published>
    <updated>2020-05-10T23:37:04.725Z</updated>
    
    <content type="html"><![CDATA[<p>Propagator Networks are an interesting approach to computation.  Today I want to provide an introduction to the concept of propagators using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>.</p><a id="more"></a><p>First, what is a propagator network?  In short, it is a computational method that provides a unique approach to model information and it’s flow through a system.  It’s concepts and motivations are described in several papers by Alexey Radul and Gerald Sussman, <a href="#references">references</a> below.  Here I’ll provide a brief overview as well as some examples.  On the surface, propagator networks are constructed of two primary components: cells and propagators.  Cells are independent entities that maintain their own data.  Propagators are functional connectors that propagate information between cells.  These two parts work together to provide a method of data accumulation and computation.</p><p>To go a bit deeper, cells don’t just hold data, but accumulate data.  For datatypes like int, this is relatively straight-forward.  When a cell is created it may have a known value.  But it may also be unknown (no information), since the implementation uses the Option type, it initialized with None.  As data is processed through the network, a cell may increase it’s information with an actual value when available.  For an Interval datatype this is more interesting.  It too can have information when initialized, but in cases where there is no information, it is initialized with None.  But as the network processes data, the cell accumulates additional information, resulting in more accurate interval values.</p><p>Propagators calculate and push data through the network, allowing cells to accumulate additional information.  Propagators must adhere to several rules.  They must be monotonically increasing.  The information they pass to a cell must be at least as good or better than what the cell contained before.  Since a cell is an Option type, in a basic sense any value is better than None (information is better than no information).  The real power is best seen using the Interval datatype.  For example, if a cell has the value range 10.1 - 12.2, any value a propagator passes to that cell must be at least this good.  A new value of 10.1 - 11.0 is more precise (better), but a value of 9.0 - 15.0 is less precise (worse).  As a result, a propagator would update the cell with the former value, but not the latter.  Propagators must also be idempotent.  Since a propagator can be triggered to executed multiple times, it must return the same data.  These attributes work to support stability, internal autonomy, asynchronous execution, as well as proper accumulation of information.  </p><p>Propagators should also be bi-directional in their computational ability.  This is what allows data to flow in both directions across operators.  In general this means a propagator for the function <code>p(a) = b</code> should have bundled an equivalent function <code>p&#39;(b) = a</code>.  As an example, imagine a function <code>a + b = c</code>.  There are reciprocal functions <code>c - b = a</code> and <code>c - a = b</code>.  A propagator is the bundling of these functions together so that given any two values it can provide the third.  This allows a developer to write <code>adder a b c</code> to create an addition function of <code>a + b = c</code>, but get functional computation in all directions for free. </p><p>These components and their associated rules provide some interesting computational characteristics for accumulating data.  A model of data relationships only need to be defined once.  It enables data population from diverse sources, and a more robust representation of knowledge.  Also, those reading might think these concepts bear a striking resemblance to CRDT and join-semilattice, and they would be correct.  This is a useful comparison to carry mentally when thinking about propagator networks.</p><p>Moving onto the code portion of the post, the below examples were created using <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core</a> 3.1.  As a caveat, this is an experimental project.  I’m using it to research several concepts surrounding propagator networks.  So it is functional, but not currently production ready.  Beyond internal implementation choices I’m playing with the semantics and library ergonomics.  As a result, the code you see below will certainly shift over time.  This doesn’t change the underlying concepts of propagator networks.  The library is available below. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new package propagator --version 0.1.0</span><br></pre></td></tr></table></figure><h2 id="Temperature-Conversion"><a href="#Temperature-Conversion" class="headerlink" title="Temperature Conversion"></a>Temperature Conversion</h2><p>I want to pull a couple examples from the previously mentioned papers to walk through the process. First is a temperature conversion example.  The math on this is so simple that using propagators can feel like overkill, but the simplicity allows focus on the propagator mechanics without getting too caught up in complex formulas.  Even with simple formulas, don’t underestimate the ability to define mathematical relationships once.</p><p>Building a propagator network is a multiple step process.  Starting with the temperature conversion formula <code>F = C * 1.8 + 32</code>, there are several components and operations to be codified.  But before getting into the details, a diagram assists in conceptualization of the entire formula and how the it is broken down.</p><p><img src="/images/prop1/temperature-network.png" alt="Temperature Converter"></p><p>First, cells need to be created to hold data.  There are the two end points (Celsius and Fahrenheit) that will serve as input or output, depending on conversion direction.  There are also constants in the formula (1.8 and 32).  Additionally, and perhaps less obvious at first glance, there are sub-results for the intermediate operations within the formula (C * 1.8).  When the function is initially created the only values known are the ones sent in (C or F) and the constants.  Beyond that, everything else is uninitialized.  </p><p>Second, the relationships between the cells need to be defined, these are the propagators.  Conveniently, the library has built-in propagators to support common math operations.  A multiplier propagator will represent the <code>C * 1.8 = C18</code> sub-component.  An adder propagator will then take that sub-result and combine it for a final result <code>C18 + 32 = F</code>.  These propagators are all that is needed to wire things together.</p><p>With the network in place, all that is needed now is to set the input and run the network.  Since this is meant to work in either direction, it will accept and return both Celsius and Fahrenheit values.  Below is the implementation.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// TemperatureConverter</span></span><br><span class="line"><span class="comment">/// F = C * 1.8 + 32 </span></span><br><span class="line"><span class="keyword">let</span> temperatureConverter (c: float option) (f: float option) =</span><br><span class="line">  <span class="keyword">let</span> network = PropagatorNetwork()</span><br><span class="line">  <span class="keyword">let</span> cellc = network.AddCell c</span><br><span class="line">  <span class="keyword">let</span> cell18 = network.AddConstant <span class="number">1.8</span></span><br><span class="line">  <span class="keyword">let</span> cellc18 = network.AddCell None</span><br><span class="line">  <span class="keyword">let</span> cell32 = network.AddConstant <span class="number">32.</span></span><br><span class="line">  <span class="keyword">let</span> cellf = network.AddCell f</span><br><span class="line">  </span><br><span class="line">  multiplier cellc cell18 cellc18 |&gt; network.AddPropagator</span><br><span class="line">  adder cellc18 cell32 cellf |&gt; network.AddPropagator</span><br><span class="line"></span><br><span class="line">  network.Run()</span><br><span class="line">  (network.GetFloat cellc, network.GetFloat cellf)</span><br></pre></td></tr></table></figure><p>With the Celsius/Fahrenheit relationship defined, I can now call conversions in either direction.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C -&gt; F</span></span><br><span class="line"><span class="keyword">match</span> (temperatureConverter (Some <span class="number">20.</span>) None) <span class="keyword">with</span></span><br><span class="line">| Some(c), Some(f) -&gt; printfn <span class="string">"%5.2fc = %5.2ff"</span> c f</span><br><span class="line">| _ -&gt; printfn <span class="string">"Conversion undetermined"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// F -&gt; C</span></span><br><span class="line"><span class="keyword">match</span> (temperatureConverter None (Some <span class="number">80.</span>)) <span class="keyword">with</span></span><br><span class="line">| Some(c), Some(f) -&gt; printfn <span class="string">"%5.2fc = %5.2ff"</span> c f</span><br><span class="line">| _ -&gt; printfn <span class="string">"Conversion undetermined"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Results:</span></span><br><span class="line"><span class="number">20.00</span>c = <span class="number">68.00</span>f</span><br><span class="line"><span class="number">26.67</span>c = <span class="number">80.00</span>f</span><br></pre></td></tr></table></figure><p>Just for kicks I can easily add capability.  The propagator network can be expanded to support Kelvin.  By adding a single propagator for a <code>C = K - 273.15</code> conversion, the network now supports conversions between all three systems in any direction. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temperatureConverterCFK (c: float option) (f: float option) (k: float option) =</span><br><span class="line">  <span class="keyword">let</span> network = PropagatorNetwork()</span><br><span class="line">  <span class="keyword">let</span> cellc = network.AddCell c</span><br><span class="line">  <span class="keyword">let</span> cell18 = network.AddConstant <span class="number">1.8</span></span><br><span class="line">  <span class="keyword">let</span> cellc18 = network.AddCell None</span><br><span class="line">  <span class="keyword">let</span> cell32 = network.AddConstant <span class="number">32.</span></span><br><span class="line">  <span class="keyword">let</span> cellf = network.AddCell f</span><br><span class="line">  <span class="keyword">let</span> cellk = network.AddCell k</span><br><span class="line">  <span class="keyword">let</span> cell27315 = network.AddConstant <span class="number">273.15</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// F = C × 1.8 + 32 </span></span><br><span class="line">  multiplier cellc cell18 cellc18 |&gt; network.AddPropagator</span><br><span class="line">  adder cellc18 cell32 cellf |&gt; network.AddPropagator</span><br><span class="line">  <span class="comment">// C = K - 273.15</span></span><br><span class="line">  subtracter cellk cell27315 cellc |&gt; network.AddPropagator</span><br><span class="line"></span><br><span class="line">  network.Run()</span><br><span class="line">  (network.GetFloat cellc, network.GetFloat cellf, network.GetFloat cellk)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Kelvin conversions</span></span><br><span class="line">[ (Some <span class="number">20.</span>, None, None)</span><br><span class="line">  (None, Some <span class="number">80.</span>, None)</span><br><span class="line">  (None, None, Some <span class="number">200.</span>) ]</span><br><span class="line">|&gt; List.iter(<span class="keyword">fun</span> (c, f, k) -&gt;</span><br><span class="line">  <span class="keyword">match</span> (temperatureConverterCFK c f k) <span class="keyword">with</span></span><br><span class="line">  | Some(c), Some(f), Some(k) -&gt; printfn <span class="string">"%6.2fc = %6.2ff = %6.2fk"</span> c f k</span><br><span class="line">  | _ -&gt; printfn <span class="string">"Conversion undetermined"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Results:</span></span><br><span class="line"> <span class="number">20.00</span>c =  <span class="number">68.00</span>f = <span class="number">293.15</span>k</span><br><span class="line"> <span class="number">26.67</span>c =  <span class="number">80.00</span>f = <span class="number">299.82</span>k</span><br><span class="line"><span class="number">-73.15</span>c = <span class="number">-99.67</span>f = <span class="number">200.00</span>k</span><br></pre></td></tr></table></figure><h2 id="Estimating-Building-Height"><a href="#Estimating-Building-Height" class="headerlink" title="Estimating Building Height"></a>Estimating Building Height</h2><p>Moving beyond relatively simple conversions, there are more complicated data relationships that can be represented using propagator networks.  That leads to the second example, estimating the height of a building.  It specifically addresses the idea of imperfect information and how multiple sources of truth can improve the overall quality of knowledge.  Again, this is an example pulled from the reference papers.  It isn’t exact clone though, I provide a slightly different twist to show additional dynamics.</p><p>For the resourceful person, there is more than one way to estimate the height of a building.  Assuming I have a barometer at my disposal, I have encoded three possible methods below.  First, I can drop an object from the top of the building and time how long it takes to hit the ground.  The associated formula is <code>height = 0.5 * g * t^2</code>.  Second, leveraging the knowledge of similar triangles, I can measure the height and shadow of a small object setting beside the building as well as the building’s shadow. The associated formula is <code>buildingHeight / buildingShadow = smallHeight / smallShadow</code>.  Third, I can count the rows of windows and estimate the height of a floor.  The associated formula is <code>height = floors * floorHeight</code>.  These are all reasonable, but imprecise, estimation methods.  We’ll also find that the total is better than the sum of all parts.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Height - using fall duration and shadow length and floor count</span></span><br><span class="line"><span class="keyword">let</span> buildingHeight (fallTime: Interval option) (buildingShadow: Interval option) (barometerHeight: Interval option) (barometerShadow: Interval option) (floors: Interval option) (floorHeight: Interval option) =</span><br><span class="line">  <span class="keyword">let</span> buildingHeight = None</span><br><span class="line">  <span class="keyword">let</span> network = PropagatorNetwork()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Height based on fall time</span></span><br><span class="line">  <span class="comment">// Fall duration: d = 0.5 * g * t^2</span></span><br><span class="line">  <span class="keyword">let</span> fallTime = network.AddCell fallTime</span><br><span class="line">  <span class="keyword">let</span> two = network.AddConstant &#123; Interval.Min = Some <span class="number">2.</span>; Max = Some <span class="number">2.</span>&#125;</span><br><span class="line">  <span class="keyword">let</span> t2 = network.AddCell None</span><br><span class="line">  <span class="keyword">let</span> g = network.AddConstant &#123; Interval.Min = Some <span class="number">9.80665</span>; Max = Some <span class="number">9.80665</span> &#125;</span><br><span class="line">  <span class="keyword">let</span> gt2 = network.AddCell None</span><br><span class="line">  <span class="keyword">let</span> half = network.AddConstant &#123; Interval.Min = Some <span class="number">0.5</span>; Max = Some <span class="number">0.5</span> &#125;</span><br><span class="line">  <span class="keyword">let</span> buildingHeight = network.AddCell buildingHeight</span><br><span class="line">  </span><br><span class="line">  power fallTime two t2 |&gt; network.AddPropagator</span><br><span class="line">  multiplier g t2 gt2 |&gt; network.AddPropagator</span><br><span class="line">  multiplier half gt2 buildingHeight |&gt; network.AddPropagator</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Shadow</span></span><br><span class="line">  <span class="comment">// Similar triangles Shadow Ratio = Height / Shadow</span></span><br><span class="line">  <span class="keyword">let</span> barometerHeight = network.AddCell barometerHeight</span><br><span class="line">  <span class="keyword">let</span> barometerShadow = network.AddCell barometerShadow</span><br><span class="line">  <span class="keyword">let</span> buildingShadow = network.AddCell buildingShadow</span><br><span class="line">  <span class="keyword">let</span> shadowRatio = network.AddCell None</span><br><span class="line"></span><br><span class="line">  divider barometerHeight barometerShadow shadowRatio |&gt; network.AddPropagator</span><br><span class="line">  divider buildingHeight buildingShadow shadowRatio |&gt; network.AddPropagator</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Floors</span></span><br><span class="line">  <span class="keyword">let</span> floorCount = network.AddCell floors</span><br><span class="line">  <span class="keyword">let</span> floorHeight = network.AddCell floorHeight</span><br><span class="line">  </span><br><span class="line">  multiplier floorHeight floorCount buildingHeight |&gt; network.AddPropagator</span><br><span class="line"></span><br><span class="line">  network.Run()</span><br><span class="line">  </span><br><span class="line">  (network.GetInterval fallTime, network.GetInterval buildingHeight, network.GetInterval buildingShadow, network.GetInterval floorCount, network.GetInterval floorHeight)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Create an in interval type</span></span><br><span class="line"><span class="keyword">let</span> interval (min: float option) (max: float option) =</span><br><span class="line">  Some &#123; Interval.Min = min; Max = max &#125;</span><br></pre></td></tr></table></figure><p>One thing about imprecise measurements is the need for a datatype that supports values with a margin of error.  Enter Interval, a built-in propagator library type.  Instead of using <code>float</code> for building height estimates, <code>Interval</code> provides a range of possible values per each measurement method.  This facilitates the storing of imperfect information.</p><p>In the first scenario, I have a barometer. I decide to drop the barometer from the top of the building and measure how long it takes to hit the ground.  Frankly this feels like a destructive method of measurement, but desperate times…  When measured, it takes about 4 seconds. But given that there is a natural delay when I start and stop the stopwatch, I assume I have a one second margin of error.  This translates to a possible interval of between 3.5 and 4.5 seconds.  With this knowledge I can feed that information in the <code>buildingHeight</code> function and find that the building is between 60 and 99 meters high.  The function supports additional inputs, but since I don’t have additional information those parts of the propagator network are non-impacting.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fallTime = interval (Some <span class="number">3.5</span>) (Some <span class="number">4.5</span>)</span><br><span class="line"><span class="keyword">let</span> (_, height', _, _, _) = buildingHeight fallTime None None None None None</span><br><span class="line">printfn <span class="string">"Only fall time...                Height (m): %O"</span> height'</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result: </span></span><br><span class="line">Only fall time...                Height (m): Some([<span class="number">60.06573</span> .. <span class="number">99.29233</span>])</span><br></pre></td></tr></table></figure><p>In the second scenario I use the knowledge of similar triangles and ratios.  I can place the barometer on the ground beside the building and measure it’s shadow.  Since the sun’s angle is similar for the barometer and building, I can use that information along with the length of the building’s shadow to gain an estimate of the building’s height.  After some measurements it is determined that the barometer’s height and shadow are about 12.5cm and 24.5cm.  The building’s shadow is about 170.5m long.  Providing this additional information into the function I get a better estimate of the building’s height of between 81 and 92 meters high.  It looks like I’m making progress.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buildingShadow = interval (Some <span class="number">170.0</span>) (Some <span class="number">171.0</span>)</span><br><span class="line"><span class="keyword">let</span> barometerHeight = interval (Some <span class="number">0.12</span>) (Some <span class="number">0.13</span>)</span><br><span class="line"><span class="keyword">let</span> barometerShadow = interval (Some <span class="number">0.24</span>) (Some <span class="number">0.25</span>)</span><br><span class="line"><span class="keyword">let</span> (_, height', _, _, _) = buildingHeight fallTime buildingShadow barometerHeight barometerShadow None None </span><br><span class="line">printfn <span class="string">"Fall time and shadow...          Height (m): %O"</span> height'</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result: </span></span><br><span class="line">Fall time <span class="keyword">and</span> shadow...          Height (m): Some([<span class="number">81.6</span> .. <span class="number">92.625</span>])</span><br></pre></td></tr></table></figure><p>In the third scenario I can improve the estimate even more. I count the windows on the outside and determine it has 30 floors. I can also make an educated guess that each floor is about 3-3.5 meters high.  Using this third piece of information I can enhance the building’s height estimate even more to 90 to 92 meters high.  The power of multiple sources is magnified.  Using three different sources, all with their own margin of error, I can easily aggregate the results to reduce the overall margin of error.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floors = interval (Some <span class="number">30.</span>) (Some <span class="number">30.</span>)</span><br><span class="line"><span class="keyword">let</span> floorHeight = interval (Some <span class="number">3.</span>) (Some <span class="number">3.5</span>)</span><br><span class="line"><span class="keyword">let</span> (_, height', _, _, _) = buildingHeight fallTime buildingShadow barometerHeight barometerShadow floors floorHeight</span><br><span class="line">printfn <span class="string">"Fall time, shadow, and floors... Height (m): %O"</span> height'</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line">Fall time, shadow, <span class="keyword">and</span> floors... Height (m): Some([<span class="number">90</span> .. <span class="number">92.625</span>])</span><br></pre></td></tr></table></figure><p>Stepping back, it helps to visualize in more detail how these intervals work together.  Below are the results of each piece of knowledge by itself.  They all have varying amounts of accuracy, but as additional information is added to the model, the final estimate is improved.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Separate results:</span></span><br><span class="line">Only fall time...                Height (m): Some([<span class="number">60.06573</span> .. <span class="number">99.29233</span>])</span><br><span class="line">Only shadow...                   Height (m): Some([<span class="number">81.6</span> .. <span class="number">92.625</span>])</span><br><span class="line">Only floors...                   Height (m): Some([<span class="number">90</span> .. <span class="number">105</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// Aggregated result:</span></span><br><span class="line">Fall time, shadow, <span class="keyword">and</span> floors... Height (m): Some([<span class="number">90</span> .. <span class="number">92.625</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/prop1/aggregated-intervals.png" alt="Aggregated Intervals"></p><p>As a side note, this model contains the same type of dynamic relationships as the temperature conversion model.  Data flows in all directions.  Lets say for example I don’t feel good about a mental estimate of floor height, but I can still count windows.  If I run the function and exclude my floorHeight measurement, I won’t get a better building height estimate, but I can get an additional estimate that the floor height is between 2.7 and 3.1 meters.  With respect to knowledge aggregation, this is a nice attribute of propagator network models.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (_, height', _, _, floorHeight') = buildingHeight fallTime buildingShadow barometerHeight barometerShadow floors None</span><br><span class="line">printfn <span class="string">"Building Height (m): %O"</span> height'</span><br><span class="line">printfn <span class="string">"Floor Height (m)   : %O"</span> floorHeight'</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line">Building Height (m): Some([<span class="number">81.6</span> .. <span class="number">92.625</span>])</span><br><span class="line">Floor Height (m)   : Some([<span class="number">2.72</span> .. <span class="number">3.0875</span>])</span><br></pre></td></tr></table></figure><p>These two examples provide some insight into the dynamics of propagator networks.  I could go on, but I think this is a good break point.  As an introduction to the concept of propagator networks, I hope you’ve found this computation approach interesting.  If you want to dig in a bit more, additional references are below.  Until next time.</p><h2 id="References"><a href="#References" class="headerlink" title="References "></a>References <a name="references"></a></h2><ul><li><a href="/images/prop1/the_art_of_the_propagator.pdf">The Art of the Propagator</a></li><li><a href="/images/prop1/propagation_networks_thesis.pdf">Propagator Networks Thesis</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Propagator Networks are an interesting approach to computation.  Today I want to provide an introduction to the concept of propagators using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Propagator" scheme="http://codesuji.com/tags/Propagator/"/>
    
  </entry>
  
  <entry>
    <title>Web Scraping with F#</title>
    <link href="http://codesuji.com/2020/04/25/Web-Scraping-with-F/"/>
    <id>http://codesuji.com/2020/04/25/Web-Scraping-with-F/</id>
    <published>2020-04-26T03:09:13.000Z</published>
    <updated>2020-04-27T20:19:20.139Z</updated>
    
    <content type="html"><![CDATA[<p>Not surprisely, <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> is a useful tool for all sorts of random tasks, web scraping among them.  Today I’ll take a quick side-track and leverage <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> to web scrap some COVID-19 data and create some charts.</p><a id="more"></a><p>Pennsylvania provides daily COVID-19 stats on their website.  This is great, but there are charts I’d like to see that they don’t provide.  This is easy enough to resolve by doing my own data collection and charting; enter web scraping.  As anyone who has done it before, they know scraping data can sometimes be a messy and error-prone process.  Luckily <code>FSharp.Data</code> provides some useful HTML parsing capabilities to make this process easier.  I would also be remiss if I didn’t mention, <a href="https://github.com/tomswartz07/covid19-pennsylvania" target="_blank" rel="noopener">github.com/tomswartz07</a> inspired me to whip this little project together.  He uses Python, but I borrowed his data identification method, with a few F#-style improvements.  Ok, time to do some setup.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang F# -n Covid19</span><br><span class="line">cd Covid19 </span><br><span class="line">dotnet add package FSharp.Data</span><br><span class="line">dotnet add package XPlot.GoogleCharts --version 3.0.1</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FSharp.Data</span><br><span class="line"><span class="keyword">open</span> XPlot.GoogleCharts</span><br></pre></td></tr></table></figure><p>As with most web scraping, this can be a touchy and/or dirty process.  Luckily in this particular case the data is relatively simple to parse.  I just need to grab the table rows <code>&lt;tr&gt;</code>.  I can then transform each row’s set of <code>&lt;td&gt;</code> into an array of strings.  After that I just need to filter to only the rows I want.  Again, I luck out with some pretty easy demarcation of the desired rows.  The page reports at the county level detail, but I only feel like tracking totals for the state.  As a result, I’ll do some some quick column level summing.  This will take the target webpage down to a timestamped row of data.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getData () =</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">"https://www.health.pa.gov/topics/disease/coronavirus/Pages/Cases.aspx"</span></span><br><span class="line">  <span class="keyword">let</span> page = HtmlDocument.Load(url)</span><br><span class="line">  <span class="comment">// Note: target row format is: County,Positives,Negatives,Deaths</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> timestamp = DateTime.Now.ToString(<span class="string">"MM-dd"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> aggregatedStateData =</span><br><span class="line">    <span class="comment">// Grab the html rows</span></span><br><span class="line">    page.Descendants [<span class="string">"tr"</span>]</span><br><span class="line">    <span class="comment">// Transform data (convert each html row into an array)</span></span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> htmlRow -&gt;</span><br><span class="line">      htmlRow.Descendants[<span class="string">"td"</span>]</span><br><span class="line">      |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; x.InnerText())</span><br><span class="line">      |&gt; Seq.toArray)</span><br><span class="line">    <span class="comment">// Skip rows prior to the section I want</span></span><br><span class="line">    |&gt; Seq.skipWhile (<span class="keyword">fun</span> row -&gt; Array.isEmpty row || row.[<span class="number">0</span>] &lt;&gt; <span class="string">"County"</span>)</span><br><span class="line">    <span class="comment">// Take data from my section until I reach the next section</span></span><br><span class="line">    |&gt; Seq.takeWhile (<span class="keyword">fun</span> row -&gt; not (Array.isEmpty row) &amp;&amp; row.[<span class="number">0</span>] &lt;&gt; <span class="string">"Sex"</span>)</span><br><span class="line">    <span class="comment">// Skip section header</span></span><br><span class="line">    |&gt; Seq.skip <span class="number">1</span></span><br><span class="line">    <span class="comment">// Sum all county data into a singular state record </span></span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> row -&gt; row.[<span class="number">1.</span><span class="number">.3</span>] |&gt; Array.map (<span class="keyword">fun</span> (x:String) -&gt; int(x.Replace(<span class="string">","</span>,<span class="string">""</span>))))</span><br><span class="line">    |&gt; Seq.fold (<span class="keyword">fun</span> a x -&gt; [| a.[<span class="number">0</span>] + x.[<span class="number">0</span>]; a.[<span class="number">1</span>] + x.[<span class="number">1</span>]; a.[<span class="number">2</span>] + x.[<span class="number">2</span>] |]) [|<span class="number">0</span>; <span class="number">0</span>; <span class="number">0</span>|]</span><br><span class="line">    <span class="comment">// Convert sequence to a csv string </span></span><br><span class="line">    |&gt; (<span class="keyword">fun</span> row -&gt;</span><br><span class="line">      row</span><br><span class="line">      |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.ToString())  </span><br><span class="line">      |&gt; String.concat <span class="string">","</span></span><br><span class="line">      |&gt; (<span class="keyword">fun</span> data -&gt; sprintf <span class="string">"%s,%s"</span> timestamp data))</span><br><span class="line"></span><br><span class="line">  (timestamp, aggregatedStateData)</span><br></pre></td></tr></table></figure><p>Once I have the data, I need to store it.  Since this is meant to be lightweight, I’ll just drop the data to a csv.  I want the script to be able to run multiple times a day, but I don’t want multiple date entries.  Using a <code>Map</code> keyed by timestamp is a simple solution.  More robust or performance sensitive solutions would call for at least something like <a href="/2017/07/28/F-and-SQLite/">SQLite</a>, but a csv is good enough for now.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> insertData dataFile =</span><br><span class="line">  <span class="keyword">let</span> (timestamp, todaysData) = getData()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update current state from file with new information</span></span><br><span class="line">  <span class="keyword">let</span> stateData' =</span><br><span class="line">    File.ReadAllLines(dataFile)</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; (x.Split <span class="string">","</span>).[<span class="number">0</span>], x)</span><br><span class="line">    |&gt; Map.ofArray </span><br><span class="line">    |&gt; Map.add timestamp todaysData</span><br><span class="line">    |&gt; Map.toArray</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> (k,v) -&gt; v)</span><br><span class="line">  </span><br><span class="line">  File.WriteAllLines(dataFile, stateData')</span><br></pre></td></tr></table></figure><p>Once the data is collected, I want to show some simple trending over time.  Granted, this has nothing to do with web scraping, but once I have the data I need to show a chart or two.  Again, F# offers a decent charting option for quick visualizations. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> chartData dataFile =</span><br><span class="line">  <span class="keyword">let</span> data =</span><br><span class="line">    File.ReadAllLines(dataFile)</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.Split <span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create series with timestamp and corresponding data</span></span><br><span class="line">  <span class="keyword">let</span> positives = data |&gt; Array.map (<span class="keyword">fun</span> row -&gt; (row.[<span class="number">0</span>], int row.[<span class="number">1</span>]))</span><br><span class="line">  <span class="keyword">let</span> negatives = data |&gt; Array.map (<span class="keyword">fun</span> row -&gt; (row.[<span class="number">0</span>], int row.[<span class="number">2</span>]))</span><br><span class="line">  <span class="keyword">let</span> deaths = data |&gt; Array.map (<span class="keyword">fun</span> row -&gt; (row.[<span class="number">0</span>], int row.[<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> options =</span><br><span class="line">    Options (</span><br><span class="line">      title = <span class="string">"COVID19 - PA"</span>, </span><br><span class="line">      curveType = <span class="string">"function"</span>,</span><br><span class="line">      legend = Legend(position = <span class="string">"bottom"</span>),</span><br><span class="line">      vAxis = Axis(minValue = <span class="number">0</span>, viewWindow = ViewWindow(min = <span class="number">0</span>) ) )</span><br><span class="line">  </span><br><span class="line">  [positives; deaths]</span><br><span class="line">  |&gt; Chart.Line</span><br><span class="line">  |&gt; Chart.WithOptions options</span><br><span class="line">  |&gt; Chart.WithLabels [<span class="string">"Positives"</span>; <span class="string">"Deaths"</span>]</span><br><span class="line">  |&gt; Chart.WithSize (<span class="number">800</span>, <span class="number">400</span>)</span><br><span class="line">  |&gt; Chart.Show</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> printData () =</span><br><span class="line">  printfn <span class="string">"%A"</span> (getData())</span><br></pre></td></tr></table></figure><p>The final piece is providing some control to determine what functionality I want to perform.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> dataFile = <span class="string">"state.csv"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> Array.isEmpty argv <span class="keyword">then</span></span><br><span class="line">    printfn <span class="string">"Missing argument [insert|print|chart]"</span></span><br><span class="line">    Environment.Exit <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">match</span> argv.[<span class="number">0</span>] <span class="keyword">with</span></span><br><span class="line">    | <span class="string">"insert"</span> -&gt; insertData dataFile</span><br><span class="line">    | <span class="string">"print"</span> -&gt; printData ()</span><br><span class="line">    | <span class="string">"chart"</span> -&gt; chartData dataFile</span><br><span class="line">    | _ -&gt; printfn <span class="string">"Missing argument [insert|print|chart]"</span></span><br><span class="line">           Environment.Exit <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Below are resulting charts from the data.  The first is cummulative data over time.  The second is the daily increase in positive tests with a cummulative scaled positives overlayed.  As the second chart shows, in the beginning of April the daily increases level off (relatively good news, and perhaps a good sign). </p><p><img src="/images/web1/web1.png" alt="Trending"></p><p><img src="/images/web1/web2.png" alt="Daily Increase"></p><p>This has been a brief look into how F# can be used for some quick and dirty web scraping (and charting).  It isn’t real sexy, but hacking quick things like this together with F# is a useful tool to have in the toolbox.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Not surprisely, &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; is a useful tool for all sorts of random tasks, web scraping among them.  Today I’ll take a quick side-track and leverage &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; to web scrap some COVID-19 data and create some charts.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Web" scheme="http://codesuji.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to F# Talk</title>
    <link href="http://codesuji.com/2020/03/17/Introduction-to-F-Talk/"/>
    <id>http://codesuji.com/2020/03/17/Introduction-to-F-Talk/</id>
    <published>2020-03-17T22:30:00.000Z</published>
    <updated>2020-03-11T23:54:04.498Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I gave an Introduction to <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> talk at <a href="https://techlancaster.com/" target="_blank" rel="noopener">Tech Lancaster</a>.  Here are the <a href="/slides/introduction-to-fsharp/index.html">slides</a> from that talk.</p><a id="more"></a><br><center><a href="/slides/introduction-to-fsharp/index.html" class="fancybox"><img src="/images/intro1/intro1.png">Slides</a></center><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I gave an Introduction to &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; talk at &lt;a href=&quot;https://techlancaster.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tech Lancaster&lt;/a&gt;.  Here are the &lt;a href=&quot;/slides/introduction-to-fsharp/index.html&quot;&gt;slides&lt;/a&gt; from that talk.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Presentations" scheme="http://codesuji.com/tags/Presentations/"/>
    
  </entry>
  
  <entry>
    <title>Containerizing F# with Docker</title>
    <link href="http://codesuji.com/2020/03/08/F-and-Docker/"/>
    <id>http://codesuji.com/2020/03/08/F-and-Docker/</id>
    <published>2020-03-08T14:09:22.000Z</published>
    <updated>2020-03-08T15:19:11.339Z</updated>
    
    <content type="html"><![CDATA[<p>Containerizing an <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> application using <a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> is a fairly straight forward process.  Today we’ll take a look at doing just that.</p><a id="more"></a><p>This post will cover putting different types of F# applications in Docker containers.  If you want to follow along, you’ll need to get a couple things.  You’ll need to install <a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> and <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core</a>.  As of right now, dotnet core is at 3.1, so that will be the target version.</p><p>The process follows a common pattern, although there is some divergence based on the specific use case.  This can eaily be shown using two examples.  The first example is a console app in Docker.  It won’t do much, since I don’t want to distract from the core docker implementation.  The second example is putting a web app in Docker.  This example is more involved for a couple reasons, as you’ll see below.</p><h3 id="Dockerizing-a-console-application"><a href="#Dockerizing-a-console-application" class="headerlink" title="Dockerizing a console application"></a>Dockerizing a console application</h3><p>First, create the application.  This is a standard process for any F# application.  As promised, it will be about as boring an application as possible.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang F# -n SampleConsole</span><br><span class="line">cd SampleConsole</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  printfn <span class="string">"Hello from F# in Docker."</span></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Once the application is in place, it’s time to add the docker components.  In the SampleConsole directory I’ll add a <code>Dockerfile</code> for the build and <code>.dockerignore</code> to excluded files.  The <code>.dockerignore</code> isn’t strictly necessary, but it does keep the container cleaner. Using a multi-stage Dockerfile makes the implementation pretty easy.  Since Microsoft provides dotnet core images, I leverage those.  The sdk one for building, and the runtime one for final execution.  To containerize the application, copy the application source into /src.  Then build from /src into /app. Then run out of /app.  The alpine flavor is used to keep the image smaller.  There is a non-alpine version (just remove the “-alpine” from the image names) if that is so desired.  In some ways this process is anti-climatic, there isn’t much here, but that is kind of the point.  Sometimes it is nice when things just work.</p><p>Dockerfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM mcr.microsoft.com/dotnet/core/sdk:3.1-alpine AS build</span><br><span class="line"></span><br><span class="line"># build application </span><br><span class="line">WORKDIR /src</span><br><span class="line">COPY . .</span><br><span class="line">RUN dotnet restore</span><br><span class="line">RUN dotnet publish -c release -o /app --no-self-contained --no-restore</span><br><span class="line"></span><br><span class="line"># final stage/image</span><br><span class="line">FROM mcr.microsoft.com/dotnet/core/runtime:3.1-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY --from=build /app .</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;./SampleConsole&quot;]</span><br></pre></td></tr></table></figure></p><p>.dockerignore<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin</span><br><span class="line">obj</span><br><span class="line">Dockerfile</span><br></pre></td></tr></table></figure></p><p>At this point, the only thing left to do is build and run the application.  The output is relatively uninspiring, but at least it is a good first step to doing something slightly more interesting.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t sample-console .</span><br><span class="line">docker run sample-console</span><br></pre></td></tr></table></figure><p><img src="/images/docker1/docker1-console.png" alt="Sample Console Results"></p><h3 id="Dockerizing-a-web-application"><a href="#Dockerizing-a-web-application" class="headerlink" title="Dockerizing a web application"></a>Dockerizing a web application</h3><p>Entering the second part of the post, putting an F# web application in a container.  Much of the above still applies, but considering the way of web apps, it needs to be different.  The first is initializing the app.  There are several good dotnet core templates to choose from, but I’m going to specifically use <a href="https://github.com/giraffe-fsharp/Giraffe" target="_blank" rel="noopener">Giraffe</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet new giraffe -lang F# -n SampleWeb </span><br><span class="line">cd SampleWeb</span><br></pre></td></tr></table></figure><p>This is where a little surgery takes place.  Like the above example, I want to use dotnet core 3.1, but the Giraffe template is for v2.1.  I’ll need to tweak a couple parts to get it to work together.  I’ll break them down by file.  Here are the <strong>SampleWeb.fsproj</strong> modifications.  Half of this is obvious, the slightly less obvious is the certificate.json reference, this will be used for Kestrel configuration later.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  &lt;PropertyGroup&gt;</span><br><span class="line">    &lt;!-- Change from netcoreapp version from <span class="number">2.1</span> <span class="keyword">to</span> <span class="number">3.1</span> --&gt;</span><br><span class="line">    &lt;TargetFramework&gt;netcoreapp3<span class="number">.1</span>&lt;/TargetFramework&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/PropertyGroup&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;ItemGroup&gt;</span><br><span class="line">    &lt;!-- Remove PackageReference Include=<span class="string">"Microsoft.AspNetCore.App"</span> Version=<span class="string">"2.1.*"</span> --&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/ItemGroup&gt;</span><br><span class="line">  ... </span><br><span class="line">  &lt;ItemGroup&gt;</span><br><span class="line">    &lt;!-- Add certificate configuration --&gt;</span><br><span class="line">    &lt;None Include=<span class="string">"certificate.json"</span> CopyToOutputDirectory=<span class="string">"PreserveNewest"</span> /&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/ItemGroup&gt;</span><br><span class="line">&lt;/Project&gt;</span><br></pre></td></tr></table></figure><p>Here are the <strong>web.config</strong> modifications.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;system.webServer&gt;</span><br><span class="line">    &lt;handlers&gt;</span><br><span class="line">      &lt;!-- Change AspNetCoreModule <span class="keyword">to</span> AspNetCoreModuleV2 --&gt;</span><br><span class="line">      &lt;add name=<span class="string">"aspNetCore"</span> path=<span class="string">"*"</span> verb=<span class="string">"*"</span> modules=<span class="string">"AspNetCoreModuleV2"</span> resourceType=<span class="string">"Unspecified"</span> /&gt;</span><br><span class="line">    &lt;/handlers&gt;</span><br><span class="line">    &lt;aspNetCore processPath=<span class="string">"dotnet"</span> arguments=<span class="string">"SampleWeb.dll"</span> stdoutLogEnabled=<span class="string">"false"</span> stdoutLogFile=<span class="string">"logs/stdout"</span> /&gt;</span><br><span class="line">  &lt;/system.webServer&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>Here are the <strong>Program.fs</strong> modifications.  For the most part the web app stays intact, but there are two specific parts to call out.  <code>IHostingEnvironment</code> works, but is deprecated.  As a result I’ll refactor to use <code>IWebHostEnvironment</code>. It removes a warning and future-proofs things a bit.  The big thing is Kestrel configuration.  The slightly short version is that the Kestrel changes are not required if running the application outside of Docker.  But, since the target is Docker, I ran into some complications.  I need to explicitly configure Kestrel so it runs https properly while in the container.  To do this I add a configuration step, using a certificate.json.  I then use that to create a certificate object that can be used in Kestrel configuration.  I’ll run http over 5000 and https over 5001; this will be useful information in a later step.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System.Security.Cryptography.X509Certificates</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Configuration</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Hosting</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Server.Kestrel.Core</span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> configureApp (app: IApplicationBuilder) =</span><br><span class="line">  <span class="comment">// Former: let env = app.ApplicationServices.GetService&lt;IHostingEnvironment&gt;()</span></span><br><span class="line">  <span class="keyword">let</span> env = app.ApplicationServices.GetService&lt;IWebHostEnvironment&gt;()</span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> configureAppConfiguration (config: IConfigurationBuilder) =</span><br><span class="line">  config.AddJsonFile(<span class="string">"/https/certificate.json"</span>) |&gt; ignore</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> configureKestrel (context: WebHostBuilderContext) (options: KestrelServerOptions) =</span><br><span class="line">  <span class="keyword">let</span> certificatePath = context.Configuration.GetSection(<span class="string">"certificate"</span>).GetValue&lt;string&gt;(<span class="string">"Path"</span>)</span><br><span class="line">  <span class="keyword">let</span> certificatePassword = context.Configuration.GetSection(<span class="string">"certificate"</span>).GetValue&lt;string&gt;(<span class="string">"Password"</span>)</span><br><span class="line">  <span class="keyword">let</span> certificate = <span class="keyword">new</span> X509Certificate2(certificatePath, certificatePassword)</span><br><span class="line">  options.ListenAnyIP(<span class="number">5000</span>)</span><br><span class="line">  options.ListenAnyIP(<span class="number">5001</span>, <span class="keyword">fun</span> options -&gt; options.UseHttps certificate |&gt; ignore)</span><br><span class="line">...</span><br><span class="line">WebHostBuilder()</span><br><span class="line">    .ConfigureAppConfiguration(configureAppConfiguration)</span><br><span class="line">    .UseKestrel(Action&lt;WebHostBuilderContext,KestrelServerOptions&gt; configureKestrel)</span><br><span class="line">...</span><br><span class="line">    .Build()</span><br><span class="line">    .Run()</span><br></pre></td></tr></table></figure><p>Now to add the supporting <strong>certificate.json</strong> file.  Here I show a good and a bad practice.  First the good, by creating the configuration file and certificate outside of the project, I won’t include secrets in the image itself.  Second the bad, “password” is not a good certificate password.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;Certificate&quot;: &#123;</span><br><span class="line">    &quot;Path&quot;: &quot;/https/SampleWeb.pfx&quot;,</span><br><span class="line">    &quot;Password&quot;: &quot;password&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>One last piece is needed for ssl support.  Normally production would have a proper cert, but since this just dev I’ll export my dotnet dev cert and use that for my Docker instance.  Below is how to export the cert.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet dev-certs https -ep ~/.aspnet/https/SampleWeb.pfx -p password</span><br></pre></td></tr></table></figure><p>Now that the necessary changes are in place, it’s time to do the containerization part.  In the SampleWeb directory I’ll add <code>Dockerfile</code> and <code>.dockerignore</code> files.  As before, the <code>Dockerfile</code> implements the application build as well as final packaging of the application using alpine.  You may note that the final stage here uses <code>aspnet-3.1-alpine</code>, where the previous version was <code>runtime-3.1-alpine</code>.</p><p>Dockerfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM mcr.microsoft.com/dotnet/core/sdk:3.1-alpine AS build</span><br><span class="line"></span><br><span class="line">WORKDIR /src</span><br><span class="line">COPY src/SampleWeb/. .</span><br><span class="line">RUN dotnet restore</span><br><span class="line">RUN dotnet publish -c release -o /app --no-self-contained --no-restore</span><br><span class="line"></span><br><span class="line"># create final image</span><br><span class="line">FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY --from=build /app ./</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;./SampleWeb&quot;]</span><br></pre></td></tr></table></figure></p><p>.dockerignore</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin</span><br><span class="line">obj</span><br><span class="line">Dockerfile</span><br></pre></td></tr></table></figure><p>At this point, the only thing left to do is build and run the application.  Since this is a web server, I’ll need to map the necessary ports.  I also map the directory containing certificate.json and SampleWeb.pfx into the container.  I will note a specific omission for a real-world implementation.  Kestrel can now be used as an edge server, although my preference is to put it behind a reverse proxy like <a href="https://www.nginx.com/" target="_blank" rel="noopener">nginx</a>.  That topic is beyond the scope of this post.  At least in the current configuration http and https can be tested locally.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t sample-web .</span><br><span class="line">docker run -p 5000:5000 -p 5001:5001 -v $&#123;HOME&#125;/.aspnet/https:/https/ sample-web</span><br></pre></td></tr></table></figure><p><img src="/images/docker1/docker1-web.png" alt="Sample Web Results"></p><p>This has been a brief look into how Docker can be leveraged with F#.  This is only the begining of what can be done, so hopefully you can use this as a jumping point for your projects. Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Containerizing an &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; application using &lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker&lt;/a&gt; is a fairly straight forward process.  Today we’ll take a look at doing just that.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Docker" scheme="http://codesuji.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Preonic V3 Build</title>
    <link href="http://codesuji.com/2020/01/25/Preonic-V3/"/>
    <id>http://codesuji.com/2020/01/25/Preonic-V3/</id>
    <published>2020-01-25T11:43:12.000Z</published>
    <updated>2020-04-30T02:25:00.512Z</updated>
    
    <content type="html"><![CDATA[<p>Today I wanted to talk about my new Preonic V3 from <a href="https://olkb.com" target="_blank" rel="noopener">OKLB</a> from <a href="https://drop.com" target="_blank" rel="noopener">Drop</a>.  I know by now I have a problem, but I just couldn’t pass up the opportunity.  I can only assume a future apocalypse will be survived by a plethora of keyboards.</p><a id="more"></a><p>Here is the final result, equipped with Kalih Box Black switches.  After hand-wiring my last <a href="/2019/11/02/Handwired-Preonic/">keyboard</a>, putting together this beauty almost feels like cheating.  The no-solder sockets make this an easy afternoon project.  With that said, I did bend a couple pins the first couple times I was assembling the switches, so it isn’t a fool-proof method.  The lesson is don’t go blindly jamming the switches in, assuming they’ll just work.  You do need to expend a little effort to get it right.  Regarding the box switches, the wobble of other switches has never really bothered me, but I wanted to give the box switches a try.  They do have a nice feel to them.  I’ve also grown fond of my current layout,  so I just copied it into a new QMK profile based on the Preonic V3 firmware.  Overall, as expected, it has been an enjoyable keyboard to assemble and use.</p><p>Beyond the stock keyboard build there are a couple custom components.  The caps they shipped were nice, but I already had in mind a slightly different look.</p><p><img src="/images/preonic2/preonic-final.jpg" alt="Preonic - final result"></p><p>As a bonus, I’ve included a couple build process images.  I ended up with a damaged switch from shipping, luckily I had a spare Speed Silver laying around.</p><p><img src="/images/preonic2/preonic-top.jpg" alt="Preonic - Switches "></p><p><img src="/images/preonic2/preonic-bottom.jpg" alt="Preonic - Bottom"></p><p><img src="/images/preonic2/preonic-assembling.jpg" alt="Preonic - Assembling"></p><p><img src="/images/preonic2/preonic-switches.jpg" alt="Preonic - Switches"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I wanted to talk about my new Preonic V3 from &lt;a href=&quot;https://olkb.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OKLB&lt;/a&gt; from &lt;a href=&quot;https://drop.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Drop&lt;/a&gt;.  I know by now I have a problem, but I just couldn’t pass up the opportunity.  I can only assume a future apocalypse will be survived by a plethora of keyboards.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Keyboard" scheme="http://codesuji.com/tags/Keyboard/"/>
    
  </entry>
  
  <entry>
    <title>Examing Entropy with F#</title>
    <link href="http://codesuji.com/2019/12/21/F-Entropy/"/>
    <id>http://codesuji.com/2019/12/21/F-Entropy/</id>
    <published>2019-12-21T22:09:22.000Z</published>
    <updated>2020-04-23T02:28:24.258Z</updated>
    
    <content type="html"><![CDATA[<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script><script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script><p>Measuring entropy can be a useful heuristic when performing analysis.  This is a short introduction into performing entropy analysis on binary and text files using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>.</p><a id="more"></a><p>What can entropy based analysis be used for? One specific use case is searching for secret keys in files.  In particular, scanning for hardcoded secrets or passwords that are accidently committed to git.  Scanning tools can be used to catch these kinds of issues.  Another use case is scanning binaries for reverse engineering purposes.  It is an interesting exercise to see what goes on behind the scenes with these types of tools.  The ability to scan successfully is predicated on the keys being blocks of random characters (a fair assumption for good passwords).  The randomness can be extracted from code files that have a certain level of predictability.  At the core of this process is Information Theory, namely <a href="https://en.wikipedia.org/wiki/Entropy_%28information_theory%29" target="_blank" rel="noopener">Shannon Entropy</a>. If you want to follow along, you’ll need to get <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core</a> installed.  For visualizations, XPlot will provide the necessary functionality. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang F# -n Entropy</span><br><span class="line">cd Entropy</span><br><span class="line">dotnet add package XPlot.GoogleCharts --version 3.0.1</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> XPlot.GoogleCharts</span><br></pre></td></tr></table></figure><p>$$ {H = - \sum^N_{i=1}p_i \log p_i} $$</p><p>The above equation is our starting point, where p<sub>i</sub> is the probability of seeing a particular character.  Implementation of the Shannon Entropy calculation is deceptively simple.  First, take a byte array and count the frequency of each byte value.  Second, sum the probabilities of seeing each byte in the byte array times the Log of the respective probability.  Here is where I diverge from the typical implementation.  Discussion often focuses on Log<sub>2</sub>, since so many instances focus on bits.  I prefer to work with a normalized value.  For 256 possible values I use Log<sub>256</sub> to scale between 0 and 1, where 0 is no entropy and 1 is high entropy. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> NormalizedEntropy (data: byte[]) =</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> frequency = Array.create <span class="number">256</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Populate byte frequencies</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> .. (data.Length - <span class="number">1</span>) <span class="keyword">do</span> </span><br><span class="line">    <span class="keyword">let</span> newByte = int data.[i]</span><br><span class="line">    frequency.[newByte] &lt;- frequency.[newByte] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Calculate entropy based on character frequencies</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> entropy = <span class="number">0.</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> .. <span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> probX = (float frequency.[i]) / (float data.Length)</span><br><span class="line">    <span class="keyword">if</span> probX &gt; <span class="number">0.</span> <span class="keyword">then</span> entropy &lt;- entropy - (probX * Math.Log(probX, <span class="number">256.</span>))</span><br><span class="line">  </span><br><span class="line">  entropy</span><br></pre></td></tr></table></figure><p>Since one of the possible uses of entropy analysis is checking files for secrets, a simple example is looking at <code>Program.fs</code>.  For comparison I copied the file and added a couple random passwords.  Taking it a step further, I generated a <code>fake.pem</code> just to demonstrate how the entropy of code differs from pem files (something else that might want to be scanned for in code repos).</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">"Program.fs"</span> </span><br><span class="line">  <span class="string">"Program-Secret.fs"</span> </span><br><span class="line">  <span class="string">"fake.pem"</span> ]</span><br><span class="line">  |&gt; List.iter (<span class="keyword">fun</span> filename -&gt;</span><br><span class="line">    <span class="keyword">let</span> bytes = File.ReadAllBytes(filename)</span><br><span class="line">    <span class="keyword">let</span> e = NormalizedEntropy bytes</span><br><span class="line">    printfn <span class="string">"%20s - %3.2f"</span> filename e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>As the results show below, putting some randomized strings (like secret keys or passwords) in a code file increases it’s entropy.  For comparison, the pem file is noticeably higher.  Although this is interesting, it has its limitations for any type of real scanning.  Perhaps I could scan all my code files to see if there is a typical range and use that to find anomalies, but I have a better idea.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">       Program.fs - 0.60</span><br><span class="line">Program-Secret.fs - 0.63</span><br><span class="line">         fake.pem - 0.75</span><br></pre></td></tr></table></figure><p>Details can be lost by looking at a file as a whole.  Another approach is to using a sliding window through the file.  Additionally leverage a threshold to show any blocks of the the file that have a high entropy.  A little refactoring for readability, the entropy calculation is broken out.  Then a sliding window is applied against the file.  Whenever a window is above the entropy threshold, show that block (at least the printable characters).  To cut down on excessive printing, don’t show overlapping windows.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Given a frequency array, calculate normalized entropy for a specified window size</span></span><br><span class="line"><span class="keyword">let</span> windowNormalizedEntropy (windowSize: int) (frequency: int[])=</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> entropy = <span class="number">0.</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> .. <span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> probX = (float frequency.[i]) / (float windowSize)</span><br><span class="line">    <span class="keyword">if</span> probX &gt; <span class="number">0.</span> <span class="keyword">then</span> entropy &lt;- entropy - (probX * Math.Log(probX, <span class="number">256.</span>))</span><br><span class="line">  entropy</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Normalized entropy using a rolling window</span></span><br><span class="line"><span class="keyword">let</span> NormalizedEntropyWindowShow (windowSize: int) (threshold: float) (data: byte[]) =</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> frequency = Array.create <span class="number">256</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> lastPrintedPosition = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> position <span class="keyword">in</span> <span class="number">0</span> .. (data.Length - windowSize - <span class="number">1</span>) <span class="keyword">do</span></span><br><span class="line">    <span class="comment">// Add new byte to window</span></span><br><span class="line">    <span class="keyword">let</span> newByte = int data.[position + windowSize]</span><br><span class="line">    frequency.[newByte] &lt;- frequency.[newByte] + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> position &gt;= windowSize <span class="keyword">then</span> </span><br><span class="line">      <span class="comment">// Roll off old byte from window </span></span><br><span class="line">      <span class="keyword">let</span> currentByte = int data.[position]</span><br><span class="line">      frequency.[currentByte] &lt;- frequency.[currentByte] - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Calculate entropy </span></span><br><span class="line">      <span class="keyword">let</span> entropy = windowNormalizedEntropy windowSize frequency</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Show high entropy block (if I haven't shown part already)</span></span><br><span class="line">      <span class="keyword">if</span> entropy &gt;= threshold &amp;&amp; (position &gt; lastPrintedPosition) <span class="keyword">then</span></span><br><span class="line">        lastPrintedPosition &lt;- position + windowSize - <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> nonPrintable = RegularExpressions.Regex(<span class="string">"[^ -~]"</span>)</span><br><span class="line">        <span class="keyword">let</span> slice = data.[position..(position + windowSize - <span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">let</span> s = nonPrintable.Replace(Encoding.ASCII.GetString (slice), <span class="string">"?"</span>)</span><br><span class="line">        printfn <span class="string">"%6d %6.5f %s"</span> position entropy s</span><br></pre></td></tr></table></figure><p>The file can then be evaluated by providing a window size and threshold.  A window size of 50 bytes and threshold of 0.58 are mostly arbitrary, but some experimentation show these seem to get a reasonable result.  I can now run the analysis against a code file with secrets and the pem file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">"Program-Secret.fs"</span> </span><br><span class="line">  <span class="string">"fake.pem"</span> ]</span><br><span class="line">|&gt; List.iter (<span class="keyword">fun</span> filename -&gt;</span><br><span class="line">  printfn <span class="string">"File: %s"</span> filename</span><br><span class="line">  <span class="keyword">let</span> bytes = File.ReadAllBytes(filename)</span><br><span class="line">  NormalizedEntropyWindowShow <span class="number">50</span> <span class="number">0.58</span> bytes)</span><br></pre></td></tr></table></figure><p>The results provide a bit more insight than before.  The entire pem file is captured (as expected).  For the code file, not all things caught are secrets.  Natural codeblocks get caught up in the process, and that’s fine.  This is about finding possibly areas of concern, and that goal is accomplished.  This is useful approach, but not perfect.  There are still gaps that can be closed to make it a more robust solution.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">File: Program-Secret.fs</span><br><span class="line">   151 0.58482 &quot;?  |&gt; printfn &quot;%s&quot;??// let keyToFind = &quot;ABCKEDIEM</span><br><span class="line">   201 0.63482 WPFHEIK1238UIMQ890PoqEgfh&quot;??/// Normalized entropy</span><br><span class="line">  1070 0.58105 bX * Math.Log(probX, 256.))?  entropy??/// Normali</span><br><span class="line">  1850 0.58105 rintable = Text.RegularExpressions.Regex(&quot;[^ -~]&quot;)</span><br><span class="line">  2830 0.58391 ?[&lt;EntryPoint&gt;]?let main argv =?  // 94kmnhdnbi*IE</span><br><span class="line">  2880 0.66548 JDMSKQL098123456hjqwemn,.&lt;&gt;/;&apos;:&apos;,.mnbvcxzasdfghjkl</span><br><span class="line">  2930 0.70548 ;&apos;][poiuytrewq1234567890-=+_)(*&amp;^%$#@!QWERTYUIOP&#123;&#125;</span><br><span class="line">  2980 0.63635 |&quot;:LKJHGFDSAZXCVBNM&lt;&gt;?*))]?  ?    // (Text.Encodin</span><br><span class="line">File: fake.pem</span><br><span class="line">    50 0.61793 04w4NMK0Ak5XVR1XR/TX/YGcj6z91Zd8j3K+0Q8SZKa9n8?QIu</span><br><span class="line">   100 0.62482 0URxz/CT5I4SeS746vd1bPpcSXy0rHvLMz0UxtIxlEOuCHAoed</span><br><span class="line">   150 0.60982 eDzKv4zr+MJ?/FCrKRazzAFv2/klBi3bRfW4UseYPeVs43ahRF</span><br><span class="line">   200 0.62293 O/gugc11n8drzlQq3BqkwJCTAx?uj+ZqG5QI6C8x8uooOvs0xk</span><br><span class="line">   ...</span><br><span class="line">  1450 0.63048 xjaxX+GIqEK?TM0T8QKBgCN83f96A39Qf5WGlJuY5EAsLWi+eu</span><br><span class="line">  1500 0.63048 0BO/We7heP1Op74XidcWucKaRb?t0+cNjkcnYgziBPj8TxAzMh</span><br><span class="line">  1550 0.63671 ueHJIB+TRAOqxQXPuYj+15O2PudrgMrKkRFC0lG90?3rOiKJCY</span><br><span class="line">  1600 0.63146 4g578SCKRNF0/xiMlXe9+DzfBCStzFirsI2Bq7tcrTmw?-----</span><br></pre></td></tr></table></figure><p>One question that remains is what are ideal values for window size and threshold that maximize finding secrets while minimizing false positives.  One of the impacting factors for this is different languages have their own characteristics, impacting the best parameters.  Beyond static parameters, statistical methods can be used to determine anomalies and parameters for a file, providing a more dynamic approach.  In the spirit of investigating different angles, I ran analysis against some of my repos (using a window size of 50).  My code generally has a range, but it appears some scanning refinement can be accomplished by taking file type into account. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.c  : 0.530</span><br><span class="line">.cl : 0.477</span><br><span class="line">.cpp: 0.490</span><br><span class="line">.cs : 0.486</span><br><span class="line">.fs : 0.502</span><br><span class="line">.fsx: 0.500</span><br><span class="line">.hs : 0.513</span><br><span class="line">.js : 0.492</span><br><span class="line">.pl : 0.540</span><br><span class="line">.ps1: 0.503</span><br><span class="line">.py : 0.490</span><br><span class="line">.r  : 0.516</span><br><span class="line">.rkt: 0.475</span><br><span class="line">.sh : 0.540</span><br><span class="line">.ts : 0.520</span><br></pre></td></tr></table></figure><p>Because there are multiple ways to look at the data, it is time to go a bit more visual.  The below adaptation returns a by-sliding-window entropy array.  This array is then fed into a charting function.  A chart provides a nice visual representation of the entropy over the entire file. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Normalized entropy using a rolling window</span></span><br><span class="line"><span class="keyword">let</span> NormalizedEntropyWindow (windowSize: int) (data: byte[]) =</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> frequency = Array.create <span class="number">256</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  [| </span><br><span class="line">    <span class="keyword">for</span> position <span class="keyword">in</span> <span class="number">0</span> .. (data.Length - windowSize - <span class="number">1</span>) <span class="keyword">do</span></span><br><span class="line">      <span class="comment">// Add new byte to window</span></span><br><span class="line">      <span class="keyword">let</span> newByte = int data.[position + windowSize]</span><br><span class="line">      frequency.[newByte] &lt;- frequency.[newByte] + <span class="number">1</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> position &gt;= windowSize <span class="keyword">then</span> </span><br><span class="line">        <span class="comment">// Roll off old byte off window</span></span><br><span class="line">        <span class="keyword">let</span> currentByte = int data.[position]</span><br><span class="line">        frequency.[currentByte] &lt;- frequency.[currentByte] - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate entropy </span></span><br><span class="line">        <span class="keyword">yield</span> (windowNormalizedEntropy windowSize frequency)</span><br><span class="line">  |]</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">"Program-Secret.fs"</span> </span><br><span class="line">  <span class="string">"fake.pem"</span> ]</span><br><span class="line">|&gt; List.iter (<span class="keyword">fun</span> filename -&gt;</span><br><span class="line">  printfn <span class="string">"File: %s"</span> filename</span><br><span class="line">  <span class="keyword">let</span> bytes = File.ReadAllBytes(filename)</span><br><span class="line">  </span><br><span class="line">  NormalizedEntropyWindow <span class="number">100</span> bytes</span><br><span class="line">  |&gt; Chart.Line</span><br><span class="line">  |&gt; Chart.Show)</span><br></pre></td></tr></table></figure><p>Now, as a result, I get charts showing entropy over the respective file.  The bumps show where I placed some random string keys in the file.  Just for kicks, I including a block of “AAAA…”, which is also evident when entropy drops to 0.  As a contrast, the pem file has a pretty consistently higher entropy throughout the whole file.  As with so many things, different angles on the problem help to improve intuition.  Plus I’m a sucker for a good picture.</p><p><img src="/images/entropy1/program-secret.png" alt="Program-Secret.fs"></p><p><img src="/images/entropy1/fake.png" alt="fake.pem"></p><p>This has been a brief look into how entropy patterns can be of use when scanning files for interesting information.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;https://polyfill.io/v3/polyfill.min.js?features=es6&quot;&gt;&lt;/script&gt;
&lt;script id=&quot;MathJax-script&quot; async src=&quot;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;Measuring entropy can be a useful heuristic when performing analysis.  This is a short introduction into performing entropy analysis on binary and text files using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Entropy" scheme="http://codesuji.com/tags/Entropy/"/>
    
  </entry>
  
  <entry>
    <title>Handwired Preonic</title>
    <link href="http://codesuji.com/2019/11/02/Handwired-Preonic/"/>
    <id>http://codesuji.com/2019/11/02/Handwired-Preonic/</id>
    <published>2019-11-03T01:45:55.000Z</published>
    <updated>2020-04-30T17:39:47.671Z</updated>
    
    <content type="html"><![CDATA[<p>Today I wanted to share my newly hand-wired Preonic keyboard.</p><a id="more"></a><p>Below is the final result, equipped with Gateron Black switches.</p><p><img src="/images/preonic1/preonic_final.jpg" alt="Preonic, final result"></p><p>Since this is a more involved project, I’ve included a bunch of build process images.  </p><p>The journey started when I picked up a Preonic top plate from <a href="https://olkb.com" target="_blank" rel="noopener">OKLB</a>, but no PCBs were available.  This felt like the perfect opportunity to learn how to hand-wire a keyboard.  Luckily there are a couple good guides out there: <a href="https://docs.qmk.fm/#/hand_wire" target="_blank" rel="noopener">QMK Handwire</a>, <a href="https://trauring.org/hand-wiring-a-keyboard/" target="_blank" rel="noopener">trauring.org</a>.  I used these plus a couple other random resources to put this one together.</p><p>In the beginning, there were switches and a plate.  Mounting the switches seems like a good starting point.</p><p><img src="/images/preonic1/preonic_switches.jpg" alt="Gateron black switches"></p><p><img src="/images/preonic1/preonic_plate.jpg" alt="Preonic plate"></p><p><img src="/images/preonic1/preonic_switches_top.jpg" alt="Switches, a top view"></p><p><img src="/images/preonic1/preonic_switches_bottom.jpg" alt="Switches, a bottom view"></p><p>I wired the grid, starting with the rows.  Some people like to solder the diode legs directly together, leaving a bare metal row.  I prefer to attach them to an insulated wire.  I figure less bare wire is better.</p><p><img src="/images/preonic1/preonic_rows_partial.jpg" alt="Rows partially wired"></p><p><img src="/images/preonic1/preonic_rows.jpg" alt="Rows completely wired"></p><p><img src="/images/preonic1/preonic_rows_closeup.jpg" alt="Rows, a closer look"></p><p>After the rows, I tackle the columns.</p><p><img src="/images/preonic1/preonic_rows_columns_partial.jpg" alt="Colums partially wired"></p><p><img src="/images/preonic1/preonic_rows_columns.jpg" alt="Columns completely wired"></p><p><img src="/images/preonic1/preonic_rows_columns_closeup.jpg" alt="Rows and Column, a closer look"></p><p>Once the grid was soldered, I used ribbon cable to connect the rows and columns to the Teensy.  The thinner wires make it easier to snake through the underside of the board, and colors make for easier tracking.  I do have a minor regret here.  At the solder points I found the thinner ribbon cable to be a bit of a pain.  To be fair, it worked fine and often choices are about tradeoffs; but next time I’ll probably use something other than the thin ribbon cable.</p><p><img src="/images/preonic1/preonic_teensy_cable.jpg" alt="Wires for Teensy"></p><p><img src="/images/preonic1/preonic_teensy_connected.jpg" alt="Teensy, connected"></p><p><img src="/images/preonic1/preonic_teensy.jpg" alt="Teensy"></p><p>All wired up, its time to switch over to QMK.  They have a pretty good <a href="https://docs.qmk.fm/#/newbs_building_firmware" target="_blank" rel="noopener">guide</a> on how to setup a custom firmware.  Once I got myself oriented to the process, it wasn’t too bad to get a new firmware up and running.</p><p>Once flashed, the keyboard is all functional and good to go.  At this point I’m still waiting on putting a custom case together, but that is a whole other project I have in mind.  Until then the keyboard works as desired, and its an enjoyable addition to my collection.</p><p><img src="/images/preonic1/preonic_final.jpg" alt="Preonic, final result"></p><p>The below is the keyboard layout.  This is also what I use on my <a href="/2019/08/14/Nyquist-Keyboard/">Nyquist</a>.  I’ve found Esc and Backspace on the bottom row works really well.  I treat layer 1 mostly as a movement and number layer. Layer 2 is a symbols layer, primarily focused on developer ergonomics. I’m intrigued by the Planck format (one less row).  With this in mind, I make a conscious effort to compress the key space without sacrificing logical grouping and positional relationships.  It just makes the layout easier to remember.</p><p><a name="layout"></a><br><img src="/images/preonic1/preonic_layer0.png" alt="Layer 0"></p><p><img src="/images/preonic1/preonic_layer1.png" alt="Layer 1"></p><p><img src="/images/preonic1/preonic_layer2.png" alt="Layer 2"></p><p>As a final note, for anyone considering hand wiring a keyboard but unsure if they can do it. I say go for it.  The process really isn’t as bad as you might think and its fun journey.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I wanted to share my newly hand-wired Preonic keyboard.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Keyboard" scheme="http://codesuji.com/tags/Keyboard/"/>
    
  </entry>
  
  <entry>
    <title>Utilizing RabbitMQ with F#</title>
    <link href="http://codesuji.com/2019/10/24/F-RabbitMQ/"/>
    <id>http://codesuji.com/2019/10/24/F-RabbitMQ/</id>
    <published>2019-10-25T00:01:17.000Z</published>
    <updated>2019-10-25T19:34:57.941Z</updated>
    
    <content type="html"><![CDATA[<p>Today is a overview of how to use the <a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ</a> message broker with <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a>.  The RabbitMQ tutorials have a lot of great <a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">getting started</a> information.  Its .NET section focuses on C#, so I wanted to provide an F# angle to the general use cases.<br><a id="more"></a></p><p>There are a several different use cases for leveraging RabbitMQ.  My examples will track against most of the tutorials, but with my own twist on the examples.  The producer will generate and publish a datastream of floats using RabbitMQ.  Depending on the specific use cases, consumers will filter and processes messages out of RabbitMQ.  I want all of these to be singular files, so I also leverage Async workflows to operate both producer and consumers in the same process.  To get started, you will need to have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core</a> installed.  Once this is complete the application can be setup.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang F# -n RabbitMQ</span><br><span class="line">cd RabbitMQ </span><br><span class="line">dotnet new package RabbitMQ.Client --version 5.1.2</span><br></pre></td></tr></table></figure><p>Based on the types of interaction, I’ve broken the post into sections.  For quick reference, the sections are:</p><p><a href="#work_queues">Work Queues</a><br><a href="#publish_subscribe">Publish/Subscribe</a><br><a href="#routing">Routing</a><br><a href="#topics">Topics</a></p><p>There is a lot of repetition, but I want each example to stand on it’s own.  In all of the below examples, the same libraries and namespaces are used.  So this will be a singular header for all examples.  The primary difference between the following examples is the exchange, queue, and routing key definitions and usages. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Text</span><br><span class="line"><span class="keyword">open</span> System.Threading</span><br><span class="line"><span class="keyword">open</span> RabbitMQ.Client</span><br><span class="line"><span class="keyword">open</span> RabbitMQ.Client.Events</span><br></pre></td></tr></table></figure><h2 id="Work-Queues"><a href="#Work-Queues" class="headerlink" title="Work Queues "></a>Work Queues <a name="work_queue"></a></h2><p>For this example, the interaction is pretty direct.  The producer takes it’s datastream and publishes it to the defined queue every 500 milliseconds.  The consumer(s) will read from the same queue, processing data as available.  The consumer is setup in a similar fashion to the producer; they both need a connexionand channel.  It does has the extra need to setup a handler for receiving messages.  Once it is all setup, the consumer must be started for processing.  The final piece is running the producer and consumer workflows.  Since this is a quick test, I’ll run everything for 5 seconds, then kill the workflow. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> producer hostname queue routingKey (token: CancellationTokenSource) = async &#123;</span><br><span class="line">  <span class="keyword">let</span> factory = ConnectionFactory(HostName = hostname)</span><br><span class="line">  <span class="keyword">use</span> connection = factory.CreateConnection()</span><br><span class="line">  <span class="keyword">use</span> channel = connection.CreateModel()</span><br><span class="line">  <span class="keyword">let</span> result = channel.QueueDeclare(queue = queue, durable = <span class="keyword">false</span>, exclusive = <span class="keyword">false</span>, autoDelete = <span class="keyword">false</span>, arguments = <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rand = Random()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> not token.IsCancellationRequested <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> message = sprintf <span class="string">"%f"</span> (rand.NextDouble())</span><br><span class="line">    <span class="keyword">let</span> body = Encoding.UTF8.GetBytes(message)</span><br><span class="line">    printfn <span class="string">"publish     : %s"</span> message</span><br><span class="line">    channel.BasicPublish(exchange = <span class="string">""</span>, routingKey = routingKey, basicProperties = <span class="keyword">null</span>, body = body)</span><br><span class="line">    Thread.Sleep(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> consumer id hostname queue (token: CancellationTokenSource) = async &#123;</span><br><span class="line">  <span class="keyword">let</span> factory = ConnectionFactory(HostName = hostname)</span><br><span class="line">  <span class="keyword">use</span> connection = factory.CreateConnection()</span><br><span class="line">  <span class="keyword">use</span> channel = connection.CreateModel()</span><br><span class="line">  <span class="keyword">let</span> result = channel.QueueDeclare(queue = queue, durable = <span class="keyword">false</span>, exclusive = <span class="keyword">false</span>, autoDelete = <span class="keyword">false</span>, arguments = <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> consumer = EventingBasicConsumer(channel)</span><br><span class="line">  consumer.Received.AddHandler(<span class="keyword">new</span> EventHandler&lt;BasicDeliverEventArgs&gt;(<span class="keyword">fun</span> sender (data:BasicDeliverEventArgs) -&gt; </span><br><span class="line">    <span class="keyword">let</span> body = data.Body</span><br><span class="line">    <span class="keyword">let</span> message = Encoding.UTF8.GetString(body)</span><br><span class="line">    printfn <span class="string">"consumed [%s]: %s"</span> id message))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> consumeResult = channel.BasicConsume(queue = queue, autoAck = <span class="keyword">true</span>, consumer = consumer)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> not token.IsCancellationRequested <span class="keyword">do</span></span><br><span class="line">    Thread.Sleep(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> host = <span class="string">"localhost"</span></span><br><span class="line">  <span class="keyword">let</span> queue = <span class="string">"data_stream"</span></span><br><span class="line">  <span class="keyword">let</span> routingKey = <span class="string">"data_stream"</span></span><br><span class="line"></span><br><span class="line">  async &#123;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="keyword">new</span> CancellationTokenSource()</span><br><span class="line">    token.CancelAfter <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">    seq &#123; </span><br><span class="line">      (producer host queue routingKey token); </span><br><span class="line">      (consumer <span class="string">"1"</span> host queue token); </span><br><span class="line">      (consumer <span class="string">"2"</span> host queue token) &#125; </span><br><span class="line">    |&gt; Async.Parallel</span><br><span class="line">    |&gt; Async.RunSynchronously |&gt; ignore</span><br><span class="line">  &#125; |&gt; Async.RunSynchronously</span><br><span class="line"> </span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>The output shows the two consumers picking data off the data_stream queue.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">publish     : 0.750373</span><br><span class="line">consumed [1]: 0.750373</span><br><span class="line">publish     : 0.130004</span><br><span class="line">consumed [2]: 0.130004</span><br><span class="line">publish     : 0.279026</span><br><span class="line">consumed [1]: 0.279026</span><br><span class="line">publish     : 0.709584</span><br><span class="line">consumed [2]: 0.709584</span><br><span class="line">publish     : 0.573295</span><br><span class="line">consumed [1]: 0.573295</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Publish-Subscribe"><a href="#Publish-Subscribe" class="headerlink" title="Publish/Subscribe "></a>Publish/Subscribe <a name="publish_subscribe"></a></h2><p>In contrast to the previous example, using a <code>Fanout</code> exchange type distributes the published message to all subscribed consumers.  Of note, here I use exchange and routing key.  The consumer also needs a queue binding, that wasn’t required in the previous example.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> producer hostname exchange routingKey (token: CancellationTokenSource) = async &#123;</span><br><span class="line">  <span class="keyword">let</span> factory = ConnectionFactory(HostName = hostname)</span><br><span class="line">  <span class="keyword">use</span> connection = factory.CreateConnection()</span><br><span class="line">  <span class="keyword">use</span> channel = connection.CreateModel()</span><br><span class="line">  channel.ExchangeDeclare(exchange = exchange, ``<span class="class"><span class="keyword">type</span>`` </span>= ExchangeType.Fanout, durable = <span class="keyword">false</span>, autoDelete = <span class="keyword">false</span>, arguments = <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rand = Random()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> not token.IsCancellationRequested <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> message = sprintf <span class="string">"%f"</span> (rand.NextDouble())</span><br><span class="line">    <span class="keyword">let</span> body = Encoding.UTF8.GetBytes(message)</span><br><span class="line">    printfn <span class="string">"publish: %s"</span> message</span><br><span class="line">    channel.BasicPublish(exchange = exchange, routingKey = routingKey, basicProperties = <span class="keyword">null</span>, body = body)</span><br><span class="line">    Thread.Sleep(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> consumer id hostname exchange routingKey (token: CancellationTokenSource) = async &#123;</span><br><span class="line">  <span class="keyword">let</span> factory = ConnectionFactory(HostName = hostname)</span><br><span class="line">  <span class="keyword">use</span> connection = factory.CreateConnection()</span><br><span class="line">  <span class="keyword">use</span> channel = connection.CreateModel()</span><br><span class="line">  channel.ExchangeDeclare(exchange = exchange, ``<span class="class"><span class="keyword">type</span>`` </span>= ExchangeType.Fanout)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> queueName = channel.QueueDeclare().QueueName</span><br><span class="line">  channel.QueueBind(queue = queueName, exchange = exchange, routingKey = routingKey);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> consumer = EventingBasicConsumer(channel)</span><br><span class="line">  consumer.Received.AddHandler(<span class="keyword">new</span> EventHandler&lt;BasicDeliverEventArgs&gt;(<span class="keyword">fun</span> sender (data:BasicDeliverEventArgs) -&gt; </span><br><span class="line">    <span class="keyword">let</span> body = data.Body</span><br><span class="line">    <span class="keyword">let</span> message = Encoding.UTF8.GetString(body)</span><br><span class="line">    printfn <span class="string">"consumed [%s]: %A"</span> id message))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> consumeResult = channel.BasicConsume(queue = <span class="string">""</span>, autoAck = <span class="keyword">true</span>, consumer = consumer)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> not token.IsCancellationRequested <span class="keyword">do</span></span><br><span class="line">    Thread.Sleep(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> host = <span class="string">"localhost"</span></span><br><span class="line">  <span class="keyword">let</span> exchange = <span class="string">"pubsub_exchange"</span></span><br><span class="line">  <span class="keyword">let</span> routingKey = <span class="string">"pubsub_route"</span></span><br><span class="line"></span><br><span class="line">  async &#123;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="keyword">new</span> CancellationTokenSource()</span><br><span class="line">    token.CancelAfter <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">    seq &#123; </span><br><span class="line">      (producer host exchange routingKey token); </span><br><span class="line">      (consumer <span class="string">"1"</span> host exchange routingKey token); </span><br><span class="line">      (consumer <span class="string">"2"</span> host exchange routingKey token) &#125; </span><br><span class="line">    |&gt; Async.Parallel</span><br><span class="line">    |&gt; Async.RunSynchronously |&gt; ignore</span><br><span class="line"></span><br><span class="line">    printfn <span class="string">"workflow complete"</span></span><br><span class="line">  &#125; |&gt; Async.RunSynchronously</span><br><span class="line"> </span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>The below results show each consumer processing every message.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">publish: 0.178846</span><br><span class="line">consumed [1]: &quot;0.178846&quot;</span><br><span class="line">consumed [2]: &quot;0.178846&quot;</span><br><span class="line">publish: 0.734746</span><br><span class="line">consumed [1]: &quot;0.734746&quot;</span><br><span class="line">consumed [2]: &quot;0.734746&quot;</span><br><span class="line">publish: 0.171448</span><br><span class="line">consumed [2]: &quot;0.171448&quot;</span><br><span class="line">consumed [1]: &quot;0.171448&quot;</span><br><span class="line">publish: 0.890113</span><br><span class="line">consumed [2]: &quot;0.890113&quot;</span><br><span class="line">consumed [1]: &quot;0.890113&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing "></a>Routing <a name="routing"></a></h2><p>For this example, if the first digit is even or odd, the producer will route it to the appropriate ‘even’ or ‘odd’ route.  Two consumers are setup, one to listen for even messages, and the other to listen to odd messages.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> producer hostname exchange (routingKeys:string list) (token: CancellationTokenSource) = async &#123;</span><br><span class="line">  <span class="keyword">let</span> factory = ConnectionFactory(HostName = hostname)</span><br><span class="line">  <span class="keyword">use</span> connection = factory.CreateConnection()</span><br><span class="line">  <span class="keyword">use</span> channel = connection.CreateModel()</span><br><span class="line">  channel.ExchangeDeclare(exchange = exchange, ``<span class="class"><span class="keyword">type</span>`` </span>= ExchangeType.Direct, durable = <span class="keyword">false</span>, autoDelete = <span class="keyword">false</span>, arguments = <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rand = Random()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> not token.IsCancellationRequested <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> data = rand.NextDouble()</span><br><span class="line">    <span class="keyword">let</span> message = sprintf <span class="string">"%f"</span> data</span><br><span class="line">    <span class="keyword">let</span> body = Encoding.UTF8.GetBytes(message)</span><br><span class="line">    printfn <span class="string">"publish     : %s"</span> message</span><br><span class="line">    <span class="keyword">let</span> routingKey = <span class="keyword">if</span> int ((data * <span class="number">10.</span>)) % <span class="number">2</span> = <span class="number">0</span> </span><br><span class="line">                     <span class="keyword">then</span> routingKeys.[<span class="number">0</span>] </span><br><span class="line">                     <span class="keyword">else</span> routingKeys.[<span class="number">1</span>]</span><br><span class="line">    channel.BasicPublish(exchange = exchange, routingKey = routingKey, basicProperties = <span class="keyword">null</span>, body = body)</span><br><span class="line">    Thread.Sleep(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> consumer id hostname exchange routingKey (token: CancellationTokenSource) = async &#123;</span><br><span class="line">  <span class="keyword">let</span> factory = ConnectionFactory(HostName = hostname)</span><br><span class="line">  <span class="keyword">use</span> connection = factory.CreateConnection()</span><br><span class="line">  <span class="keyword">use</span> channel = connection.CreateModel()</span><br><span class="line">  channel.ExchangeDeclare(exchange = exchange, ``<span class="class"><span class="keyword">type</span>`` </span>= ExchangeType.Direct)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> queueName = channel.QueueDeclare().QueueName</span><br><span class="line">  channel.QueueBind(queue = queueName, exchange = exchange, routingKey = routingKey);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> consumer = EventingBasicConsumer(channel)</span><br><span class="line">  consumer.Received.AddHandler(<span class="keyword">new</span> EventHandler&lt;BasicDeliverEventArgs&gt;(<span class="keyword">fun</span> sender (data:BasicDeliverEventArgs) -&gt; </span><br><span class="line">    <span class="keyword">let</span> body = data.Body</span><br><span class="line">    <span class="keyword">let</span> message = Encoding.UTF8.GetString(body)</span><br><span class="line">    printfn <span class="string">"consumed [%s]: %s"</span> id message))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> consumeResult = channel.BasicConsume(queue = <span class="string">""</span>, autoAck = <span class="keyword">true</span>, consumer = consumer)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> not token.IsCancellationRequested <span class="keyword">do</span></span><br><span class="line">    Thread.Sleep(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> host = <span class="string">"localhost"</span></span><br><span class="line">  <span class="keyword">let</span> exchange = <span class="string">"routing_exchange"</span></span><br><span class="line">  <span class="keyword">let</span> routingKey0 = <span class="string">"even"</span></span><br><span class="line">  <span class="keyword">let</span> routingKey1 = <span class="string">"odd"</span></span><br><span class="line"></span><br><span class="line">  async &#123;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="keyword">new</span> CancellationTokenSource()</span><br><span class="line">    token.CancelAfter <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">    seq &#123; </span><br><span class="line">      (producer host exchange [routingKey0; routingKey1] token); </span><br><span class="line">      (consumer <span class="string">"0"</span> host exchange routingKey0 token);  </span><br><span class="line">      (consumer <span class="string">"1"</span> host exchange routingKey1 token) &#125;</span><br><span class="line">    |&gt; Async.Parallel</span><br><span class="line">    |&gt; Async.RunSynchronously |&gt; ignore</span><br><span class="line">  &#125; |&gt; Async.RunSynchronously</span><br><span class="line"> </span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>The below results show consumer 0 filtering on even messages and consumer 1 filtering on odd messages.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">publish: 0.910740</span><br><span class="line">consumed [1]: 0.910740</span><br><span class="line">publish     : 0.650291</span><br><span class="line">consumed [0]: 0.650291</span><br><span class="line">publish     : 0.128357</span><br><span class="line">consumed [1]: 0.128357</span><br><span class="line">publish     : 0.750614</span><br><span class="line">consumed [1]: 0.750614</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Topics"><a href="#Topics" class="headerlink" title="Topics "></a>Topics <a name="topics"></a></h2><p>The <code>Topic</code> exchange type provides a mechanism for consumers to apply advanced filtering to the messages they process.  In this example, the same even/odd producer is used.  The consumers use routing keys that support wildcards.  <code>all.*</code> will process messages that start with ‘all’, while <code>*.odd</code> will process messages ending in ‘odd’.  This functionality allows you to setup topics in such a fashion to provided more advanced consumer processing.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> producer hostname exchange (routingKeys:string list) (token: CancellationTokenSource) = async &#123;</span><br><span class="line">  <span class="keyword">let</span> factory = ConnectionFactory(HostName = hostname)</span><br><span class="line">  <span class="keyword">use</span> connection = factory.CreateConnection()</span><br><span class="line">  <span class="keyword">use</span> channel = connection.CreateModel()</span><br><span class="line">  channel.ExchangeDeclare(exchange = exchange, ``<span class="class"><span class="keyword">type</span>`` </span>= ExchangeType.Topic, durable = <span class="keyword">false</span>, autoDelete = <span class="keyword">false</span>, arguments = <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rand = Random()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> not token.IsCancellationRequested <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> data = rand.NextDouble()</span><br><span class="line">    <span class="keyword">let</span> message = sprintf <span class="string">"%f"</span> data</span><br><span class="line">    <span class="keyword">let</span> body = Encoding.UTF8.GetBytes(message)</span><br><span class="line">    printfn <span class="string">"publish: %s"</span> message</span><br><span class="line">    <span class="keyword">let</span> routingKey = <span class="keyword">if</span> int ((data * <span class="number">10.</span>)) % <span class="number">2</span> = <span class="number">0</span> </span><br><span class="line">                     <span class="keyword">then</span> routingKeys.[<span class="number">0</span>] </span><br><span class="line">                     <span class="keyword">else</span> routingKeys.[<span class="number">1</span>]</span><br><span class="line">    channel.BasicPublish(exchange = exchange, routingKey = routingKey, basicProperties = <span class="keyword">null</span>, body = body)</span><br><span class="line">    Thread.Sleep(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> consumer id hostname exchange routingKey (token: CancellationTokenSource) = async &#123;</span><br><span class="line">  <span class="keyword">let</span> factory = ConnectionFactory(HostName = hostname)</span><br><span class="line">  <span class="keyword">use</span> connection = factory.CreateConnection()</span><br><span class="line">  <span class="keyword">use</span> channel = connection.CreateModel()</span><br><span class="line">  channel.ExchangeDeclare(exchange = exchange, ``<span class="class"><span class="keyword">type</span>`` </span>= ExchangeType.Topic) <span class="comment">//, durable = false, autoDelete = false, arguments = null)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> queueName = channel.QueueDeclare().QueueName</span><br><span class="line">  channel.QueueBind(queue = queueName, exchange = exchange, routingKey = routingKey);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> consumer = EventingBasicConsumer(channel)</span><br><span class="line">  consumer.Received.AddHandler(<span class="keyword">new</span> EventHandler&lt;BasicDeliverEventArgs&gt;(<span class="keyword">fun</span> sender (data:BasicDeliverEventArgs) -&gt; </span><br><span class="line">    <span class="keyword">let</span> body = data.Body</span><br><span class="line">    <span class="keyword">let</span> message = Encoding.UTF8.GetString(body)</span><br><span class="line">    printfn <span class="string">"consumed [%s]: %A"</span> id message))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> consumeResult = channel.BasicConsume(queue = <span class="string">""</span>, autoAck = <span class="keyword">true</span>, consumer = consumer)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> not token.IsCancellationRequested <span class="keyword">do</span></span><br><span class="line">    Thread.Sleep(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> host = <span class="string">"localhost"</span></span><br><span class="line">  <span class="keyword">let</span> exchange = <span class="string">"topic_exchange"</span></span><br><span class="line">  <span class="keyword">let</span> routingKey0 = <span class="string">"all.even"</span></span><br><span class="line">  <span class="keyword">let</span> routingKey1 = <span class="string">"all.odd"</span></span><br><span class="line"></span><br><span class="line">  async &#123;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="keyword">new</span> CancellationTokenSource()</span><br><span class="line">    token.CancelAfter <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">    seq &#123; </span><br><span class="line">      (producer host exchange [routingKey0; routingKey1] token); </span><br><span class="line">      (consumer <span class="string">"0"</span> host exchange routingKey0 token);  </span><br><span class="line">      (consumer <span class="string">"1"</span> host exchange routingKey1 token);</span><br><span class="line">      (consumer <span class="string">"2"</span> host exchange <span class="string">"all.*"</span> token)  </span><br><span class="line">      (consumer <span class="string">"3"</span> host exchange <span class="string">"*.even"</span> token)  </span><br><span class="line">    &#125;</span><br><span class="line">    |&gt; Async.Parallel</span><br><span class="line">    |&gt; Async.RunSynchronously |&gt; ignore</span><br><span class="line">  &#125; |&gt; Async.RunSynchronously</span><br><span class="line"> </span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>The below results show consumers pulling their appropriately filtered messages.  Even messages are processed by consumers 0, 2, and 3.  Odd messages are processed by consumers 1 and 2.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">publish     : <span class="number">0.789320</span></span><br><span class="line">consumed [<span class="number">2</span>]: <span class="number">0.789320</span></span><br><span class="line">consumed [<span class="number">1</span>]: <span class="number">0.789320</span></span><br><span class="line">publish     : <span class="number">0.163861</span></span><br><span class="line">consumed [<span class="number">1</span>]: <span class="number">0.163861</span></span><br><span class="line">consumed [<span class="number">2</span>]: <span class="number">0.163861</span></span><br><span class="line">publish     : <span class="number">0.256774</span></span><br><span class="line">consumed [<span class="number">0</span>]: <span class="number">0.256774</span></span><br><span class="line">consumed [<span class="number">3</span>]: <span class="number">0.256774</span></span><br><span class="line">consumed [<span class="number">2</span>]: <span class="number">0.256774</span></span><br><span class="line">publish     : <span class="number">0.273446</span></span><br><span class="line">consumed [<span class="number">3</span>]: <span class="number">0.273446</span></span><br><span class="line">consumed [<span class="number">2</span>]: <span class="number">0.273446</span></span><br><span class="line">consumed [<span class="number">0</span>]: <span class="number">0.273446</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>This has been a quick overview in how RabbitMQ can be used with F#.  It really only touches the surface of what can be done.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today is a overview of how to use the &lt;a href=&quot;https://www.rabbitmq.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RabbitMQ&lt;/a&gt; message broker with &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  The RabbitMQ tutorials have a lot of great &lt;a href=&quot;https://www.rabbitmq.com/getstarted.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;getting started&lt;/a&gt; information.  Its .NET section focuses on C#, so I wanted to provide an F# angle to the general use cases.&lt;br&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Messaging" scheme="http://codesuji.com/tags/Messaging/"/>
    
  </entry>
  
  <entry>
    <title>Performance Profiling F#</title>
    <link href="http://codesuji.com/2019/10/13/F-Performance-Profiling/"/>
    <id>http://codesuji.com/2019/10/13/F-Performance-Profiling/</id>
    <published>2019-10-13T11:32:09.000Z</published>
    <updated>2019-10-14T13:28:54.121Z</updated>
    
    <content type="html"><![CDATA[<p>The release of .NET Core version 3 contains some exciting cross-platform profiling tools.  Today I’ll use some of the newly available tools to target problem areas and improve performance of my <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>-based library: FastDtw, as seen <a href="/2019/10/11/FastDtw">here</a>.</p><a id="more"></a><p>The new tooling that supports .NET Core profiling on Linux is a welcome addition.  It fills an important gap as the .NET ecosystem further improves support for non-Windows environments.  To easily be able to run the entire profilng stack on Linux is a joy.  This does require  at least <a href="https://dotnet.microsoft.com/download" target="_blank" rel="noopener">.NET Core version 3.0</a>.</p><p>To get started I need to add some global tooling.  I’ll add the trace tool for data capture and SpeedScope for data viewing.  <a href="https://www.speedscope.app/" target="_blank" rel="noopener">SpeedScope</a> has a website where you can upload traces if you prefer, but I generally like to run things locally if I can.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install --global dotnet-trace--version 3.0.47001</span><br><span class="line">npm install -g speedscope</span><br></pre></td></tr></table></figure><p>Fwiw, Microsoft has released several new tools.  Even though I will only focus on <code>trace</code> today, I want to mention the other ones, in case you want to look deeper into them.  Counters are for tracking live stats, and Dump is useful for application dumps and debugging.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install --global dotnet-counters --version 3.0.47001 </span><br><span class="line">dotnet tool install --global dotnet-dump --version 3.0.47001 </span><br></pre></td></tr></table></figure><p>Now that the basic tooling is installed, it is time to get started.  For this, I’ll put together a simple app that uses the library to profile.  Since I want to improve performance along the way, I’ll directly use the project source instead of the nuget package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang f# -n perf &amp;&amp; cd perf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ItemGroup&gt;</span><br><span class="line">  &lt;ProjectReference Include=&quot;..\src\FastDtw.fsproj&quot; /&gt;</span><br><span class="line">&lt;/ItemGroup&gt;</span><br></pre></td></tr></table></figure><p>For my purposes I don’t need anything fancy.  I will just loop infinitely, creating 2 randomly sized series to compare.  This will give me a steady process to perform a trace against.  I could’ve chosen anything really, but opt’d to compare a sin wave to a randomly altered sin wave.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> FastDtw</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rand = Random()</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">true</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> seriesLength = rand.Next(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">let</span> a = Array.init seriesLength (<span class="keyword">fun</span> x -&gt; Math.Sin(float x))</span><br><span class="line">    <span class="keyword">let</span> boffset = rand.NextDouble()</span><br><span class="line">    <span class="keyword">let</span> b = Array.init seriesLength (<span class="keyword">fun</span> x -&gt; boffset + Math.Sin(float x + rand.NextDouble()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> d = FastDtw.Distance a b <span class="number">2</span></span><br><span class="line">    ()</span><br><span class="line"></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>I’ll open 2 terminals: One to run my test, and another to profile.  First, <code>dotnet run</code> to get my simple app looping indefinitely.  Tracing is a multi-step process.  To start, I need to find it’s process id.  Once I have that I can starting tracing the process in question.  I also want to save it in a format that speedscope recognizes.  Once I have enough data I’ll stop the capture and do some analysis.  How much data is enough?  That will be problem dependent, but for this particular problem I’ll use about 20 seconds of data.  Once the capture is complete, the interesting part starts, looking at the provided profile using speedscope.  Running the below command will open the results in a browser.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet trace list-processes</span><br><span class="line">     14719 dotnet     /usr/share/dotnet/dotnet</span><br><span class="line">     14782 dotnet     /usr/share/dotnet/dotnet</span><br><span class="line">     14765 Perf       /home/jeff/projects/fastdtw/perf/bin/Debug/netcoreapp3.0/Perf</span><br><span class="line"></span><br><span class="line">$ dotnet trace collect --format speedscope -p 14765</span><br><span class="line"></span><br><span class="line">[00:00:00:00]Recording trace 581.00   (B)                             </span><br><span class="line">[00:00:00:00]Recording trace 592.00   (B)                             </span><br><span class="line">[00:00:00:00]Recording trace 5.275    (KB)                            </span><br><span class="line">...</span><br><span class="line">[00:00:00:21]Recording trace 735.465  (KB)                            </span><br><span class="line">[00:00:00:21]Recording trace 751.849  (KB)                            </span><br><span class="line">[00:00:00:21]Recording trace 761.382  (KB)                            </span><br><span class="line">Press &lt;Enter&gt; or &lt;Ctrl+C&gt; to exit...</span><br><span class="line"></span><br><span class="line">$ speedscope trace.speedscope.json</span><br></pre></td></tr></table></figure><p>As mentioned before, I am using <a href="https://www.speedscope.app/" target="_blank" rel="noopener">speedscope</a>, which is a flamegraph visualizer.  I have the data in the proper format, but if I didn’t, the trace tool comes with a conversion command as well, <code>dotnet trace convert trace.foo --format speedscope</code>.</p><p>My intention is not to make a speedscope tutorial, but it is useful to get some bearings.  The interface has 3 main views “Time Order”, “Left Heavy”, and “Sandwich”.  Time Order is representative of chronological time through the execution of the application, which isn’t interesting to me today.  Left Heavy groups function calls so it is easy to see which functions are taking the most time, and their respective callers.  “Sandwich” uses a percent time execution to find the big timesinks, but it also includes callers and callees, to help track the call stack a bit.  Depending on the view that is picked, additional detail is shown regarding the function in question.  I will primary leverage the last two views.</p><p><img src="/images/pe1/1-lefthand.png" alt="Initial Profile (Lefthand)"></p><p><br></p><p><img src="/images/pe1/1-sandwich.png" alt="Initial Profile (Sandwich)"></p><p>Looking at the above charts, it appears Array2D creation is unexpectedly taking a significant amount of time.  Looking into the code I see a frankly silly mistake.  I want to initialize the array with 0s, but for some reason I was using a lambda function instead of a straight initialization.  I don’t need the additional functionality of the lambda so this is a pretty obvious change.  As a sidenote, the <code>create</code> runs about 60% faster than <code>init</code> in my very informal tests.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OLD</span></span><br><span class="line"><span class="keyword">let</span> path = Array2D.init (n+<span class="number">1</span>) (m+<span class="number">1</span>) (<span class="keyword">fun</span> _ _ -&gt; <span class="number">0.</span>)</span><br><span class="line"><span class="comment">// NEW</span></span><br><span class="line"><span class="keyword">let</span> path = Array2D.create (n+<span class="number">1</span>) (m+<span class="number">1</span>) <span class="number">0.</span></span><br></pre></td></tr></table></figure><p><img src="/images/pe1/2-lefthand.png" alt="Profile (Lefthand)"></p><p>I now rerun my test with the newly enhanced code to find another area of contention in the <code>coarser</code> function.  Here is another interesting find, apparently a stepped population of an array triggers an underlying list creation, which carries with it some additional overhead.  Initializing the array differently is about 10 times faster than the <code>[| a .. s .. b |]</code>.  I think the original code is a bit more intuitive, but the change is worth the performance boost.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OLD</span></span><br><span class="line">[|<span class="number">0</span> .. <span class="number">2</span> .. series.Length - <span class="number">1</span>|]</span><br><span class="line"><span class="comment">// NEW</span></span><br><span class="line">(Array.init ((series.Length + <span class="number">1</span>) / <span class="number">2</span>) (<span class="keyword">fun</span> i -&gt; i * <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/pe1/3-lefthand.png" alt="Profile (Lefthand)"></p><p>In the next profiling run, I see calls being dominated by my <code>InWindow</code> functions.  Internally they mostly use <code>match</code> against an option type.  Turns out using a straight <code>If x.IsSome then ... else ...</code> is about 3 times faster than the equivalent <code>match</code>.  I will admit, I have a tendancy to over-use match, this is a good reminder to be more careful and ensure the usecase makes sense.  This brings up another rework, the <code>travelledPath</code> function I have for backtracking the path used by the algorithm for determining distance between the series.  In retrospect I overthought things.  I won’t show the before/after code because it’s a larger rewrite.  I was able to simplify and make the function faster, ironically removing a several match option calls that initially pointed me this way.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Old</span></span><br><span class="line"><span class="keyword">match</span> windows <span class="keyword">with</span></span><br><span class="line">| Some(w) -&gt; calculateDtwWithWindow series1 series2 w</span><br><span class="line">| None    -&gt; calculateDtwWithWindow series1 series2 [<span class="number">1</span>, series1.Length, <span class="number">1</span>, series2.Length]</span><br><span class="line"><span class="comment">// New</span></span><br><span class="line"><span class="keyword">if</span> windows.IsSome</span><br><span class="line"><span class="keyword">then</span> calculateDtwWithWindow series1 series2 windows.Value</span><br><span class="line"><span class="keyword">else</span> calculateDtwWithWindow series1 series2 [<span class="number">1</span>, series1.Length, <span class="number">1</span>, series2.Length]</span><br></pre></td></tr></table></figure><p><img src="/images/pe1/4-lefthand.png" alt="Profile (Lefthand)"></p><p>This is where I come to an end for now.  I allocated myself a limited amount of weekend time for this.  It looks like the next big enhancement is to remove a list usage, but the implications of that change are larger than I’m willing to take on in my current timeframe.  I will mark this away as a future enhancement.  I’m pretty happy with what I found, with not that much effort.  The new <em>dotnet trace</em> tool, in combination with <em>speedscope</em>, has proven to be very useful in quick profiling iterations on Linux.  Now that the optimizations are complete, it would be nice to see a before/after comparison.  For this I’ll use BenchmarkDotNet for some comparative analysis.  After putting together a quick benchmark app, here are the results.  Running on a couple different series sizes, I see about a 25% to 30% performance boost.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|     Method | SeriesSize |           Mean |         Error |        StdDev |     Gen 0 |     Gen 1 |     Gen 2 |  Allocated |</span><br><span class="line">|----------- |----------- |---------------:|--------------:|--------------:|----------:|----------:|----------:|-----------:|</span><br><span class="line">| OldFastDtw |         10 |       9.898 us |     0.0470 us |     0.0440 us |    5.0354 |         - |         - |    7.73 KB |</span><br><span class="line">| NewFastDtw |         10 |       7.912 us |     0.0436 us |     0.0387 us |    3.9215 |         - |         - |    6.01 KB |</span><br><span class="line">| OldFastDtw |        100 |     186.328 us |     0.6261 us |     0.5856 us |  106.9336 |         - |         - |  166.79 KB |</span><br><span class="line">| NewFastDtw |        100 |     147.231 us |     0.6857 us |     0.6414 us |   95.2148 |         - |         - |  149.78 KB |</span><br><span class="line">| OldFastDtw |       1000 |   9,935.868 us |   189.7567 us |   210.9141 us | 1062.5000 |  765.6250 |  687.5000 |  602.67 KB |</span><br><span class="line">| NewFastDtw |       1000 |   7,337.256 us |   142.6234 us |   133.4100 us | 1085.9375 |  835.9375 |  804.6875 |  446.54 KB |</span><br><span class="line">| OldFastDtw |      10000 | 877,853.287 us | 6,475.0945 us | 6,056.8074 us | 5000.0000 | 4000.0000 | 4000.0000 | 5976.72 KB |</span><br><span class="line">| NewFastDtw |      10000 | 644,914.650 us | 2,543.4351 us | 2,379.1308 us | 3000.0000 | 3000.0000 | 3000.0000 | 4208.01 KB |</span><br></pre></td></tr></table></figure><p>This is all the performance tuning I have for today.  My goal was to find some easy wins, and I did that.  It has been a nice little project to kick the new performance tooling tires.  I hope you’ve also found this interesting and I encourage you to check them out.  I think you’ll find they are a nice addition to the toolkit.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The release of .NET Core version 3 contains some exciting cross-platform profiling tools.  Today I’ll use some of the newly available tools to target problem areas and improve performance of my &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;-based library: FastDtw, as seen &lt;a href=&quot;/2019/10/11/FastDtw&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="DTW" scheme="http://codesuji.com/tags/DTW/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
      <category term="Performance" scheme="http://codesuji.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>FastDtw, an F# Implementation</title>
    <link href="http://codesuji.com/2019/10/11/FastDtw/"/>
    <id>http://codesuji.com/2019/10/11/FastDtw/</id>
    <published>2019-10-12T01:19:42.000Z</published>
    <updated>2019-10-13T02:11:00.886Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s post is a short introduction into using FastDtw for Dynamic Time Warping analysis.  Specifically it is a quick introduction to using my newly released FastDtw package.</p><a id="more"></a><p>Dynamic Time Warping (DTW) can be a useful tool when comparing signals or series while adjusting for frequency variance.  One downside to the standard algorithm is it can be expensive.  There are many ways to mitigate the cost, FastDtw is one of them.  While other methods typically hard-cap parameters on the search space, FastDtw provides a dynamic approach to reducing the search space while maintaining a higher level of accuracy.  In this post I’ll discuss the usage of my <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> package implementation of the <a href="https://cs.fit.edu/~pkc/papers/tdm04.pdf" target="_blank" rel="noopener">FastDtw: Toward Accurate Dynamic Time Warping in Linear Time and Space</a> paper.  For those interested in the details, it is a pretty accessible paper.  FastDtw is technically an approximation, but its flexible pathing strategy provides good results with some significant performance improvements over basic DTW. </p><p>To get started, you will need to have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core</a> installed.  Once this is complete the application can be setup.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang F# -n BitCoinTrends </span><br><span class="line">cd BitCoinThrends</span><br><span class="line">dotnet add package FastDtw</span><br></pre></td></tr></table></figure><p>As always, there is some basic setup.  I’ll include <code>FastDtw</code> (obviously), and a charting library for some series comparison visualizations.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FastDtw</span><br><span class="line"><span class="keyword">open</span> XPlot.GoogleCharts</span><br></pre></td></tr></table></figure><p>The example will take a csv of Bitcoin/USD conversion values and transform it into a list of datasets broken down by month.  The file is a 2010-2019 data download from <a href="https://finance.yahoo.com/quote/BTC-USD/history?p=BTC-USD" target="_blank" rel="noopener">Yahoo Finance</a>.  The format can be seen below, for today’s purposes I only care about the Data and Close fields. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date,Open,High,Low,Close,Adj Close,Volume</span><br><span class="line">2010-07-17,0.049510,0.049510,0.049510,0.049510,0.049510,0</span><br></pre></td></tr></table></figure><p>I want to break the file into datasets by month.  Since this is just a small script I’ll make a mini file processing pipeline to group and normalize the data by converting to a percentage of the previous day.  This improves comparisons, especially with something as volatile as bitcoin. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="comment">// Convert file to month-group datasets</span></span><br><span class="line">  <span class="keyword">let</span> dataSets =</span><br><span class="line">    File.ReadLines(<span class="string">"data/BTC-USD.csv"</span>)</span><br><span class="line">    |&gt; Seq.skip <span class="number">1</span> <span class="comment">// header</span></span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> line -&gt;</span><br><span class="line">      <span class="comment">// Convert line to desired tuple</span></span><br><span class="line">      <span class="keyword">let</span> columns = line.Split ','</span><br><span class="line">      <span class="keyword">let</span> month = DateTime.Parse(columns.[<span class="number">0</span>]).ToString(<span class="string">"yyyy-MM"</span>)</span><br><span class="line">      <span class="keyword">let</span> closing = float (columns.[<span class="number">4</span>])</span><br><span class="line">      (month, closing))</span><br><span class="line">    |&gt; Seq.groupBy fst <span class="comment">// groupby month </span></span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> (month, closingData) -&gt; </span><br><span class="line">      <span class="comment">// Aggregate grouped rows into their respective arrays</span></span><br><span class="line">      <span class="keyword">let</span> data = </span><br><span class="line">        closingData </span><br><span class="line">        |&gt; Seq.map snd <span class="comment">// extract closing</span></span><br><span class="line">        |&gt; Seq.mapFold (<span class="keyword">fun</span> (a: float option) x -&gt; </span><br><span class="line">          <span class="comment">// Convert closing values to % change from previous day</span></span><br><span class="line">          <span class="keyword">if</span> a.IsSome <span class="keyword">then</span> (x / a.Value, Some x) <span class="keyword">else</span> (<span class="number">0.</span>, Some x)) None</span><br><span class="line">        |&gt; fst</span><br><span class="line">        |&gt; Seq.toArray</span><br><span class="line"></span><br><span class="line">      (month, data))</span><br></pre></td></tr></table></figure><p>Once the datasets are loaded, it is time to see which month most closely mirrors the trend of 9/2019.  For all the other code in this post, this is really the highlight: <code>let distance = FastDtw.Distance targetData data radius</code>.  This is where the comparison happens.  Radius allows a configurable level of accuracy.  It controls the per point search space as the series are compared.  In most cases, distance is all that matters, but there are times when how the series match up can be useful.  The <code>DistanceWithPath</code> function provides the series’ indexes that pair together.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> targetMonth = <span class="string">"2019-09"</span></span><br><span class="line"><span class="keyword">let</span> radius = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> targetData =</span><br><span class="line">  dataSets</span><br><span class="line">  |&gt; Seq.filter (<span class="keyword">fun</span> (month, _) -&gt; month = targetMonth)</span><br><span class="line">  |&gt; Seq.head</span><br><span class="line">  |&gt; snd</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> compares = </span><br><span class="line">  dataSets</span><br><span class="line">  |&gt; Seq.filter (<span class="keyword">fun</span> (month, _) -&gt; month &lt;&gt; targetMonth) <span class="comment">// skip target</span></span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (month, data)-&gt;</span><br><span class="line">    <span class="keyword">let</span> distance = FastDtw.Distance targetData data radius</span><br><span class="line">    (month, distance, data))</span><br><span class="line">  |&gt; Seq.sortBy snd3 <span class="comment">// Sort by compare result</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> randomData =</span><br><span class="line">  compares</span><br><span class="line">  |&gt; Seq.skip (Random().Next(Seq.length compares))</span><br><span class="line">  |&gt; Seq.head</span><br></pre></td></tr></table></figure><p>Once the comparisons have been completed, it is time to show some comparison charts.  I print out the top couple matches as well as a random match.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> showChart targetData compareData title seriesName =</span><br><span class="line">  <span class="keyword">let</span> dataToChartData data =</span><br><span class="line">    data </span><br><span class="line">    |&gt; Array.skip <span class="number">1</span> <span class="comment">// skip first entry (always 0)</span></span><br><span class="line">    |&gt; Array.mapi (<span class="keyword">fun</span> i x -&gt; (i, x)) </span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> targetChartData = targetData |&gt; dataToChartData</span><br><span class="line">  <span class="keyword">let</span> compareChartData = compareData |&gt; thd3 |&gt; dataToChartData</span><br><span class="line"></span><br><span class="line">  [targetChartData; compareChartData]</span><br><span class="line">  |&gt; Chart.Combo</span><br><span class="line">  |&gt; Chart.WithOptions (Options(title = sprintf <span class="string">"%s (%s)"</span> title (fst3 compareData), </span><br><span class="line">                                series = [| Series(<span class="string">"line"</span>); Series(<span class="string">"line"</span>) |]))</span><br><span class="line">  |&gt; Chart.WithLabels [<span class="string">"Target"</span>; seriesName ]</span><br><span class="line">  |&gt; Chart.WithLegend <span class="keyword">true</span></span><br><span class="line">  |&gt; Chart.WithSize (<span class="number">700</span>, <span class="number">250</span>)</span><br><span class="line">  |&gt; Chart.Show</span><br><span class="line"></span><br><span class="line">showChart targetData randomData <span class="string">"% Daily Change Comparison"</span> <span class="string">"Random Match"</span></span><br><span class="line"></span><br><span class="line">compares</span><br><span class="line">|&gt; Seq.take <span class="number">5</span></span><br><span class="line">|&gt; Seq.iteri (<span class="keyword">fun</span> i x -&gt;</span><br><span class="line">  showChart targetData x <span class="string">"% Daily Change Comparison"</span> (sprintf <span class="string">"Match %d"</span> i))</span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>Once the code is in place, it is time to look at some of the results.  It is useful to not only see a good match, but an average match.  This helps with the contrast.  There is no guarantee there will be a good match, but of the months provided, 2012-10 isn’t a bad match to 2019-09, especially considering what a random match can produce.  If you squint a bit, you even can see the portions of similar trends over a month, if only the elapsed time and amplitude is different.</p><p><img src="/images/fastdtw1/best.png" alt="Best Match"></p><p><img src="/images/fastdtw1/second.png" alt="Second-Best Match"></p><p><img src="/images/fastdtw1/random.png" alt="Random Match"></p><p>Beyond the example, it is useful to see some of the performance differences with the stock DTW algorithm.  For this I setup a quick BenchmarkDotNet test.  The below results show the performance benefits.  FastDtw is a multi-pass algorithm, so it’s not surprising that on very short series it’s overhead makes it slower.  Comparisons for larger series get anywhere from 65% - 70% faster.  One possible downside of the current implementation is more allocations, thus the extra GC events.  This is one of those cases where the allocations can be reduced with a bit of refactoring, so this looks like a good place for future optimizations. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|  Method | SeriesSize |             Mean |         Error |        StdDev |     Gen 0 |     Gen 1 |     Gen 2 |  Allocated |</span><br><span class="line">|-------- |----------- |-----------------:|--------------:|--------------:|----------:|----------:|----------:|-----------:|</span><br><span class="line">|     dtw |         10 |         3.555 us |     0.0198 us |     0.0175 us |    1.8654 |         - |         - |    2.86 KB |</span><br><span class="line">| fastDtw |         10 |         7.936 us |     0.0357 us |     0.0334 us |    3.9215 |         - |         - |    6.01 KB |</span><br><span class="line">|     dtw |        100 |       210.675 us |     0.5531 us |     0.5174 us |   59.0820 |         - |         - |   94.99 KB |</span><br><span class="line">| fastDtw |        100 |       145.968 us |     0.6435 us |     0.5704 us |   94.9707 |         - |         - |  149.76 KB |</span><br><span class="line">|     dtw |       1000 |    20,856.656 us |    66.5105 us |    58.9598 us |  593.7500 |  500.0000 |  500.0000 |  148.99 KB |</span><br><span class="line">| fastDtw |       1000 |     7,392.059 us |   137.4944 us |   135.0379 us | 1109.3750 |  828.1250 |  820.3125 |  446.05 KB |</span><br><span class="line">|     dtw |      10000 | 2,082,283.166 us | 3,328.7961 us | 2,950.8911 us |         - |         - |         - | 1483.73 KB |</span><br><span class="line">| fastDtw |      10000 |   653,825.530 us | 4,111.5875 us | 3,845.9815 us | 3000.0000 | 3000.0000 | 3000.0000 |  4134.2 KB |</span><br></pre></td></tr></table></figure><p>This has been a quick introduction into the FastDtw package.  I hope you’ve enjoyed this. Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s post is a short introduction into using FastDtw for Dynamic Time Warping analysis.  Specifically it is a quick introduction to using my newly released FastDtw package.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Dynamic Time Warping" scheme="http://codesuji.com/tags/Dynamic-Time-Warping/"/>
    
      <category term="Dtw" scheme="http://codesuji.com/tags/Dtw/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.NET Regression</title>
    <link href="http://codesuji.com/2019/09/14/F-and-MLNet-Regression-V2/"/>
    <id>http://codesuji.com/2019/09/14/F-and-MLNet-Regression-V2/</id>
    <published>2019-09-14T11:23:03.000Z</published>
    <updated>2019-09-16T23:47:19.713Z</updated>
    
    <content type="html"><![CDATA[<p>Today I’ll look at using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a> to perform some model building.  Specifically to predict concrete compressive strength based on its composite ingredients.  If this sounds familiar, it is.  This is a revisit of a previous <a href="/2018/06/09/F-and-MLNet-Regression/">post</a> that explored a beta version of ML.NET.  This time around, the version 1 interface will be used.</p><a id="more"></a><p>It has been on my list for awhile to revisit the ML.NET beta posts to see how things have changed as well as get a good example of code in the new, now version 1, world.  Here I’ll be looking at the <a href="/2018/06/09/F-and-MLNet-Regression/">Regression</a> post from last year.  The original plan was to perform a closer analysis of how things have changed over time.  But the reality is so much has changed that a line by line comparison won’t provide much value.  Instead, I’ve decided to just redo the post using ML.NET version 1.3 and show some interesting points along the way.  Before getting into it, the experience was definitely better this time around.  The improvements are obvious and I have been pleased with the progression the ML.NET team has made over time.  Without further adieu, make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a> installed.  If you don’t, head out to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and the <code>.NET Core SDK</code>.</p><p>Create the project and add the necessary ML.NET packages.  This will be a console app in F# (obviously).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang F# -n MLNetConcreteV2</span><br><span class="line">cd MLNetConcreteV2</span><br><span class="line">dotnet add package Microsoft.ML --version 1.3</span><br><span class="line">dotnet add package Microsoft.ML.FastTree --version 1.3</span><br></pre></td></tr></table></figure><p>Before getting into the code, I first need to get the data.  The source used is from <a href="https://archive.ics.uci.edu/ml/datasets/Concrete+Compressive+Strength" target="_blank" rel="noopener">UCI</a>.  The dataset is an Excel file (xls), and it needs to be a csv.  I used <code>ssconvert</code> (from <code>apt install gnumeric</code>) to convert from Excel to CSV, but feel free to use whatever works for you.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls</span><br><span class="line">ssconvert Concrete_Data.xls Concrete_Data.csv</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is a header row, I’ve transposed this to a vertical list for readablity.  The first 8 columns are features, the last is the concrete compressive strength.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Header Row</span><br><span class="line">Cement (component 1)(kg in a m^3 mixture)</span><br><span class="line">Blast Furnace Slag (component 2)(kg in a m^3 mixture)</span><br><span class="line">Fly Ash (component 3)(kg in a m^3 mixture)</span><br><span class="line">Water  (component 4)(kg in a m^3 mixture)</span><br><span class="line">Superplasticizer (component 5)(kg in a m^3 mixture)</span><br><span class="line">Coarse Aggregate  (component 6)(kg in a m^3 mixture)</span><br><span class="line">Fine Aggregate (component 7)(kg in a m^3 mixture)</span><br><span class="line">Age (day)</span><br><span class="line">Concrete compressive strength(MPa, megapascals)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">540,0,0,162,2.5,1040,676,28,79.98611076</span><br><span class="line">540,0,0,162,2.5,1055,676,28,61.887365759999994</span><br><span class="line">332.5,142.5,0,228,0,932,594,270,40.269535256000005</span><br><span class="line">332.5,142.5,0,228,0,932,594,365,41.052779992</span><br></pre></td></tr></table></figure><p>Now that the project is setup and data is local, there is some foundational code that needs created.  F# can use record types for specifying the data format.  The <code>ConcreteData</code> record is effectively a file definition.  ML.NET requires the <code>LoadColumn</code> attribute for column mappings used during the dataload phase. The <code>ConcretePrediction</code> record is for prediction results.  Once the datatypes are setup, an <code>MLContext</code> object must be created. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ConcreteData</span> </span>= &#123;</span><br><span class="line">  <span class="meta">[&lt;LoadColumn(0)&gt;]</span></span><br><span class="line">  Cement: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(1)&gt;]</span></span><br><span class="line">  Slag: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(2)&gt;]</span></span><br><span class="line">  Ash: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(3)&gt;]</span></span><br><span class="line">  Water: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(4)&gt;]</span></span><br><span class="line">  Superplasticizer: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(5)&gt;]</span></span><br><span class="line">  CoarseAggregate: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(6)&gt;]</span></span><br><span class="line">  FineAggregate: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(7)&gt;]</span></span><br><span class="line">  Age: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(8)&gt;]</span></span><br><span class="line">  Label: float32</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ConcretePrediction</span> </span>= &#123;</span><br><span class="line">  Score: float32</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> context = MLContext()</span><br></pre></td></tr></table></figure><p>Data loading is a reasonably simple process.  I will use all of the data, but if I wanted to filter data, there is a <code>FilterRowsByColumn</code> method to exclude data, perhaps known bad data or outliers.  Additionally, there is a need for training and test datasets.  ML.NET provides a convenient <code>TrainTestSplit</code> method to generate those datasets.  Here I will take 10% of the records for a test set. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"./data/Concrete_Data.csv"</span></span><br><span class="line"><span class="keyword">let</span> allData = </span><br><span class="line">  context</span><br><span class="line">    .Data</span><br><span class="line">    .LoadFromTextFile&lt;ConcreteData&gt;(</span><br><span class="line">      path = dataPath,</span><br><span class="line">      hasHeader = <span class="keyword">true</span>,</span><br><span class="line">      separatorChar = ',')</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filteredData = context.Data.FilterRowsByColumn(allData, <span class="string">"Slag"</span>, lowerBound = <span class="number">50.</span>, upperBound = <span class="number">100.</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> allDataSplit = context.Data.TrainTestSplit(allData, testFraction = <span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">let</span> trainData = allDataSplit.TrainSet</span><br><span class="line"><span class="keyword">let</span> testData = allDataSplit.TestSet</span><br></pre></td></tr></table></figure><p>Time to build the data pipeline.  There are a couple things to look at here.  Multiple transformation actions will be applied to the data.  <code>Concatenate</code> provides a mechanism to build an aggregate field, specifically <code>Features</code>.  I also don’t want to take the data raw, I want to apply a normalization method against the columns to improve the prediction results.  To keep it simple, I am applying <code>NormalizeMeanVariance</code> to all of the targeted fields.  To do it right I should be more rigorous about my transformation choices.  Other possible normalization methods are <code>NormalizeLogMeanVariance</code>, <code>NormalizeLpNorm</code>, <code>NormalizeMinMax</code>, to name a few.  The data is already in numeric form, but if there were text fields, there are transformation methods for that as well.  An example of this could be: <code>Transforms.Categorical.OneHotEncoding(&quot;CementBrandName&quot;, &quot;CementBrandId&quot;)</code>.  I’ve only touched the surface on data transformation options, but there is generally something there for your specific needs.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pipeline = </span><br><span class="line">  EstimatorChain()</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Cement"</span>, <span class="string">"Cement"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Slag"</span>, <span class="string">"Slag"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Ash"</span>, <span class="string">"Ash"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Water"</span>, <span class="string">"Water"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Superplasticizer"</span>, <span class="string">"Superplasticizer"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"CoarseAggregate"</span>, <span class="string">"CoarseAggregate"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"FineAggregate"</span>, <span class="string">"FineAggregate"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Age"</span>, <span class="string">"Age"</span>))</span><br><span class="line">    .Append(context.Transforms.Concatenate(<span class="string">"Features"</span>, [|<span class="string">"Cement"</span>; <span class="string">"Slag"</span>; <span class="string">"Ash"</span>; <span class="string">"Water"</span>; <span class="string">"Superplasticizer"</span>; <span class="string">"CoarseAggregate"</span>; <span class="string">"FineAggregate"</span>; <span class="string">"Age"</span>|]))</span><br></pre></td></tr></table></figure><p>Once the data pipeline is configured, it is time to build a model trainer.  Again, ML.NET offers multiple options for training methods.  For the example I use <code>FastTreeTweedie</code> with no parameters.  Hyperparameter options are available for many of the trainers.  I show some additional examples of how to implement alternative trainers with and without hyperparameters.  Once the trainer is defined, it is appended to the pipeline.  Now is the time to create a trained model using <code>Fit</code> against the previously defined training data.  There is one last piece to make this process useful, the prediction engine.  This provides the mechanism to actually perform predictions.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> trainer = context.Regression.Trainers.FastTreeTweedie()</span><br><span class="line"></span><br><span class="line"><span class="comment">// FastTreeRegressor with hyperparameters</span></span><br><span class="line"><span class="keyword">let</span> trainer = context.Regression.Trainers.FastTreeTweedie(numberOfTrees = <span class="number">500</span>, minimumExampleCountPerLeaf = <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OnlineGradientDescent </span></span><br><span class="line"><span class="keyword">let</span> trainer = context.Regression.Trainers.OnlineGradientDescent(labelColumnName = <span class="string">"Label"</span>, featureColumnName = <span class="string">"Features"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> modelBuilder = pipeline.Append(trainer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> model = modelBuilder.Fit(trainData) </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionEngine = context.Model.CreatePredictionEngine&lt;ConcreteData,ConcretePrediction&gt;(model)</span><br></pre></td></tr></table></figure><p>The next step is to see how good of a model has been built.  The trained model is now applied to the test data, and performance metrics are extracted.  I cherry-picked a couple of the available metrics. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> predictions = model.Transform(testData)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> metrics = context.Regression.Evaluate(predictions)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"R-Squared: %f"</span> (metrics.RSquared)</span><br><span class="line">printfn <span class="string">"RMS      : %f"</span> (metrics.RootMeanSquaredError)</span><br><span class="line">printfn <span class="string">"Loss     : %f"</span> (metrics.LossFunction)</span><br><span class="line">printfn <span class="string">"MAE      : %f"</span> (metrics.MeanAbsoluteError)</span><br><span class="line">printfn <span class="string">"MSE      : %f"</span> (metrics.MeanSquaredError)</span><br></pre></td></tr></table></figure><p>Here are the evaluation metrics for the test data run.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">R-Squared: 0.920959</span><br><span class="line">RMS      : 4.875440</span><br><span class="line">Loss     : 23.769913</span><br><span class="line">MAE      : 2.682631</span><br><span class="line">MSE      : 23.769913</span><br></pre></td></tr></table></figure><p>The trained model is now something that can be used against data.  I pulled one of the rows from the data just to show how this is put together.  Again, I can use a record type to define the data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = &#123;</span><br><span class="line">  Cement = <span class="number">198.6</span>f</span><br><span class="line">  Slag = <span class="number">132.4</span>f</span><br><span class="line">  Ash = <span class="number">0.</span>f</span><br><span class="line">  Water = <span class="number">192.</span>f</span><br><span class="line">  Superplasticizer = <span class="number">0.</span>f</span><br><span class="line">  CoarseAggregate = <span class="number">978.4</span>f</span><br><span class="line">  FineAggregate = <span class="number">825.5</span>f</span><br><span class="line">  Age = <span class="number">90.</span>f</span><br><span class="line">  Label =  <span class="number">0.</span>f</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionTest1 = predictionEngine.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted Strength: %f"</span> predictionTest1.Score</span><br><span class="line">printfn <span class="string">"Actual Strength   : 38.074243671999994"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Predicted Strength: 39.541660</span><br><span class="line">Actual Strength   : 38.074243671999994</span><br></pre></td></tr></table></figure><p>A trained model isn’t much use if it can’t be passed around and used elsewhere.  That is where the ML.NET model save and load methods come into play.  They are both straight forward to use, what I’ve come to expect.  The same prediction as above is run, but this time on a model loaded from a file.  The circle is complete.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line">context.Model.Save(model, trainData.Schema, <span class="string">"model.zip"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file</span></span><br><span class="line"><span class="keyword">let</span> (modelReloaded, schemaReloaded) = context.Model.Load(<span class="string">"model.zip"</span>)</span><br><span class="line"><span class="keyword">let</span> predictionEngineReloaded = context.Model.CreatePredictionEngine&lt;ConcreteData,ConcretePrediction&gt;(modelReloaded)</span><br><span class="line"><span class="keyword">let</span> predictionReloaded = predictionEngineReloaded.Predict(test1)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"Predicted Strength RL: %f"</span> predictionReloaded.Score</span><br><span class="line">printfn <span class="string">"Actual Strength      : 38.074243671999994"</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Predicted Strength RL: 39.541660</span><br><span class="line">Actual Strength      : 38.074243671999994</span><br></pre></td></tr></table></figure><p>It has been nice to revisit an old dataset and method, but with the newest ML.NET.  The ergonomics and functionality have certainly improved over time.  This bodes well for the future as they continue to release and improve functionality.  I hope you have found this useful as well, and perhaps enticed you to investigate ML.NET and F# for yourself.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I’ll look at using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt; to perform some model building.  Specifically to predict concrete compressive strength based on its composite ingredients.  If this sounds familiar, it is.  This is a revisit of a previous &lt;a href=&quot;/2018/06/09/F-and-MLNet-Regression/&quot;&gt;post&lt;/a&gt; that explored a beta version of ML.NET.  This time around, the version 1 interface will be used.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>Nyquist Keyboard Build</title>
    <link href="http://codesuji.com/2019/08/14/Nyquist-Keyboard/"/>
    <id>http://codesuji.com/2019/08/14/Nyquist-Keyboard/</id>
    <published>2019-08-14T22:14:16.000Z</published>
    <updated>2019-08-15T02:29:02.108Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s topic is my most recent keyboard build, the <a href="https://keeb.io/" target="_blank" rel="noopener">keebio</a> Nyquist.  I had so much fun building my <a href="/2019/05/12/Iris-Keyboard/">Iris</a>, it was a good excuse to make a second so I can have a sweet keyboard at home and work.</p><a id="more"></a><p>Here is the final result, equipped with Gateron red switches and SA keycaps.  For those who might be interested doing a build themselves, keebio provides a thorough <a href="https://docs.keeb.io/nyquist-build-guide/" target="_blank" rel="noopener">Build Guide</a>.  Note, this is the same that I used for my previous Iris build.  From a general perspective, they are very similar keyboards, the bottom row format is oriented differently and the Nyquist just has a couple addtional keys. </p><p><img src="/images/nyquist1/final.jpg" alt="Nyquist - final result"></p><p>If you’re curious about the key mapping, checkout my <a href="/2019/05/12/Iris-Keyboard/#keymap">Iris Build</a>.  I kept the same mappings, with a couple exceptions. Esc, Print Screen, and Alt have been moved to the bottom left row.  Arrow keys were added on the bottom right row.  I thought I’d use dedicated arrow keys more, but they have been pretty much untouched.  Additionally, I prefer the new esc location; on the Iris’ thumbpad hasn’t been as convenient as I expected.</p><p>Beyond the stock keyboard build there are a couple custom components.  I only bought top and bottom plates, so I 3d-printed the case and stands to match my desired typing angle.  I designed them using <a href="http://www.openscad.org/" target="_blank" rel="noopener">OpenSCAD</a>.  The stl files are here: <a href="/images/nyquist1/case.stl">case</a> and <a href="/images/nyquist1/stand.stl">stand</a>.  My printer bed isn’t big enough for the case in one piece.  Since it’s symmetric the stl is half the case and I just mirrored it in <a href="https://ultimaker.com/software/ultimaker-cura" target="_blank" rel="noopener">Cura</a> for the other half.  Keeping with the purple/green color theme, I built the TRRS and USB cables to match, I think they really pull the whole thing together.</p><p>As a bonus, I’ve included a couple build process images.</p><p><img src="/images/nyquist1/final2.jpg" alt="Nyquist - final result"></p><p><img src="/images/nyquist1/stands.jpg" alt="Stands"></p><p><img src="/images/nyquist1/mounted_switches.jpg" alt="Mounted Switches"></p><p><img src="/images/nyquist1/pro_micro.jpg" alt="Mounted ProMicros"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s topic is my most recent keyboard build, the &lt;a href=&quot;https://keeb.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;keebio&lt;/a&gt; Nyquist.  I had so much fun building my &lt;a href=&quot;/2019/05/12/Iris-Keyboard/&quot;&gt;Iris&lt;/a&gt;, it was a good excuse to make a second so I can have a sweet keyboard at home and work.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Keyboard" scheme="http://codesuji.com/tags/Keyboard/"/>
    
  </entry>
  
  <entry>
    <title>Fable and Cordova, a Mobile Story</title>
    <link href="http://codesuji.com/2019/06/18/Fable-and-Cordova/"/>
    <id>http://codesuji.com/2019/06/18/Fable-and-Cordova/</id>
    <published>2019-06-18T23:24:02.000Z</published>
    <updated>2019-06-19T22:19:52.620Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s article will look at combining <a href="https://fable.io/" target="_blank" rel="noopener">Fable</a> and <a href="https://cordova.apache.org/" target="_blank" rel="noopener">Cordova</a> to make a mobile application.  For those not familar with these projects, a little context may be helpful.  Fable compiles F# to Javascript and Cordova facilitates mobile app development using HTML and Javascript.  Throw in some <a href="https://elmish.github.io/" target="_blank" rel="noopener">Elmish</a>, and its a party.  Joining these technologies provides some unique possibilities.  Specifically this is an interesting way to leverage <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> for mobile development.  </p><a id="more"></a><p>The goal will be to make a very simple hello world mobile app.  There are a couple steps to get there, none of which are too complicated.  To follow along, you will need the following prerequisites.  Make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core</a> and <a href="https://nodejs.org/en/" target="_blank" rel="noopener">NodeJs</a> installed.  Next, Cordova must be installed: <code>npm install -g cordova</code>.  Now that the building blocks are installed, it is time to get started.</p><p>First, the Cordova project will be created and initialized with the supported platforms.  <code>browser</code> is useful for the development process, while <code>android</code> is the real target.  If you’re of an iOS leaning, it can be the mobile target instead, or as an addition.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cordova create HelloWorld</span><br><span class="line">cd HelloWorld</span><br><span class="line">cordova platform add browser</span><br><span class="line">cordova platform add android</span><br><span class="line"># For iOS support: cordova platform add ios </span><br></pre></td></tr></table></figure><p>Second, the Fable part of the project needs created. From inside the main project, create a new F# app and add the basic Fable requirements.  The requirements come in two parts: dotnet and javascript.  For this sample app this will be all that is needed, although a fuller functional app may have more dependencies.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang F# -n App</span><br><span class="line">cd App</span><br><span class="line">dotnet add package Fable.Core</span><br><span class="line">dotnet add package Fable.Elmish.React</span><br></pre></td></tr></table></figure><p>In the main project directory add the javascript dependencies.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install fable-compiler --save</span><br><span class="line">npm install fable-loader --save</span><br><span class="line">npm install @babel/core --save</span><br><span class="line">npm install react --save</span><br><span class="line">npm install react-dom --save</span><br></pre></td></tr></table></figure><p>Third, it is time to wire the projects together, which is where webpack enters the picture.  The Fable sample project already uses webpack, the config just needs some adjustments in order to publish the results to cordova (instead of a website).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack  --save</span><br><span class="line">npm install webpack-cli  --save</span><br></pre></td></tr></table></figure><p>In the main project directory, webpack needs a config file <code>webpack.config.js</code> file with the following contents.  This tells webpack to process the newly create F# app project, and use the fable-loader to process files.  The destination bundle file generated is placed in Cordova’s <code>www/js</code> directory.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  entry: <span class="string">"./App/App.fsproj"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">"./www/js"</span>),</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.fs(x|proj)?$/</span>,</span><br><span class="line">      use: <span class="string">"fable-loader"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The project directory should look something like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">HelloWorld</span><br><span class="line">├── App</span><br><span class="line">│   ├── App.fsproj</span><br><span class="line">│   └── Program.fs</span><br><span class="line">├── config.xml</span><br><span class="line">├── hooks</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── platforms</span><br><span class="line">├── plugins</span><br><span class="line">├── webpack.config.js</span><br><span class="line">└── www</span><br><span class="line">    ├── css</span><br><span class="line">    ├── img</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── js</span><br></pre></td></tr></table></figure><p>Now that the main project structures have been put into place, it is time to put the code together.  The Cordova project needs to be able to consume the generated Fable bundle created by webpack.  This is done by editing the Cordova index page <code>www/index.html</code>.  The contents can be reduced to below.  The key points here are the <code>elmish-app</code> div and the <code>bundle.js</code> include.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'uns</span></span></span><br><span class="line"><span class="tag"><span class="string">  afe-inline'; media-src *; img-src 'self' data: content:;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1, width=device-width, viewport-fit=cover"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"elmish-app"</span> <span class="attr">class</span>=<span class="string">"elmish-app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"cordova.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Cordova is set to accept some Fable code, now it is time to get to the F#.  The contents of <code>App/Program.fs</code> are below.  Since this is about wiring Fable to Cordova I don’t want to spend too much time on the specific F# code.  But the code takes a person’s name as input and replies with a Hello message.  To add a bit of mobile flavor, it also tracks current acceleration of the device using the <code>devicemotion</code> event, and publishes that to the screen as well.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> App</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Browser</span><br><span class="line"><span class="keyword">open</span> Browser.Types</span><br><span class="line"><span class="keyword">open</span> Elmish</span><br><span class="line"><span class="keyword">open</span> Elmish.React</span><br><span class="line"><span class="keyword">open</span> Fable.React</span><br><span class="line"><span class="keyword">open</span> Fable.React.Props</span><br><span class="line"><span class="keyword">open</span> Fable.Import</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Model</span> </span>= </span><br><span class="line">  &#123; Name :string; Message :string; Acceleration :string &#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Msg</span> </span>=</span><br><span class="line">| Greet <span class="keyword">of</span> string</span><br><span class="line">| DeviceMotion <span class="keyword">of</span> float * float * float</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> initModel() = </span><br><span class="line">  &#123; Model.Name = <span class="string">""</span>; Message = <span class="string">""</span>; Acceleration = <span class="string">""</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newMessage (name :string) = </span><br><span class="line">  sprintf <span class="string">"Hello %s, it is %s"</span> name (DateTime.Now.ToString(<span class="string">"yyyy-MM-dd"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newAcceleration x y z = </span><br><span class="line">  sprintf <span class="string">"Acceleration: (%0.3f, %0.3f, %0.3f)"</span> x y z</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> updateModel (msg :Msg) (model :Model) =</span><br><span class="line">    <span class="keyword">match</span> msg <span class="keyword">with</span></span><br><span class="line">    | Greet(name)           -&gt; &#123; model <span class="keyword">with</span> </span><br><span class="line">                                  Name = name; </span><br><span class="line">                                  Message = newMessage name &#125;</span><br><span class="line">    | DeviceMotion(x, y, z) -&gt; &#123; model <span class="keyword">with</span> </span><br><span class="line">                                  Acceleration = newAcceleration x y z &#125;</span><br><span class="line"><span class="keyword">let</span> view (model :Model) dispatch =</span><br><span class="line">  div []</span><br><span class="line">    [</span><br><span class="line">      div []</span><br><span class="line">        [</span><br><span class="line">          str <span class="string">"My name is:"</span></span><br><span class="line">          input </span><br><span class="line">            [ </span><br><span class="line">              AutoFocus <span class="keyword">true</span></span><br><span class="line">              OnInput (<span class="keyword">fun</span> e -&gt; dispatch (Greet ((e.target:?&gt;HTMLInputElement).value)))</span><br><span class="line">              Value (model.Name)</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">      div []</span><br><span class="line">        [</span><br><span class="line">          str model.Message</span><br><span class="line">          br []</span><br><span class="line">          str model.Acceleration</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deviceMotion initial = </span><br><span class="line">    <span class="keyword">let</span> sub dispatch =</span><br><span class="line">        window.addEventListener(<span class="string">"devicemotion"</span>, <span class="keyword">fun</span> e -&gt;</span><br><span class="line">          <span class="keyword">let</span> e' = e :?&gt; DeviceMotionEvent</span><br><span class="line">          dispatch (DeviceMotion (e'.acceleration.x, e'.acceleration.y, e'.acceleration.z)))</span><br><span class="line">    Cmd.ofSub sub</span><br><span class="line"></span><br><span class="line">Program.mkSimple initModel updateModel view</span><br><span class="line">|&gt; Program.withReactBatched <span class="string">"elmish-app"</span></span><br><span class="line">|&gt; Program.withSubscription deviceMotion</span><br><span class="line">|&gt; Program.withConsoleTrace</span><br><span class="line">|&gt; Program.run</span><br></pre></td></tr></table></figure><p>All that is left now is to build and run the app.  There are a couple things to keep track of: building the Fable app with webpack, running the app in the browser for development, and building.  The commands below touch the surface of development and building, but they at least get you started. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Run webpack on the fable app</span><br><span class="line">npx webpack</span><br><span class="line"></span><br><span class="line"># Run cordova in the browser</span><br><span class="line">cordova run browser</span><br><span class="line"></span><br><span class="line"># Build and run on the phone or emulator</span><br><span class="line">cordova build android</span><br><span class="line">cordova run android</span><br><span class="line"></span><br><span class="line"># Install it on the phone</span><br><span class="line">adb install </span><br></pre></td></tr></table></figure><p>A running app looks like this:</p><p><img src="/images/cordova1/cordova1.png" alt="Cordova App"></p><p>Being able to build is great, but development can be cumbersome without the ability to watch and auto-build file changes.  Taking the next step, let’s add some convenience to the process.  Add the following to <code>package.json</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"watch"</span>: <span class="string">"npx webpack -w"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above command is just the interface, it needs some modifications to <code>webpack.config.js</code> to perform the desired actions. The below changes wire into the <code>afterEmit</code> hook to refresh the cordova browser (and start the local service if not already started).  The <code>watchOptions</code> aren’t strictly needed for this, but it helps to stop rebuild spamming, and lower file watch needs.  These values can be tuned more for specific needs.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">"child_process"</span>).exec;</span><br><span class="line"><span class="keyword">var</span> cordovaServerStarted = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    aggregateTimeout: <span class="number">500</span>,</span><br><span class="line">    ignored: [ <span class="string">"node_modules"</span> ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      apply: <span class="function">(<span class="params">compiler</span>) =&gt;</span> &#123;</span><br><span class="line">        compiler.hooks.afterEmit.tap(<span class="string">"AfterEmitPlugin"</span>, (_compilation) =&gt; &#123;</span><br><span class="line">          exec(<span class="string">"cordova prepare browser"</span>, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (stdout) &#123; process.stdout.write(stdout); &#125;</span><br><span class="line">            <span class="keyword">if</span> (stderr) &#123; process.stderr.write(stderr); &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (!cordovaServerStarted) &#123;</span><br><span class="line">            cordovaServerStarted = <span class="literal">true</span>;</span><br><span class="line">            exec(<span class="string">"cordova run browser"</span>, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (stdout) &#123; process.stdout.write(stdout); &#125;</span><br><span class="line">              <span class="keyword">if</span> (stderr) &#123; process.stderr.write(stderr); &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Now, a simple <code>npm run watch</code> will start the Cordova browser, watch for application updates, and auto-build as files are edited.  The development process just got way easier.  As a reminder, this is just a sample; more goes into properly building everything out.  With that said, this provides a good starting point to getting F# running on mobile using Cordova.  I hope you found this useful and/or interesting.  Until next time…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s article will look at combining &lt;a href=&quot;https://fable.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fable&lt;/a&gt; and &lt;a href=&quot;https://cordova.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cordova&lt;/a&gt; to make a mobile application.  For those not familar with these projects, a little context may be helpful.  Fable compiles F# to Javascript and Cordova facilitates mobile app development using HTML and Javascript.  Throw in some &lt;a href=&quot;https://elmish.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Elmish&lt;/a&gt;, and its a party.  Joining these technologies provides some unique possibilities.  Specifically this is an interesting way to leverage &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; for mobile development.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Fable" scheme="http://codesuji.com/tags/Fable/"/>
    
      <category term="Cordova" scheme="http://codesuji.com/tags/Cordova/"/>
    
      <category term="Mobile" scheme="http://codesuji.com/tags/Mobile/"/>
    
      <category term="Elmish" scheme="http://codesuji.com/tags/Elmish/"/>
    
  </entry>
  
  <entry>
    <title>Taking Stock of Anomalies with F# and ML.NET</title>
    <link href="http://codesuji.com/2019/05/24/F-and-MLNet-Anomaly/"/>
    <id>http://codesuji.com/2019/05/24/F-and-MLNet-Anomaly/</id>
    <published>2019-05-24T14:34:25.000Z</published>
    <updated>2019-05-25T11:32:18.259Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s task is to analyze stock prices, specifically price anomalies.  Recently <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a> hit version 1.  So what better way than to use <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a>.</p><a id="more"></a><p>As always, the preliminaries.  For the initial setup, make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a> installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  The specific methods will use the ML.NET TimeSeries package.  At the time of this writing, it is v0.12, so it hasn’t hit version 1 yet, but it works well enough.  Once that is complete, create a console F# project, then add the necessary ML.NET and Charting packages.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet_StockAnomaly</span><br><span class="line">cd MLNet_StockAnomaly</span><br><span class="line">dotnet add package Microsoft.ML --version 1.0.0</span><br><span class="line">dotnet add package Microsoft.ML.TimeSeries --version 0.12.0</span><br><span class="line">dotnet add package XPlot.GoogleCharts --version 2.0.0</span><br></pre></td></tr></table></figure><p>In order to not pick on one particular stock, the Dow Jones index over the past year will be the target of interest.  Below is a sample of what the data extract looks like.  It is the basic stock price data to be expected, including date, prices, and volume.  This article will only need Date and Close price.  It was exported from <a href="https://finance.yahoo.com/quote/%5EDJI?p=^DJI&amp;.tsrc=fin-srch" target="_blank" rel="noopener">Yahoo! Finance</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">Date,Open,High,Low,Close,Adj Close,Volume</span><br><span class="line">2018-05-22,25047.550781,25064.990234,24812.060547,24834.410156,24834.410156,288200000</span><br><span class="line">2018-05-23,24757.710938,24889.460938,24667.119141,24886.810547,24886.810547,399610000</span><br><span class="line">2018-05-24,24877.359375,24877.359375,24605.900391,24811.759766,24811.759766,347050000</span><br><span class="line">2018-05-25,24781.289063,24824.220703,24687.810547,24753.089844,24753.089844,257210000</span><br><span class="line">2018-05-29,24606.589844,24635.179688,24247.839844,24361.449219,24361.449219,395810000</span><br><span class="line">2018-05-30,24467.830078,24714.480469,24459.089844,24667.779297,24667.779297,324870000</span><br></pre></td></tr></table></figure><p>Time to start the code.  First, I need to setup the necessary namespaces and types.  These cover the ML.NET namespaces as well as XPlot for charting the results.  When using ML.NET, the easiest way to interact with the data is by defining two types.  <code>PriceData</code> matches the datafile schema.  <code>PricePrediction</code> is for the model results, in this case I’ll use it for both anomaly detection and change point detection results.  The <code>Prediction</code> field is an array containing a 0 or 1 for a detected event, the value at that datapoint, and its respective confidence level. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Transforms.TimeSeries</span><br><span class="line"><span class="keyword">open</span> XPlot.GoogleCharts</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">PriceData</span> </span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(0)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Date:string</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(1)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Open:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(2)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> High:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(3)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Low:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(4)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Close:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(5)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> AdjClose:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(6)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Volume:float32</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">PricePrediction</span> </span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Date:string</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Prediction:double[]</span><br></pre></td></tr></table></figure><p>Once that is done, it is time for the processing pipeline.  This includes creating the pipeline context and hooking up the data to the file.</p><p>To process the data, there will technically be two pipelines.  The first will use the <code>IidSpike</code> trainer for anomaly detection.  The second will use the <code>IidChangePoint</code> trainer for change point detection.  To get the best results, these aren’t really fire and forget approaches.  There are a couple dials to adjust.  The <code>pvalueHistoryLength</code> defines the sliding window size that is applied when looking for events.  Since this is stock data, multiples of 5 roughly correlate to weeks.  So at anomalies over 6 week windows, and change points over 2 week windows.  Additionally, <code>confidence</code> is on a scale 0-100, higher values requiring a higher level of confidence to trigger an event.  Another dial to turn is <code>AnomalySide</code> to detect either only postive, only negative, or all anomalies.  The default is all, but it’s nice to have options.  All of these values should be adjusted to best meet the needs of the dataset and desired data analysis.  </p><p>Once the pipelines are created, they need to be trained with the <code>Fit</code> method.  Now there is a model that can be used.  <code>Transform</code> will take the dataset and apply the model to build out predictions for the events.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"dji.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ctx = MLContext()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataView = </span><br><span class="line">  ctx</span><br><span class="line">    .Data</span><br><span class="line">    .LoadFromTextFile&lt;PriceData&gt;(</span><br><span class="line">      path = dataPath,</span><br><span class="line">      hasHeader = <span class="keyword">true</span>,</span><br><span class="line">      separatorChar = ',')</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anomalyPValueHistoryLength = <span class="number">30</span></span><br><span class="line"><span class="keyword">let</span> changePointPValueHistoryLength = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> anomalyConfidence = <span class="number">95</span></span><br><span class="line"><span class="keyword">let</span> changePointConfidence = <span class="number">95</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anomalyPipeline = </span><br><span class="line">  ctx</span><br><span class="line">    .Transforms</span><br><span class="line">    .DetectIidSpike(</span><br><span class="line">      outputColumnName = <span class="string">"Prediction"</span>,</span><br><span class="line">      inputColumnName = <span class="string">"Close"</span>,</span><br><span class="line">      side = AnomalySide.TwoSided,</span><br><span class="line">      confidence = anomalyConfidence, </span><br><span class="line">      pvalueHistoryLength = anomalyPValueHistoryLength)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> changePointPipeLine = </span><br><span class="line">  ctx</span><br><span class="line">    .Transforms</span><br><span class="line">    .DetectIidChangePoint(</span><br><span class="line">      outputColumnName = <span class="string">"Prediction"</span>, </span><br><span class="line">      inputColumnName = <span class="string">"Close"</span>,</span><br><span class="line">      martingale = MartingaleType.Power,</span><br><span class="line">      confidence = changePointConfidence, </span><br><span class="line">      changeHistoryLength = changePointPValueHistoryLength)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> trainedAnomalyModel = anomalyPipeline.Fit(dataView)</span><br><span class="line"><span class="keyword">let</span> trainedChangePointModel = changePointPipeLine.Fit(dataView)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> transformedAnomalyData = trainedAnomalyModel.Transform(dataView);</span><br><span class="line"><span class="keyword">let</span> transformedChangePointData = trainedChangePointModel.Transform(dataView);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anomalies = </span><br><span class="line">  ctx</span><br><span class="line">    .Data</span><br><span class="line">    .CreateEnumerable&lt;PricePrediction&gt;(transformedAnomalyData, reuseRowObject = <span class="keyword">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> changePoints = </span><br><span class="line">  ctx</span><br><span class="line">    .Data</span><br><span class="line">    .CreateEnumerable&lt;PricePrediction&gt;(transformedChangePointData, reuseRowObject = <span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><p>Now that the data has been processed, it is time to build some charts and look at the results.  At this point, it is an exercise of formatting the data for charts, a <code>(Date * float32) list</code>.  There are 3 datasets: prices, anomalies, and change points.  Using XPlot, they are combined into a single chart.  The only trick here is I remove the non-events from the prediction datasets and plot their points directly on the price line chart.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Build chart data</span></span><br><span class="line"><span class="keyword">let</span> priceChartData = </span><br><span class="line">  anomalies</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> p -&gt; <span class="keyword">let</span> p' = float (p.Prediction).[<span class="number">1</span>]</span><br><span class="line">                       (p.Date, p'))</span><br><span class="line">  |&gt; List.ofSeq </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anomalyChartData = </span><br><span class="line">  anomalies</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> p -&gt; <span class="keyword">let</span> p' = <span class="keyword">if</span> (p.Prediction).[<span class="number">0</span>] = <span class="number">0.</span> <span class="keyword">then</span> None <span class="keyword">else</span> Some (float (p.Prediction).[<span class="number">1</span>])</span><br><span class="line">                       (p.Date, p'))</span><br><span class="line">  |&gt; Seq.filter (<span class="keyword">fun</span> (x,y) -&gt; y.IsSome)</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (x,y) -&gt; (x, y.Value))</span><br><span class="line">  |&gt; List.ofSeq </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> changePointChartData = </span><br><span class="line">  changePoints </span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> p -&gt; <span class="keyword">let</span> p' = <span class="keyword">if</span> (p.Prediction).[<span class="number">0</span>] = <span class="number">0.</span> <span class="keyword">then</span> None <span class="keyword">else</span> Some (float (p.Prediction).[<span class="number">1</span>])</span><br><span class="line">                       (p.Date, p'))</span><br><span class="line">  |&gt; Seq.filter (<span class="keyword">fun</span> (x,y) -&gt; y.IsSome)</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (x,y) -&gt; (x, y.Value))</span><br><span class="line">  |&gt; List.ofSeq </span><br><span class="line"></span><br><span class="line"><span class="comment">// Show Chart</span></span><br><span class="line">[priceChartData; anomalyChartData; changePointChartData]</span><br><span class="line">|&gt; Chart.Combo</span><br><span class="line">|&gt; Chart.WithOptions </span><br><span class="line">     (Options(title = <span class="string">"Dow Jones Industrial Average Price Anomalies"</span>, </span><br><span class="line">              series = [| Series(<span class="string">"lines"</span>); Series(<span class="string">"scatter"</span>); Series(<span class="string">"scatter"</span>) |],</span><br><span class="line">              displayAnnotations = <span class="keyword">true</span>))</span><br><span class="line">|&gt; Chart.WithLabels [<span class="string">"Price"</span>; <span class="string">"Anomaly"</span>; <span class="string">"ChangePoint"</span> ]</span><br><span class="line">|&gt; Chart.WithLegend <span class="keyword">true</span></span><br><span class="line">|&gt; Chart.WithSize (<span class="number">800</span>, <span class="number">400</span>)</span><br><span class="line">|&gt; Chart.Show</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Here is the resulting Dow Jones price chart for the last year, using the defined models.  Based on the sliding windows and required confidence levels, there are now potentially useful events.</p><p><img src="/images/anomaly1/anomaly1.png" alt="Price Chart (Take 1)"></p><p>Charts offer a convenient way to see how some of those earlier parameters can impact the result.  I’ve reduced the sliding windows by half to 15 (3 weeks) and 5 (1 week), anomaly and changepoints, respectively.  The below chart shows the results of the change.  The anomalies haven’t changed too much, but the changepoints are much more reactive to direction changes.  One key take away here is there isn’t a single right configuration.  It is imperative to understand what types of outliers and attributes are important.</p><p><img src="/images/anomaly1/anomaly2.png" alt="Price Chart (Take 2)"></p><p>I hope you have found this short look into timeseries processing using ML.NET useful.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s task is to analyze stock prices, specifically price anomalies.  Recently &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt; hit version 1.  So what better way than to use &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Signals" scheme="http://codesuji.com/tags/Signals/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
      <category term="Timeseries" scheme="http://codesuji.com/tags/Timeseries/"/>
    
  </entry>
  
  <entry>
    <title>Iris Keyboard Build</title>
    <link href="http://codesuji.com/2019/05/12/Iris-Keyboard/"/>
    <id>http://codesuji.com/2019/05/12/Iris-Keyboard/</id>
    <published>2019-05-12T11:09:26.000Z</published>
    <updated>2019-08-15T01:41:49.720Z</updated>
    
    <content type="html"><![CDATA[<p>Deviating from the typical code-centric post, I wanted to share my latest keyboard build.  It is the Iris from <a href="https://keeb.io/" target="_blank" rel="noopener">keebio</a>.  </p><a id="more"></a><p>Here is the final result, equipped with Kailh speed silver switches and DSA keycaps.  For those who might be interested doing a build themselves, keebio provides a thorough <a href="https://docs.keeb.io/iris-build-guide/" target="_blank" rel="noopener">Build Guide</a>.</p><p><img src="/images/iris1/final.jpg" alt="Iris - final result"></p><p>A build isn’t complete without a key mapping.  Below is the current iteration of layer definitions, using <a href="https://github.com/qmk/qmk_firmware/" target="_blank" rel="noopener">QMK firmware</a>.  Finding the best layout can be a continual work in progress, but I’m happy with the layout so far.  </p><p><a name="keymap"></a></p><p><img src="/images/iris1/keymap_layer0.jpg" alt="Keymap - Layer0"></p><p><img src="/images/iris1/keymap_layer1.jpg" alt="Keymap - Layer1"></p><p><img src="/images/iris1/keymap_layer2.jpg" alt="Keymap - Layer2"></p><p>As a bonus, I’ve included a couple build process images, shown in reverse chronological order.</p><p><img src="/images/iris1/mounted_switches.jpg" alt="Mounted Switches"></p><p><img src="/images/iris1/mounting_switches.jpg" alt="Mounting Switches"></p><p><img src="/images/iris1/pro_micro.jpg" alt="Mounted ProMicros"></p><p><img src="/images/iris1/boards.jpg" alt="Circuit Boards"></p><p><img src="/images/iris1/switches.jpg" alt="Kailh Speed Silver Switches"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Deviating from the typical code-centric post, I wanted to share my latest keyboard build.  It is the Iris from &lt;a href=&quot;https://keeb.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;keebio&lt;/a&gt;.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="Keyboard" scheme="http://codesuji.com/tags/Keyboard/"/>
    
  </entry>
  
  <entry>
    <title>Building a Game with SignalR and F#</title>
    <link href="http://codesuji.com/2019/02/19/Building-Game-with-SignalR-and-F/"/>
    <id>http://codesuji.com/2019/02/19/Building-Game-with-SignalR-and-F/</id>
    <published>2019-02-20T02:17:32.000Z</published>
    <updated>2019-02-20T12:15:17.379Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s post is a brief example of how to implement a game using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://dotnet.microsoft.com/apps/aspnet/real-time" target="_blank" rel="noopener">SignalR</a>.  Creating a game for bots to play doesn’t have to be overly difficult.  Since interesting emergent qualities can arise from simple rules, it makes for a fun way to show off SignalR, beyond the standard chat application.  As this post will show, F# and SignalR work well together to create a nice communication framework without requiring a complex setup.</p><a id="more"></a><p>What is the game?  It is a bot-played game of multi-player snakes.  The rules are simple: eat food to grow, and run into opponents to slice off their tails.  To give players a goal, they accrue points based on their length over time.  It is a limited enough concept that a game engine and client can be built without overshadowing the SignalR aspects.  A picture, or movie, is worth a thousand words. So below is a sample of the game player viewer.  What is SignalR?  If you’re not familiar, it is a library that provides real-time capabilities to web applications.  Think websockets and other related technologies.  In this particular case there is a web viewer and a console app leveraging the capability.</p><p><img src="/images/sr1/sr1.gif" alt="GamePlay"></p><p>With definitions out of the way, time for the technical components.  We’ll use <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a>.  If you don’t have it installed, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>The post will be broken up into 3 primary parts: SignalR server, SignalR client, SignalR webviewer.  Discussing the specific game code will be out of scope, since it is the interactions that we really care about.</p><h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><p>For the server, <a href="https://github.com/giraffe-fsharp/Giraffe" target="_blank" rel="noopener">Giraffe</a> will be the base.  It will host the SignalR services as well as the weS viewer.  Creation is similiar to a typical dotnet app, but it’ll use the Giraffe template.  If you need the templates you can get them by doing <code>dotnet new -i &quot;giraffe-template::*&quot;</code>.  The Giraffe template includes a reference to the <code>Microsoft.AspNetCore.App</code> package, which includes SignalR, so no additional packages are necessary.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new giraffe -lang F# -n GameServer -o GameServer </span><br></pre></td></tr></table></figure><p>The Giraffe templates thankfully generate all the necessary boilerplate code for a webapp on top of Kestrel.  To simplify, we’ll focus on the components that need to be added to the server code.  Add the necessary namespaces, this is not only for SignalR, but to support the background game engine service.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System.Threading;</span><br><span class="line"><span class="keyword">open</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.SignalR</span><br></pre></td></tr></table></figure><p>The SignalR components must be added to the pipeline.  This is done in two places.  Modify <code>configureApp</code> to include <code>.UseSignalR(...)</code>.  Modify <code>configureServices</code> to include <code>services.AddSignalR()</code>.  In addition, the game runs as a hosted service.  To support this, modify <code>configureServices</code> to also includ <code>services.AddHostedService&lt;GameService&gt;()</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> configureApp (app : IApplicationBuilder) =</span><br><span class="line">  <span class="keyword">let</span> env = app.ApplicationServices.GetService&lt;IHostingEnvironment&gt;()</span><br><span class="line">  (<span class="keyword">match</span> env.IsDevelopment() <span class="keyword">with</span></span><br><span class="line">  | <span class="keyword">true</span>  -&gt; app.UseDeveloperExceptionPage()</span><br><span class="line">  | <span class="keyword">false</span> -&gt; app</span><br><span class="line">              .UseGiraffeErrorHandler errorHandler)</span><br><span class="line">              .UseCors(configureCors)</span><br><span class="line">              .UseStaticFiles()</span><br><span class="line">              .UseSignalR(<span class="keyword">fun</span> routes -&gt; routes.MapHub&lt;GameHub&gt;(PathString <span class="string">"/gameHub"</span>)) <span class="comment">// SignalR</span></span><br><span class="line">              .UseGiraffe(webApp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> configureServices (services : IServiceCollection) =</span><br><span class="line">  services.AddCors()    |&gt; ignore</span><br><span class="line">  services.AddSignalR() |&gt; ignore                    <span class="comment">// SignalR</span></span><br><span class="line">  services.AddGiraffe() |&gt; ignore</span><br><span class="line">  services.AddHostedService&lt;GameService&gt;() |&gt; ignore <span class="comment">// GameService</span></span><br></pre></td></tr></table></figure><p>Now that the components have been injected into the pipeline, they need to be created.  For this we’ll need to create a SignalR hub as well as a GameService.  Starting with the SignalR hub.  We can send messages to the SignalR clients by supplying a function name and payload: <code>this.Clients.All.SendAsync(&quot;Message&quot;, &quot;foo&quot;)</code>.  But, we can do better by defining the interface and making the calls type-safe, so let’s do that.  Below is defined the client api interface.  This ensures that calls from server to client match the required types.  For simplicity, the server only has 3 messages it can send to clients.</p><ul><li><p><code>LoginResponse</code> Reports success or failure, and their PlayerId if login was successful.</p></li><li><p><code>Message</code> Sends general notifications to clients.</p></li><li><p><code>GameState</code> Provides a serialized gamestate that clients act on.</p></li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">IClientApi</span> </span>= </span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">member</span> LoginResponse :bool * string -&gt; System.Threading.Tasks.Task</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">member</span> Message :string -&gt; System.Threading.Tasks.Task</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">member</span> GameState :string -&gt; System.Threading.Tasks.Task</span><br></pre></td></tr></table></figure><p>Now, to define the SignalR hub. This effectively is the listener that all clients connect to.  It leverages the <code>IClientApi</code> that was just created.  Here we need to write the handlers for messages accepted from clients.  Players have four different actions they can signal to the server.</p><ul><li><p><code>Login</code> For brevity, there is no authentication; provide a PlayerName and they get a PlayerId.  It also adds a player to the game.  The below code demonstrates how the server can send messages to all connected clients or just specific ones.</p></li><li><p><code>Logout</code> Removes a player from the game.</p></li><li><p><code>Turn</code> Players have one action they can perform, turn.  They move in a specified direction until they turn, then they proceed in that direction.</p></li><li><p><code>Send</code> Players can blast messages to all clients. Perhaps when the bots become self-aware they can taunt each other.</p></li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">GameHub</span> </span>() =</span><br><span class="line">  <span class="keyword">inherit</span> Hub&lt;IClientApi&gt; ()</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Accept client logins</span></span><br><span class="line">  <span class="keyword">member</span> this.Login (name :string) =</span><br><span class="line">    <span class="keyword">let</span> connectionId = this.Context.ConnectionId</span><br><span class="line">    <span class="keyword">let</span> success, playerId = addPlayer name</span><br><span class="line">    <span class="keyword">if</span> success <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// Tell client login success and their playerId</span></span><br><span class="line">      this.Clients.Client(connectionId).LoginResponse(<span class="keyword">true</span>, playerId)</span><br><span class="line">      <span class="comment">// Tell clients of new player </span></span><br><span class="line">      this.Clients.All.Message(sprintf <span class="string">"New Player: %s (%s)"</span> name playerId)</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="comment">// Tell client login failed</span></span><br><span class="line">      this.Clients.Client(connectionId).LoginResponse(<span class="keyword">false</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Handle client logout</span></span><br><span class="line">  <span class="keyword">member</span> this.Logout (playerId :string) =</span><br><span class="line">    removePlayer playerId</span><br><span class="line">    <span class="comment">// Tell clients of player logout</span></span><br><span class="line">    this.Clients.All.Message(sprintf <span class="string">"Player left: %s"</span> playerId)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Handle player changing direction</span></span><br><span class="line">  <span class="keyword">member</span> this.Turn (playerId :string, direction :string) = </span><br><span class="line">    updatePlayerDirection playerId direction</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Pass along message from one client to all clients</span></span><br><span class="line">  <span class="keyword">member</span> this.Send (message: string) = </span><br><span class="line">    this.Clients.All.Message(message)</span><br></pre></td></tr></table></figure><p>Now that the SignalR hub is done, it’s time to make the GameService that performs the server-side game logic as well as sending updated gamestate to players.  For this a background service is used.  At a set interval it processes current game state <code>updateState</code> and sends it out to all clients.  One note here: because I’ve choosen to use a client interface, the hub context is defined as <code>IHubContext&lt;GameHub, IClientApi&gt;)</code>.  If this wasn’t the case, it would be defined as <code>IHubContext&lt;GameHub&gt;</code> and messages would be sent using <code>this.HubContext.Clients.All.SendAsync(&quot;GameState&quot;, stateSerialized)</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">GameService</span> </span>(hubContext :IHubContext&lt;GameHub, IClientApi&gt;) =</span><br><span class="line">  <span class="keyword">inherit</span> BackgroundService ()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">member</span> this.HubContext :IHubContext&lt;GameHub, IClientApi&gt; = hubContext</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> this.ExecuteAsync (stoppingToken :CancellationToken) =</span><br><span class="line">    <span class="keyword">let</span> pingTimer = <span class="keyword">new</span> System.Timers.Timer(TurnFrequency)</span><br><span class="line">    pingTimer.Elapsed.Add(<span class="keyword">fun</span> _ -&gt; </span><br><span class="line">      updateState ()</span><br><span class="line">      <span class="keyword">let</span> stateSerialized = serializeGameState gState</span><br><span class="line">      this.HubContext.Clients.All.GameState(stateSerialized) |&gt; ignore)</span><br><span class="line"></span><br><span class="line">    pingTimer.Start()</span><br><span class="line">    Task.CompletedTask</span><br></pre></td></tr></table></figure><p>Beyond the specific game logic implementation, that’s all there is to the SignalR server.  It now will send out gamestate updates as well as handle client messages.</p><h1 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h1><p>The next step is building the client.  To do this, a dotnet console app will be created, and then the SignalR package is added.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang f# -n ClientFs</span><br><span class="line">cd ClientFs</span><br><span class="line">dotnet add package Microsoft.AspNetCore.SignalR.Client</span><br></pre></td></tr></table></figure><p>Once that is done, it needs the SignalR namespace. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.SignalR.Client</span><br></pre></td></tr></table></figure><p>The client needs to make a connection to the SignalR hub.  Similar to the server, the client needs some event handlers for server generated messages. </p><ul><li><p><code>LoginResponse</code> A successful login gives the client a playerId.</p></li><li><p><code>Message</code> - Handle general message notifications.</p></li><li><p><code>GameState</code> - When the server sends the current gamestate, the client evaluates and then sends an action message back.</p></li><li><p><code>Closed</code> - When the connection closes, what does the client do? In this case attempts to reconnect.</p></li></ul><p>Once the event handlers are setup, the client connects and performs a login.  The handlers take care of the rest.  As can be seen below, the client uses <code>InvokeAsync</code> to send messages to the server (as seen in the login).  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv = </span><br><span class="line">  <span class="comment">// Create connection to game server</span></span><br><span class="line">  <span class="keyword">let</span> connection = </span><br><span class="line">    (HubConnectionBuilder())</span><br><span class="line">      .WithUrl(<span class="string">"http://localhost:5000/gameHub"</span>)</span><br><span class="line">      .Build()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Event handlers</span></span><br><span class="line">  connection.On&lt;bool, string&gt;(<span class="string">"LoginResponse"</span>, <span class="keyword">fun</span> success id -&gt; loginResponseHandler connection success id) |&gt; ignore</span><br><span class="line">  connection.On&lt;string&gt;(<span class="string">"Message"</span>, <span class="keyword">fun</span> message -&gt; messageHandler message) |&gt; ignore</span><br><span class="line">  connection.On&lt;string&gt;(<span class="string">"GameState"</span>, <span class="keyword">fun</span> gameState -&gt; gameStateHandler connection gameState) |&gt; ignore</span><br><span class="line">  connection.add_Closed(<span class="keyword">fun</span> error -&gt; reconnect connection error)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Start connection and login</span></span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    connection.StartAsync().Wait()</span><br><span class="line">    connection.InvokeAsync(<span class="string">"login"</span>, myName).Wait()</span><br><span class="line">  <span class="keyword">with</span></span><br><span class="line">  | ex -&gt; printfn <span class="string">"Connection error %s"</span> (ex.ToString())</span><br><span class="line">          Environment.Exit(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Listen for 'q' to quit</span></span><br><span class="line">  getCommand connection</span><br><span class="line"></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>The handler logic is uninteresting, but it is useful to see the definitions that match with the handlers.  In addition, I’ve included the client’s response back to the server in the gameState handler.  Again, it uses InvokeAsync when contacting the server.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> loginResponseHandler (connection :HubConnection) (success :bool) (id :string) =</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> messageHandler (message :string) =</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gameStateHandler (connection :HubConnection) (gameState :string) =</span><br><span class="line">  ...</span><br><span class="line">  connection.InvokeAsync(<span class="string">"Turn"</span>, playerId, move.ToString()) |&gt; ignore</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> reconnect (connection :HubConnection) (error :<span class="symbol">'a</span>) = </span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h1 id="Game-Viewer"><a href="#Game-Viewer" class="headerlink" title="Game Viewer"></a>Game Viewer</h1><p>The final piece to address is the game viewer.  This comes in two parts: the layout and the code.  For the layout, we leverage Giraffe’s view engine.  It’s a simple view that contains an html canvas map, player list, messages display, and a state print (for debugging purposes).  This is also where supporting js libraries: signalr, <a href="https://jquery.com/" target="_blank" rel="noopener">jquery</a>, as well as the viewer game-server.js are included.  For this project, the files reside in the <code>WebRoot</code> directory.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Views =</span><br><span class="line">    <span class="keyword">open</span> GiraffeViewEngine</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> layout (content: XmlNode list) =</span><br><span class="line">        html [] [</span><br><span class="line">            head [] [</span><br><span class="line">                title []  [ encodedText <span class="string">"SnakeWorld"</span> ]</span><br><span class="line">                link [ _rel  <span class="string">"stylesheet"</span></span><br><span class="line">                       _type <span class="string">"text/css"</span></span><br><span class="line">                       _href <span class="string">"/main.css"</span> ]</span><br><span class="line">            ]</span><br><span class="line">            body [] content</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> index (model : Message) =</span><br><span class="line">      [</span><br><span class="line">        div [ _class <span class="string">"container"</span>] [ </span><br><span class="line">          div [ _class <span class="string">"row"</span> ] [</span><br><span class="line">            div [ _id <span class="string">"mapWrapper"</span>; _class <span class="string">"col-6"</span> ] [</span><br><span class="line">              canvas [ _id <span class="string">"worldMap"</span>; _class <span class="string">"world-map"</span>; _width <span class="string">"200"</span>; _height <span class="string">"200"</span> ] [];</span><br><span class="line">              div [ _id <span class="string">"playerList"</span>; _class <span class="string">"player-list"</span> ] []</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">          div [ _class <span class="string">"row"</span> ] [</span><br><span class="line">            div [ _id <span class="string">"message"</span>; _class <span class="string">"col-6"</span> ] []</span><br><span class="line">          ]</span><br><span class="line">          div [ _class <span class="string">"row"</span> ] [</span><br><span class="line">            div [ _id <span class="string">"currentState"</span>; _class <span class="string">"col-6"</span> ] []</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">        script [ _src <span class="string">"signalr.js"</span> ] []</span><br><span class="line">        script [ _src <span class="string">"jquery-3.3.1.min.js"</span> ] []</span><br><span class="line">        script [ _src <span class="string">"game-viewer.js"</span> ] []</span><br><span class="line">      ] |&gt; layout</span><br></pre></td></tr></table></figure><p>This may bring up a question, where did <code>signalr.js</code> come from?  Well, there is one more thing we need to add to the project.  In a real project I’d package this differently, but a quick and dirty way will do for now.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @aspnet/signalr</span><br><span class="line">cp ./node_modules/@aspnet/signalr/dist/browser/signalr.js ./WebRoot</span><br></pre></td></tr></table></figure><p>The code part of the game viewer is in javascript.  A similar process is required as was performed with the F# client.  A connection is created to the SignalR hub.  Then event handlers are wired up.  The viewer is read-only, to show messages and draw the map and player score list.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// SignalR connection</span></span><br><span class="line">const connection = <span class="keyword">new</span> signalR.HubConnectionBuilder().withUrl(<span class="string">"/gameHub"</span>).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Handle Connection start</span></span><br><span class="line">connection.start().catch(<span class="keyword">function</span> (err) &#123;</span><br><span class="line">  <span class="keyword">return</span> console.error(err.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Handle incoming message</span></span><br><span class="line">connection.on(<span class="string">"Message"</span>, <span class="keyword">function</span> (message) &#123;</span><br><span class="line">  $(<span class="string">"#message"</span>).text(message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Handle game state updates (draw map, update player list)</span></span><br><span class="line">connection.on(<span class="string">"GameState"</span>, <span class="keyword">function</span> (gameState) &#123;</span><br><span class="line">  handleGameState(JSON.parse(gameState))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>At this point, we have all the necessary parts to support a SignalR F# server, F# client, and javascript client.  That closes the loop on the communication framework.  From here the game logic can be added to the server and client, and drawing can be added to the viewer.  Those components are outside of the scope for this post.  I hope you’ve found this to be a useful guide to leveraging a SignalR implementation with F#.  Until next time…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s post is a brief example of how to implement a game using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://dotnet.microsoft.com/apps/aspnet/real-time&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SignalR&lt;/a&gt;.  Creating a game for bots to play doesn’t have to be overly difficult.  Since interesting emergent qualities can arise from simple rules, it makes for a fun way to show off SignalR, beyond the standard chat application.  As this post will show, F# and SignalR work well together to create a nice communication framework without requiring a complex setup.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="SignalR" scheme="http://codesuji.com/tags/SignalR/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.NET Sentiment Analysis</title>
    <link href="http://codesuji.com/2019/01/14/F-and-MLNet-Sentiment-Analysis/"/>
    <id>http://codesuji.com/2019/01/14/F-and-MLNet-Sentiment-Analysis/</id>
    <published>2019-01-15T00:01:26.000Z</published>
    <updated>2019-01-15T00:04:44.561Z</updated>
    
    <content type="html"><![CDATA[<p>Today we’ll look at performing sentiment analysis using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://dot.net/ml" target="_blank" rel="noopener">ML.NET</a>.  A new version (v0.9.0) has recently been released, so we use this as an opportunity to play with some new functionality.  The goal of today’s post will be to perform sentiment analysis on movie reviews from <a href="https://www.imdb.com" target="_blank" rel="noopener">IMDB</a>.</p><a id="more"></a><p><i>Note: ML.NET is still evolving, this post was written using Microsoft.ML v0.9.0.</i></p><p>We’ll use <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a>.  If you don’t have it installed, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>With that out of the way, create a console F# project, then add the ML.NET package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-SentimentAnalysis</span><br><span class="line">cd MLNet-SentimentAnalysis</span><br><span class="line">dotnet add package Microsoft.ML --version 0.9.0</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source we will use for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Sentiment+Labelled+Sentences" target="_blank" rel="noopener">UCI</a>.  The datafile can be found <a href="https://archive.ics.uci.edu/ml/machine-learning-databases/00331/" target="_blank" rel="noopener">here</a>.  The zip file contains examples for IMDB, Yelp, and Amazon, but we’ll stick with IMDB for this post.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/00331/sentiment%20labelled%20sentences.zip</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is no header row.  The tab separated columns represent 1) the review’s text 2) the sentiment where 1 = positive and 0 = negative.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Long, whiny and pointless.  0</span><br><span class="line">But I recommend waiting for their future efforts, let this one go.  0</span><br><span class="line">Excellent cast, story line, performances.  1</span><br><span class="line">Totally believable.  1</span><br></pre></td></tr></table></figure><p>Now that we have the data, time to get to the code.  First there is some namespace setup.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br></pre></td></tr></table></figure><p>Here are the data types to be used.  <code>SentimentData</code> is for loading data, <code>SentimentPrediction</code> is for performing predictions.  Here we also get our first taste of 0.9.0.  As we’ll see later we can use the <code>SentimentData</code> type for loading.  To enable this we will add <code>[&lt;LoadColumn(column position)&gt;]</code> to the members.  I have also included <code>Probability</code>.  This is not a real column, nor is it needed for training.  I have included it because it is a required field when extracting performance metrics.  I feel like I shouldn’t need to include it here, but for now it’s the only way I got it to work.  The <code>CreateTextReader</code> now accepts a datatype for driving the loading process.  Once the data reader is setup, we also perform a train/test split of 70/30, respectively.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">SentimentData</span> </span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(0)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SentimentText :string</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(1)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label :bool</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Need to add this column to extract metrics</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(2)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Probability :float32</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">SentimentPrediction</span> </span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SentimentData :string</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> PredictedLabel :bool</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Score :float32 </span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> ml = <span class="keyword">new</span> MLContext()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> reader = ml.Data.CreateTextReader&lt;SentimentData&gt;(separatorChar = '\t', hasHeader = <span class="keyword">true</span>)</span><br><span class="line">           </span><br><span class="line">  <span class="keyword">let</span> dataFile = <span class="string">"./data/imdb_labelled.txt"</span></span><br><span class="line">  <span class="keyword">let</span> allData = reader.Read(dataFile);</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">struct</span> (trainData, testData) = ml.Clustering.TrainTestSplit(allData, testFraction = <span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><p>The old way (see below) can still be used, but I find the above newness a nice, more concise, method to load data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pre v0.9.0 way</span></span><br><span class="line"><span class="keyword">let</span> reader = </span><br><span class="line">  ml.Data.CreateTextReader(</span><br><span class="line">    separatorChar = '\t',</span><br><span class="line">    hasHeader = <span class="keyword">true</span>,</span><br><span class="line">    columns = </span><br><span class="line">      [|</span><br><span class="line">          Data.TextLoader.Column(<span class="string">"SentimentText"</span>, Nullable Data.DataKind.Text, <span class="number">0</span>);</span><br><span class="line">          Data.TextLoader.Column(<span class="string">"Label"</span>, Nullable Data.DataKind.Bool, <span class="number">1</span>);</span><br><span class="line">          <span class="comment">// <span class="doctag">NOTE:</span> Need to add this column to extract metrics</span></span><br><span class="line">          Data.TextLoader.Column(<span class="string">"Probability"</span>, Nullable Data.DataKind.R4, <span class="number">2</span>)</span><br><span class="line">      |])</span><br></pre></td></tr></table></figure><p>ML.NET also provides methods to perform inspection into the dataset.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printfn <span class="string">"### Schema"</span></span><br><span class="line">allData.Schema</span><br><span class="line">|&gt; Seq.iter(<span class="keyword">fun</span> x-&gt; printfn <span class="string">"%A"</span> x)</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>Here is what a simple schema view looks like.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### Schema</span><br><span class="line">SentimentText: Text</span><br><span class="line">Label: Bool</span><br><span class="line">Probability: R4</span><br></pre></td></tr></table></figure><p>Next we setup the training pipeline.  There are other options, like <code>FastTree</code>, but we’ll use <code>FastForest</code> for today’s post.  We’ll also take the defaults, but as with previous trainers we’ve looked at, we can provide custom hyperparameters.  Once the pipeline is setup, we run <code>Fit</code> to build the model.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pipeline = </span><br><span class="line">  ml</span><br><span class="line">    .Transforms.Text.FeaturizeText(<span class="string">"SentimentText"</span>, <span class="string">"Features"</span>)</span><br><span class="line">    .Append(ml.BinaryClassification.Trainers.FastForest())</span><br><span class="line">    <span class="comment">// Example of custom hyperparameters</span></span><br><span class="line">    <span class="comment">// .Append(mlContext.BinaryClassification.Trainers.FastForest(numTrees = 500, numLeaves = 100, learningRate = 0.0001))</span></span><br><span class="line"><span class="keyword">let</span> model = pipeline.Fit(trainData)</span><br></pre></td></tr></table></figure><p>Any good machine learning process requires performance evaluation.  For that we’ll look at two aspects.  First, ML.NET provides evaluators for the trainers.  I’ve cherry-picked a couple of the available <code>BinaryClassificationEvaluator</code> metrics.  Second, we can perform a preview of the predictions, which allows us to see the sentiment value along with the actual and predicted labels, as well as the score.  There are other items in the view as well that I left in to show the extent of the reporting.  Then we can run evaluation’s against the train and test sets.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> displayEvaluation description data = </span><br><span class="line">  <span class="keyword">let</span> predictions = model.Transform data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> metrics = ml.BinaryClassification.Evaluate(predictions)</span><br><span class="line"></span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line">  printfn <span class="string">"### %s"</span> description</span><br><span class="line">  printfn <span class="string">"Accuracy          : %0.4f"</span> (metrics.Accuracy)</span><br><span class="line">  printfn <span class="string">"F1                : %0.4f"</span> (metrics.F1Score)</span><br><span class="line">  printfn <span class="string">"Positive Precision: %0.4f"</span> (metrics.PositivePrecision)</span><br><span class="line">  printfn <span class="string">"Positive Recall   : %0.4f"</span> (metrics.PositiveRecall)</span><br><span class="line">  printfn <span class="string">"Negative Precision: %0.4f"</span> (metrics.NegativePrecision)</span><br><span class="line">  printfn <span class="string">"Negative Recall   : %0.4f"</span> (metrics.NegativeRecall)</span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> preview = predictions.Preview()</span><br><span class="line">  preview.RowView</span><br><span class="line">  |&gt; Seq.take <span class="number">5</span></span><br><span class="line">  |&gt; Seq.iter(<span class="keyword">fun</span> row -&gt;</span><br><span class="line">     row.Values</span><br><span class="line">     |&gt; Array.iter (<span class="keyword">fun</span> kv -&gt; printfn <span class="string">"%s: %A"</span> kv.Key kv.Value)</span><br><span class="line">     printfn <span class="string">""</span>)</span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line"></span><br><span class="line">displayEvaluation <span class="string">"Train"</span> trainData</span><br><span class="line">displayEvaluation <span class="string">"Test"</span> testData</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>As imagined, the metrics are better when run against the training data.  The much better view of prediction quality is when run against the testing data.  As expected, the model doesn’t perform as well against the test set, there is probably some more work that needs done here.  The <code>Preview</code> is also useful when diagnosing more detailed problems, since it shows scores and label predictions.  Not related to the results, but the stratification value is used for the train/test split.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">### Train</span><br><span class="line">Accuracy          : 0.9120</span><br><span class="line">F1                : 0.9145</span><br><span class="line">Positive Precision: 0.8987</span><br><span class="line">Positive Recall   : 0.9309</span><br><span class="line">Negative Precision: 0.9267</span><br><span class="line">Negative Recall   : 0.8927</span><br><span class="line"></span><br><span class="line">SentimentText: Not sure who was more lost - the flat characters or the audience, nearly half of whom walked out.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.595641375f</span><br><span class="line">Features: Sparse vector of size 7818, 110 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -54.9804649f</span><br><span class="line"></span><br><span class="line">SentimentText: Attempting artiness with black &amp; white and clever camera angles, the movie disappointed - became even more ridiculous - as the acting was poor and the plot and lines almost non-existent.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.58837676f</span><br><span class="line">Features: Sparse vector of size 7818, 188 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -13.02876f</span><br><span class="line"></span><br><span class="line">SentimentText: Very little music or anything to speak of.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.753678203f</span><br><span class="line">Features: Sparse vector of size 7818, 52 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -5.37574673f</span><br><span class="line"></span><br><span class="line">SentimentText: The best scene in the movie was when Gerardo is trying to find a song that keeps running through his head.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.967485666f</span><br><span class="line">Features: Sparse vector of size 7818, 118 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 41.7043114f</span><br><span class="line"></span><br><span class="line">SentimentText: The rest of the movie lacks art, charm, meaning... If it&apos;s about emptiness, it works I guess because it&apos;s empty.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.929597497f</span><br><span class="line">Features: Sparse vector of size 7818, 119 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -15.2312632f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Test</span><br><span class="line">Accuracy          : 0.6890</span><br><span class="line">F1                : 0.6923</span><br><span class="line">Positive Precision: 0.6471</span><br><span class="line">Positive Recall   : 0.7444</span><br><span class="line">Negative Precision: 0.7385</span><br><span class="line">Negative Recall   : 0.6400</span><br><span class="line"></span><br><span class="line">SentimentText: Wasted two hours.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.171681881f</span><br><span class="line">Features: Sparse vector of size 7818, 21 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 4.22176647f</span><br><span class="line"></span><br><span class="line">SentimentText: Saw the movie today and thought it was a good effort, good messages for kids.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.185497403f</span><br><span class="line">Features: Sparse vector of size 7818, 83 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 25.0270023f</span><br><span class="line"></span><br><span class="line">SentimentText: The movie showed a lot of Florida at it&apos;s best, made it look very appealing.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.250951052f</span><br><span class="line">Features: Sparse vector of size 7818, 86 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 18.1396465f</span><br><span class="line"></span><br><span class="line">SentimentText: </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.128096819f</span><br><span class="line">Features: Sparse vector of size 7818, 0 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 9.73927498f</span><br><span class="line"></span><br><span class="line">SentimentText: In other words, the content level of this film is enough to easily fill a dozen other films.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.229808331f</span><br><span class="line">Features: Sparse vector of size 7818, 90 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 20.8655605f</span><br></pre></td></tr></table></figure><p>Now that model fitting and some evaluation has been performed, we need to make a prediction function.  As with so many things so far, this is simple to do.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> predictor = model.CreatePredictionEngine&lt;SentimentData, SentimentPrediction&gt;(ml)</span><br></pre></td></tr></table></figure><p>Once the prediction function is in place, we can run predictions and see their underlying scores.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tests = </span><br><span class="line">  [</span><br><span class="line">    <span class="string">"It was cool, cute, and funny."</span>; </span><br><span class="line">    <span class="string">"It was slow and boring."</span>; </span><br><span class="line">    <span class="string">"It was the greatest thing I've seen."</span> </span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">tests </span><br><span class="line">|&gt; List.iter (<span class="keyword">fun</span> x -&gt;</span><br><span class="line">  <span class="keyword">let</span> input = SentimentData()</span><br><span class="line">  input.SentimentText &lt;- x</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prediction = predictor.Predict(input)</span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line">  printfn <span class="string">"Text       : %s"</span> x</span><br><span class="line">  printfn <span class="string">"Prediction : %b"</span> (prediction.PredictedLabel)</span><br><span class="line">  printfn <span class="string">"Score      : %0.4f"</span> (prediction.Score)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>And here we can see the predictions.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Text       : It was cool, cute, and funny.</span><br><span class="line">Prediction : true</span><br><span class="line">Score      : 12.2628</span><br><span class="line"></span><br><span class="line">Text       : It was slow and boring.</span><br><span class="line">Prediction : false</span><br><span class="line">Score      : -10.0353</span><br><span class="line"></span><br><span class="line">Text       : It was the greatest thing I&apos;ve seen.</span><br><span class="line">Prediction : true</span><br><span class="line">Score      : 68.4614</span><br></pre></td></tr></table></figure><p>This is all well and good, but to be useful we need to be able to save a model to a file for later use.  Here we have the ability to save and reload a model file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line"><span class="keyword">let</span> saveModel (ml:MLContext) trainedMode = </span><br><span class="line">  <span class="keyword">use</span> fsWrite = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Create, FileAccess.Write, FileShare.Write)</span><br><span class="line">  ml.Model.Save(model, fsWrite)</span><br><span class="line"></span><br><span class="line">saveModel ml model</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file</span></span><br><span class="line"><span class="keyword">use</span> fsRead = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Open, FileAccess.Read, FileShare.Read)</span><br><span class="line"><span class="keyword">let</span> mlReloaded = MLContext()</span><br><span class="line"><span class="keyword">let</span> modelReloaded = TransformerChain.LoadFrom(mlReloaded, fsRead)</span><br><span class="line"><span class="keyword">let</span> predictorReloaded = modelReloaded.CreatePredictionEngine&lt;SentimentData, SentimentPrediction&gt;(mlReloaded)</span><br></pre></td></tr></table></figure><p>Once the model file has been reloaded, we can run a sample prediction.  We just need to create the prediction function against and away we go.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = SentimentData()</span><br><span class="line">test1.SentimentText &lt;- tests.[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionReloaded = predictorReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Text                  : %s"</span> tests.[<span class="number">0</span>]</span><br><span class="line">printfn <span class="string">"Prediction (Reloaded) : %b"</span> (predictionReloaded.PredictedLabel)</span><br><span class="line">printfn <span class="string">"Score (Reloaded)      : %0.4f"</span> (predictionReloaded.Score)</span><br></pre></td></tr></table></figure><p>Here are the prediction results from a saved model.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Text                  : It was cool, cute, and funny.</span><br><span class="line">Prediction (Reloaded) : true</span><br><span class="line">Score (Reloaded)      : 12.2628</span><br></pre></td></tr></table></figure><p>This has been a brief look into sentiment analysis using F# and ML.NET.  It has been a pleasure to see the framework progress.  It is even more enjoyable performing these types of workloads using F#.  Until next time.  Thanks.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today we’ll look at performing sentiment analysis using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://dot.net/ml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt;.  A new version (v0.9.0) has recently been released, so we use this as an opportunity to play with some new functionality.  The goal of today’s post will be to perform sentiment analysis on movie reviews from &lt;a href=&quot;https://www.imdb.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IMDB&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Text" scheme="http://codesuji.com/tags/Text/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>An Introduction to Chiron</title>
    <link href="http://codesuji.com/2019/01/07/Chiron-Introduction/"/>
    <id>http://codesuji.com/2019/01/07/Chiron-Introduction/</id>
    <published>2019-01-08T02:23:57.000Z</published>
    <updated>2019-01-08T02:49:10.433Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s post is a introduction to performing json serialization tasks using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://xyncro.tech/chiron/" target="_blank" rel="noopener">Chiron</a>.</p><a id="more"></a><p>There are various ways to perform serialization in F#, each has their own set of advantages and disadvantages.  In particular, Chiron provides nice control over more complex types.  Within Chiron there are multiple approaches.  The examples provided are not exhaustive, but are meant to be a good starting point for how various types can be serialized and deserialized.  The code will be based on a player object for a theoretical game.  Using that as a premise, there are two major things we’ll look at: records and discriminated unions.  Both will have their own unique variations.</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>First, add the package to the project.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang f# --name Introduction</span><br><span class="line">cd Introduction</span><br><span class="line">dotnet add package Chiron --version 6.3.1</span><br></pre></td></tr></table></figure><p>Second, import the <code>Chiron</code> namespace.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Chiron </span><br></pre></td></tr></table></figure><h3 id="Record-Types"><a href="#Record-Types" class="headerlink" title="Record Types"></a>Record Types</h3><p>Record are perhaps the most common type to serialize.  They are also straightforward, once you understand the mechanisms at work.  This first example uses just primative types that can be handled with no additional code required.  Chiron expects <code>ToJson</code> and <code>FromJson</code> methods when serializing and deserializing (respectively).  Both use a <code>json {...}</code> computation expression.  Serialization is accomplished with a series of <code>do! Json.write &lt;attribute name&gt; &lt;attribute value&gt;</code> statements.  This allows us to define what we want to be serialized.  For Deserialization there are two steps.  First, <code>let! &lt;var&gt; = Json.read &lt;attribute name&gt;</code> extracts the values.  Once we have the values, we need to construct the record and <code>return</code> it.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123;</span><br><span class="line">  Name :string;</span><br><span class="line">  Score :int;</span><br><span class="line">  Notes :string list;</span><br><span class="line">  IntPairs :(int * int) list;</span><br><span class="line">  &#125; <span class="keyword">with</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123;</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"name"</span> p.Name</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"score"</span> p.Score</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"notes"</span> p.Notes</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"int_pairs"</span> p.IntPairs</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> name = Json.read <span class="string">"name"</span></span><br><span class="line">    <span class="keyword">let!</span> score = Json.read <span class="string">"score"</span></span><br><span class="line">    <span class="keyword">let!</span> notes = Json.read <span class="string">"notes"</span></span><br><span class="line">    <span class="keyword">let!</span> intPairs = Json.read <span class="string">"int_pairs"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">      Player.Name = name;</span><br><span class="line">      Score = score;</span><br><span class="line">      Notes = notes;</span><br><span class="line">      IntPairs = intPairs;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Now that the supporting code is in place, let’s look at how to use it.  Conversion in both ways basically requires two steps.  To serialize, the record is serialized, then formatted <code>(Json.serialize &gt;&gt; Json.format)</code>.  This is also where we have addition options.  The default json format is compact, which is typically want we want when passing data around.  But if we want a nicer view, we can <code>(Json.serialize &gt;&gt; Json.formatWith JsonFormattingOptions.Pretty)</code> to pretty print.  The other side of the equation is deserialization.  Here we parse, then deserialize <code>(Json.parse &gt;&gt; Json.deserialize)</code>.  The additional key here is to define the type we want to deserialize into.  At a basic level, that is all there is to it.  Everything else we’ll look at will be incremental expansions on these concepts.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> player1 = &#123; </span><br><span class="line">    Player.Name = <span class="string">"Jane"</span>; </span><br><span class="line">    Score = <span class="number">100</span>; </span><br><span class="line">    Notes = [ </span><br><span class="line">      <span class="string">"This is a note"</span>; </span><br><span class="line">      <span class="string">"This is another note"</span> ]; </span><br><span class="line">    IntPairs = [ </span><br><span class="line">      (<span class="number">1</span>,<span class="number">3</span>); </span><br><span class="line">      (<span class="number">13</span>, <span class="number">87</span>) ];</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">  printfn <span class="string">"Player1: %A"</span> player1</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> player1Json = (Json.serialize &gt;&gt; Json.format) player1</span><br><span class="line">  printfn <span class="string">"Json (compact): \n%s"</span> player1Json</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> player1JsonPretty = (Json.serialize &gt;&gt; Json.formatWith JsonFormattingOptions.Pretty) player1</span><br><span class="line">  printfn <span class="string">"Json (pretty): \n%s"</span> player1JsonPretty</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> player1' :Player = (Json.parse &gt;&gt; Json.deserialize) player1Json</span><br><span class="line">  printfn <span class="string">"Player1': %A"</span> player1'</span><br><span class="line">  </span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Now, let’s take a look at the results.  For the most part they are exactly as expected, which is good.  The one caveat is the list tuples.  Since json doesn’t have a concept of tuples, they are serialized into an array.  This is fine, it’s more about knowing how the default serialization works.  As with other things in Chiron, this could be modified by writing our own serialization code into a different format.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># Player1 object</span><br><span class="line">Player1: &#123;Name = "Jane";</span><br><span class="line"> Score = 100;</span><br><span class="line"> Notes = ["This is a note"; "This is another note"];</span><br><span class="line"> IntPairs = [(1, 3); (13, 87)];&#125;</span><br><span class="line"></span><br><span class="line"># Player1 as json</span><br><span class="line">Json (compact): </span><br><span class="line">&#123;<span class="attr">"int_pairs"</span>:[[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">13</span>,<span class="number">87</span>]],<span class="attr">"name"</span>:<span class="string">"Jane"</span>,<span class="attr">"notes"</span>:[<span class="string">"This is a note"</span>,<span class="string">"This is another note"</span>],<span class="attr">"score"</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"># Player1 as prettified json</span><br><span class="line">Json (pretty): </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"int_pairs"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="number">13</span>,</span><br><span class="line">      <span class="number">87</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Jane"</span>,</span><br><span class="line">  <span class="attr">"notes"</span>: [</span><br><span class="line">    <span class="string">"This is a note"</span>,</span><br><span class="line">    <span class="string">"This is another note"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"score"</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Player1' object (deserialized from json string)</span><br><span class="line">Player1': &#123;Name = "Jane";</span><br><span class="line"> Score = 100;</span><br><span class="line"> Notes = ["This is a note"; "This is another note"];</span><br><span class="line"> IntPairs = [(1, 3); (13, 87)];&#125;</span><br></pre></td></tr></table></figure><p>The remaining examples will be an expansion of this one.  It will allow us to focus on the new stuff without getting lost in a bulk of code.  For completeness, I’ll provide the final version of <code>Player</code> at the end of the post so it can all be seen together.</p><h3 id="Records-within-Records"><a href="#Records-within-Records" class="headerlink" title="Records within Records"></a>Records within Records</h3><p>Next, records within records.  To do this we’ll need to create another record type, <code>Point</code>.  Beyond the base type definition, the <code>ToJson</code> and <code>FromJson</code> functions need to be implemented, in a similar fashion as above.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Point</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Point</span> </span>= &#123; </span><br><span class="line">  X :int; </span><br><span class="line">  Y :int </span><br><span class="line">  &#125; <span class="keyword">with</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Point) = json &#123;</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"x"</span> p.X</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"y"</span> p.Y</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Point) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> x = Json.read <span class="string">"x"</span></span><br><span class="line">    <span class="keyword">let!</span> y = Json.read <span class="string">"y"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; Point.X = x; Point.Y = y &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Adding the new field into the <code>Player</code> record is simple.  The beauty here is that as long as you define the appropriate methods in the <code>Point</code> class, as we did above, Chiron handles the serialization/deserialization with little effort.  We just have to remember there are 3 touch points: definition, ToJson, and FromJson.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a Coordinates field that is a list of Points to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  Coordinates :Point list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"coordinates"</span> p.Coordinates</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> coordinates = Json.read <span class="string">"coordinates"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      Coordinates = coordinates</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the Coordinates field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  Coordinates = [ </span><br><span class="line">    &#123; X = <span class="number">30</span>; Y = <span class="number">40</span> &#125;; </span><br><span class="line">    &#123; X = <span class="number">30</span>; Y = <span class="number">41</span> &#125; ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, the Point list is now part of the player.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><h3 id="Discriminated-Unions-Part-1-Simple"><a href="#Discriminated-Unions-Part-1-Simple" class="headerlink" title="Discriminated Unions - Part 1 (Simple)"></a>Discriminated Unions - Part 1 (Simple)</h3><p>Discriminated Unions manifest themselves in a couple different forms when serializing.  As a result, we’ll look at these from a couple different angles.  They sometimes require slightly more of a decision over records types.  When serializing primative types we just take the defaults, which is great.  With discriminated unions we need to decide how we want our serialization to look.  In this case, we’ll look to add a “current direction” to the player, leveraging a <code>Direction</code> type of North, South, East, or West.  For this we’ll just encode the value as a string; it is the simpliest and most straightforward way.  Of special note regarding the <code>ToJson</code> and <code>FromJson</code> functions, we don’t use the <code>json {...}</code> computation expression.  <code>ToJson</code> encodes the string value as a <code>Json</code> type.  <code>FromJson</code> returns a function that converts the string representation to a value.</p><p>Something that should be addressed, how to handle invalid values. For this example we’ll fail the parsing with an “Invalid Direction” error.  As an alternative, that might make sense in some cases, it could just be encoded to a default value.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Direction</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Direction</span> </span>= N | S | E | W  <span class="keyword">with</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (d :Direction) =</span><br><span class="line">    <span class="keyword">match</span> d <span class="keyword">with</span></span><br><span class="line">    | N -&gt; ToJsonDefaults.ToJson <span class="string">"N"</span></span><br><span class="line">    | E -&gt; ToJsonDefaults.ToJson <span class="string">"E"</span></span><br><span class="line">    | S -&gt; ToJsonDefaults.ToJson <span class="string">"S"</span></span><br><span class="line">    | W -&gt; ToJsonDefaults.ToJson <span class="string">"W"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Direction) = <span class="keyword">fun</span> json -&gt; </span><br><span class="line">    <span class="keyword">match</span> json <span class="keyword">with</span></span><br><span class="line">    | String <span class="string">"N"</span> -&gt; Value N, json</span><br><span class="line">    | String <span class="string">"E"</span> -&gt; Value E, json</span><br><span class="line">    | String <span class="string">"S"</span> -&gt; Value S, json</span><br><span class="line">    | String <span class="string">"W"</span> -&gt; Value W, json</span><br><span class="line">    | _          -&gt; failwith (sprintf <span class="string">"Invalid Direction '%A'"</span> json)</span><br><span class="line">    <span class="comment">// Alternative: Silently fail to a default</span></span><br><span class="line">    <span class="comment">// | _          -&gt; Value N, json</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>As we did before, we need to add the <code>CurrentDirection</code> at 3 points: definition, ToJson, and FromJson.  As we saw in the previous example, with the functions setup on our type, Chiron handles the rest.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a CurrentDirection field to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  CurrentDirection :Direction</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">     <span class="keyword">do!</span> Json.write <span class="string">"current_direction"</span> p.CurrentDirection</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> currentDirection = Json.read <span class="string">"current_direction"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      CurrentDirection = currentDirection</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the CurrentDirection field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  CurrentDirection = Direction.N</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, the current direction is now part of the player.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;sco</span><br></pre></td></tr></table></figure><h3 id="Discriminated-Unions-Part-2-Enums"><a href="#Discriminated-Unions-Part-2-Enums" class="headerlink" title="Discriminated Unions - Part 2 (Enums)"></a>Discriminated Unions - Part 2 (Enums)</h3><p>Discriminated Unions can also be used like enums. This requires a slightly different approach.  Primarily, enums cannot have member functions, so the methods we use before won’t work. We’ll need a little more logic in the player part of the serialization/deserialization functions. For this we’ll define a player’s level.  This is a bit contrived, since using a straight number for levels makes more sense, but this example will at least get the idea across.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Level </span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Level</span> </span>=</span><br><span class="line">  | Zero = <span class="number">0</span></span><br><span class="line">  | One = <span class="number">1</span> </span><br><span class="line">  | Two = <span class="number">2</span></span><br><span class="line">  | Three = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>One thing that is the same is where we need to add <code>Level</code>, the <code>Player</code>: definition, ToJson, and FromJson. This is where we need to provide a bit more information regarding how we want to serialize the value.  I believe the most straight forward way is to convert to the underlying int.  In the <code>ToJson</code> we need to cast as int.  For <code>FromJson</code> we need to cast from int to the <code>Level</code> type.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a Level field to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  Level: Level</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"level"</span> (int p.Level)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> level = Json.read <span class="string">"level"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      Level = enum&lt;Level&gt;(level)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the CurrentDirection field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  Level = Level.Two;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, their level is now part of the player.  And our method of serialization to int works as expected.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;level&quot;:2,&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><h3 id="Discriminated-Unions-Part-3-Complex"><a href="#Discriminated-Unions-Part-3-Complex" class="headerlink" title="Discriminated Unions - Part 3 (Complex)"></a>Discriminated Unions - Part 3 (Complex)</h3><p>Discriminated unions offer more complex ways to represent their data.  This means we have to make a decision about how we want to represent that data.  This is one place where Chiron shines, it provides the power to represent complex types as we see fit.  For this example, we’ll look at a player <code>Role</code> that represents a more complex type.  An object that has a <code>type</code> and <code>value</code> attribute feels like a simple way to serialize.  There are certainly other ways this could be represented, and the attributes don’t neccessarily have to match for the varying types.</p><p><code>ToJson</code> uses a <code>json {...}</code> computation expression.  Since there is a mixture of string and int values withing the discriminated union, we need to put them within the <code>match</code>.  This creates an object representation.  The <code>FromJson</code> function first extracts the <code>type</code> attribute from the Json object, then returns the appropriate <code>Role</code> with its respective value.  Since they all use <code>value</code>, they look similar, but that attribute, or potentially list of attributes could vary depending on role.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Role </span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Role</span> </span>= </span><br><span class="line">  | Scout <span class="keyword">of</span> string</span><br><span class="line">  | Assault <span class="keyword">of</span> string</span><br><span class="line">  | Defense <span class="keyword">of</span> string</span><br><span class="line">  | Swarm <span class="keyword">of</span> int</span><br><span class="line">  <span class="keyword">with</span> </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (r :Role) = </span><br><span class="line">    <span class="keyword">match</span> r <span class="keyword">with</span></span><br><span class="line">    | Scout(x)   -&gt; json &#123;</span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"scout"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line">    | Assault(x) -&gt; json &#123;</span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"assault"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line">    | Defense(x) -&gt; json &#123;</span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"defense"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line">    | Swarm(x)   -&gt; json &#123; </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"swarm"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Role) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> role = Json.read <span class="string">"type"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> role <span class="keyword">with</span></span><br><span class="line">    | <span class="string">"scout"</span>   -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Scout(value)</span><br><span class="line">    | <span class="string">"assault"</span> -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Assault(value)</span><br><span class="line">    | <span class="string">"defense"</span> -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Defense(value)</span><br><span class="line">    | <span class="string">"swarm"</span>   -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Swarm(value)</span><br><span class="line">    | _         -&gt; failwith (sprintf <span class="string">"Invalid Role '%A'"</span> role)</span><br><span class="line">                   <span class="keyword">return</span> Swarm(<span class="number">0</span>) </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>We’re back to the familar process of modifying our 3 touch points: definition, ToJson, and FromJson.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a Role field to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  Role: Role</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"role"</span> p.Role</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> role = Json.read <span class="string">"role"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      Role = role</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the Role field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  Role = Scout(<span class="string">"ax-101"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, the role is now serialized as an object.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;level&quot;:2,&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;role&quot;:&#123;&quot;type&quot;:&quot;scout&quot;,&quot;value&quot;:&quot;ax-101&quot;&#125;,&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><p>Alternatively, if the <code>Role</code> is <code>Swarm</code>, the object is serialized as appropriate. This exactly what we want, a string value when it’s a string, and int value when it’s an int.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">player1 = &#123; ...</span><br><span class="line">  Role = Swarm(<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Result: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;level&quot;:2,&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;role&quot;:&#123;&quot;type&quot;:&quot;swarm&quot;,&quot;value&quot;:200&#125;,&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><p>As promised, here is the complete definition of <code>Player</code>, with all its attributes.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123;</span><br><span class="line">  Name :string;</span><br><span class="line">  Score :int;</span><br><span class="line">  Notes :string list;</span><br><span class="line">  IntPairs :(int * int) list;</span><br><span class="line">  Coordinates :Point list;</span><br><span class="line">  CurrentDirection :Direction;</span><br><span class="line">  Level :Level;</span><br><span class="line">  Role :Role</span><br><span class="line">  &#125; <span class="keyword">with</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123;</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"name"</span> p.Name</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"score"</span> p.Score</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"notes"</span> p.Notes</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"int_pairs"</span> p.IntPairs</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"coordinates"</span> p.Coordinates</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"current_direction"</span> p.CurrentDirection</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"level"</span> (int p.Level)</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"role"</span> p.Role</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> name = Json.read <span class="string">"name"</span></span><br><span class="line">    <span class="keyword">let!</span> score = Json.read <span class="string">"score"</span></span><br><span class="line">    <span class="keyword">let!</span> notes = Json.read <span class="string">"notes"</span></span><br><span class="line">    <span class="keyword">let!</span> intPairs = Json.read <span class="string">"int_pairs"</span></span><br><span class="line">    <span class="keyword">let!</span> coordinates = Json.read <span class="string">"coordinates"</span></span><br><span class="line">    <span class="keyword">let!</span> currentDirection = Json.read <span class="string">"current_direction"</span></span><br><span class="line">    <span class="keyword">let!</span> level = Json.read <span class="string">"level"</span></span><br><span class="line">    <span class="keyword">let!</span> role = Json.read <span class="string">"role"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">      Player.Name = name;</span><br><span class="line">      Score = score;</span><br><span class="line">      Notes = notes;</span><br><span class="line">      IntPairs = intPairs;</span><br><span class="line">      Coordinates = coordinates;</span><br><span class="line">      CurrentDirection = currentDirection;</span><br><span class="line">      Level = enum&lt;Level&gt;(level);</span><br><span class="line">      Role = role</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>This has been a light introduction into using Chiron.  Hopefully you have found it useful.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s post is a introduction to performing json serialization tasks using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://xyncro.tech/chiron/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chiron&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Chiron" scheme="http://codesuji.com/tags/Chiron/"/>
    
      <category term="Serialization" scheme="http://codesuji.com/tags/Serialization/"/>
    
  </entry>
  
  <entry>
    <title>F# Benchmarking</title>
    <link href="http://codesuji.com/2018/12/18/F-Benchmarking/"/>
    <id>http://codesuji.com/2018/12/18/F-Benchmarking/</id>
    <published>2018-12-19T04:17:32.000Z</published>
    <updated>2018-12-19T03:50:11.257Z</updated>
    
    <content type="html"><![CDATA[<p>Occasionally the need arises in an <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> project to perform benchmarking.  <a href="https://benchmarkdotnet.org/" target="_blank" rel="noopener">BenchmarkDotNet</a> is a powerful tool made exactly for this purpose.  Today’s post provides an introductory look into the process.</p><a id="more"></a><p>Although <code>#time</code> and <code>Stopwatch</code> are useful for quick and dirty checks, BenchmarkDotNet allows a more comprehensive look at performance characteristics. This post will use <code>sort</code> for a case study to display a sample of what can be done.  Before getting started ensure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a>.  Select <strong>SDK</strong> for your platform.  After that create a console F# project and install the BenchmarkDotNet package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name BenchmarkSort</span><br><span class="line">cd BenchmarkSort </span><br><span class="line">dotnet add package BenchmarkDotNet --version 0.11.3</span><br></pre></td></tr></table></figure><p>First, the initial stuff.  One note here is that I decided to use a complex type <code>Foo</code> for my sorting benchmark.  I could’ve used <code>int</code>, but .NET has highly optimized methods for sorting native types like <code>int</code>.  To the level the playing field a bit I wanted to take this out of the equation.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Program</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Attributes</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Running</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Foo</span> </span>= &#123; Id: int; Name: string &#125;</span><br></pre></td></tr></table></figure><p>Time to create the test functions.  The comparison targets will be .NET’s built in <code>List.sort</code>, then a hand-written <code>QuickSort</code>, and <code>BubbleSort</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> listSort (l :Foo list) =</span><br><span class="line">  List.sort l</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> quickSort (l :Foo list) =</span><br><span class="line">  <span class="keyword">match</span> l <span class="keyword">with</span> </span><br><span class="line">  | []   -&gt; []</span><br><span class="line">  | h::t -&gt; <span class="keyword">let</span> (smaller, larger) = List.partition (<span class="keyword">fun</span> x -&gt; x.Id &lt;= h.Id) t</span><br><span class="line">            List.concat [ quickSort smaller; [h]; quickSort larger ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bubbleSortMutable (l :Foo list) = </span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> l' = l |&gt; Array.ofList</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> keepGoing = <span class="keyword">true</span></span><br><span class="line">  <span class="keyword">while</span> keepGoing <span class="keyword">do</span></span><br><span class="line">    keepGoing &lt;- <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1.</span>.(Array.length l' - <span class="number">1</span>)] <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> l'.[i<span class="number">-1</span>] &gt; l'.[i] <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">let</span> t = l'.[i<span class="number">-1</span>]</span><br><span class="line">        l'.[i<span class="number">-1</span>] &lt;- l'.[i]</span><br><span class="line">        l'.[i] &lt;- t</span><br><span class="line">        keepGoing &lt;- <span class="keyword">true</span></span><br><span class="line">  l' |&gt; List.ofArray</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bubbleSortRecursive (l :Foo list) = </span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">rec</span> bubbleSort' a rev l =</span><br><span class="line">    <span class="keyword">match</span> l, rev <span class="keyword">with</span></span><br><span class="line">    | [], <span class="keyword">true</span>     -&gt; List.rev a</span><br><span class="line">    | [], <span class="keyword">false</span>    -&gt; List.rev a |&gt; bubbleSort' [] <span class="keyword">true</span></span><br><span class="line">    | h1::h2::t, _ -&gt; <span class="keyword">if</span> h1 &gt; h2 </span><br><span class="line">                      <span class="keyword">then</span> bubbleSort' (h2::a) <span class="keyword">false</span> (h1::t)</span><br><span class="line">                      <span class="keyword">else</span> bubbleSort' (h1::a) rev (h2::t)</span><br><span class="line">    | h::t, _      -&gt; bubbleSort' (h::a) rev t</span><br><span class="line">  bubbleSort' [] <span class="keyword">true</span> l</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> initList n = </span><br><span class="line">  [<span class="number">1.</span>.n] </span><br><span class="line">  |&gt; List.map (<span class="keyword">fun</span> _ -&gt;</span><br><span class="line">    <span class="keyword">let</span> id = rand.Next(<span class="number">10</span>*n)</span><br><span class="line">    &#123; Foo.Id = id; Name = id.ToString() &#125;)</span><br></pre></td></tr></table></figure><p>Now it is time to setup the benchmarking methods.  First, I make a type <code>SortComparison</code>.  I have attached a <code>MemoryDiagnoser</code> attribute so that I’ll get GC statistics back from the benchmarking run.  The sorting methods will be tested against different list sizes (10, 1000, and 10000).  This is defined in <code>ListSize</code>, where the <code>Params</code> attribute defines what BenchmarkDotNet should use for parameterization during the tests.  Next, it is time to define what will be compared.  To do this there are member functions marked with the <code>Benchmark</code> attribute.  That’s all there is to setting up the tests.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;MemoryDiagnoser&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">SortComparison</span> </span>() =</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Params (10,1000,10000)&gt;]</span> </span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> ListSize :int = <span class="number">0</span> <span class="keyword">with</span> get, set</span><br><span class="line"></span><br><span class="line">  <span class="keyword">member</span> self.mainList = initList self.ListSize</span><br><span class="line">  </span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListSort() = listSort self.mainList</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListQuickSort () = quickSort self.mainList</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListBubbleSortMutable () = bubbleSortMutable self.mainList</span><br><span class="line">  </span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListBubbleSortRecursive () = bubbleSortRecursive self.mainList</span><br></pre></td></tr></table></figure><p>In Main, all that is needed is a simple runner.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> Main args =</span><br><span class="line">  BenchmarkRunner.Run typeof&lt;SortComparison&gt; |&gt; ignore</span><br></pre></td></tr></table></figure><p>Once everything is together, they just need to run.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Benchmark(master)$ dotnet run -c release</span><br></pre></td></tr></table></figure><p>Time to look at the results. The benchmark spews a ton of data, but I’ll just focus on the final results here.</p><p><img src="/images/be1/results.png" alt="Results"></p><p>The test results aren’t too surprising.  .NET’s built in sort is more efficient for large lists, although QuickSort holds its own as long as the list isn’t too large.  Both are faster than BubbleSort.  With the GC stats, we can also see where additional GC’s start to hinder some of the algorithms.</p><p>This is great, and time to make it a bit more advanced.  Multiple benchmarks can be placed and run in the same file.  Here I add <code>FakeComparison</code> and add a selector when the application is run.  This is helpful when you want to keep different sets of benchmarking tests.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">FakeComparison</span> </span>() =</span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.Fake1 () = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.Fake2 () = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> defaultSwitch () = BenchmarkSwitcher [| typeof&lt;SortComparison&gt;; typeof&lt;FakeComparison&gt; |]</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> Main args =</span><br><span class="line">  defaultSwitch().Run args |&gt; ignore </span><br></pre></td></tr></table></figure><p>Now, when running, a prompt is provided.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~/Benchmark(master)$ dotnet run -c release</span><br><span class="line">Available Benchmarks:</span><br><span class="line">  #0 SortComparison</span><br><span class="line">  #1 FakeComparison</span><br><span class="line"></span><br><span class="line">You should select the target benchmark(s). Please, print a number of a benchmark (e.g. &apos;0&apos;) or a contained benchmark caption (e.g. &apos;SortComparison&apos;):</span><br><span class="line">If you want to select few, please separate them with space ` ` (e.g. `1 2 3`)</span><br><span class="line">You can also provide the class name in console arguments by using --filter. (e.g. &apos;--filter *SortComparison*&apos;):</span><br></pre></td></tr></table></figure><p>There is one more aspect of reporting, and that is the final results.  What I’ve shown has been part of the console output, but there is more.  A <code>BenchmarkDotNet.Artifacts</code> directory contains a detailed run log.  It also contains specially formatted results, namely: csv, html, and github markdown.  All of these being very useful for more advanced reporting or just simply dropping into a repo.</p><p>This provides the basis to explore BenchmarkDotNet in your next performance comparison endeavor.  Be sure to check out the <a href="https://benchmarkdotnet.org/" target="_blank" rel="noopener">BenchmarkDotNet</a> site for additional documentation. Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Occasionally the need arises in an &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; project to perform benchmarking.  &lt;a href=&quot;https://benchmarkdotnet.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BenchmarkDotNet&lt;/a&gt; is a powerful tool made exactly for this purpose.  Today’s post provides an introductory look into the process.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Benchmarking" scheme="http://codesuji.com/tags/Benchmarking/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.NET Clustering (V2)</title>
    <link href="http://codesuji.com/2018/11/30/F-and-MLNet-Clustering-V2/"/>
    <id>http://codesuji.com/2018/11/30/F-and-MLNet-Clustering-V2/</id>
    <published>2018-12-01T03:17:49.000Z</published>
    <updated>2019-09-16T23:48:52.511Z</updated>
    
    <content type="html"><![CDATA[<p>With the release of v0.7.0, it is time to revisit K-means clustering using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and Microsoft’s new <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a> framework.  The api has changed enough to warrant a minor rework.  This post is a re-examination of a previous post <a href="/2018/07/07/F-and-MLNet-Clustering/">F# and ML.NET Clustering</a>.  The use case will be to use examination attributes to classify mammogram results.</p><a id="more"></a><p><i>Note: ML.NET is still evolving, this post was written using Microsoft.ML v0.7.0.</i></p><p>Make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.1</a> installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>First, create a console F# project, then add the ML.NET package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-Mammogram</span><br><span class="line">cd MLNet-Mammogram</span><br><span class="line">dotnet add package Microsoft.ML --version 0.7.0</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source I used for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Mammographic+Mass" target="_blank" rel="noopener">UCI</a>.  The datafile can be found [here] (<a href="https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data" target="_blank" rel="noopener">https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is no header row.  The columns represent 5 features and 1 classification column:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- BI-RADS assessment (1-5)</span><br><span class="line">- Age (Patient&apos;s age)</span><br><span class="line">- Shape (mass shape: round=1 oval=2 lobular=3 irregular=4 (nominal))</span><br><span class="line">- Margin (mass margin: circumscribed=1 microlobulated=2 obscured=3 ill-defined=4 spiculated=5 (nominal))</span><br><span class="line">- Density: (mass density high=1 iso=2 low=3 fat-containing=4 (ordinal))</span><br><span class="line">- Severity: (benign=0 or malignant=1)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">5,67,3,5,3,1</span><br><span class="line">4,43,1,1,?,1</span><br><span class="line">5,58,4,5,3,1</span><br><span class="line">4,28,1,1,3,0</span><br><span class="line">5,57,1,5,3,1</span><br></pre></td></tr></table></figure><p>Now that the project is setup and data is local, we can get to the code.  Time to open up the already created <code>Program.fs</code>.  First, add the necessary namespaces.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Api</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Data</span><br></pre></td></tr></table></figure><p>The ML.NET pipeline expects the data in a specific format.  In the C# world, this is a class, for F# we can use a type.  Below are the required types; <code>MammogramData</code> is the input data, <code>MammogramPrediction</code> is the output prediction.  For <code>MammogramData</code>, this is basically a a map of columns to member variables.  There are a couple notable points to ensure the pipeline can properly consume the data.  Each attribute must be <code>mutable public</code>, it also requires the <code>[&lt;Column(&quot;#&quot;)&gt;]</code> to specify it’s column position, and <code>[&lt;DefaultValue&gt;]</code> attributes.  For <code>MammogramPrediction</code>, <code>PredictionLabel</code> for the cluster id, and <code>Score</code> for calculated distances from all clusters is required.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MammogramPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;Column("0")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> BiRads:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("1")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Age:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("2")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Shape:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("3")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Margin:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("4")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Density:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("5")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label :float32</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MammogramPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;ColumnName("PredictedLabel")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SelectedClusterId:uint32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;ColumnName("Score")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Distance: float32[]</span><br></pre></td></tr></table></figure><p>Here is one of the big changes from early versions.  Where the pipeline object is gone, it has been replaced with an <code>MLContext</code>.  Although different, it still maintains intuitiveness, and gains additional functionality.  First, create an MLContext, if desired a <code>seed</code> can be defined to ensure the same results between executions.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mlContext = MLContext()</span><br><span class="line"><span class="comment">// let mlContext = MLContext(seed = Nullable 1)</span></span><br></pre></td></tr></table></figure><p>Time to load the data. This is another method that has updated since earlier versions.  First create a <code>TextReader</code> with a file format definition.  Then use that object to read the data from the data file.  The entire file can be used for training.  Alternatively, <code>TrainTestSplit</code> (another new function) can be used to easily divide a single dataset into train and test sets.  This is especially handy during the development process.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"./data/mammographic_masses.data"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////</span></span><br><span class="line"><span class="comment">// Load data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataLoader = </span><br><span class="line">  mlContext.Data.TextReader(</span><br><span class="line">    TextLoader.Arguments(</span><br><span class="line">      Separator = <span class="string">","</span>,</span><br><span class="line">      HasHeader = <span class="keyword">true</span>,</span><br><span class="line">      Column = </span><br><span class="line">        [|</span><br><span class="line">            TextLoader.Column(<span class="string">"BiRads"</span>, Nullable DataKind.R4, <span class="number">0</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Age"</span>, Nullable DataKind.R4, <span class="number">1</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Shape"</span>, Nullable DataKind.R4, <span class="number">2</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Margin"</span>, Nullable DataKind.R4, <span class="number">3</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Density"</span>, Nullable DataKind.R4, <span class="number">4</span>)</span><br><span class="line">        |]</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> allData = dataLoader.Read dataPath</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">struct</span> (trainingData, testingData) = mlContext.Clustering.TrainTestSplit(allData, testFraction = <span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><p>After the data is loaded, feature columns need to be added to the transforms.  I’m going to use all feature columns from the file, and exclude severity.  The clustering model requires features to be numeric, which if fine here.  As the other posts show, you can convert text to numeric mappings if necessary.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataProcessPipeline = mlContext.Transforms.Concatenate(<span class="string">"Features"</span>, <span class="string">"BiRads"</span>, <span class="string">"Age"</span>, <span class="string">"Shape"</span>, <span class="string">"Margin"</span>, <span class="string">"Density"</span>)</span><br></pre></td></tr></table></figure><p>Now that the features are defined, it is time to create a model.  This will be <code>KMeans</code>.  Similar to the other trainers, custom parameters can be defined, I have decided to use <code>K = 4</code>.  It also has other options as as <code>MaxIterations</code>, <code>OptTol</code> (convergence tolerance), and <code>NormalizeFeatures</code>.  The KMeans trainer/estimator must be combined with the training data to create a model.  The last part, create a prediction function from the model.  Note the <code>MammogramData</code> and <code>MammogramPrediction</code> types as part of the call.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> trainer = mlContext.Clustering.Trainers.KMeans(features = <span class="string">"Features"</span>, clustersCount = <span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> estimator = dataProcessPipeline.Append trainer</span><br><span class="line"><span class="keyword">let</span> trainedModel = estimator.Fit trainingData</span><br><span class="line"><span class="keyword">let</span> model = trainedModel.MakePredictionFunction&lt;MammogramData, MammogramPrediction&gt;(mlContext) </span><br></pre></td></tr></table></figure><p>Validation of any model is important.  With the data split into train and test sets, it is easy to get metrics against the training data and then validate against the previously unseen test data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Evaluate results (train)</span></span><br><span class="line"><span class="keyword">let</span> metricsTrain = </span><br><span class="line">  <span class="keyword">let</span> predictions = trainedModel.Transform trainingData</span><br><span class="line">  mlContext.Clustering.Evaluate(predictions, score = <span class="string">"Score"</span>, features = <span class="string">"Features"</span>)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Train Data:"</span></span><br><span class="line">printfn <span class="string">"Avg Min Score: %f"</span> &lt;| metricsTrain.AvgMinScore</span><br><span class="line"><span class="comment">// Davies-Bouldin Index</span></span><br><span class="line">printfn <span class="string">"DBI          : %A"</span> &lt;| metricsTrain.Dbi</span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Evaluate results (test)</span></span><br><span class="line"><span class="keyword">let</span> metricsTest = </span><br><span class="line">  <span class="keyword">let</span> predictions = trainedModel.Transform testingData</span><br><span class="line">  mlContext.Clustering.Evaluate(predictions, score = <span class="string">"Score"</span>, features = <span class="string">"Features"</span>)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Test Data:"</span></span><br><span class="line">printfn <span class="string">"Avg Min Score: %f"</span> &lt;| metricsTest.AvgMinScore</span><br><span class="line"><span class="comment">// Davies-Bouldin Index</span></span><br><span class="line">printfn <span class="string">"DBI          : %A"</span> &lt;| metricsTest.Dbi</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Train Data:</span><br><span class="line">Avg Min Score: <span class="number">31.570207</span></span><br><span class="line">DBI          : <span class="number">0.6515402653</span></span><br><span class="line"></span><br><span class="line">Test Data:</span><br><span class="line">Avg Min Score: <span class="number">27.217818</span></span><br><span class="line">DBI          : <span class="number">0.6298469451</span></span><br></pre></td></tr></table></figure><p>With the initial evaluation out of the way, it is time to move onto individual predictions.  I want to create aggregate classification percentages for each cluster.  To do this I take the predictive model and apply it against the the training file.  Using the predicted cluster and the training label, I create a mapping for detailed predictions.  Each cluster gets its own raw benign/malignant count, which can be converted into percentage likelihood for each classification.  I have the details annotated in comments, to make it easier to follow.  Honestly, this is the most labor-intensive part of the process.  I’d love to be able to pass an cluster-aggregate-score function in as part of the trainer to eliminate this work or reprocessing the data.  Once I have these results as a <code>Map</code>, I can query results easy enough.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create classifications by cluster </span></span><br><span class="line"><span class="keyword">let</span> clusterClassification = </span><br><span class="line">  <span class="comment">// Read file</span></span><br><span class="line">  System.IO.File.ReadAllLines(dataPath)</span><br><span class="line">  <span class="comment">// Filter incomplete rows</span></span><br><span class="line">  |&gt; Array.filter (<span class="keyword">fun</span> line -&gt; not (line.Contains(<span class="string">"?"</span>)))</span><br><span class="line">  <span class="comment">// Run predictions </span></span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> line -&gt; </span><br><span class="line">    <span class="comment">// Convert line to float array</span></span><br><span class="line">    <span class="keyword">let</span> row = line.Split(',') |&gt; Array.map float32</span><br><span class="line">    <span class="comment">// Predict the clusterId of the row</span></span><br><span class="line">    <span class="keyword">let</span> predictedCluster = </span><br><span class="line">      model.Predict(</span><br><span class="line">        MammogramData(</span><br><span class="line">          BiRads = row.[<span class="number">0</span>],</span><br><span class="line">          Age = row.[<span class="number">1</span>],</span><br><span class="line">          Shape = row.[<span class="number">2</span>],</span><br><span class="line">          Margin = row.[<span class="number">3</span>],</span><br><span class="line">          Density = row.[<span class="number">4</span>])) </span><br><span class="line">    <span class="comment">// Populate benign/maligant counter for cluster (0=benign, 1=malignant)</span></span><br><span class="line">    <span class="keyword">if</span> int row.[<span class="number">5</span>] = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">then</span> (predictedCluster.SelectedClusterId, [| <span class="number">1</span>; <span class="number">0</span> |])</span><br><span class="line">    <span class="keyword">else</span> (predictedCluster.SelectedClusterId, [| <span class="number">0</span>; <span class="number">1</span> |]))</span><br><span class="line">  <span class="comment">// Group by ClusterId</span></span><br><span class="line">  |&gt; Array.groupBy (<span class="keyword">fun</span> (clusterId, _) -&gt; clusterId)</span><br><span class="line">  <span class="comment">// Sum each cluster's classification counts</span></span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> (clusterId, data) -&gt; </span><br><span class="line">    <span class="keyword">let</span> countSums = </span><br><span class="line">      data</span><br><span class="line">      |&gt; Array.map (<span class="keyword">fun</span> (_, z) -&gt; z)</span><br><span class="line">      |&gt; Array.fold (<span class="keyword">fun</span> a (x:int []) -&gt; </span><br><span class="line">          [| a.[<span class="number">0</span>] + x.[<span class="number">0</span>]; a.[<span class="number">1</span>] + x.[<span class="number">1</span>] |]) [| <span class="number">0</span>; <span class="number">0</span> |] </span><br><span class="line"></span><br><span class="line">    (clusterId, countSums))</span><br><span class="line">  |&gt; Map.ofArray</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Provide a prediction based on cluster id</span></span><br><span class="line"><span class="keyword">let</span> clusterIdToPrediction (clusterClassification:Map&lt;uint32, int[]&gt;) (clusterId:uint32) =</span><br><span class="line">  <span class="keyword">let</span> classifications = clusterClassification.Item clusterId</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> total = classifications |&gt; Array.sum |&gt; float</span><br><span class="line">  <span class="keyword">let</span> benignPct = float classifications.[<span class="number">0</span>] / total</span><br><span class="line">  <span class="keyword">let</span> malignantPct = float classifications.[<span class="number">1</span>] / total</span><br><span class="line"></span><br><span class="line">  sprintf <span class="string">"Benign: %0.2f Malignant: %0.2f (%d, %d)"</span> </span><br><span class="line">    benignPct </span><br><span class="line">    malignantPct </span><br><span class="line">    classifications.[<span class="number">0</span>] </span><br><span class="line">    classifications.[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>Now that the <code>clusterIdToPrediction</code> is defined, I can pair the ML.NET cluster prediction with the aggregated cluster classification percentages.  First, create a <code>MammogramData</code> object and provide it to the <code>Predict</code> method.  Second, use the predicted clusterId with the aggregated cluster classification percentages to get a classification result.  For this example, I pull one of those rows from the training data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prediction</span></span><br><span class="line"><span class="keyword">let</span> test1 = MammogramData()</span><br><span class="line">test1.BiRads &lt;- <span class="number">5.</span>f</span><br><span class="line">test1.Age &lt;- <span class="number">67.</span>f</span><br><span class="line">test1.Shape &lt;- <span class="number">3.</span>f</span><br><span class="line">test1.Margin &lt;- <span class="number">5.</span>f</span><br><span class="line">test1.Density &lt;- <span class="number">3.</span>f</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionTest1 = model.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted ClusterId: %d"</span> predictionTest1.SelectedClusterId</span><br><span class="line">printfn <span class="string">"Predicted Distances: %A"</span> predictionTest1.Distance</span><br><span class="line">printfn <span class="string">"Predicted Result: %s"</span> (clusterIdToPrediction clusterClassification predictionTest1.SelectedClusterId)</span><br><span class="line">printfn <span class="string">"Actual Result   : 1 (Malignant)"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>The results show the prediction falls into cluster 1, which has a 80% likelihood it is malignant, which matches the actual value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result:</span><br><span class="line">Predicted ClusterId: 1</span><br><span class="line">Predicted Distances: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>Once a model has been created, it is often useful to save for later use.  The save method has changed from previous versions.  Once saved, this model can then be loaded for future use.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line"><span class="keyword">let</span> saveModel (mlContext:MLContext) trainedMode = </span><br><span class="line">  <span class="keyword">use</span> fsWrite = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Create, FileAccess.Write, FileShare.Write)</span><br><span class="line">  mlContext.Model.Save(trainedModel, fsWrite);</span><br><span class="line"></span><br><span class="line">saveModel mlContext trainedModel</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file and run a prediction</span></span><br><span class="line"><span class="keyword">use</span> fsRead = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Open, FileAccess.Read, FileShare.Read)</span><br><span class="line"><span class="keyword">let</span> mlContextReloaded = MLContext()</span><br><span class="line"><span class="keyword">let</span> trainedModelReloaded = TransformerChain.LoadFrom(mlContextReloaded, fsRead)</span><br><span class="line"><span class="keyword">let</span> modelReloaded = trainedModel.MakePredictionFunction&lt;MammogramData, MammogramPrediction&gt;(mlContextReloaded);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionReloaded = modelReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted ClusterId RL: %d"</span> predictionReloaded.SelectedClusterId</span><br><span class="line">printfn <span class="string">"Predicted Distances RL: %A"</span> predictionReloaded.Distance</span><br><span class="line">printfn <span class="string">"Predicted Result RL: %s"</span> (clusterIdToPrediction clusterClassification predictionReloaded.SelectedClusterId)</span><br><span class="line">printfn <span class="string">"Actual Result RL   : 1 (Malignant)"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>As expected, the prediction results are the same with the reloaded model.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result: (model reloaded):</span><br><span class="line">Predicted ClusterId: 1</span><br><span class="line">Predicted Distances: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>Throughout the post, portions of the output have been provided out of band.  Here is how the whole thing looks when run with <code>dotnet run</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Train Data:</span><br><span class="line">Avg Min Score: 31.872808</span><br><span class="line">DBI          : 0.6556137903</span><br><span class="line"></span><br><span class="line">Test Data:</span><br><span class="line">Avg Min Score: 27.691496</span><br><span class="line">DBI          : 0.6635021486</span><br><span class="line"></span><br><span class="line">ClusterId 1u =&gt; Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">ClusterId 2u =&gt; Benign: 0.90 Malignant: 0.10 (95, 11)</span><br><span class="line">ClusterId 3u =&gt; Benign: 0.49 Malignant: 0.51 (151, 156)</span><br><span class="line">ClusterId 4u =&gt; Benign: 0.66 Malignant: 0.34 (141, 73)</span><br><span class="line"></span><br><span class="line">Predicted ClusterId: 1</span><br><span class="line">Predicted Distances: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br><span class="line"></span><br><span class="line">Predicted ClusterId RL: 1</span><br><span class="line">Predicted Distances RL: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result RL: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result RL   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>This has been a brief look into training and using an ML.NET k-means cluster model.  As seen with the other models, ML.NET is providing a nice consistent interface and has some good components.  It is a framework that continues to grow in a positive direction.  Kudos and thanks to all the people making this a reality.  That’s all for now.  Until next time.</p><p><img src="/images/mlnet3/320px-Abnormal_mammogram.jpg" alt=""></p><!-- Mammogram image is in the public domain: https://commons.wikimedia.org/wiki/File:Abnormal_mammogram.jpg -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With the release of v0.7.0, it is time to revisit K-means clustering using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and Microsoft’s new &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt; framework.  The api has changed enough to warrant a minor rework.  This post is a re-examination of a previous post &lt;a href=&quot;/2018/07/07/F-and-MLNet-Clustering/&quot;&gt;F# and ML.NET Clustering&lt;/a&gt;.  The use case will be to use examination attributes to classify mammogram results.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
</feed>
