<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codesuji</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codesuji.com/"/>
  <updated>2019-10-14T13:28:54.121Z</updated>
  <id>http://codesuji.com/</id>
  
  <author>
    <name>codesuji.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Performance Profiling F#</title>
    <link href="http://codesuji.com/2019/10/13/F-Performance-Profiling/"/>
    <id>http://codesuji.com/2019/10/13/F-Performance-Profiling/</id>
    <published>2019-10-13T11:32:09.000Z</published>
    <updated>2019-10-14T13:28:54.121Z</updated>
    
    <content type="html"><![CDATA[<p>The release of .NET Core version 3 contains some exciting cross-platform profiling tools.  Today I’ll use some of the newly available tools to target problem areas and improve performance of my <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>-based library: FastDtw, as seen <a href="/2019/10/11/FastDtw">here</a>.</p><a id="more"></a><p>The new tooling that supports .NET Core profiling on Linux is a welcome addition.  It fills an important gap as the .NET ecosystem further improves support for non-Windows environments.  To easily be able to run the entire profilng stack on Linux is a joy.  This does require  at least <a href="https://dotnet.microsoft.com/download" target="_blank" rel="noopener">.NET Core version 3.0</a>.</p><p>To get started I need to add some global tooling.  I’ll add the trace tool for data capture and SpeedScope for data viewing.  <a href="https://www.speedscope.app/" target="_blank" rel="noopener">SpeedScope</a> has a website where you can upload traces if you prefer, but I generally like to run things locally if I can.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install --global dotnet-trace--version 3.0.47001</span><br><span class="line">npm install -g speedscope</span><br></pre></td></tr></table></figure><p>Fwiw, Microsoft has released several new tools.  Even though I will only focus on <code>trace</code> today, I want to mention the other ones, in case you want to look deeper into them.  Counters are for tracking live stats, and Dump is useful for application dumps and debugging.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install --global dotnet-counters --version 3.0.47001 </span><br><span class="line">dotnet tool install --global dotnet-dump --version 3.0.47001 </span><br></pre></td></tr></table></figure><p>Now that the basic tooling is installed, it is time to get started.  For this, I’ll put together a simple app that uses the library to profile.  Since I want to improve performance along the way, I’ll directly use the project source instead of the nuget package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang f# -n perf &amp;&amp; cd perf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ItemGroup&gt;</span><br><span class="line">  &lt;ProjectReference Include=&quot;..\src\FastDtw.fsproj&quot; /&gt;</span><br><span class="line">&lt;/ItemGroup&gt;</span><br></pre></td></tr></table></figure><p>For my purposes I don’t need anything fancy.  I will just loop infinitely, creating 2 randomly sized series to compare.  This will give me a steady process to perform a trace against.  I could’ve chosen anything really, but opt’d to compare a sin wave to a randomly altered sin wave.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> FastDtw</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rand = Random()</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">true</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">let</span> seriesLength = rand.Next(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">let</span> a = Array.init seriesLength (<span class="keyword">fun</span> x -&gt; Math.Sin(float x))</span><br><span class="line">    <span class="keyword">let</span> boffset = rand.NextDouble()</span><br><span class="line">    <span class="keyword">let</span> b = Array.init seriesLength (<span class="keyword">fun</span> x -&gt; boffset + Math.Sin(float x + rand.NextDouble()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> d = FastDtw.Distance a b <span class="number">2</span></span><br><span class="line">    ()</span><br><span class="line"></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>I’ll open 2 terminals: One to run my test, and another to profile.  First, <code>dotnet run</code> to get my simple app looping indefinitely.  Tracing is a multi-step process.  To start, I need to find it’s process id.  Once I have that I can starting tracing the process in question.  I also want to save it in a format that speedscope recognizes.  Once I have enough data I’ll stop the capture and do some analysis.  How much data is enough?  That will be problem dependent, but for this particular problem I’ll use about 20 seconds of data.  Once the capture is complete, the interesting part starts, looking at the provided profile using speedscope.  Running the below command will open the results in a browser.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet trace list-processes</span><br><span class="line">     14719 dotnet     /usr/share/dotnet/dotnet</span><br><span class="line">     14782 dotnet     /usr/share/dotnet/dotnet</span><br><span class="line">     14765 Perf       /home/jeff/projects/fastdtw/perf/bin/Debug/netcoreapp3.0/Perf</span><br><span class="line"></span><br><span class="line">$ dotnet trace collect --format speedscope -p 14765</span><br><span class="line"></span><br><span class="line">[00:00:00:00]Recording trace 581.00   (B)                             </span><br><span class="line">[00:00:00:00]Recording trace 592.00   (B)                             </span><br><span class="line">[00:00:00:00]Recording trace 5.275    (KB)                            </span><br><span class="line">...</span><br><span class="line">[00:00:00:21]Recording trace 735.465  (KB)                            </span><br><span class="line">[00:00:00:21]Recording trace 751.849  (KB)                            </span><br><span class="line">[00:00:00:21]Recording trace 761.382  (KB)                            </span><br><span class="line">Press &lt;Enter&gt; or &lt;Ctrl+C&gt; to exit...</span><br><span class="line"></span><br><span class="line">$ speedscope trace.speedscope.json</span><br></pre></td></tr></table></figure><p>As mentioned before, I am using <a href="https://www.speedscope.app/" target="_blank" rel="noopener">speedscope</a>, which is a flamegraph visualizer.  I have the data in the proper format, but if I didn’t, the trace tool comes with a conversion command as well, <code>dotnet trace convert trace.foo --format speedscope</code>.</p><p>My intention is not to make a speedscope tutorial, but it is useful to get some bearings.  The interface has 3 main views “Time Order”, “Left Heavy”, and “Sandwich”.  Time Order is representative of chronological time through the execution of the application, which isn’t interesting to me today.  Left Heavy groups function calls so it is easy to see which functions are taking the most time, and their respective callers.  “Sandwich” uses a percent time execution to find the big timesinks, but it also includes callers and callees, to help track the call stack a bit.  Depending on the view that is picked, additional detail is shown regarding the function in question.  I will primary leverage the last two views.</p><p><img src="/images/pe1/1-lefthand.png" alt="Initial Profile (Lefthand)"></p><p><br></p><p><img src="/images/pe1/1-sandwich.png" alt="Initial Profile (Sandwich)"></p><p>Looking at the above charts, it appears Array2D creation is unexpectedly taking a significant amount of time.  Looking into the code I see a frankly silly mistake.  I want to initialize the array with 0s, but for some reason I was using a lambda function instead of a straight initialization.  I don’t need the additional functionality of the lambda so this is a pretty obvious change.  As a sidenote, the <code>create</code> runs about 60% faster than <code>init</code> in my very informal tests.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OLD</span></span><br><span class="line"><span class="keyword">let</span> path = Array2D.init (n+<span class="number">1</span>) (m+<span class="number">1</span>) (<span class="keyword">fun</span> _ _ -&gt; <span class="number">0.</span>)</span><br><span class="line"><span class="comment">// NEW</span></span><br><span class="line"><span class="keyword">let</span> path = Array2D.create (n+<span class="number">1</span>) (m+<span class="number">1</span>) <span class="number">0.</span></span><br></pre></td></tr></table></figure><p><img src="/images/pe1/2-lefthand.png" alt="Profile (Lefthand)"></p><p>I now rerun my test with the newly enhanced code to find another area of contention in the <code>coarser</code> function.  Here is another interesting find, apparently a stepped population of an array triggers an underlying list creation, which carries with it some additional overhead.  Initializing the array differently is about 10 times faster than the <code>[| a .. s .. b |]</code>.  I think the original code is a bit more intuitive, but the change is worth the performance boost.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OLD</span></span><br><span class="line">[|<span class="number">0</span> .. <span class="number">2</span> .. series.Length - <span class="number">1</span>|]</span><br><span class="line"><span class="comment">// NEW</span></span><br><span class="line">(Array.init ((series.Length + <span class="number">1</span>) / <span class="number">2</span>) (<span class="keyword">fun</span> i -&gt; i * <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/pe1/3-lefthand.png" alt="Profile (Lefthand)"></p><p>In the next profiling run, I see calls being dominated by my <code>InWindow</code> functions.  Internally they mostly use <code>match</code> against an option type.  Turns out using a straight <code>If x.IsSome then ... else ...</code> is about 3 times faster than the equivalent <code>match</code>.  I will admit, I have a tendancy to over-use match, this is a good reminder to be more careful and ensure the usecase makes sense.  This brings up another rework, the <code>travelledPath</code> function I have for backtracking the path used by the algorithm for determining distance between the series.  In retrospect I overthought things.  I won’t show the before/after code because it’s a larger rewrite.  I was able to simplify and make the function faster, ironically removing a several match option calls that initially pointed me this way.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Old</span></span><br><span class="line"><span class="keyword">match</span> windows <span class="keyword">with</span></span><br><span class="line">| Some(w) -&gt; calculateDtwWithWindow series1 series2 w</span><br><span class="line">| None    -&gt; calculateDtwWithWindow series1 series2 [<span class="number">1</span>, series1.Length, <span class="number">1</span>, series2.Length]</span><br><span class="line"><span class="comment">// New</span></span><br><span class="line"><span class="keyword">if</span> windows.IsSome</span><br><span class="line"><span class="keyword">then</span> calculateDtwWithWindow series1 series2 windows.Value</span><br><span class="line"><span class="keyword">else</span> calculateDtwWithWindow series1 series2 [<span class="number">1</span>, series1.Length, <span class="number">1</span>, series2.Length]</span><br></pre></td></tr></table></figure><p><img src="/images/pe1/4-lefthand.png" alt="Profile (Lefthand)"></p><p>This is where I come to an end for now.  I allocated myself a limited amount of weekend time for this.  It looks like the next big enhancement is to remove a list usage, but the implications of that change are larger than I’m willing to take on in my current timeframe.  I will mark this away as a future enhancement.  I’m pretty happy with what I found, with not that much effort.  The new <em>dotnet trace</em> tool, in combination with <em>speedscope</em>, has proven to be very useful in quick profiling iterations on Linux.  Now that the optimizations are complete, it would be nice to see a before/after comparison.  For this I’ll use BenchmarkDotNet for some comparative analysis.  After putting together a quick benchmark app, here are the results.  Running on a couple different series sizes, I see about a 25% to 30% performance boost.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|     Method | SeriesSize |           Mean |         Error |        StdDev |     Gen 0 |     Gen 1 |     Gen 2 |  Allocated |</span><br><span class="line">|----------- |----------- |---------------:|--------------:|--------------:|----------:|----------:|----------:|-----------:|</span><br><span class="line">| OldFastDtw |         10 |       9.898 us |     0.0470 us |     0.0440 us |    5.0354 |         - |         - |    7.73 KB |</span><br><span class="line">| NewFastDtw |         10 |       7.912 us |     0.0436 us |     0.0387 us |    3.9215 |         - |         - |    6.01 KB |</span><br><span class="line">| OldFastDtw |        100 |     186.328 us |     0.6261 us |     0.5856 us |  106.9336 |         - |         - |  166.79 KB |</span><br><span class="line">| NewFastDtw |        100 |     147.231 us |     0.6857 us |     0.6414 us |   95.2148 |         - |         - |  149.78 KB |</span><br><span class="line">| OldFastDtw |       1000 |   9,935.868 us |   189.7567 us |   210.9141 us | 1062.5000 |  765.6250 |  687.5000 |  602.67 KB |</span><br><span class="line">| NewFastDtw |       1000 |   7,337.256 us |   142.6234 us |   133.4100 us | 1085.9375 |  835.9375 |  804.6875 |  446.54 KB |</span><br><span class="line">| OldFastDtw |      10000 | 877,853.287 us | 6,475.0945 us | 6,056.8074 us | 5000.0000 | 4000.0000 | 4000.0000 | 5976.72 KB |</span><br><span class="line">| NewFastDtw |      10000 | 644,914.650 us | 2,543.4351 us | 2,379.1308 us | 3000.0000 | 3000.0000 | 3000.0000 | 4208.01 KB |</span><br></pre></td></tr></table></figure><p>This is all the performance tuning I have for today.  My goal was to find some easy wins, and I did that.  It has been a nice little project to kick the new performance tooling tires.  I hope you’ve also found this interesting and I encourage you to check them out.  I think you’ll find they are a nice addition to the toolkit.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The release of .NET Core version 3 contains some exciting cross-platform profiling tools.  Today I’ll use some of the newly available tools to target problem areas and improve performance of my &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;-based library: FastDtw, as seen &lt;a href=&quot;/2019/10/11/FastDtw&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="DTW" scheme="http://codesuji.com/tags/DTW/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
      <category term="Performance" scheme="http://codesuji.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>FastDtw, an F# Implementation</title>
    <link href="http://codesuji.com/2019/10/11/FastDtw/"/>
    <id>http://codesuji.com/2019/10/11/FastDtw/</id>
    <published>2019-10-12T01:19:42.000Z</published>
    <updated>2019-10-13T02:11:00.886Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s post is a short introduction into using FastDtw for Dynamic Time Warping analysis.  Specifically it is a quick introduction to using my newly released FastDtw package.</p><a id="more"></a><p>Dynamic Time Warping (DTW) can be a useful tool when comparing signals or series while adjusting for frequency variance.  One downside to the standard algorithm is it can be expensive.  There are many ways to mitigate the cost, FastDtw is one of them.  While other methods typically hard-cap parameters on the search space, FastDtw provides a dynamic approach to reducing the search space while maintaining a higher level of accuracy.  In this post I’ll discuss the usage of my <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> package implementation of the <a href="https://cs.fit.edu/~pkc/papers/tdm04.pdf" target="_blank" rel="noopener">FastDtw: Toward Accurate Dynamic Time Warping in Linear Time and Space</a> paper.  For those interested in the details, it is a pretty accessible paper.  FastDtw is technically an approximation, but its flexible pathing strategy provides good results with some significant performance improvements over basic DTW. </p><p>To get started, you will need to have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core</a> installed.  Once this is complete the application can be setup.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang F# -n BitCoinTrends </span><br><span class="line">cd BitCoinThrends</span><br><span class="line">dotnet add package FastDtw</span><br></pre></td></tr></table></figure><p>As always, there is some basic setup.  I’ll include <code>FastDtw</code> (obviously), and a charting library for some series comparison visualizations.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FastDtw</span><br><span class="line"><span class="keyword">open</span> XPlot.GoogleCharts</span><br></pre></td></tr></table></figure><p>The example will take a csv of Bitcoin/USD conversion values and transform it into a list of datasets broken down by month.  The file is a 2010-2019 data download from <a href="https://finance.yahoo.com/quote/BTC-USD/history?p=BTC-USD" target="_blank" rel="noopener">Yahoo Finance</a>.  The format can be seen below, for today’s purposes I only care about the Data and Close fields. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date,Open,High,Low,Close,Adj Close,Volume</span><br><span class="line">2010-07-17,0.049510,0.049510,0.049510,0.049510,0.049510,0</span><br></pre></td></tr></table></figure><p>I want to break the file into datasets by month.  Since this is just a small script I’ll make a mini file processing pipeline to group and normalize the data by converting to a percentage of the previous day.  This improves comparisons, especially with something as volatile as bitcoin. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="comment">// Convert file to month-group datasets</span></span><br><span class="line">  <span class="keyword">let</span> dataSets =</span><br><span class="line">    File.ReadLines(<span class="string">"data/BTC-USD.csv"</span>)</span><br><span class="line">    |&gt; Seq.skip <span class="number">1</span> <span class="comment">// header</span></span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> line -&gt;</span><br><span class="line">      <span class="comment">// Convert line to desired tuple</span></span><br><span class="line">      <span class="keyword">let</span> columns = line.Split ','</span><br><span class="line">      <span class="keyword">let</span> month = DateTime.Parse(columns.[<span class="number">0</span>]).ToString(<span class="string">"yyyy-MM"</span>)</span><br><span class="line">      <span class="keyword">let</span> closing = float (columns.[<span class="number">4</span>])</span><br><span class="line">      (month, closing))</span><br><span class="line">    |&gt; Seq.groupBy fst <span class="comment">// groupby month </span></span><br><span class="line">    |&gt; Seq.map (<span class="keyword">fun</span> (month, closingData) -&gt; </span><br><span class="line">      <span class="comment">// Aggregate grouped rows into their respective arrays</span></span><br><span class="line">      <span class="keyword">let</span> data = </span><br><span class="line">        closingData </span><br><span class="line">        |&gt; Seq.map snd <span class="comment">// extract closing</span></span><br><span class="line">        |&gt; Seq.mapFold (<span class="keyword">fun</span> (a: float option) x -&gt; </span><br><span class="line">          <span class="comment">// Convert closing values to % change from previous day</span></span><br><span class="line">          <span class="keyword">if</span> a.IsSome <span class="keyword">then</span> (x / a.Value, Some x) <span class="keyword">else</span> (<span class="number">0.</span>, Some x)) None</span><br><span class="line">        |&gt; fst</span><br><span class="line">        |&gt; Seq.toArray</span><br><span class="line"></span><br><span class="line">      (month, data))</span><br></pre></td></tr></table></figure><p>Once the datasets are loaded, it is time to see which month most closely mirrors the trend of 9/2019.  For all the other code in this post, this is really the highlight: <code>let distance = FastDtw.Distance targetData data radius</code>.  This is where the comparison happens.  Radius allows a configurable level of accuracy.  It controls the per point search space as the series are compared.  In most cases, distance is all that matters, but there are times when how the series match up can be useful.  The <code>DistanceWithPath</code> function provides the series’ indexes that pair together.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> targetMonth = <span class="string">"2019-09"</span></span><br><span class="line"><span class="keyword">let</span> radius = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> targetData =</span><br><span class="line">  dataSets</span><br><span class="line">  |&gt; Seq.filter (<span class="keyword">fun</span> (month, _) -&gt; month = targetMonth)</span><br><span class="line">  |&gt; Seq.head</span><br><span class="line">  |&gt; snd</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> compares = </span><br><span class="line">  dataSets</span><br><span class="line">  |&gt; Seq.filter (<span class="keyword">fun</span> (month, _) -&gt; month &lt;&gt; targetMonth) <span class="comment">// skip target</span></span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (month, data)-&gt;</span><br><span class="line">    <span class="keyword">let</span> distance = FastDtw.Distance targetData data radius</span><br><span class="line">    (month, distance, data))</span><br><span class="line">  |&gt; Seq.sortBy snd3 <span class="comment">// Sort by compare result</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> randomData =</span><br><span class="line">  compares</span><br><span class="line">  |&gt; Seq.skip (Random().Next(Seq.length compares))</span><br><span class="line">  |&gt; Seq.head</span><br></pre></td></tr></table></figure><p>Once the comparisons have been completed, it is time to show some comparison charts.  I print out the top couple matches as well as a random match.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> showChart targetData compareData title seriesName =</span><br><span class="line">  <span class="keyword">let</span> dataToChartData data =</span><br><span class="line">    data </span><br><span class="line">    |&gt; Array.skip <span class="number">1</span> <span class="comment">// skip first entry (always 0)</span></span><br><span class="line">    |&gt; Array.mapi (<span class="keyword">fun</span> i x -&gt; (i, x)) </span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> targetChartData = targetData |&gt; dataToChartData</span><br><span class="line">  <span class="keyword">let</span> compareChartData = compareData |&gt; thd3 |&gt; dataToChartData</span><br><span class="line"></span><br><span class="line">  [targetChartData; compareChartData]</span><br><span class="line">  |&gt; Chart.Combo</span><br><span class="line">  |&gt; Chart.WithOptions (Options(title = sprintf <span class="string">"%s (%s)"</span> title (fst3 compareData), </span><br><span class="line">                                series = [| Series(<span class="string">"line"</span>); Series(<span class="string">"line"</span>) |]))</span><br><span class="line">  |&gt; Chart.WithLabels [<span class="string">"Target"</span>; seriesName ]</span><br><span class="line">  |&gt; Chart.WithLegend <span class="keyword">true</span></span><br><span class="line">  |&gt; Chart.WithSize (<span class="number">700</span>, <span class="number">250</span>)</span><br><span class="line">  |&gt; Chart.Show</span><br><span class="line"></span><br><span class="line">showChart targetData randomData <span class="string">"% Daily Change Comparison"</span> <span class="string">"Random Match"</span></span><br><span class="line"></span><br><span class="line">compares</span><br><span class="line">|&gt; Seq.take <span class="number">5</span></span><br><span class="line">|&gt; Seq.iteri (<span class="keyword">fun</span> i x -&gt;</span><br><span class="line">  showChart targetData x <span class="string">"% Daily Change Comparison"</span> (sprintf <span class="string">"Match %d"</span> i))</span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>Once the code is in place, it is time to look at some of the results.  It is useful to not only see a good match, but an average match.  This helps with the contrast.  There is no guarantee there will be a good match, but of the months provided, 2012-10 isn’t a bad match to 2019-09, especially considering what a random match can produce.  If you squint a bit, you even can see the portions of similar trends over a month, if only the elapsed time and amplitude is different.</p><p><img src="/images/fastdtw1/best.png" alt="Best Match"></p><p><img src="/images/fastdtw1/second.png" alt="Second-Best Match"></p><p><img src="/images/fastdtw1/random.png" alt="Random Match"></p><p>Beyond the example, it is useful to see some of the performance differences with the stock DTW algorithm.  For this I setup a quick BenchmarkDotNet test.  The below results show the performance benefits.  FastDtw is a multi-pass algorithm, so it’s not surprising that on very short series it’s overhead makes it slower.  Comparisons for larger series get anywhere from 65% - 70% faster.  One possible downside of the current implementation is more allocations, thus the extra GC events.  This is one of those cases where the allocations can be reduced with a bit of refactoring, so this looks like a good place for future optimizations. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|  Method | SeriesSize |             Mean |         Error |        StdDev |     Gen 0 |     Gen 1 |     Gen 2 |  Allocated |</span><br><span class="line">|-------- |----------- |-----------------:|--------------:|--------------:|----------:|----------:|----------:|-----------:|</span><br><span class="line">|     dtw |         10 |         3.555 us |     0.0198 us |     0.0175 us |    1.8654 |         - |         - |    2.86 KB |</span><br><span class="line">| fastDtw |         10 |         7.936 us |     0.0357 us |     0.0334 us |    3.9215 |         - |         - |    6.01 KB |</span><br><span class="line">|     dtw |        100 |       210.675 us |     0.5531 us |     0.5174 us |   59.0820 |         - |         - |   94.99 KB |</span><br><span class="line">| fastDtw |        100 |       145.968 us |     0.6435 us |     0.5704 us |   94.9707 |         - |         - |  149.76 KB |</span><br><span class="line">|     dtw |       1000 |    20,856.656 us |    66.5105 us |    58.9598 us |  593.7500 |  500.0000 |  500.0000 |  148.99 KB |</span><br><span class="line">| fastDtw |       1000 |     7,392.059 us |   137.4944 us |   135.0379 us | 1109.3750 |  828.1250 |  820.3125 |  446.05 KB |</span><br><span class="line">|     dtw |      10000 | 2,082,283.166 us | 3,328.7961 us | 2,950.8911 us |         - |         - |         - | 1483.73 KB |</span><br><span class="line">| fastDtw |      10000 |   653,825.530 us | 4,111.5875 us | 3,845.9815 us | 3000.0000 | 3000.0000 | 3000.0000 |  4134.2 KB |</span><br></pre></td></tr></table></figure><p>This has been a quick introduction into the FastDtw package.  I hope you’ve enjoyed this. Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s post is a short introduction into using FastDtw for Dynamic Time Warping analysis.  Specifically it is a quick introduction to using my newly released FastDtw package.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Dynamic Time Warping" scheme="http://codesuji.com/tags/Dynamic-Time-Warping/"/>
    
      <category term="Dtw" scheme="http://codesuji.com/tags/Dtw/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.NET Regression</title>
    <link href="http://codesuji.com/2019/09/14/F-and-MLNet-Regression-V2/"/>
    <id>http://codesuji.com/2019/09/14/F-and-MLNet-Regression-V2/</id>
    <published>2019-09-14T11:23:03.000Z</published>
    <updated>2019-09-16T23:47:19.713Z</updated>
    
    <content type="html"><![CDATA[<p>Today I’ll look at using <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a> and <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a> to perform some model building.  Specifically to predict concrete compressive strength based on its composite ingredients.  If this sounds familiar, it is.  This is a revisit of a previous <a href="/2018/06/09/F-and-MLNet-Regression/">post</a> that explored a beta version of ML.NET.  This time around, the version 1 interface will be used.</p><a id="more"></a><p>It has been on my list for awhile to revisit the ML.NET beta posts to see how things have changed as well as get a good example of code in the new, now version 1, world.  Here I’ll be looking at the <a href="/2018/06/09/F-and-MLNet-Regression/">Regression</a> post from last year.  The original plan was to perform a closer analysis of how things have changed over time.  But the reality is so much has changed that a line by line comparison won’t provide much value.  Instead, I’ve decided to just redo the post using ML.NET version 1.3 and show some interesting points along the way.  Before getting into it, the experience was definitely better this time around.  The improvements are obvious and I have been pleased with the progression the ML.NET team has made over time.  Without further adieu, make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a> installed.  If you don’t, head out to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and the <code>.NET Core SDK</code>.</p><p>Create the project and add the necessary ML.NET packages.  This will be a console app in F# (obviously).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang F# -n MLNetConcreteV2</span><br><span class="line">cd MLNetConcreteV2</span><br><span class="line">dotnet add package Microsoft.ML --version 1.3</span><br><span class="line">dotnet add package Microsoft.ML.FastTree --version 1.3</span><br></pre></td></tr></table></figure><p>Before getting into the code, I first need to get the data.  The source used is from <a href="https://archive.ics.uci.edu/ml/datasets/Concrete+Compressive+Strength" target="_blank" rel="noopener">UCI</a>.  The dataset is an Excel file (xls), and it needs to be a csv.  I used <code>ssconvert</code> (from <code>apt install gnumeric</code>) to convert from Excel to CSV, but feel free to use whatever works for you.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls</span><br><span class="line">ssconvert Concrete_Data.xls Concrete_Data.csv</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is a header row, I’ve transposed this to a vertical list for readablity.  The first 8 columns are features, the last is the concrete compressive strength.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Header Row</span><br><span class="line">Cement (component 1)(kg in a m^3 mixture)</span><br><span class="line">Blast Furnace Slag (component 2)(kg in a m^3 mixture)</span><br><span class="line">Fly Ash (component 3)(kg in a m^3 mixture)</span><br><span class="line">Water  (component 4)(kg in a m^3 mixture)</span><br><span class="line">Superplasticizer (component 5)(kg in a m^3 mixture)</span><br><span class="line">Coarse Aggregate  (component 6)(kg in a m^3 mixture)</span><br><span class="line">Fine Aggregate (component 7)(kg in a m^3 mixture)</span><br><span class="line">Age (day)</span><br><span class="line">Concrete compressive strength(MPa, megapascals)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">540,0,0,162,2.5,1040,676,28,79.98611076</span><br><span class="line">540,0,0,162,2.5,1055,676,28,61.887365759999994</span><br><span class="line">332.5,142.5,0,228,0,932,594,270,40.269535256000005</span><br><span class="line">332.5,142.5,0,228,0,932,594,365,41.052779992</span><br></pre></td></tr></table></figure><p>Now that the project is setup and data is local, there is some foundational code that needs created.  F# can use record types for specifying the data format.  The <code>ConcreteData</code> record is effectively a file definition.  ML.NET requires the <code>LoadColumn</code> attribute for column mappings used during the dataload phase. The <code>ConcretePrediction</code> record is for prediction results.  Once the datatypes are setup, an <code>MLContext</code> object must be created. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ConcreteData</span> </span>= &#123;</span><br><span class="line">  <span class="meta">[&lt;LoadColumn(0)&gt;]</span></span><br><span class="line">  Cement: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(1)&gt;]</span></span><br><span class="line">  Slag: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(2)&gt;]</span></span><br><span class="line">  Ash: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(3)&gt;]</span></span><br><span class="line">  Water: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(4)&gt;]</span></span><br><span class="line">  Superplasticizer: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(5)&gt;]</span></span><br><span class="line">  CoarseAggregate: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(6)&gt;]</span></span><br><span class="line">  FineAggregate: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(7)&gt;]</span></span><br><span class="line">  Age: float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;LoadColumn(8)&gt;]</span></span><br><span class="line">  Label: float32</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;CLIMutable&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ConcretePrediction</span> </span>= &#123;</span><br><span class="line">  Score: float32</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> context = MLContext()</span><br></pre></td></tr></table></figure><p>Data loading is a reasonably simple process.  I will use all of the data, but if I wanted to filter data, there is a <code>FilterRowsByColumn</code> method to exclude data, perhaps known bad data or outliers.  Additionally, there is a need for training and test datasets.  ML.NET provides a convenient <code>TrainTestSplit</code> method to generate those datasets.  Here I will take 10% of the records for a test set. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"./data/Concrete_Data.csv"</span></span><br><span class="line"><span class="keyword">let</span> allData = </span><br><span class="line">  context</span><br><span class="line">    .Data</span><br><span class="line">    .LoadFromTextFile&lt;ConcreteData&gt;(</span><br><span class="line">      path = dataPath,</span><br><span class="line">      hasHeader = <span class="keyword">true</span>,</span><br><span class="line">      separatorChar = ',')</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filteredData = context.Data.FilterRowsByColumn(allData, <span class="string">"Slag"</span>, lowerBound = <span class="number">50.</span>, upperBound = <span class="number">100.</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> allDataSplit = context.Data.TrainTestSplit(allData, testFraction = <span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">let</span> trainData = allDataSplit.TrainSet</span><br><span class="line"><span class="keyword">let</span> testData = allDataSplit.TestSet</span><br></pre></td></tr></table></figure><p>Time to build the data pipeline.  There are a couple things to look at here.  Multiple transformation actions will be applied to the data.  <code>Concatenate</code> provides a mechanism to build an aggregate field, specifically <code>Features</code>.  I also don’t want to take the data raw, I want to apply a normalization method against the columns to improve the prediction results.  To keep it simple, I am applying <code>NormalizeMeanVariance</code> to all of the targeted fields.  To do it right I should be more rigorous about my transformation choices.  Other possible normalization methods are <code>NormalizeLogMeanVariance</code>, <code>NormalizeLpNorm</code>, <code>NormalizeMinMax</code>, to name a few.  The data is already in numeric form, but if there were text fields, there are transformation methods for that as well.  An example of this could be: <code>Transforms.Categorical.OneHotEncoding(&quot;CementBrandName&quot;, &quot;CementBrandId&quot;)</code>.  I’ve only touched the surface on data transformation options, but there is generally something there for your specific needs.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pipeline = </span><br><span class="line">  EstimatorChain()</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Cement"</span>, <span class="string">"Cement"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Slag"</span>, <span class="string">"Slag"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Ash"</span>, <span class="string">"Ash"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Water"</span>, <span class="string">"Water"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Superplasticizer"</span>, <span class="string">"Superplasticizer"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"CoarseAggregate"</span>, <span class="string">"CoarseAggregate"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"FineAggregate"</span>, <span class="string">"FineAggregate"</span>))</span><br><span class="line">    .Append(context.Transforms.NormalizeMeanVariance(<span class="string">"Age"</span>, <span class="string">"Age"</span>))</span><br><span class="line">    .Append(context.Transforms.Concatenate(<span class="string">"Features"</span>, [|<span class="string">"Cement"</span>; <span class="string">"Slag"</span>; <span class="string">"Ash"</span>; <span class="string">"Water"</span>; <span class="string">"Superplasticizer"</span>; <span class="string">"CoarseAggregate"</span>; <span class="string">"FineAggregate"</span>; <span class="string">"Age"</span>|]))</span><br></pre></td></tr></table></figure><p>Once the data pipeline is configured, it is time to build a model trainer.  Again, ML.NET offers multiple options for training methods.  For the example I use <code>FastTreeTweedie</code> with no parameters.  Hyperparameter options are available for many of the trainers.  I show some additional examples of how to implement alternative trainers with and without hyperparameters.  Once the trainer is defined, it is appended to the pipeline.  Now is the time to create a trained model using <code>Fit</code> against the previously defined training data.  There is one last piece to make this process useful, the prediction engine.  This provides the mechanism to actually perform predictions.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> trainer = context.Regression.Trainers.FastTreeTweedie()</span><br><span class="line"></span><br><span class="line"><span class="comment">// FastTreeRegressor with hyperparameters</span></span><br><span class="line"><span class="keyword">let</span> trainer = context.Regression.Trainers.FastTreeTweedie(numberOfTrees = <span class="number">500</span>, minimumExampleCountPerLeaf = <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OnlineGradientDescent </span></span><br><span class="line"><span class="keyword">let</span> trainer = context.Regression.Trainers.OnlineGradientDescent(labelColumnName = <span class="string">"Label"</span>, featureColumnName = <span class="string">"Features"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> modelBuilder = pipeline.Append(trainer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> model = modelBuilder.Fit(trainData) </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionEngine = context.Model.CreatePredictionEngine&lt;ConcreteData,ConcretePrediction&gt;(model)</span><br></pre></td></tr></table></figure><p>The next step is to see how good of a model has been built.  The trained model is now applied to the test data, and performance metrics are extracted.  I cherry-picked a couple of the available metrics. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> predictions = model.Transform(testData)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> metrics = context.Regression.Evaluate(predictions)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"R-Squared: %f"</span> (metrics.RSquared)</span><br><span class="line">printfn <span class="string">"RMS      : %f"</span> (metrics.RootMeanSquaredError)</span><br><span class="line">printfn <span class="string">"Loss     : %f"</span> (metrics.LossFunction)</span><br><span class="line">printfn <span class="string">"MAE      : %f"</span> (metrics.MeanAbsoluteError)</span><br><span class="line">printfn <span class="string">"MSE      : %f"</span> (metrics.MeanSquaredError)</span><br></pre></td></tr></table></figure><p>Here are the evaluation metrics for the test data run.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">R-Squared: 0.920959</span><br><span class="line">RMS      : 4.875440</span><br><span class="line">Loss     : 23.769913</span><br><span class="line">MAE      : 2.682631</span><br><span class="line">MSE      : 23.769913</span><br></pre></td></tr></table></figure><p>The trained model is now something that can be used against data.  I pulled one of the rows from the data just to show how this is put together.  Again, I can use a record type to define the data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = &#123;</span><br><span class="line">  Cement = <span class="number">198.6</span>f</span><br><span class="line">  Slag = <span class="number">132.4</span>f</span><br><span class="line">  Ash = <span class="number">0.</span>f</span><br><span class="line">  Water = <span class="number">192.</span>f</span><br><span class="line">  Superplasticizer = <span class="number">0.</span>f</span><br><span class="line">  CoarseAggregate = <span class="number">978.4</span>f</span><br><span class="line">  FineAggregate = <span class="number">825.5</span>f</span><br><span class="line">  Age = <span class="number">90.</span>f</span><br><span class="line">  Label =  <span class="number">0.</span>f</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionTest1 = predictionEngine.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted Strength: %f"</span> predictionTest1.Score</span><br><span class="line">printfn <span class="string">"Actual Strength   : 38.074243671999994"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Predicted Strength: 39.541660</span><br><span class="line">Actual Strength   : 38.074243671999994</span><br></pre></td></tr></table></figure><p>A trained model isn’t much use if it can’t be passed around and used elsewhere.  That is where the ML.NET model save and load methods come into play.  They are both straight forward to use, what I’ve come to expect.  The same prediction as above is run, but this time on a model loaded from a file.  The circle is complete.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line">context.Model.Save(model, trainData.Schema, <span class="string">"model.zip"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file</span></span><br><span class="line"><span class="keyword">let</span> (modelReloaded, schemaReloaded) = context.Model.Load(<span class="string">"model.zip"</span>)</span><br><span class="line"><span class="keyword">let</span> predictionEngineReloaded = context.Model.CreatePredictionEngine&lt;ConcreteData,ConcretePrediction&gt;(modelReloaded)</span><br><span class="line"><span class="keyword">let</span> predictionReloaded = predictionEngineReloaded.Predict(test1)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"Predicted Strength RL: %f"</span> predictionReloaded.Score</span><br><span class="line">printfn <span class="string">"Actual Strength      : 38.074243671999994"</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Predicted Strength RL: 39.541660</span><br><span class="line">Actual Strength      : 38.074243671999994</span><br></pre></td></tr></table></figure><p>It has been nice to revisit an old dataset and method, but with the newest ML.NET.  The ergonomics and functionality have certainly improved over time.  This bodes well for the future as they continue to release and improve functionality.  I hope you have found this useful as well, and perhaps enticed you to investigate ML.NET and F# for yourself.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I’ll look at using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt; to perform some model building.  Specifically to predict concrete compressive strength based on its composite ingredients.  If this sounds familiar, it is.  This is a revisit of a previous &lt;a href=&quot;/2018/06/09/F-and-MLNet-Regression/&quot;&gt;post&lt;/a&gt; that explored a beta version of ML.NET.  This time around, the version 1 interface will be used.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>Nyquist Keyboard Build</title>
    <link href="http://codesuji.com/2019/08/14/Nyquist-Keyboard/"/>
    <id>http://codesuji.com/2019/08/14/Nyquist-Keyboard/</id>
    <published>2019-08-14T22:14:16.000Z</published>
    <updated>2019-08-15T02:29:02.108Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s topic is my most recent keyboard build, the <a href="https://keeb.io/" target="_blank" rel="noopener">keebio</a> Nyquist.  I had so much fun building my <a href="/2019/05/12/Iris-Keyboard/">Iris</a>, it was a good excuse to make a second so I can have a sweet keyboard at home and work.</p><a id="more"></a><p>Here is the final result, equipped with Gateron red switches and SA keycaps.  For those who might be interested doing a build themselves, keebio provides a thorough <a href="https://docs.keeb.io/nyquist-build-guide/" target="_blank" rel="noopener">Build Guide</a>.  Note, this is the same that I used for my previous Iris build.  From a general perspective, they are very similar keyboards, the bottom row format is oriented differently and the Nyquist just has a couple addtional keys. </p><p><img src="/images/nyquist1/final.jpg" alt="Nyquist - final result"></p><p>If you’re curious about the key mapping, checkout my <a href="/2019/05/12/Iris-Keyboard/#keymap">Iris Build</a>.  I kept the same mappings, with a couple exceptions. Esc, Print Screen, and Alt have been moved to the bottom left row.  Arrow keys were added on the bottom right row.  I thought I’d use dedicated arrow keys more, but they have been pretty much untouched.  Additionally, I prefer the new esc location; on the Iris’ thumbpad hasn’t been as convenient as I expected.</p><p>Beyond the stock keyboard build there are a couple custom components.  I only bought top and bottom plates, so I 3d-printed the case and stands to match my desired typing angle.  I designed them using <a href="http://www.openscad.org/" target="_blank" rel="noopener">OpenSCAD</a>.  The stl files are here: <a href="/images/nyquist1/case.stl">case</a> and <a href="/images/nyquist1/stand.stl">stand</a>.  My printer bed isn’t big enough for the case in one piece.  Since it’s symmetric the stl is half the case and I just mirrored it in <a href="https://ultimaker.com/software/ultimaker-cura" target="_blank" rel="noopener">Cura</a> for the other half.  Keeping with the purple/green color theme, I built the TRRS and USB cables to match, I think they really pull the whole thing together.</p><p>As a bonus, I’ve included a couple build process images.</p><p><img src="/images/nyquist1/final2.jpg" alt="Nyquist - final result"></p><p><img src="/images/nyquist1/stands.jpg" alt="Stands"></p><p><img src="/images/nyquist1/mounted_switches.jpg" alt="Mounted Switches"></p><p><img src="/images/nyquist1/pro_micro.jpg" alt="Mounted ProMicros"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s topic is my most recent keyboard build, the &lt;a href=&quot;https://keeb.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;keebio&lt;/a&gt; Nyquist.  I had so much fun building my &lt;a href=&quot;/2019/05/12/Iris-Keyboard/&quot;&gt;Iris&lt;/a&gt;, it was a good excuse to make a second so I can have a sweet keyboard at home and work.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Keyboard" scheme="http://codesuji.com/tags/Keyboard/"/>
    
  </entry>
  
  <entry>
    <title>Fable and Cordova, a Mobile Story</title>
    <link href="http://codesuji.com/2019/06/18/Fable-and-Cordova/"/>
    <id>http://codesuji.com/2019/06/18/Fable-and-Cordova/</id>
    <published>2019-06-18T23:24:02.000Z</published>
    <updated>2019-06-19T22:19:52.620Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s article will look at combining <a href="https://fable.io/" target="_blank" rel="noopener">Fable</a> and <a href="https://cordova.apache.org/" target="_blank" rel="noopener">Cordova</a> to make a mobile application.  For those not familar with these projects, a little context may be helpful.  Fable compiles F# to Javascript and Cordova facilitates mobile app development using HTML and Javascript.  Throw in some <a href="https://elmish.github.io/" target="_blank" rel="noopener">Elmish</a>, and its a party.  Joining these technologies provides some unique possibilities.  Specifically this is an interesting way to leverage <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> for mobile development.  </p><a id="more"></a><p>The goal will be to make a very simple hello world mobile app.  There are a couple steps to get there, none of which are too complicated.  To follow along, you will need the following prerequisites.  Make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core</a> and <a href="https://nodejs.org/en/" target="_blank" rel="noopener">NodeJs</a> installed.  Next, Cordova must be installed: <code>npm install -g cordova</code>.  Now that the building blocks are installed, it is time to get started.</p><p>First, the Cordova project will be created and initialized with the supported platforms.  <code>browser</code> is useful for the development process, while <code>android</code> is the real target.  If you’re of an iOS leaning, it can be the mobile target instead, or as an addition.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cordova create HelloWorld</span><br><span class="line">cd HelloWorld</span><br><span class="line">cordova platform add browser</span><br><span class="line">cordova platform add android</span><br><span class="line"># For iOS support: cordova platform add ios </span><br></pre></td></tr></table></figure><p>Second, the Fable part of the project needs created. From inside the main project, create a new F# app and add the basic Fable requirements.  The requirements come in two parts: dotnet and javascript.  For this sample app this will be all that is needed, although a fuller functional app may have more dependencies.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang F# -n App</span><br><span class="line">cd App</span><br><span class="line">dotnet add package Fable.Core</span><br><span class="line">dotnet add package Fable.Elmish.React</span><br></pre></td></tr></table></figure><p>In the main project directory add the javascript dependencies.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install fable-compiler --save</span><br><span class="line">npm install fable-loader --save</span><br><span class="line">npm install @babel/core --save</span><br><span class="line">npm install react --save</span><br><span class="line">npm install react-dom --save</span><br></pre></td></tr></table></figure><p>Third, it is time to wire the projects together, which is where webpack enters the picture.  The Fable sample project already uses webpack, the config just needs some adjustments in order to publish the results to cordova (instead of a website).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack  --save</span><br><span class="line">npm install webpack-cli  --save</span><br></pre></td></tr></table></figure><p>In the main project directory, webpack needs a config file <code>webpack.config.js</code> file with the following contents.  This tells webpack to process the newly create F# app project, and use the fable-loader to process files.  The destination bundle file generated is placed in Cordova’s <code>www/js</code> directory.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  entry: <span class="string">"./App/App.fsproj"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">"./www/js"</span>),</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.fs(x|proj)?$/</span>,</span><br><span class="line">      use: <span class="string">"fable-loader"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The project directory should look something like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">HelloWorld</span><br><span class="line">├── App</span><br><span class="line">│   ├── App.fsproj</span><br><span class="line">│   └── Program.fs</span><br><span class="line">├── config.xml</span><br><span class="line">├── hooks</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── platforms</span><br><span class="line">├── plugins</span><br><span class="line">├── webpack.config.js</span><br><span class="line">└── www</span><br><span class="line">    ├── css</span><br><span class="line">    ├── img</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── js</span><br></pre></td></tr></table></figure><p>Now that the main project structures have been put into place, it is time to put the code together.  The Cordova project needs to be able to consume the generated Fable bundle created by webpack.  This is done by editing the Cordova index page <code>www/index.html</code>.  The contents can be reduced to below.  The key points here are the <code>elmish-app</code> div and the <code>bundle.js</code> include.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'uns</span></span></span><br><span class="line"><span class="tag"><span class="string">  afe-inline'; media-src *; img-src 'self' data: content:;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1, width=device-width, viewport-fit=cover"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"elmish-app"</span> <span class="attr">class</span>=<span class="string">"elmish-app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"cordova.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Cordova is set to accept some Fable code, now it is time to get to the F#.  The contents of <code>App/Program.fs</code> are below.  Since this is about wiring Fable to Cordova I don’t want to spend too much time on the specific F# code.  But the code takes a person’s name as input and replies with a Hello message.  To add a bit of mobile flavor, it also tracks current acceleration of the device using the <code>devicemotion</code> event, and publishes that to the screen as well.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> App</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Browser</span><br><span class="line"><span class="keyword">open</span> Browser.Types</span><br><span class="line"><span class="keyword">open</span> Elmish</span><br><span class="line"><span class="keyword">open</span> Elmish.React</span><br><span class="line"><span class="keyword">open</span> Fable.React</span><br><span class="line"><span class="keyword">open</span> Fable.React.Props</span><br><span class="line"><span class="keyword">open</span> Fable.Import</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Model</span> </span>= </span><br><span class="line">  &#123; Name :string; Message :string; Acceleration :string &#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Msg</span> </span>=</span><br><span class="line">| Greet <span class="keyword">of</span> string</span><br><span class="line">| DeviceMotion <span class="keyword">of</span> float * float * float</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> initModel() = </span><br><span class="line">  &#123; Model.Name = <span class="string">""</span>; Message = <span class="string">""</span>; Acceleration = <span class="string">""</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newMessage (name :string) = </span><br><span class="line">  sprintf <span class="string">"Hello %s, it is %s"</span> name (DateTime.Now.ToString(<span class="string">"yyyy-MM-dd"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newAcceleration x y z = </span><br><span class="line">  sprintf <span class="string">"Acceleration: (%0.3f, %0.3f, %0.3f)"</span> x y z</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> updateModel (msg :Msg) (model :Model) =</span><br><span class="line">    <span class="keyword">match</span> msg <span class="keyword">with</span></span><br><span class="line">    | Greet(name)           -&gt; &#123; model <span class="keyword">with</span> </span><br><span class="line">                                  Name = name; </span><br><span class="line">                                  Message = newMessage name &#125;</span><br><span class="line">    | DeviceMotion(x, y, z) -&gt; &#123; model <span class="keyword">with</span> </span><br><span class="line">                                  Acceleration = newAcceleration x y z &#125;</span><br><span class="line"><span class="keyword">let</span> view (model :Model) dispatch =</span><br><span class="line">  div []</span><br><span class="line">    [</span><br><span class="line">      div []</span><br><span class="line">        [</span><br><span class="line">          str <span class="string">"My name is:"</span></span><br><span class="line">          input </span><br><span class="line">            [ </span><br><span class="line">              AutoFocus <span class="keyword">true</span></span><br><span class="line">              OnInput (<span class="keyword">fun</span> e -&gt; dispatch (Greet ((e.target:?&gt;HTMLInputElement).value)))</span><br><span class="line">              Value (model.Name)</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">      div []</span><br><span class="line">        [</span><br><span class="line">          str model.Message</span><br><span class="line">          br []</span><br><span class="line">          str model.Acceleration</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deviceMotion initial = </span><br><span class="line">    <span class="keyword">let</span> sub dispatch =</span><br><span class="line">        window.addEventListener(<span class="string">"devicemotion"</span>, <span class="keyword">fun</span> e -&gt;</span><br><span class="line">          <span class="keyword">let</span> e' = e :?&gt; DeviceMotionEvent</span><br><span class="line">          dispatch (DeviceMotion (e'.acceleration.x, e'.acceleration.y, e'.acceleration.z)))</span><br><span class="line">    Cmd.ofSub sub</span><br><span class="line"></span><br><span class="line">Program.mkSimple initModel updateModel view</span><br><span class="line">|&gt; Program.withReactBatched <span class="string">"elmish-app"</span></span><br><span class="line">|&gt; Program.withSubscription deviceMotion</span><br><span class="line">|&gt; Program.withConsoleTrace</span><br><span class="line">|&gt; Program.run</span><br></pre></td></tr></table></figure><p>All that is left now is to build and run the app.  There are a couple things to keep track of: building the Fable app with webpack, running the app in the browser for development, and building.  The commands below touch the surface of development and building, but they at least get you started. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Run webpack on the fable app</span><br><span class="line">npx webpack</span><br><span class="line"></span><br><span class="line"># Run cordova in the browser</span><br><span class="line">cordova run browser</span><br><span class="line"></span><br><span class="line"># Build and run on the phone or emulator</span><br><span class="line">cordova build android</span><br><span class="line">cordova run android</span><br><span class="line"></span><br><span class="line"># Install it on the phone</span><br><span class="line">adb install </span><br></pre></td></tr></table></figure><p>A running app looks like this:</p><p><img src="/images/cordova1/cordova1.png" alt="Cordova App"></p><p>Being able to build is great, but development can be cumbersome without the ability to watch and auto-build file changes.  Taking the next step, let’s add some convenience to the process.  Add the following to <code>package.json</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"watch"</span>: <span class="string">"npx webpack -w"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above command is just the interface, it needs some modifications to <code>webpack.config.js</code> to perform the desired actions. The below changes wire into the <code>afterEmit</code> hook to refresh the cordova browser (and start the local service if not already started).  The <code>watchOptions</code> aren’t strictly needed for this, but it helps to stop rebuild spamming, and lower file watch needs.  These values can be tuned more for specific needs.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">"child_process"</span>).exec;</span><br><span class="line"><span class="keyword">var</span> cordovaServerStarted = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    aggregateTimeout: <span class="number">500</span>,</span><br><span class="line">    ignored: [ <span class="string">"node_modules"</span> ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      apply: <span class="function">(<span class="params">compiler</span>) =&gt;</span> &#123;</span><br><span class="line">        compiler.hooks.afterEmit.tap(<span class="string">"AfterEmitPlugin"</span>, (_compilation) =&gt; &#123;</span><br><span class="line">          exec(<span class="string">"cordova prepare browser"</span>, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (stdout) &#123; process.stdout.write(stdout); &#125;</span><br><span class="line">            <span class="keyword">if</span> (stderr) &#123; process.stderr.write(stderr); &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (!cordovaServerStarted) &#123;</span><br><span class="line">            cordovaServerStarted = <span class="literal">true</span>;</span><br><span class="line">            exec(<span class="string">"cordova run browser"</span>, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (stdout) &#123; process.stdout.write(stdout); &#125;</span><br><span class="line">              <span class="keyword">if</span> (stderr) &#123; process.stderr.write(stderr); &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Now, a simple <code>npm run watch</code> will start the Cordova browser, watch for application updates, and auto-build as files are edited.  The development process just got way easier.  As a reminder, this is just a sample; more goes into properly building everything out.  With that said, this provides a good starting point to getting F# running on mobile using Cordova.  I hope you found this useful and/or interesting.  Until next time…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s article will look at combining &lt;a href=&quot;https://fable.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fable&lt;/a&gt; and &lt;a href=&quot;https://cordova.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cordova&lt;/a&gt; to make a mobile application.  For those not familar with these projects, a little context may be helpful.  Fable compiles F# to Javascript and Cordova facilitates mobile app development using HTML and Javascript.  Throw in some &lt;a href=&quot;https://elmish.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Elmish&lt;/a&gt;, and its a party.  Joining these technologies provides some unique possibilities.  Specifically this is an interesting way to leverage &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; for mobile development.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Fable" scheme="http://codesuji.com/tags/Fable/"/>
    
      <category term="Cordova" scheme="http://codesuji.com/tags/Cordova/"/>
    
      <category term="Mobile" scheme="http://codesuji.com/tags/Mobile/"/>
    
      <category term="Elmish" scheme="http://codesuji.com/tags/Elmish/"/>
    
  </entry>
  
  <entry>
    <title>Taking Stock of Anomalies with F# and ML.NET</title>
    <link href="http://codesuji.com/2019/05/24/F-and-MLNet-Anomaly/"/>
    <id>http://codesuji.com/2019/05/24/F-and-MLNet-Anomaly/</id>
    <published>2019-05-24T14:34:25.000Z</published>
    <updated>2019-05-25T11:32:18.259Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s task is to analyze stock prices, specifically price anomalies.  Recently <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a> hit version 1.  So what better way than to use <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a>.</p><a id="more"></a><p>As always, the preliminaries.  For the initial setup, make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a> installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  The specific methods will use the ML.NET TimeSeries package.  At the time of this writing, it is v0.12, so it hasn’t hit version 1 yet, but it works well enough.  Once that is complete, create a console F# project, then add the necessary ML.NET and Charting packages.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet_StockAnomaly</span><br><span class="line">cd MLNet_StockAnomaly</span><br><span class="line">dotnet add package Microsoft.ML --version 1.0.0</span><br><span class="line">dotnet add package Microsoft.ML.TimeSeries --version 0.12.0</span><br><span class="line">dotnet add package XPlot.GoogleCharts --version 2.0.0</span><br></pre></td></tr></table></figure><p>In order to not pick on one particular stock, the Dow Jones index over the past year will be the target of interest.  Below is a sample of what the data extract looks like.  It is the basic stock price data to be expected, including date, prices, and volume.  This article will only need Date and Close price.  It was exported from <a href="https://finance.yahoo.com/quote/%5EDJI?p=^DJI&amp;.tsrc=fin-srch" target="_blank" rel="noopener">Yahoo! Finance</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">Date,Open,High,Low,Close,Adj Close,Volume</span><br><span class="line">2018-05-22,25047.550781,25064.990234,24812.060547,24834.410156,24834.410156,288200000</span><br><span class="line">2018-05-23,24757.710938,24889.460938,24667.119141,24886.810547,24886.810547,399610000</span><br><span class="line">2018-05-24,24877.359375,24877.359375,24605.900391,24811.759766,24811.759766,347050000</span><br><span class="line">2018-05-25,24781.289063,24824.220703,24687.810547,24753.089844,24753.089844,257210000</span><br><span class="line">2018-05-29,24606.589844,24635.179688,24247.839844,24361.449219,24361.449219,395810000</span><br><span class="line">2018-05-30,24467.830078,24714.480469,24459.089844,24667.779297,24667.779297,324870000</span><br></pre></td></tr></table></figure><p>Time to start the code.  First, I need to setup the necessary namespaces and types.  These cover the ML.NET namespaces as well as XPlot for charting the results.  When using ML.NET, the easiest way to interact with the data is by defining two types.  <code>PriceData</code> matches the datafile schema.  <code>PricePrediction</code> is for the model results, in this case I’ll use it for both anomaly detection and change point detection results.  The <code>Prediction</code> field is an array containing a 0 or 1 for a detected event, the value at that datapoint, and its respective confidence level. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Transforms.TimeSeries</span><br><span class="line"><span class="keyword">open</span> XPlot.GoogleCharts</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">PriceData</span> </span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(0)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Date:string</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(1)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Open:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(2)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> High:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(3)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Low:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(4)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Close:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(5)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> AdjClose:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(6)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Volume:float32</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">PricePrediction</span> </span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Date:string</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Prediction:double[]</span><br></pre></td></tr></table></figure><p>Once that is done, it is time for the processing pipeline.  This includes creating the pipeline context and hooking up the data to the file.</p><p>To process the data, there will technically be two pipelines.  The first will use the <code>IidSpike</code> trainer for anomaly detection.  The second will use the <code>IidChangePoint</code> trainer for change point detection.  To get the best results, these aren’t really fire and forget approaches.  There are a couple dials to adjust.  The <code>pvalueHistoryLength</code> defines the sliding window size that is applied when looking for events.  Since this is stock data, multiples of 5 roughly correlate to weeks.  So at anomalies over 6 week windows, and change points over 2 week windows.  Additionally, <code>confidence</code> is on a scale 0-100, higher values requiring a higher level of confidence to trigger an event.  Another dial to turn is <code>AnomalySide</code> to detect either only postive, only negative, or all anomalies.  The default is all, but it’s nice to have options.  All of these values should be adjusted to best meet the needs of the dataset and desired data analysis.  </p><p>Once the pipelines are created, they need to be trained with the <code>Fit</code> method.  Now there is a model that can be used.  <code>Transform</code> will take the dataset and apply the model to build out predictions for the events.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"dji.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ctx = MLContext()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataView = </span><br><span class="line">  ctx</span><br><span class="line">    .Data</span><br><span class="line">    .LoadFromTextFile&lt;PriceData&gt;(</span><br><span class="line">      path = dataPath,</span><br><span class="line">      hasHeader = <span class="keyword">true</span>,</span><br><span class="line">      separatorChar = ',')</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anomalyPValueHistoryLength = <span class="number">30</span></span><br><span class="line"><span class="keyword">let</span> changePointPValueHistoryLength = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> anomalyConfidence = <span class="number">95</span></span><br><span class="line"><span class="keyword">let</span> changePointConfidence = <span class="number">95</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anomalyPipeline = </span><br><span class="line">  ctx</span><br><span class="line">    .Transforms</span><br><span class="line">    .DetectIidSpike(</span><br><span class="line">      outputColumnName = <span class="string">"Prediction"</span>,</span><br><span class="line">      inputColumnName = <span class="string">"Close"</span>,</span><br><span class="line">      side = AnomalySide.TwoSided,</span><br><span class="line">      confidence = anomalyConfidence, </span><br><span class="line">      pvalueHistoryLength = anomalyPValueHistoryLength)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> changePointPipeLine = </span><br><span class="line">  ctx</span><br><span class="line">    .Transforms</span><br><span class="line">    .DetectIidChangePoint(</span><br><span class="line">      outputColumnName = <span class="string">"Prediction"</span>, </span><br><span class="line">      inputColumnName = <span class="string">"Close"</span>,</span><br><span class="line">      martingale = MartingaleType.Power,</span><br><span class="line">      confidence = changePointConfidence, </span><br><span class="line">      changeHistoryLength = changePointPValueHistoryLength)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> trainedAnomalyModel = anomalyPipeline.Fit(dataView)</span><br><span class="line"><span class="keyword">let</span> trainedChangePointModel = changePointPipeLine.Fit(dataView)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> transformedAnomalyData = trainedAnomalyModel.Transform(dataView);</span><br><span class="line"><span class="keyword">let</span> transformedChangePointData = trainedChangePointModel.Transform(dataView);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anomalies = </span><br><span class="line">  ctx</span><br><span class="line">    .Data</span><br><span class="line">    .CreateEnumerable&lt;PricePrediction&gt;(transformedAnomalyData, reuseRowObject = <span class="keyword">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> changePoints = </span><br><span class="line">  ctx</span><br><span class="line">    .Data</span><br><span class="line">    .CreateEnumerable&lt;PricePrediction&gt;(transformedChangePointData, reuseRowObject = <span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><p>Now that the data has been processed, it is time to build some charts and look at the results.  At this point, it is an exercise of formatting the data for charts, a <code>(Date * float32) list</code>.  There are 3 datasets: prices, anomalies, and change points.  Using XPlot, they are combined into a single chart.  The only trick here is I remove the non-events from the prediction datasets and plot their points directly on the price line chart.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Build chart data</span></span><br><span class="line"><span class="keyword">let</span> priceChartData = </span><br><span class="line">  anomalies</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> p -&gt; <span class="keyword">let</span> p' = float (p.Prediction).[<span class="number">1</span>]</span><br><span class="line">                       (p.Date, p'))</span><br><span class="line">  |&gt; List.ofSeq </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anomalyChartData = </span><br><span class="line">  anomalies</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> p -&gt; <span class="keyword">let</span> p' = <span class="keyword">if</span> (p.Prediction).[<span class="number">0</span>] = <span class="number">0.</span> <span class="keyword">then</span> None <span class="keyword">else</span> Some (float (p.Prediction).[<span class="number">1</span>])</span><br><span class="line">                       (p.Date, p'))</span><br><span class="line">  |&gt; Seq.filter (<span class="keyword">fun</span> (x,y) -&gt; y.IsSome)</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (x,y) -&gt; (x, y.Value))</span><br><span class="line">  |&gt; List.ofSeq </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> changePointChartData = </span><br><span class="line">  changePoints </span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> p -&gt; <span class="keyword">let</span> p' = <span class="keyword">if</span> (p.Prediction).[<span class="number">0</span>] = <span class="number">0.</span> <span class="keyword">then</span> None <span class="keyword">else</span> Some (float (p.Prediction).[<span class="number">1</span>])</span><br><span class="line">                       (p.Date, p'))</span><br><span class="line">  |&gt; Seq.filter (<span class="keyword">fun</span> (x,y) -&gt; y.IsSome)</span><br><span class="line">  |&gt; Seq.map (<span class="keyword">fun</span> (x,y) -&gt; (x, y.Value))</span><br><span class="line">  |&gt; List.ofSeq </span><br><span class="line"></span><br><span class="line"><span class="comment">// Show Chart</span></span><br><span class="line">[priceChartData; anomalyChartData; changePointChartData]</span><br><span class="line">|&gt; Chart.Combo</span><br><span class="line">|&gt; Chart.WithOptions </span><br><span class="line">     (Options(title = <span class="string">"Dow Jones Industrial Average Price Anomalies"</span>, </span><br><span class="line">              series = [| Series(<span class="string">"lines"</span>); Series(<span class="string">"scatter"</span>); Series(<span class="string">"scatter"</span>) |],</span><br><span class="line">              displayAnnotations = <span class="keyword">true</span>))</span><br><span class="line">|&gt; Chart.WithLabels [<span class="string">"Price"</span>; <span class="string">"Anomaly"</span>; <span class="string">"ChangePoint"</span> ]</span><br><span class="line">|&gt; Chart.WithLegend <span class="keyword">true</span></span><br><span class="line">|&gt; Chart.WithSize (<span class="number">800</span>, <span class="number">400</span>)</span><br><span class="line">|&gt; Chart.Show</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Here is the resulting Dow Jones price chart for the last year, using the defined models.  Based on the sliding windows and required confidence levels, there are now potentially useful events.</p><p><img src="/images/anomaly1/anomaly1.png" alt="Price Chart (Take 1)"></p><p>Charts offer a convenient way to see how some of those earlier parameters can impact the result.  I’ve reduced the sliding windows by half to 15 (3 weeks) and 5 (1 week), anomaly and changepoints, respectively.  The below chart shows the results of the change.  The anomalies haven’t changed too much, but the changepoints are much more reactive to direction changes.  One key take away here is there isn’t a single right configuration.  It is imperative to understand what types of outliers and attributes are important.</p><p><img src="/images/anomaly1/anomaly2.png" alt="Price Chart (Take 2)"></p><p>I hope you have found this short look into timeseries processing using ML.NET useful.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s task is to analyze stock prices, specifically price anomalies.  Recently &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt; hit version 1.  So what better way than to use &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Signals" scheme="http://codesuji.com/tags/Signals/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
      <category term="Timeseries" scheme="http://codesuji.com/tags/Timeseries/"/>
    
  </entry>
  
  <entry>
    <title>Iris Keyboard Build</title>
    <link href="http://codesuji.com/2019/05/12/Iris-Keyboard/"/>
    <id>http://codesuji.com/2019/05/12/Iris-Keyboard/</id>
    <published>2019-05-12T11:09:26.000Z</published>
    <updated>2019-08-15T01:41:49.720Z</updated>
    
    <content type="html"><![CDATA[<p>Deviating from the typical code-centric post, I wanted to share my latest keyboard build.  It is the Iris from <a href="https://keeb.io/" target="_blank" rel="noopener">keebio</a>.  </p><a id="more"></a><p>Here is the final result, equipped with Kailh speed silver switches and DSA keycaps.  For those who might be interested doing a build themselves, keebio provides a thorough <a href="https://docs.keeb.io/iris-build-guide/" target="_blank" rel="noopener">Build Guide</a>.</p><p><img src="/images/iris1/final.jpg" alt="Iris - final result"></p><p>A build isn’t complete without a key mapping.  Below is the current iteration of layer definitions, using <a href="https://github.com/qmk/qmk_firmware/" target="_blank" rel="noopener">QMK firmware</a>.  Finding the best layout can be a continual work in progress, but I’m happy with the layout so far.  </p><p><a name="keymap"></a></p><p><img src="/images/iris1/keymap_layer0.jpg" alt="Keymap - Layer0"></p><p><img src="/images/iris1/keymap_layer1.jpg" alt="Keymap - Layer1"></p><p><img src="/images/iris1/keymap_layer2.jpg" alt="Keymap - Layer2"></p><p>As a bonus, I’ve included a couple build process images, shown in reverse chronological order.</p><p><img src="/images/iris1/mounted_switches.jpg" alt="Mounted Switches"></p><p><img src="/images/iris1/mounting_switches.jpg" alt="Mounting Switches"></p><p><img src="/images/iris1/pro_micro.jpg" alt="Mounted ProMicros"></p><p><img src="/images/iris1/boards.jpg" alt="Circuit Boards"></p><p><img src="/images/iris1/switches.jpg" alt="Kailh Speed Silver Switches"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Deviating from the typical code-centric post, I wanted to share my latest keyboard build.  It is the Iris from &lt;a href=&quot;https://keeb.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;keebio&lt;/a&gt;.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="Keyboard" scheme="http://codesuji.com/tags/Keyboard/"/>
    
  </entry>
  
  <entry>
    <title>Building a Game with SignalR and F#</title>
    <link href="http://codesuji.com/2019/02/19/Building-Game-with-SignalR-and-F/"/>
    <id>http://codesuji.com/2019/02/19/Building-Game-with-SignalR-and-F/</id>
    <published>2019-02-20T02:17:32.000Z</published>
    <updated>2019-02-20T12:15:17.379Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s post is a brief example of how to implement a game using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://dotnet.microsoft.com/apps/aspnet/real-time" target="_blank" rel="noopener">SignalR</a>.  Creating a game for bots to play doesn’t have to be overly difficult.  Since interesting emergent qualities can arise from simple rules, it makes for a fun way to show off SignalR, beyond the standard chat application.  As this post will show, F# and SignalR work well together to create a nice communication framework without requiring a complex setup.</p><a id="more"></a><p>What is the game?  It is a bot-played game of multi-player snakes.  The rules are simple: eat food to grow, and run into opponents to slice off their tails.  To give players a goal, they accrue points based on their length over time.  It is a limited enough concept that a game engine and client can be built without overshadowing the SignalR aspects.  A picture, or movie, is worth a thousand words. So below is a sample of the game player viewer.  What is SignalR?  If you’re not familiar, it is a library that provides real-time capabilities to web applications.  Think websockets and other related technologies.  In this particular case there is a web viewer and a console app leveraging the capability.</p><p><img src="/images/sr1/sr1.gif" alt="GamePlay"></p><p>With definitions out of the way, time for the technical components.  We’ll use <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a>.  If you don’t have it installed, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>The post will be broken up into 3 primary parts: SignalR server, SignalR client, SignalR webviewer.  Discussing the specific game code will be out of scope, since it is the interactions that we really care about.</p><h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><p>For the server, <a href="https://github.com/giraffe-fsharp/Giraffe" target="_blank" rel="noopener">Giraffe</a> will be the base.  It will host the SignalR services as well as the weS viewer.  Creation is similiar to a typical dotnet app, but it’ll use the Giraffe template.  If you need the templates you can get them by doing <code>dotnet new -i &quot;giraffe-template::*&quot;</code>.  The Giraffe template includes a reference to the <code>Microsoft.AspNetCore.App</code> package, which includes SignalR, so no additional packages are necessary.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new giraffe -lang F# -n GameServer -o GameServer </span><br></pre></td></tr></table></figure><p>The Giraffe templates thankfully generate all the necessary boilerplate code for a webapp on top of Kestrel.  To simplify, we’ll focus on the components that need to be added to the server code.  Add the necessary namespaces, this is not only for SignalR, but to support the background game engine service.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System.Threading;</span><br><span class="line"><span class="keyword">open</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.SignalR</span><br></pre></td></tr></table></figure><p>The SignalR components must be added to the pipeline.  This is done in two places.  Modify <code>configureApp</code> to include <code>.UseSignalR(...)</code>.  Modify <code>configureServices</code> to include <code>services.AddSignalR()</code>.  In addition, the game runs as a hosted service.  To support this, modify <code>configureServices</code> to also includ <code>services.AddHostedService&lt;GameService&gt;()</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> configureApp (app : IApplicationBuilder) =</span><br><span class="line">  <span class="keyword">let</span> env = app.ApplicationServices.GetService&lt;IHostingEnvironment&gt;()</span><br><span class="line">  (<span class="keyword">match</span> env.IsDevelopment() <span class="keyword">with</span></span><br><span class="line">  | <span class="keyword">true</span>  -&gt; app.UseDeveloperExceptionPage()</span><br><span class="line">  | <span class="keyword">false</span> -&gt; app</span><br><span class="line">              .UseGiraffeErrorHandler errorHandler)</span><br><span class="line">              .UseCors(configureCors)</span><br><span class="line">              .UseStaticFiles()</span><br><span class="line">              .UseSignalR(<span class="keyword">fun</span> routes -&gt; routes.MapHub&lt;GameHub&gt;(PathString <span class="string">"/gameHub"</span>)) <span class="comment">// SignalR</span></span><br><span class="line">              .UseGiraffe(webApp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> configureServices (services : IServiceCollection) =</span><br><span class="line">  services.AddCors()    |&gt; ignore</span><br><span class="line">  services.AddSignalR() |&gt; ignore                    <span class="comment">// SignalR</span></span><br><span class="line">  services.AddGiraffe() |&gt; ignore</span><br><span class="line">  services.AddHostedService&lt;GameService&gt;() |&gt; ignore <span class="comment">// GameService</span></span><br></pre></td></tr></table></figure><p>Now that the components have been injected into the pipeline, they need to be created.  For this we’ll need to create a SignalR hub as well as a GameService.  Starting with the SignalR hub.  We can send messages to the SignalR clients by supplying a function name and payload: <code>this.Clients.All.SendAsync(&quot;Message&quot;, &quot;foo&quot;)</code>.  But, we can do better by defining the interface and making the calls type-safe, so let’s do that.  Below is defined the client api interface.  This ensures that calls from server to client match the required types.  For simplicity, the server only has 3 messages it can send to clients.</p><ul><li><p><code>LoginResponse</code> Reports success or failure, and their PlayerId if login was successful.</p></li><li><p><code>Message</code> Sends general notifications to clients.</p></li><li><p><code>GameState</code> Provides a serialized gamestate that clients act on.</p></li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">IClientApi</span> </span>= </span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">member</span> LoginResponse :bool * string -&gt; System.Threading.Tasks.Task</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">member</span> Message :string -&gt; System.Threading.Tasks.Task</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">member</span> GameState :string -&gt; System.Threading.Tasks.Task</span><br></pre></td></tr></table></figure><p>Now, to define the SignalR hub. This effectively is the listener that all clients connect to.  It leverages the <code>IClientApi</code> that was just created.  Here we need to write the handlers for messages accepted from clients.  Players have four different actions they can signal to the server.</p><ul><li><p><code>Login</code> For brevity, there is no authentication; provide a PlayerName and they get a PlayerId.  It also adds a player to the game.  The below code demonstrates how the server can send messages to all connected clients or just specific ones.</p></li><li><p><code>Logout</code> Removes a player from the game.</p></li><li><p><code>Turn</code> Players have one action they can perform, turn.  They move in a specified direction until they turn, then they proceed in that direction.</p></li><li><p><code>Send</code> Players can blast messages to all clients. Perhaps when the bots become self-aware they can taunt each other.</p></li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">GameHub</span> </span>() =</span><br><span class="line">  <span class="keyword">inherit</span> Hub&lt;IClientApi&gt; ()</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Accept client logins</span></span><br><span class="line">  <span class="keyword">member</span> this.Login (name :string) =</span><br><span class="line">    <span class="keyword">let</span> connectionId = this.Context.ConnectionId</span><br><span class="line">    <span class="keyword">let</span> success, playerId = addPlayer name</span><br><span class="line">    <span class="keyword">if</span> success <span class="keyword">then</span></span><br><span class="line">      <span class="comment">// Tell client login success and their playerId</span></span><br><span class="line">      this.Clients.Client(connectionId).LoginResponse(<span class="keyword">true</span>, playerId)</span><br><span class="line">      <span class="comment">// Tell clients of new player </span></span><br><span class="line">      this.Clients.All.Message(sprintf <span class="string">"New Player: %s (%s)"</span> name playerId)</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="comment">// Tell client login failed</span></span><br><span class="line">      this.Clients.Client(connectionId).LoginResponse(<span class="keyword">false</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Handle client logout</span></span><br><span class="line">  <span class="keyword">member</span> this.Logout (playerId :string) =</span><br><span class="line">    removePlayer playerId</span><br><span class="line">    <span class="comment">// Tell clients of player logout</span></span><br><span class="line">    this.Clients.All.Message(sprintf <span class="string">"Player left: %s"</span> playerId)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Handle player changing direction</span></span><br><span class="line">  <span class="keyword">member</span> this.Turn (playerId :string, direction :string) = </span><br><span class="line">    updatePlayerDirection playerId direction</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Pass along message from one client to all clients</span></span><br><span class="line">  <span class="keyword">member</span> this.Send (message: string) = </span><br><span class="line">    this.Clients.All.Message(message)</span><br></pre></td></tr></table></figure><p>Now that the SignalR hub is done, it’s time to make the GameService that performs the server-side game logic as well as sending updated gamestate to players.  For this a background service is used.  At a set interval it processes current game state <code>updateState</code> and sends it out to all clients.  One note here: because I’ve choosen to use a client interface, the hub context is defined as <code>IHubContext&lt;GameHub, IClientApi&gt;)</code>.  If this wasn’t the case, it would be defined as <code>IHubContext&lt;GameHub&gt;</code> and messages would be sent using <code>this.HubContext.Clients.All.SendAsync(&quot;GameState&quot;, stateSerialized)</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">GameService</span> </span>(hubContext :IHubContext&lt;GameHub, IClientApi&gt;) =</span><br><span class="line">  <span class="keyword">inherit</span> BackgroundService ()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">member</span> this.HubContext :IHubContext&lt;GameHub, IClientApi&gt; = hubContext</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> this.ExecuteAsync (stoppingToken :CancellationToken) =</span><br><span class="line">    <span class="keyword">let</span> pingTimer = <span class="keyword">new</span> System.Timers.Timer(TurnFrequency)</span><br><span class="line">    pingTimer.Elapsed.Add(<span class="keyword">fun</span> _ -&gt; </span><br><span class="line">      updateState ()</span><br><span class="line">      <span class="keyword">let</span> stateSerialized = serializeGameState gState</span><br><span class="line">      this.HubContext.Clients.All.GameState(stateSerialized) |&gt; ignore)</span><br><span class="line"></span><br><span class="line">    pingTimer.Start()</span><br><span class="line">    Task.CompletedTask</span><br></pre></td></tr></table></figure><p>Beyond the specific game logic implementation, that’s all there is to the SignalR server.  It now will send out gamestate updates as well as handle client messages.</p><h1 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h1><p>The next step is building the client.  To do this, a dotnet console app will be created, and then the SignalR package is added.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang f# -n ClientFs</span><br><span class="line">cd ClientFs</span><br><span class="line">dotnet add package Microsoft.AspNetCore.SignalR.Client</span><br></pre></td></tr></table></figure><p>Once that is done, it needs the SignalR namespace. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.SignalR.Client</span><br></pre></td></tr></table></figure><p>The client needs to make a connection to the SignalR hub.  Similar to the server, the client needs some event handlers for server generated messages. </p><ul><li><p><code>LoginResponse</code> A successful login gives the client a playerId.</p></li><li><p><code>Message</code> - Handle general message notifications.</p></li><li><p><code>GameState</code> - When the server sends the current gamestate, the client evaluates and then sends an action message back.</p></li><li><p><code>Closed</code> - When the connection closes, what does the client do? In this case attempts to reconnect.</p></li></ul><p>Once the event handlers are setup, the client connects and performs a login.  The handlers take care of the rest.  As can be seen below, the client uses <code>InvokeAsync</code> to send messages to the server (as seen in the login).  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv = </span><br><span class="line">  <span class="comment">// Create connection to game server</span></span><br><span class="line">  <span class="keyword">let</span> connection = </span><br><span class="line">    (HubConnectionBuilder())</span><br><span class="line">      .WithUrl(<span class="string">"http://localhost:5000/gameHub"</span>)</span><br><span class="line">      .Build()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Event handlers</span></span><br><span class="line">  connection.On&lt;bool, string&gt;(<span class="string">"LoginResponse"</span>, <span class="keyword">fun</span> success id -&gt; loginResponseHandler connection success id) |&gt; ignore</span><br><span class="line">  connection.On&lt;string&gt;(<span class="string">"Message"</span>, <span class="keyword">fun</span> message -&gt; messageHandler message) |&gt; ignore</span><br><span class="line">  connection.On&lt;string&gt;(<span class="string">"GameState"</span>, <span class="keyword">fun</span> gameState -&gt; gameStateHandler connection gameState) |&gt; ignore</span><br><span class="line">  connection.add_Closed(<span class="keyword">fun</span> error -&gt; reconnect connection error)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Start connection and login</span></span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    connection.StartAsync().Wait()</span><br><span class="line">    connection.InvokeAsync(<span class="string">"login"</span>, myName).Wait()</span><br><span class="line">  <span class="keyword">with</span></span><br><span class="line">  | ex -&gt; printfn <span class="string">"Connection error %s"</span> (ex.ToString())</span><br><span class="line">          Environment.Exit(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Listen for 'q' to quit</span></span><br><span class="line">  getCommand connection</span><br><span class="line"></span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>The handler logic is uninteresting, but it is useful to see the definitions that match with the handlers.  In addition, I’ve included the client’s response back to the server in the gameState handler.  Again, it uses InvokeAsync when contacting the server.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> loginResponseHandler (connection :HubConnection) (success :bool) (id :string) =</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> messageHandler (message :string) =</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gameStateHandler (connection :HubConnection) (gameState :string) =</span><br><span class="line">  ...</span><br><span class="line">  connection.InvokeAsync(<span class="string">"Turn"</span>, playerId, move.ToString()) |&gt; ignore</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> reconnect (connection :HubConnection) (error :<span class="symbol">'a</span>) = </span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h1 id="Game-Viewer"><a href="#Game-Viewer" class="headerlink" title="Game Viewer"></a>Game Viewer</h1><p>The final piece to address is the game viewer.  This comes in two parts: the layout and the code.  For the layout, we leverage Giraffe’s view engine.  It’s a simple view that contains an html canvas map, player list, messages display, and a state print (for debugging purposes).  This is also where supporting js libraries: signalr, <a href="https://jquery.com/" target="_blank" rel="noopener">jquery</a>, as well as the viewer game-server.js are included.  For this project, the files reside in the <code>WebRoot</code> directory.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Views =</span><br><span class="line">    <span class="keyword">open</span> GiraffeViewEngine</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> layout (content: XmlNode list) =</span><br><span class="line">        html [] [</span><br><span class="line">            head [] [</span><br><span class="line">                title []  [ encodedText <span class="string">"SnakeWorld"</span> ]</span><br><span class="line">                link [ _rel  <span class="string">"stylesheet"</span></span><br><span class="line">                       _type <span class="string">"text/css"</span></span><br><span class="line">                       _href <span class="string">"/main.css"</span> ]</span><br><span class="line">            ]</span><br><span class="line">            body [] content</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> index (model : Message) =</span><br><span class="line">      [</span><br><span class="line">        div [ _class <span class="string">"container"</span>] [ </span><br><span class="line">          div [ _class <span class="string">"row"</span> ] [</span><br><span class="line">            div [ _id <span class="string">"mapWrapper"</span>; _class <span class="string">"col-6"</span> ] [</span><br><span class="line">              canvas [ _id <span class="string">"worldMap"</span>; _class <span class="string">"world-map"</span>; _width <span class="string">"200"</span>; _height <span class="string">"200"</span> ] [];</span><br><span class="line">              div [ _id <span class="string">"playerList"</span>; _class <span class="string">"player-list"</span> ] []</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">          div [ _class <span class="string">"row"</span> ] [</span><br><span class="line">            div [ _id <span class="string">"message"</span>; _class <span class="string">"col-6"</span> ] []</span><br><span class="line">          ]</span><br><span class="line">          div [ _class <span class="string">"row"</span> ] [</span><br><span class="line">            div [ _id <span class="string">"currentState"</span>; _class <span class="string">"col-6"</span> ] []</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">        script [ _src <span class="string">"signalr.js"</span> ] []</span><br><span class="line">        script [ _src <span class="string">"jquery-3.3.1.min.js"</span> ] []</span><br><span class="line">        script [ _src <span class="string">"game-viewer.js"</span> ] []</span><br><span class="line">      ] |&gt; layout</span><br></pre></td></tr></table></figure><p>This may bring up a question, where did <code>signalr.js</code> come from?  Well, there is one more thing we need to add to the project.  In a real project I’d package this differently, but a quick and dirty way will do for now.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @aspnet/signalr</span><br><span class="line">cp ./node_modules/@aspnet/signalr/dist/browser/signalr.js ./WebRoot</span><br></pre></td></tr></table></figure><p>The code part of the game viewer is in javascript.  A similar process is required as was performed with the F# client.  A connection is created to the SignalR hub.  Then event handlers are wired up.  The viewer is read-only, to show messages and draw the map and player score list.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// SignalR connection</span></span><br><span class="line">const connection = <span class="keyword">new</span> signalR.HubConnectionBuilder().withUrl(<span class="string">"/gameHub"</span>).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Handle Connection start</span></span><br><span class="line">connection.start().catch(<span class="keyword">function</span> (err) &#123;</span><br><span class="line">  <span class="keyword">return</span> console.error(err.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Handle incoming message</span></span><br><span class="line">connection.on(<span class="string">"Message"</span>, <span class="keyword">function</span> (message) &#123;</span><br><span class="line">  $(<span class="string">"#message"</span>).text(message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Handle game state updates (draw map, update player list)</span></span><br><span class="line">connection.on(<span class="string">"GameState"</span>, <span class="keyword">function</span> (gameState) &#123;</span><br><span class="line">  handleGameState(JSON.parse(gameState))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>At this point, we have all the necessary parts to support a SignalR F# server, F# client, and javascript client.  That closes the loop on the communication framework.  From here the game logic can be added to the server and client, and drawing can be added to the viewer.  Those components are outside of the scope for this post.  I hope you’ve found this to be a useful guide to leveraging a SignalR implementation with F#.  Until next time…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s post is a brief example of how to implement a game using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://dotnet.microsoft.com/apps/aspnet/real-time&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SignalR&lt;/a&gt;.  Creating a game for bots to play doesn’t have to be overly difficult.  Since interesting emergent qualities can arise from simple rules, it makes for a fun way to show off SignalR, beyond the standard chat application.  As this post will show, F# and SignalR work well together to create a nice communication framework without requiring a complex setup.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="SignalR" scheme="http://codesuji.com/tags/SignalR/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.NET Sentiment Analysis</title>
    <link href="http://codesuji.com/2019/01/14/F-and-MLNet-Sentiment-Analysis/"/>
    <id>http://codesuji.com/2019/01/14/F-and-MLNet-Sentiment-Analysis/</id>
    <published>2019-01-15T00:01:26.000Z</published>
    <updated>2019-01-15T00:04:44.561Z</updated>
    
    <content type="html"><![CDATA[<p>Today we’ll look at performing sentiment analysis using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://dot.net/ml" target="_blank" rel="noopener">ML.NET</a>.  A new version (v0.9.0) has recently been released, so we use this as an opportunity to play with some new functionality.  The goal of today’s post will be to perform sentiment analysis on movie reviews from <a href="https://www.imdb.com" target="_blank" rel="noopener">IMDB</a>.</p><a id="more"></a><p><i>Note: ML.NET is still evolving, this post was written using Microsoft.ML v0.9.0.</i></p><p>We’ll use <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a>.  If you don’t have it installed, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>With that out of the way, create a console F# project, then add the ML.NET package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-SentimentAnalysis</span><br><span class="line">cd MLNet-SentimentAnalysis</span><br><span class="line">dotnet add package Microsoft.ML --version 0.9.0</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source we will use for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Sentiment+Labelled+Sentences" target="_blank" rel="noopener">UCI</a>.  The datafile can be found <a href="https://archive.ics.uci.edu/ml/machine-learning-databases/00331/" target="_blank" rel="noopener">here</a>.  The zip file contains examples for IMDB, Yelp, and Amazon, but we’ll stick with IMDB for this post.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/00331/sentiment%20labelled%20sentences.zip</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is no header row.  The tab separated columns represent 1) the review’s text 2) the sentiment where 1 = positive and 0 = negative.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Long, whiny and pointless.  0</span><br><span class="line">But I recommend waiting for their future efforts, let this one go.  0</span><br><span class="line">Excellent cast, story line, performances.  1</span><br><span class="line">Totally believable.  1</span><br></pre></td></tr></table></figure><p>Now that we have the data, time to get to the code.  First there is some namespace setup.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br></pre></td></tr></table></figure><p>Here are the data types to be used.  <code>SentimentData</code> is for loading data, <code>SentimentPrediction</code> is for performing predictions.  Here we also get our first taste of 0.9.0.  As we’ll see later we can use the <code>SentimentData</code> type for loading.  To enable this we will add <code>[&lt;LoadColumn(column position)&gt;]</code> to the members.  I have also included <code>Probability</code>.  This is not a real column, nor is it needed for training.  I have included it because it is a required field when extracting performance metrics.  I feel like I shouldn’t need to include it here, but for now it’s the only way I got it to work.  The <code>CreateTextReader</code> now accepts a datatype for driving the loading process.  Once the data reader is setup, we also perform a train/test split of 70/30, respectively.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">SentimentData</span> </span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(0)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SentimentText :string</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(1)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label :bool</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Need to add this column to extract metrics</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;LoadColumn(2)&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Probability :float32</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">SentimentPrediction</span> </span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SentimentData :string</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> PredictedLabel :bool</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Score :float32 </span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="keyword">let</span> ml = <span class="keyword">new</span> MLContext()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> reader = ml.Data.CreateTextReader&lt;SentimentData&gt;(separatorChar = '\t', hasHeader = <span class="keyword">true</span>)</span><br><span class="line">           </span><br><span class="line">  <span class="keyword">let</span> dataFile = <span class="string">"./data/imdb_labelled.txt"</span></span><br><span class="line">  <span class="keyword">let</span> allData = reader.Read(dataFile);</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">struct</span> (trainData, testData) = ml.Clustering.TrainTestSplit(allData, testFraction = <span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><p>The old way (see below) can still be used, but I find the above newness a nice, more concise, method to load data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pre v0.9.0 way</span></span><br><span class="line"><span class="keyword">let</span> reader = </span><br><span class="line">  ml.Data.CreateTextReader(</span><br><span class="line">    separatorChar = '\t',</span><br><span class="line">    hasHeader = <span class="keyword">true</span>,</span><br><span class="line">    columns = </span><br><span class="line">      [|</span><br><span class="line">          Data.TextLoader.Column(<span class="string">"SentimentText"</span>, Nullable Data.DataKind.Text, <span class="number">0</span>);</span><br><span class="line">          Data.TextLoader.Column(<span class="string">"Label"</span>, Nullable Data.DataKind.Bool, <span class="number">1</span>);</span><br><span class="line">          <span class="comment">// <span class="doctag">NOTE:</span> Need to add this column to extract metrics</span></span><br><span class="line">          Data.TextLoader.Column(<span class="string">"Probability"</span>, Nullable Data.DataKind.R4, <span class="number">2</span>)</span><br><span class="line">      |])</span><br></pre></td></tr></table></figure><p>ML.NET also provides methods to perform inspection into the dataset.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printfn <span class="string">"### Schema"</span></span><br><span class="line">allData.Schema</span><br><span class="line">|&gt; Seq.iter(<span class="keyword">fun</span> x-&gt; printfn <span class="string">"%A"</span> x)</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>Here is what a simple schema view looks like.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### Schema</span><br><span class="line">SentimentText: Text</span><br><span class="line">Label: Bool</span><br><span class="line">Probability: R4</span><br></pre></td></tr></table></figure><p>Next we setup the training pipeline.  There are other options, like <code>FastTree</code>, but we’ll use <code>FastForest</code> for today’s post.  We’ll also take the defaults, but as with previous trainers we’ve looked at, we can provide custom hyperparameters.  Once the pipeline is setup, we run <code>Fit</code> to build the model.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pipeline = </span><br><span class="line">  ml</span><br><span class="line">    .Transforms.Text.FeaturizeText(<span class="string">"SentimentText"</span>, <span class="string">"Features"</span>)</span><br><span class="line">    .Append(ml.BinaryClassification.Trainers.FastForest())</span><br><span class="line">    <span class="comment">// Example of custom hyperparameters</span></span><br><span class="line">    <span class="comment">// .Append(mlContext.BinaryClassification.Trainers.FastForest(numTrees = 500, numLeaves = 100, learningRate = 0.0001))</span></span><br><span class="line"><span class="keyword">let</span> model = pipeline.Fit(trainData)</span><br></pre></td></tr></table></figure><p>Any good machine learning process requires performance evaluation.  For that we’ll look at two aspects.  First, ML.NET provides evaluators for the trainers.  I’ve cherry-picked a couple of the available <code>BinaryClassificationEvaluator</code> metrics.  Second, we can perform a preview of the predictions, which allows us to see the sentiment value along with the actual and predicted labels, as well as the score.  There are other items in the view as well that I left in to show the extent of the reporting.  Then we can run evaluation’s against the train and test sets.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> displayEvaluation description data = </span><br><span class="line">  <span class="keyword">let</span> predictions = model.Transform data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> metrics = ml.BinaryClassification.Evaluate(predictions)</span><br><span class="line"></span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line">  printfn <span class="string">"### %s"</span> description</span><br><span class="line">  printfn <span class="string">"Accuracy          : %0.4f"</span> (metrics.Accuracy)</span><br><span class="line">  printfn <span class="string">"F1                : %0.4f"</span> (metrics.F1Score)</span><br><span class="line">  printfn <span class="string">"Positive Precision: %0.4f"</span> (metrics.PositivePrecision)</span><br><span class="line">  printfn <span class="string">"Positive Recall   : %0.4f"</span> (metrics.PositiveRecall)</span><br><span class="line">  printfn <span class="string">"Negative Precision: %0.4f"</span> (metrics.NegativePrecision)</span><br><span class="line">  printfn <span class="string">"Negative Recall   : %0.4f"</span> (metrics.NegativeRecall)</span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> preview = predictions.Preview()</span><br><span class="line">  preview.RowView</span><br><span class="line">  |&gt; Seq.take <span class="number">5</span></span><br><span class="line">  |&gt; Seq.iter(<span class="keyword">fun</span> row -&gt;</span><br><span class="line">     row.Values</span><br><span class="line">     |&gt; Array.iter (<span class="keyword">fun</span> kv -&gt; printfn <span class="string">"%s: %A"</span> kv.Key kv.Value)</span><br><span class="line">     printfn <span class="string">""</span>)</span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line"></span><br><span class="line">displayEvaluation <span class="string">"Train"</span> trainData</span><br><span class="line">displayEvaluation <span class="string">"Test"</span> testData</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>As imagined, the metrics are better when run against the training data.  The much better view of prediction quality is when run against the testing data.  As expected, the model doesn’t perform as well against the test set, there is probably some more work that needs done here.  The <code>Preview</code> is also useful when diagnosing more detailed problems, since it shows scores and label predictions.  Not related to the results, but the stratification value is used for the train/test split.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">### Train</span><br><span class="line">Accuracy          : 0.9120</span><br><span class="line">F1                : 0.9145</span><br><span class="line">Positive Precision: 0.8987</span><br><span class="line">Positive Recall   : 0.9309</span><br><span class="line">Negative Precision: 0.9267</span><br><span class="line">Negative Recall   : 0.8927</span><br><span class="line"></span><br><span class="line">SentimentText: Not sure who was more lost - the flat characters or the audience, nearly half of whom walked out.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.595641375f</span><br><span class="line">Features: Sparse vector of size 7818, 110 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -54.9804649f</span><br><span class="line"></span><br><span class="line">SentimentText: Attempting artiness with black &amp; white and clever camera angles, the movie disappointed - became even more ridiculous - as the acting was poor and the plot and lines almost non-existent.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.58837676f</span><br><span class="line">Features: Sparse vector of size 7818, 188 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -13.02876f</span><br><span class="line"></span><br><span class="line">SentimentText: Very little music or anything to speak of.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.753678203f</span><br><span class="line">Features: Sparse vector of size 7818, 52 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -5.37574673f</span><br><span class="line"></span><br><span class="line">SentimentText: The best scene in the movie was when Gerardo is trying to find a song that keeps running through his head.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.967485666f</span><br><span class="line">Features: Sparse vector of size 7818, 118 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 41.7043114f</span><br><span class="line"></span><br><span class="line">SentimentText: The rest of the movie lacks art, charm, meaning... If it&apos;s about emptiness, it works I guess because it&apos;s empty.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.929597497f</span><br><span class="line">Features: Sparse vector of size 7818, 119 explicit values</span><br><span class="line">PredictedLabel: false</span><br><span class="line">Score: -15.2312632f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Test</span><br><span class="line">Accuracy          : 0.6890</span><br><span class="line">F1                : 0.6923</span><br><span class="line">Positive Precision: 0.6471</span><br><span class="line">Positive Recall   : 0.7444</span><br><span class="line">Negative Precision: 0.7385</span><br><span class="line">Negative Recall   : 0.6400</span><br><span class="line"></span><br><span class="line">SentimentText: Wasted two hours.  </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.171681881f</span><br><span class="line">Features: Sparse vector of size 7818, 21 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 4.22176647f</span><br><span class="line"></span><br><span class="line">SentimentText: Saw the movie today and thought it was a good effort, good messages for kids.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.185497403f</span><br><span class="line">Features: Sparse vector of size 7818, 83 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 25.0270023f</span><br><span class="line"></span><br><span class="line">SentimentText: The movie showed a lot of Florida at it&apos;s best, made it look very appealing.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.250951052f</span><br><span class="line">Features: Sparse vector of size 7818, 86 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 18.1396465f</span><br><span class="line"></span><br><span class="line">SentimentText: </span><br><span class="line">Label: false</span><br><span class="line">StratificationColumn: 0.128096819f</span><br><span class="line">Features: Sparse vector of size 7818, 0 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 9.73927498f</span><br><span class="line"></span><br><span class="line">SentimentText: In other words, the content level of this film is enough to easily fill a dozen other films.  </span><br><span class="line">Label: true</span><br><span class="line">StratificationColumn: 0.229808331f</span><br><span class="line">Features: Sparse vector of size 7818, 90 explicit values</span><br><span class="line">PredictedLabel: true</span><br><span class="line">Score: 20.8655605f</span><br></pre></td></tr></table></figure><p>Now that model fitting and some evaluation has been performed, we need to make a prediction function.  As with so many things so far, this is simple to do.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> predictor = model.CreatePredictionEngine&lt;SentimentData, SentimentPrediction&gt;(ml)</span><br></pre></td></tr></table></figure><p>Once the prediction function is in place, we can run predictions and see their underlying scores.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tests = </span><br><span class="line">  [</span><br><span class="line">    <span class="string">"It was cool, cute, and funny."</span>; </span><br><span class="line">    <span class="string">"It was slow and boring."</span>; </span><br><span class="line">    <span class="string">"It was the greatest thing I've seen."</span> </span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">tests </span><br><span class="line">|&gt; List.iter (<span class="keyword">fun</span> x -&gt;</span><br><span class="line">  <span class="keyword">let</span> input = SentimentData()</span><br><span class="line">  input.SentimentText &lt;- x</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prediction = predictor.Predict(input)</span><br><span class="line">  printfn <span class="string">""</span></span><br><span class="line">  printfn <span class="string">"Text       : %s"</span> x</span><br><span class="line">  printfn <span class="string">"Prediction : %b"</span> (prediction.PredictedLabel)</span><br><span class="line">  printfn <span class="string">"Score      : %0.4f"</span> (prediction.Score)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>And here we can see the predictions.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Text       : It was cool, cute, and funny.</span><br><span class="line">Prediction : true</span><br><span class="line">Score      : 12.2628</span><br><span class="line"></span><br><span class="line">Text       : It was slow and boring.</span><br><span class="line">Prediction : false</span><br><span class="line">Score      : -10.0353</span><br><span class="line"></span><br><span class="line">Text       : It was the greatest thing I&apos;ve seen.</span><br><span class="line">Prediction : true</span><br><span class="line">Score      : 68.4614</span><br></pre></td></tr></table></figure><p>This is all well and good, but to be useful we need to be able to save a model to a file for later use.  Here we have the ability to save and reload a model file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line"><span class="keyword">let</span> saveModel (ml:MLContext) trainedMode = </span><br><span class="line">  <span class="keyword">use</span> fsWrite = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Create, FileAccess.Write, FileShare.Write)</span><br><span class="line">  ml.Model.Save(model, fsWrite)</span><br><span class="line"></span><br><span class="line">saveModel ml model</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file</span></span><br><span class="line"><span class="keyword">use</span> fsRead = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Open, FileAccess.Read, FileShare.Read)</span><br><span class="line"><span class="keyword">let</span> mlReloaded = MLContext()</span><br><span class="line"><span class="keyword">let</span> modelReloaded = TransformerChain.LoadFrom(mlReloaded, fsRead)</span><br><span class="line"><span class="keyword">let</span> predictorReloaded = modelReloaded.CreatePredictionEngine&lt;SentimentData, SentimentPrediction&gt;(mlReloaded)</span><br></pre></td></tr></table></figure><p>Once the model file has been reloaded, we can run a sample prediction.  We just need to create the prediction function against and away we go.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = SentimentData()</span><br><span class="line">test1.SentimentText &lt;- tests.[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionReloaded = predictorReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Text                  : %s"</span> tests.[<span class="number">0</span>]</span><br><span class="line">printfn <span class="string">"Prediction (Reloaded) : %b"</span> (predictionReloaded.PredictedLabel)</span><br><span class="line">printfn <span class="string">"Score (Reloaded)      : %0.4f"</span> (predictionReloaded.Score)</span><br></pre></td></tr></table></figure><p>Here are the prediction results from a saved model.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Text                  : It was cool, cute, and funny.</span><br><span class="line">Prediction (Reloaded) : true</span><br><span class="line">Score (Reloaded)      : 12.2628</span><br></pre></td></tr></table></figure><p>This has been a brief look into sentiment analysis using F# and ML.NET.  It has been a pleasure to see the framework progress.  It is even more enjoyable performing these types of workloads using F#.  Until next time.  Thanks.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today we’ll look at performing sentiment analysis using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://dot.net/ml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt;.  A new version (v0.9.0) has recently been released, so we use this as an opportunity to play with some new functionality.  The goal of today’s post will be to perform sentiment analysis on movie reviews from &lt;a href=&quot;https://www.imdb.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IMDB&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Text" scheme="http://codesuji.com/tags/Text/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>An Introduction to Chiron</title>
    <link href="http://codesuji.com/2019/01/07/Chiron-Introduction/"/>
    <id>http://codesuji.com/2019/01/07/Chiron-Introduction/</id>
    <published>2019-01-08T02:23:57.000Z</published>
    <updated>2019-01-08T02:49:10.433Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s post is a introduction to performing json serialization tasks using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://xyncro.tech/chiron/" target="_blank" rel="noopener">Chiron</a>.</p><a id="more"></a><p>There are various ways to perform serialization in F#, each has their own set of advantages and disadvantages.  In particular, Chiron provides nice control over more complex types.  Within Chiron there are multiple approaches.  The examples provided are not exhaustive, but are meant to be a good starting point for how various types can be serialized and deserialized.  The code will be based on a player object for a theoretical game.  Using that as a premise, there are two major things we’ll look at: records and discriminated unions.  Both will have their own unique variations.</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>First, add the package to the project.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -lang f# --name Introduction</span><br><span class="line">cd Introduction</span><br><span class="line">dotnet add package Chiron --version 6.3.1</span><br></pre></td></tr></table></figure><p>Second, import the <code>Chiron</code> namespace.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Chiron </span><br></pre></td></tr></table></figure><h3 id="Record-Types"><a href="#Record-Types" class="headerlink" title="Record Types"></a>Record Types</h3><p>Record are perhaps the most common type to serialize.  They are also straightforward, once you understand the mechanisms at work.  This first example uses just primative types that can be handled with no additional code required.  Chiron expects <code>ToJson</code> and <code>FromJson</code> methods when serializing and deserializing (respectively).  Both use a <code>json {...}</code> computation expression.  Serialization is accomplished with a series of <code>do! Json.write &lt;attribute name&gt; &lt;attribute value&gt;</code> statements.  This allows us to define what we want to be serialized.  For Deserialization there are two steps.  First, <code>let! &lt;var&gt; = Json.read &lt;attribute name&gt;</code> extracts the values.  Once we have the values, we need to construct the record and <code>return</code> it.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123;</span><br><span class="line">  Name :string;</span><br><span class="line">  Score :int;</span><br><span class="line">  Notes :string list;</span><br><span class="line">  IntPairs :(int * int) list;</span><br><span class="line">  &#125; <span class="keyword">with</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123;</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"name"</span> p.Name</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"score"</span> p.Score</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"notes"</span> p.Notes</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"int_pairs"</span> p.IntPairs</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> name = Json.read <span class="string">"name"</span></span><br><span class="line">    <span class="keyword">let!</span> score = Json.read <span class="string">"score"</span></span><br><span class="line">    <span class="keyword">let!</span> notes = Json.read <span class="string">"notes"</span></span><br><span class="line">    <span class="keyword">let!</span> intPairs = Json.read <span class="string">"int_pairs"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">      Player.Name = name;</span><br><span class="line">      Score = score;</span><br><span class="line">      Notes = notes;</span><br><span class="line">      IntPairs = intPairs;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Now that the supporting code is in place, let’s look at how to use it.  Conversion in both ways basically requires two steps.  To serialize, the record is serialized, then formatted <code>(Json.serialize &gt;&gt; Json.format)</code>.  This is also where we have addition options.  The default json format is compact, which is typically want we want when passing data around.  But if we want a nicer view, we can <code>(Json.serialize &gt;&gt; Json.formatWith JsonFormattingOptions.Pretty)</code> to pretty print.  The other side of the equation is deserialization.  Here we parse, then deserialize <code>(Json.parse &gt;&gt; Json.deserialize)</code>.  The additional key here is to define the type we want to deserialize into.  At a basic level, that is all there is to it.  Everything else we’ll look at will be incremental expansions on these concepts.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> player1 = &#123; </span><br><span class="line">    Player.Name = <span class="string">"Jane"</span>; </span><br><span class="line">    Score = <span class="number">100</span>; </span><br><span class="line">    Notes = [ </span><br><span class="line">      <span class="string">"This is a note"</span>; </span><br><span class="line">      <span class="string">"This is another note"</span> ]; </span><br><span class="line">    IntPairs = [ </span><br><span class="line">      (<span class="number">1</span>,<span class="number">3</span>); </span><br><span class="line">      (<span class="number">13</span>, <span class="number">87</span>) ];</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">  printfn <span class="string">"Player1: %A"</span> player1</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> player1Json = (Json.serialize &gt;&gt; Json.format) player1</span><br><span class="line">  printfn <span class="string">"Json (compact): \n%s"</span> player1Json</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> player1JsonPretty = (Json.serialize &gt;&gt; Json.formatWith JsonFormattingOptions.Pretty) player1</span><br><span class="line">  printfn <span class="string">"Json (pretty): \n%s"</span> player1JsonPretty</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> player1' :Player = (Json.parse &gt;&gt; Json.deserialize) player1Json</span><br><span class="line">  printfn <span class="string">"Player1': %A"</span> player1'</span><br><span class="line">  </span><br><span class="line">  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Now, let’s take a look at the results.  For the most part they are exactly as expected, which is good.  The one caveat is the list tuples.  Since json doesn’t have a concept of tuples, they are serialized into an array.  This is fine, it’s more about knowing how the default serialization works.  As with other things in Chiron, this could be modified by writing our own serialization code into a different format.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># Player1 object</span><br><span class="line">Player1: &#123;Name = "Jane";</span><br><span class="line"> Score = 100;</span><br><span class="line"> Notes = ["This is a note"; "This is another note"];</span><br><span class="line"> IntPairs = [(1, 3); (13, 87)];&#125;</span><br><span class="line"></span><br><span class="line"># Player1 as json</span><br><span class="line">Json (compact): </span><br><span class="line">&#123;<span class="attr">"int_pairs"</span>:[[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">13</span>,<span class="number">87</span>]],<span class="attr">"name"</span>:<span class="string">"Jane"</span>,<span class="attr">"notes"</span>:[<span class="string">"This is a note"</span>,<span class="string">"This is another note"</span>],<span class="attr">"score"</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"># Player1 as prettified json</span><br><span class="line">Json (pretty): </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"int_pairs"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="number">13</span>,</span><br><span class="line">      <span class="number">87</span></span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Jane"</span>,</span><br><span class="line">  <span class="attr">"notes"</span>: [</span><br><span class="line">    <span class="string">"This is a note"</span>,</span><br><span class="line">    <span class="string">"This is another note"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"score"</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Player1' object (deserialized from json string)</span><br><span class="line">Player1': &#123;Name = "Jane";</span><br><span class="line"> Score = 100;</span><br><span class="line"> Notes = ["This is a note"; "This is another note"];</span><br><span class="line"> IntPairs = [(1, 3); (13, 87)];&#125;</span><br></pre></td></tr></table></figure><p>The remaining examples will be an expansion of this one.  It will allow us to focus on the new stuff without getting lost in a bulk of code.  For completeness, I’ll provide the final version of <code>Player</code> at the end of the post so it can all be seen together.</p><h3 id="Records-within-Records"><a href="#Records-within-Records" class="headerlink" title="Records within Records"></a>Records within Records</h3><p>Next, records within records.  To do this we’ll need to create another record type, <code>Point</code>.  Beyond the base type definition, the <code>ToJson</code> and <code>FromJson</code> functions need to be implemented, in a similar fashion as above.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Point</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Point</span> </span>= &#123; </span><br><span class="line">  X :int; </span><br><span class="line">  Y :int </span><br><span class="line">  &#125; <span class="keyword">with</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Point) = json &#123;</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"x"</span> p.X</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"y"</span> p.Y</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Point) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> x = Json.read <span class="string">"x"</span></span><br><span class="line">    <span class="keyword">let!</span> y = Json.read <span class="string">"y"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; Point.X = x; Point.Y = y &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Adding the new field into the <code>Player</code> record is simple.  The beauty here is that as long as you define the appropriate methods in the <code>Point</code> class, as we did above, Chiron handles the serialization/deserialization with little effort.  We just have to remember there are 3 touch points: definition, ToJson, and FromJson.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a Coordinates field that is a list of Points to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  Coordinates :Point list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"coordinates"</span> p.Coordinates</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> coordinates = Json.read <span class="string">"coordinates"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      Coordinates = coordinates</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the Coordinates field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  Coordinates = [ </span><br><span class="line">    &#123; X = <span class="number">30</span>; Y = <span class="number">40</span> &#125;; </span><br><span class="line">    &#123; X = <span class="number">30</span>; Y = <span class="number">41</span> &#125; ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, the Point list is now part of the player.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><h3 id="Discriminated-Unions-Part-1-Simple"><a href="#Discriminated-Unions-Part-1-Simple" class="headerlink" title="Discriminated Unions - Part 1 (Simple)"></a>Discriminated Unions - Part 1 (Simple)</h3><p>Discriminated Unions manifest themselves in a couple different forms when serializing.  As a result, we’ll look at these from a couple different angles.  They sometimes require slightly more of a decision over records types.  When serializing primative types we just take the defaults, which is great.  With discriminated unions we need to decide how we want our serialization to look.  In this case, we’ll look to add a “current direction” to the player, leveraging a <code>Direction</code> type of North, South, East, or West.  For this we’ll just encode the value as a string; it is the simpliest and most straightforward way.  Of special note regarding the <code>ToJson</code> and <code>FromJson</code> functions, we don’t use the <code>json {...}</code> computation expression.  <code>ToJson</code> encodes the string value as a <code>Json</code> type.  <code>FromJson</code> returns a function that converts the string representation to a value.</p><p>Something that should be addressed, how to handle invalid values. For this example we’ll fail the parsing with an “Invalid Direction” error.  As an alternative, that might make sense in some cases, it could just be encoded to a default value.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Direction</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Direction</span> </span>= N | S | E | W  <span class="keyword">with</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (d :Direction) =</span><br><span class="line">    <span class="keyword">match</span> d <span class="keyword">with</span></span><br><span class="line">    | N -&gt; ToJsonDefaults.ToJson <span class="string">"N"</span></span><br><span class="line">    | E -&gt; ToJsonDefaults.ToJson <span class="string">"E"</span></span><br><span class="line">    | S -&gt; ToJsonDefaults.ToJson <span class="string">"S"</span></span><br><span class="line">    | W -&gt; ToJsonDefaults.ToJson <span class="string">"W"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Direction) = <span class="keyword">fun</span> json -&gt; </span><br><span class="line">    <span class="keyword">match</span> json <span class="keyword">with</span></span><br><span class="line">    | String <span class="string">"N"</span> -&gt; Value N, json</span><br><span class="line">    | String <span class="string">"E"</span> -&gt; Value E, json</span><br><span class="line">    | String <span class="string">"S"</span> -&gt; Value S, json</span><br><span class="line">    | String <span class="string">"W"</span> -&gt; Value W, json</span><br><span class="line">    | _          -&gt; failwith (sprintf <span class="string">"Invalid Direction '%A'"</span> json)</span><br><span class="line">    <span class="comment">// Alternative: Silently fail to a default</span></span><br><span class="line">    <span class="comment">// | _          -&gt; Value N, json</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>As we did before, we need to add the <code>CurrentDirection</code> at 3 points: definition, ToJson, and FromJson.  As we saw in the previous example, with the functions setup on our type, Chiron handles the rest.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a CurrentDirection field to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  CurrentDirection :Direction</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">     <span class="keyword">do!</span> Json.write <span class="string">"current_direction"</span> p.CurrentDirection</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> currentDirection = Json.read <span class="string">"current_direction"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      CurrentDirection = currentDirection</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the CurrentDirection field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  CurrentDirection = Direction.N</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, the current direction is now part of the player.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;sco</span><br></pre></td></tr></table></figure><h3 id="Discriminated-Unions-Part-2-Enums"><a href="#Discriminated-Unions-Part-2-Enums" class="headerlink" title="Discriminated Unions - Part 2 (Enums)"></a>Discriminated Unions - Part 2 (Enums)</h3><p>Discriminated Unions can also be used like enums. This requires a slightly different approach.  Primarily, enums cannot have member functions, so the methods we use before won’t work. We’ll need a little more logic in the player part of the serialization/deserialization functions. For this we’ll define a player’s level.  This is a bit contrived, since using a straight number for levels makes more sense, but this example will at least get the idea across.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Level </span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Level</span> </span>=</span><br><span class="line">  | Zero = <span class="number">0</span></span><br><span class="line">  | One = <span class="number">1</span> </span><br><span class="line">  | Two = <span class="number">2</span></span><br><span class="line">  | Three = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>One thing that is the same is where we need to add <code>Level</code>, the <code>Player</code>: definition, ToJson, and FromJson. This is where we need to provide a bit more information regarding how we want to serialize the value.  I believe the most straight forward way is to convert to the underlying int.  In the <code>ToJson</code> we need to cast as int.  For <code>FromJson</code> we need to cast from int to the <code>Level</code> type.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a Level field to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  Level: Level</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"level"</span> (int p.Level)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> level = Json.read <span class="string">"level"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      Level = enum&lt;Level&gt;(level)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the CurrentDirection field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  Level = Level.Two;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, their level is now part of the player.  And our method of serialization to int works as expected.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;level&quot;:2,&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><h3 id="Discriminated-Unions-Part-3-Complex"><a href="#Discriminated-Unions-Part-3-Complex" class="headerlink" title="Discriminated Unions - Part 3 (Complex)"></a>Discriminated Unions - Part 3 (Complex)</h3><p>Discriminated unions offer more complex ways to represent their data.  This means we have to make a decision about how we want to represent that data.  This is one place where Chiron shines, it provides the power to represent complex types as we see fit.  For this example, we’ll look at a player <code>Role</code> that represents a more complex type.  An object that has a <code>type</code> and <code>value</code> attribute feels like a simple way to serialize.  There are certainly other ways this could be represented, and the attributes don’t neccessarily have to match for the varying types.</p><p><code>ToJson</code> uses a <code>json {...}</code> computation expression.  Since there is a mixture of string and int values withing the discriminated union, we need to put them within the <code>match</code>.  This creates an object representation.  The <code>FromJson</code> function first extracts the <code>type</code> attribute from the Json object, then returns the appropriate <code>Role</code> with its respective value.  Since they all use <code>value</code>, they look similar, but that attribute, or potentially list of attributes could vary depending on role.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Role </span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Role</span> </span>= </span><br><span class="line">  | Scout <span class="keyword">of</span> string</span><br><span class="line">  | Assault <span class="keyword">of</span> string</span><br><span class="line">  | Defense <span class="keyword">of</span> string</span><br><span class="line">  | Swarm <span class="keyword">of</span> int</span><br><span class="line">  <span class="keyword">with</span> </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (r :Role) = </span><br><span class="line">    <span class="keyword">match</span> r <span class="keyword">with</span></span><br><span class="line">    | Scout(x)   -&gt; json &#123;</span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"scout"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line">    | Assault(x) -&gt; json &#123;</span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"assault"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line">    | Defense(x) -&gt; json &#123;</span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"defense"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line">    | Swarm(x)   -&gt; json &#123; </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"type"</span> <span class="string">"swarm"</span> </span><br><span class="line">                      <span class="keyword">do!</span> Json.write <span class="string">"value"</span> x &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Role) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> role = Json.read <span class="string">"type"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> role <span class="keyword">with</span></span><br><span class="line">    | <span class="string">"scout"</span>   -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Scout(value)</span><br><span class="line">    | <span class="string">"assault"</span> -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Assault(value)</span><br><span class="line">    | <span class="string">"defense"</span> -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Defense(value)</span><br><span class="line">    | <span class="string">"swarm"</span>   -&gt; <span class="keyword">let!</span> value = Json.read <span class="string">"value"</span></span><br><span class="line">                   <span class="keyword">return</span> Swarm(value)</span><br><span class="line">    | _         -&gt; failwith (sprintf <span class="string">"Invalid Role '%A'"</span> role)</span><br><span class="line">                   <span class="keyword">return</span> Swarm(<span class="number">0</span>) </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>We’re back to the familar process of modifying our 3 touch points: definition, ToJson, and FromJson.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add a Role field to the definition of the Player type</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123; ...</span><br><span class="line">  Role: Role</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's ToJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"role"</span> p.Role</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the new field to the Player's FromJson member function</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123; ...</span><br><span class="line">    <span class="keyword">let!</span> role = Json.read <span class="string">"role"</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;  ...</span><br><span class="line">      Role = role</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When creating the Player object, we need to populate the Role field</span></span><br><span class="line">player1 = &#123; ...</span><br><span class="line">  Role = Scout(<span class="string">"ax-101"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>As we can see below, the role is now serialized as an object.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;level&quot;:2,&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;role&quot;:&#123;&quot;type&quot;:&quot;scout&quot;,&quot;value&quot;:&quot;ax-101&quot;&#125;,&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><p>Alternatively, if the <code>Role</code> is <code>Swarm</code>, the object is serialized as appropriate. This exactly what we want, a string value when it’s a string, and int value when it’s an int.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">player1 = &#123; ...</span><br><span class="line">  Role = Swarm(<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Result: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;coordinates&quot;:[&#123;&quot;x&quot;:30,&quot;y&quot;:40&#125;,&#123;&quot;x&quot;:30,&quot;y&quot;:41&#125;],&quot;current_direction&quot;:&quot;N&quot;,&quot;int_pairs&quot;:[[1,3],[13,87]],&quot;level&quot;:2,&quot;name&quot;:&quot;Jane&quot;,&quot;notes&quot;:[&quot;This is a note&quot;,&quot;This is another note&quot;],&quot;role&quot;:&#123;&quot;type&quot;:&quot;swarm&quot;,&quot;value&quot;:200&#125;,&quot;score&quot;:100&#125;</span><br></pre></td></tr></table></figure><p>As promised, here is the complete definition of <code>Player</code>, with all its attributes.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Player</span> </span>= &#123;</span><br><span class="line">  Name :string;</span><br><span class="line">  Score :int;</span><br><span class="line">  Notes :string list;</span><br><span class="line">  IntPairs :(int * int) list;</span><br><span class="line">  Coordinates :Point list;</span><br><span class="line">  CurrentDirection :Direction;</span><br><span class="line">  Level :Level;</span><br><span class="line">  Role :Role</span><br><span class="line">  &#125; <span class="keyword">with</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> ToJson (p :Player) = json &#123;</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"name"</span> p.Name</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"score"</span> p.Score</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"notes"</span> p.Notes</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"int_pairs"</span> p.IntPairs</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"coordinates"</span> p.Coordinates</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"current_direction"</span> p.CurrentDirection</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"level"</span> (int p.Level)</span><br><span class="line">    <span class="keyword">do!</span> Json.write <span class="string">"role"</span> p.Role</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">member</span> FromJson (_ :Player) = json &#123;</span><br><span class="line">    <span class="keyword">let!</span> name = Json.read <span class="string">"name"</span></span><br><span class="line">    <span class="keyword">let!</span> score = Json.read <span class="string">"score"</span></span><br><span class="line">    <span class="keyword">let!</span> notes = Json.read <span class="string">"notes"</span></span><br><span class="line">    <span class="keyword">let!</span> intPairs = Json.read <span class="string">"int_pairs"</span></span><br><span class="line">    <span class="keyword">let!</span> coordinates = Json.read <span class="string">"coordinates"</span></span><br><span class="line">    <span class="keyword">let!</span> currentDirection = Json.read <span class="string">"current_direction"</span></span><br><span class="line">    <span class="keyword">let!</span> level = Json.read <span class="string">"level"</span></span><br><span class="line">    <span class="keyword">let!</span> role = Json.read <span class="string">"role"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">      Player.Name = name;</span><br><span class="line">      Score = score;</span><br><span class="line">      Notes = notes;</span><br><span class="line">      IntPairs = intPairs;</span><br><span class="line">      Coordinates = coordinates;</span><br><span class="line">      CurrentDirection = currentDirection;</span><br><span class="line">      Level = enum&lt;Level&gt;(level);</span><br><span class="line">      Role = role</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>This has been a light introduction into using Chiron.  Hopefully you have found it useful.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s post is a introduction to performing json serialization tasks using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://xyncro.tech/chiron/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chiron&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Chiron" scheme="http://codesuji.com/tags/Chiron/"/>
    
      <category term="Serialization" scheme="http://codesuji.com/tags/Serialization/"/>
    
  </entry>
  
  <entry>
    <title>F# Benchmarking</title>
    <link href="http://codesuji.com/2018/12/18/F-Benchmarking/"/>
    <id>http://codesuji.com/2018/12/18/F-Benchmarking/</id>
    <published>2018-12-19T04:17:32.000Z</published>
    <updated>2018-12-19T03:50:11.257Z</updated>
    
    <content type="html"><![CDATA[<p>Occasionally the need arises in an <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> project to perform benchmarking.  <a href="https://benchmarkdotnet.org/" target="_blank" rel="noopener">BenchmarkDotNet</a> is a powerful tool made exactly for this purpose.  Today’s post provides an introductory look into the process.</p><a id="more"></a><p>Although <code>#time</code> and <code>Stopwatch</code> are useful for quick and dirty checks, BenchmarkDotNet allows a more comprehensive look at performance characteristics. This post will use <code>sort</code> for a case study to display a sample of what can be done.  Before getting started ensure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.2</a>.  Select <strong>SDK</strong> for your platform.  After that create a console F# project and install the BenchmarkDotNet package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name BenchmarkSort</span><br><span class="line">cd BenchmarkSort </span><br><span class="line">dotnet add package BenchmarkDotNet --version 0.11.3</span><br></pre></td></tr></table></figure><p>First, the initial stuff.  One note here is that I decided to use a complex type <code>Foo</code> for my sorting benchmark.  I could’ve used <code>int</code>, but .NET has highly optimized methods for sorting native types like <code>int</code>.  To the level the playing field a bit I wanted to take this out of the equation.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Program</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Attributes</span><br><span class="line"><span class="keyword">open</span> BenchmarkDotNet.Running</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Foo</span> </span>= &#123; Id: int; Name: string &#125;</span><br></pre></td></tr></table></figure><p>Time to create the test functions.  The comparison targets will be .NET’s built in <code>List.sort</code>, then a hand-written <code>QuickSort</code>, and <code>BubbleSort</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> listSort (l :Foo list) =</span><br><span class="line">  List.sort l</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> quickSort (l :Foo list) =</span><br><span class="line">  <span class="keyword">match</span> l <span class="keyword">with</span> </span><br><span class="line">  | []   -&gt; []</span><br><span class="line">  | h::t -&gt; <span class="keyword">let</span> (smaller, larger) = List.partition (<span class="keyword">fun</span> x -&gt; x.Id &lt;= h.Id) t</span><br><span class="line">            List.concat [ quickSort smaller; [h]; quickSort larger ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bubbleSortMutable (l :Foo list) = </span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> l' = l |&gt; Array.ofList</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mutable</span> keepGoing = <span class="keyword">true</span></span><br><span class="line">  <span class="keyword">while</span> keepGoing <span class="keyword">do</span></span><br><span class="line">    keepGoing &lt;- <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1.</span>.(Array.length l' - <span class="number">1</span>)] <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> l'.[i<span class="number">-1</span>] &gt; l'.[i] <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">let</span> t = l'.[i<span class="number">-1</span>]</span><br><span class="line">        l'.[i<span class="number">-1</span>] &lt;- l'.[i]</span><br><span class="line">        l'.[i] &lt;- t</span><br><span class="line">        keepGoing &lt;- <span class="keyword">true</span></span><br><span class="line">  l' |&gt; List.ofArray</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bubbleSortRecursive (l :Foo list) = </span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">rec</span> bubbleSort' a rev l =</span><br><span class="line">    <span class="keyword">match</span> l, rev <span class="keyword">with</span></span><br><span class="line">    | [], <span class="keyword">true</span>     -&gt; List.rev a</span><br><span class="line">    | [], <span class="keyword">false</span>    -&gt; List.rev a |&gt; bubbleSort' [] <span class="keyword">true</span></span><br><span class="line">    | h1::h2::t, _ -&gt; <span class="keyword">if</span> h1 &gt; h2 </span><br><span class="line">                      <span class="keyword">then</span> bubbleSort' (h2::a) <span class="keyword">false</span> (h1::t)</span><br><span class="line">                      <span class="keyword">else</span> bubbleSort' (h1::a) rev (h2::t)</span><br><span class="line">    | h::t, _      -&gt; bubbleSort' (h::a) rev t</span><br><span class="line">  bubbleSort' [] <span class="keyword">true</span> l</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> initList n = </span><br><span class="line">  [<span class="number">1.</span>.n] </span><br><span class="line">  |&gt; List.map (<span class="keyword">fun</span> _ -&gt;</span><br><span class="line">    <span class="keyword">let</span> id = rand.Next(<span class="number">10</span>*n)</span><br><span class="line">    &#123; Foo.Id = id; Name = id.ToString() &#125;)</span><br></pre></td></tr></table></figure><p>Now it is time to setup the benchmarking methods.  First, I make a type <code>SortComparison</code>.  I have attached a <code>MemoryDiagnoser</code> attribute so that I’ll get GC statistics back from the benchmarking run.  The sorting methods will be tested against different list sizes (10, 1000, and 10000).  This is defined in <code>ListSize</code>, where the <code>Params</code> attribute defines what BenchmarkDotNet should use for parameterization during the tests.  Next, it is time to define what will be compared.  To do this there are member functions marked with the <code>Benchmark</code> attribute.  That’s all there is to setting up the tests.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;MemoryDiagnoser&gt;]</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">SortComparison</span> </span>() =</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Params (10,1000,10000)&gt;]</span> </span><br><span class="line">  <span class="keyword">member</span> <span class="keyword">val</span> ListSize :int = <span class="number">0</span> <span class="keyword">with</span> get, set</span><br><span class="line"></span><br><span class="line">  <span class="keyword">member</span> self.mainList = initList self.ListSize</span><br><span class="line">  </span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListSort() = listSort self.mainList</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListQuickSort () = quickSort self.mainList</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListBubbleSortMutable () = bubbleSortMutable self.mainList</span><br><span class="line">  </span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.ListBubbleSortRecursive () = bubbleSortRecursive self.mainList</span><br></pre></td></tr></table></figure><p>In Main, all that is needed is a simple runner.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> Main args =</span><br><span class="line">  BenchmarkRunner.Run typeof&lt;SortComparison&gt; |&gt; ignore</span><br></pre></td></tr></table></figure><p>Once everything is together, they just need to run.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Benchmark(master)$ dotnet run -c release</span><br></pre></td></tr></table></figure><p>Time to look at the results. The benchmark spews a ton of data, but I’ll just focus on the final results here.</p><p><img src="/images/be1/results.png" alt="Results"></p><p>The test results aren’t too surprising.  .NET’s built in sort is more efficient for large lists, although QuickSort holds its own as long as the list isn’t too large.  Both are faster than BubbleSort.  With the GC stats, we can also see where additional GC’s start to hinder some of the algorithms.</p><p>This is great, and time to make it a bit more advanced.  Multiple benchmarks can be placed and run in the same file.  Here I add <code>FakeComparison</code> and add a selector when the application is run.  This is helpful when you want to keep different sets of benchmarking tests.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">FakeComparison</span> </span>() =</span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.Fake1 () = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">[&lt;Benchmark&gt;]</span></span><br><span class="line">  <span class="keyword">member</span> self.Fake2 () = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> defaultSwitch () = BenchmarkSwitcher [| typeof&lt;SortComparison&gt;; typeof&lt;FakeComparison&gt; |]</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> Main args =</span><br><span class="line">  defaultSwitch().Run args |&gt; ignore </span><br></pre></td></tr></table></figure><p>Now, when running, a prompt is provided.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~/Benchmark(master)$ dotnet run -c release</span><br><span class="line">Available Benchmarks:</span><br><span class="line">  #0 SortComparison</span><br><span class="line">  #1 FakeComparison</span><br><span class="line"></span><br><span class="line">You should select the target benchmark(s). Please, print a number of a benchmark (e.g. &apos;0&apos;) or a contained benchmark caption (e.g. &apos;SortComparison&apos;):</span><br><span class="line">If you want to select few, please separate them with space ` ` (e.g. `1 2 3`)</span><br><span class="line">You can also provide the class name in console arguments by using --filter. (e.g. &apos;--filter *SortComparison*&apos;):</span><br></pre></td></tr></table></figure><p>There is one more aspect of reporting, and that is the final results.  What I’ve shown has been part of the console output, but there is more.  A <code>BenchmarkDotNet.Artifacts</code> directory contains a detailed run log.  It also contains specially formatted results, namely: csv, html, and github markdown.  All of these being very useful for more advanced reporting or just simply dropping into a repo.</p><p>This provides the basis to explore BenchmarkDotNet in your next performance comparison endeavor.  Be sure to check out the <a href="https://benchmarkdotnet.org/" target="_blank" rel="noopener">BenchmarkDotNet</a> site for additional documentation. Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Occasionally the need arises in an &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; project to perform benchmarking.  &lt;a href=&quot;https://benchmarkdotnet.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BenchmarkDotNet&lt;/a&gt; is a powerful tool made exactly for this purpose.  Today’s post provides an introductory look into the process.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Benchmarking" scheme="http://codesuji.com/tags/Benchmarking/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.NET Clustering (V2)</title>
    <link href="http://codesuji.com/2018/11/30/F-and-MLNet-Clustering-V2/"/>
    <id>http://codesuji.com/2018/11/30/F-and-MLNet-Clustering-V2/</id>
    <published>2018-12-01T03:17:49.000Z</published>
    <updated>2019-09-16T23:48:52.511Z</updated>
    
    <content type="html"><![CDATA[<p>With the release of v0.7.0, it is time to revisit K-means clustering using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and Microsoft’s new <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a> framework.  The api has changed enough to warrant a minor rework.  This post is a re-examination of a previous post <a href="/2018/07/07/F-and-MLNet-Clustering/">F# and ML.NET Clustering</a>.  The use case will be to use examination attributes to classify mammogram results.</p><a id="more"></a><p><i>Note: ML.NET is still evolving, this post was written using Microsoft.ML v0.7.0.</i></p><p>Make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.1</a> installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>First, create a console F# project, then add the ML.NET package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-Mammogram</span><br><span class="line">cd MLNet-Mammogram</span><br><span class="line">dotnet add package Microsoft.ML --version 0.7.0</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source I used for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Mammographic+Mass" target="_blank" rel="noopener">UCI</a>.  The datafile can be found [here] (<a href="https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data" target="_blank" rel="noopener">https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is no header row.  The columns represent 5 features and 1 classification column:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- BI-RADS assessment (1-5)</span><br><span class="line">- Age (Patient&apos;s age)</span><br><span class="line">- Shape (mass shape: round=1 oval=2 lobular=3 irregular=4 (nominal))</span><br><span class="line">- Margin (mass margin: circumscribed=1 microlobulated=2 obscured=3 ill-defined=4 spiculated=5 (nominal))</span><br><span class="line">- Density: (mass density high=1 iso=2 low=3 fat-containing=4 (ordinal))</span><br><span class="line">- Severity: (benign=0 or malignant=1)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">5,67,3,5,3,1</span><br><span class="line">4,43,1,1,?,1</span><br><span class="line">5,58,4,5,3,1</span><br><span class="line">4,28,1,1,3,0</span><br><span class="line">5,57,1,5,3,1</span><br></pre></td></tr></table></figure><p>Now that the project is setup and data is local, we can get to the code.  Time to open up the already created <code>Program.fs</code>.  First, add the necessary namespaces.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Api</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Data</span><br></pre></td></tr></table></figure><p>The ML.NET pipeline expects the data in a specific format.  In the C# world, this is a class, for F# we can use a type.  Below are the required types; <code>MammogramData</code> is the input data, <code>MammogramPrediction</code> is the output prediction.  For <code>MammogramData</code>, this is basically a a map of columns to member variables.  There are a couple notable points to ensure the pipeline can properly consume the data.  Each attribute must be <code>mutable public</code>, it also requires the <code>[&lt;Column(&quot;#&quot;)&gt;]</code> to specify it’s column position, and <code>[&lt;DefaultValue&gt;]</code> attributes.  For <code>MammogramPrediction</code>, <code>PredictionLabel</code> for the cluster id, and <code>Score</code> for calculated distances from all clusters is required.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MammogramPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;Column("0")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> BiRads:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("1")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Age:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("2")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Shape:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("3")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Margin:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("4")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Density:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("5")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label :float32</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MammogramPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;ColumnName("PredictedLabel")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SelectedClusterId:uint32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;ColumnName("Score")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Distance: float32[]</span><br></pre></td></tr></table></figure><p>Here is one of the big changes from early versions.  Where the pipeline object is gone, it has been replaced with an <code>MLContext</code>.  Although different, it still maintains intuitiveness, and gains additional functionality.  First, create an MLContext, if desired a <code>seed</code> can be defined to ensure the same results between executions.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mlContext = MLContext()</span><br><span class="line"><span class="comment">// let mlContext = MLContext(seed = Nullable 1)</span></span><br></pre></td></tr></table></figure><p>Time to load the data. This is another method that has updated since earlier versions.  First create a <code>TextReader</code> with a file format definition.  Then use that object to read the data from the data file.  The entire file can be used for training.  Alternatively, <code>TrainTestSplit</code> (another new function) can be used to easily divide a single dataset into train and test sets.  This is especially handy during the development process.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"./data/mammographic_masses.data"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////</span></span><br><span class="line"><span class="comment">// Load data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataLoader = </span><br><span class="line">  mlContext.Data.TextReader(</span><br><span class="line">    TextLoader.Arguments(</span><br><span class="line">      Separator = <span class="string">","</span>,</span><br><span class="line">      HasHeader = <span class="keyword">true</span>,</span><br><span class="line">      Column = </span><br><span class="line">        [|</span><br><span class="line">            TextLoader.Column(<span class="string">"BiRads"</span>, Nullable DataKind.R4, <span class="number">0</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Age"</span>, Nullable DataKind.R4, <span class="number">1</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Shape"</span>, Nullable DataKind.R4, <span class="number">2</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Margin"</span>, Nullable DataKind.R4, <span class="number">3</span>)</span><br><span class="line">            TextLoader.Column(<span class="string">"Density"</span>, Nullable DataKind.R4, <span class="number">4</span>)</span><br><span class="line">        |]</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> allData = dataLoader.Read dataPath</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">struct</span> (trainingData, testingData) = mlContext.Clustering.TrainTestSplit(allData, testFraction = <span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><p>After the data is loaded, feature columns need to be added to the transforms.  I’m going to use all feature columns from the file, and exclude severity.  The clustering model requires features to be numeric, which if fine here.  As the other posts show, you can convert text to numeric mappings if necessary.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataProcessPipeline = mlContext.Transforms.Concatenate(<span class="string">"Features"</span>, <span class="string">"BiRads"</span>, <span class="string">"Age"</span>, <span class="string">"Shape"</span>, <span class="string">"Margin"</span>, <span class="string">"Density"</span>)</span><br></pre></td></tr></table></figure><p>Now that the features are defined, it is time to create a model.  This will be <code>KMeans</code>.  Similar to the other trainers, custom parameters can be defined, I have decided to use <code>K = 4</code>.  It also has other options as as <code>MaxIterations</code>, <code>OptTol</code> (convergence tolerance), and <code>NormalizeFeatures</code>.  The KMeans trainer/estimator must be combined with the training data to create a model.  The last part, create a prediction function from the model.  Note the <code>MammogramData</code> and <code>MammogramPrediction</code> types as part of the call.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> trainer = mlContext.Clustering.Trainers.KMeans(features = <span class="string">"Features"</span>, clustersCount = <span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> estimator = dataProcessPipeline.Append trainer</span><br><span class="line"><span class="keyword">let</span> trainedModel = estimator.Fit trainingData</span><br><span class="line"><span class="keyword">let</span> model = trainedModel.MakePredictionFunction&lt;MammogramData, MammogramPrediction&gt;(mlContext) </span><br></pre></td></tr></table></figure><p>Validation of any model is important.  With the data split into train and test sets, it is easy to get metrics against the training data and then validate against the previously unseen test data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Evaluate results (train)</span></span><br><span class="line"><span class="keyword">let</span> metricsTrain = </span><br><span class="line">  <span class="keyword">let</span> predictions = trainedModel.Transform trainingData</span><br><span class="line">  mlContext.Clustering.Evaluate(predictions, score = <span class="string">"Score"</span>, features = <span class="string">"Features"</span>)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Train Data:"</span></span><br><span class="line">printfn <span class="string">"Avg Min Score: %f"</span> &lt;| metricsTrain.AvgMinScore</span><br><span class="line"><span class="comment">// Davies-Bouldin Index</span></span><br><span class="line">printfn <span class="string">"DBI          : %A"</span> &lt;| metricsTrain.Dbi</span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Evaluate results (test)</span></span><br><span class="line"><span class="keyword">let</span> metricsTest = </span><br><span class="line">  <span class="keyword">let</span> predictions = trainedModel.Transform testingData</span><br><span class="line">  mlContext.Clustering.Evaluate(predictions, score = <span class="string">"Score"</span>, features = <span class="string">"Features"</span>)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Test Data:"</span></span><br><span class="line">printfn <span class="string">"Avg Min Score: %f"</span> &lt;| metricsTest.AvgMinScore</span><br><span class="line"><span class="comment">// Davies-Bouldin Index</span></span><br><span class="line">printfn <span class="string">"DBI          : %A"</span> &lt;| metricsTest.Dbi</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Train Data:</span><br><span class="line">Avg Min Score: <span class="number">31.570207</span></span><br><span class="line">DBI          : <span class="number">0.6515402653</span></span><br><span class="line"></span><br><span class="line">Test Data:</span><br><span class="line">Avg Min Score: <span class="number">27.217818</span></span><br><span class="line">DBI          : <span class="number">0.6298469451</span></span><br></pre></td></tr></table></figure><p>With the initial evaluation out of the way, it is time to move onto individual predictions.  I want to create aggregate classification percentages for each cluster.  To do this I take the predictive model and apply it against the the training file.  Using the predicted cluster and the training label, I create a mapping for detailed predictions.  Each cluster gets its own raw benign/malignant count, which can be converted into percentage likelihood for each classification.  I have the details annotated in comments, to make it easier to follow.  Honestly, this is the most labor-intensive part of the process.  I’d love to be able to pass an cluster-aggregate-score function in as part of the trainer to eliminate this work or reprocessing the data.  Once I have these results as a <code>Map</code>, I can query results easy enough.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create classifications by cluster </span></span><br><span class="line"><span class="keyword">let</span> clusterClassification = </span><br><span class="line">  <span class="comment">// Read file</span></span><br><span class="line">  System.IO.File.ReadAllLines(dataPath)</span><br><span class="line">  <span class="comment">// Filter incomplete rows</span></span><br><span class="line">  |&gt; Array.filter (<span class="keyword">fun</span> line -&gt; not (line.Contains(<span class="string">"?"</span>)))</span><br><span class="line">  <span class="comment">// Run predictions </span></span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> line -&gt; </span><br><span class="line">    <span class="comment">// Convert line to float array</span></span><br><span class="line">    <span class="keyword">let</span> row = line.Split(',') |&gt; Array.map float32</span><br><span class="line">    <span class="comment">// Predict the clusterId of the row</span></span><br><span class="line">    <span class="keyword">let</span> predictedCluster = </span><br><span class="line">      model.Predict(</span><br><span class="line">        MammogramData(</span><br><span class="line">          BiRads = row.[<span class="number">0</span>],</span><br><span class="line">          Age = row.[<span class="number">1</span>],</span><br><span class="line">          Shape = row.[<span class="number">2</span>],</span><br><span class="line">          Margin = row.[<span class="number">3</span>],</span><br><span class="line">          Density = row.[<span class="number">4</span>])) </span><br><span class="line">    <span class="comment">// Populate benign/maligant counter for cluster (0=benign, 1=malignant)</span></span><br><span class="line">    <span class="keyword">if</span> int row.[<span class="number">5</span>] = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">then</span> (predictedCluster.SelectedClusterId, [| <span class="number">1</span>; <span class="number">0</span> |])</span><br><span class="line">    <span class="keyword">else</span> (predictedCluster.SelectedClusterId, [| <span class="number">0</span>; <span class="number">1</span> |]))</span><br><span class="line">  <span class="comment">// Group by ClusterId</span></span><br><span class="line">  |&gt; Array.groupBy (<span class="keyword">fun</span> (clusterId, _) -&gt; clusterId)</span><br><span class="line">  <span class="comment">// Sum each cluster's classification counts</span></span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> (clusterId, data) -&gt; </span><br><span class="line">    <span class="keyword">let</span> countSums = </span><br><span class="line">      data</span><br><span class="line">      |&gt; Array.map (<span class="keyword">fun</span> (_, z) -&gt; z)</span><br><span class="line">      |&gt; Array.fold (<span class="keyword">fun</span> a (x:int []) -&gt; </span><br><span class="line">          [| a.[<span class="number">0</span>] + x.[<span class="number">0</span>]; a.[<span class="number">1</span>] + x.[<span class="number">1</span>] |]) [| <span class="number">0</span>; <span class="number">0</span> |] </span><br><span class="line"></span><br><span class="line">    (clusterId, countSums))</span><br><span class="line">  |&gt; Map.ofArray</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Provide a prediction based on cluster id</span></span><br><span class="line"><span class="keyword">let</span> clusterIdToPrediction (clusterClassification:Map&lt;uint32, int[]&gt;) (clusterId:uint32) =</span><br><span class="line">  <span class="keyword">let</span> classifications = clusterClassification.Item clusterId</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> total = classifications |&gt; Array.sum |&gt; float</span><br><span class="line">  <span class="keyword">let</span> benignPct = float classifications.[<span class="number">0</span>] / total</span><br><span class="line">  <span class="keyword">let</span> malignantPct = float classifications.[<span class="number">1</span>] / total</span><br><span class="line"></span><br><span class="line">  sprintf <span class="string">"Benign: %0.2f Malignant: %0.2f (%d, %d)"</span> </span><br><span class="line">    benignPct </span><br><span class="line">    malignantPct </span><br><span class="line">    classifications.[<span class="number">0</span>] </span><br><span class="line">    classifications.[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>Now that the <code>clusterIdToPrediction</code> is defined, I can pair the ML.NET cluster prediction with the aggregated cluster classification percentages.  First, create a <code>MammogramData</code> object and provide it to the <code>Predict</code> method.  Second, use the predicted clusterId with the aggregated cluster classification percentages to get a classification result.  For this example, I pull one of those rows from the training data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prediction</span></span><br><span class="line"><span class="keyword">let</span> test1 = MammogramData()</span><br><span class="line">test1.BiRads &lt;- <span class="number">5.</span>f</span><br><span class="line">test1.Age &lt;- <span class="number">67.</span>f</span><br><span class="line">test1.Shape &lt;- <span class="number">3.</span>f</span><br><span class="line">test1.Margin &lt;- <span class="number">5.</span>f</span><br><span class="line">test1.Density &lt;- <span class="number">3.</span>f</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionTest1 = model.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted ClusterId: %d"</span> predictionTest1.SelectedClusterId</span><br><span class="line">printfn <span class="string">"Predicted Distances: %A"</span> predictionTest1.Distance</span><br><span class="line">printfn <span class="string">"Predicted Result: %s"</span> (clusterIdToPrediction clusterClassification predictionTest1.SelectedClusterId)</span><br><span class="line">printfn <span class="string">"Actual Result   : 1 (Malignant)"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>The results show the prediction falls into cluster 1, which has a 80% likelihood it is malignant, which matches the actual value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result:</span><br><span class="line">Predicted ClusterId: 1</span><br><span class="line">Predicted Distances: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>Once a model has been created, it is often useful to save for later use.  The save method has changed from previous versions.  Once saved, this model can then be loaded for future use.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line"><span class="keyword">let</span> saveModel (mlContext:MLContext) trainedMode = </span><br><span class="line">  <span class="keyword">use</span> fsWrite = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Create, FileAccess.Write, FileShare.Write)</span><br><span class="line">  mlContext.Model.Save(trainedModel, fsWrite);</span><br><span class="line"></span><br><span class="line">saveModel mlContext trainedModel</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file and run a prediction</span></span><br><span class="line"><span class="keyword">use</span> fsRead = <span class="keyword">new</span> FileStream(<span class="string">"test-model.zip"</span>, FileMode.Open, FileAccess.Read, FileShare.Read)</span><br><span class="line"><span class="keyword">let</span> mlContextReloaded = MLContext()</span><br><span class="line"><span class="keyword">let</span> trainedModelReloaded = TransformerChain.LoadFrom(mlContextReloaded, fsRead)</span><br><span class="line"><span class="keyword">let</span> modelReloaded = trainedModel.MakePredictionFunction&lt;MammogramData, MammogramPrediction&gt;(mlContextReloaded);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionReloaded = modelReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted ClusterId RL: %d"</span> predictionReloaded.SelectedClusterId</span><br><span class="line">printfn <span class="string">"Predicted Distances RL: %A"</span> predictionReloaded.Distance</span><br><span class="line">printfn <span class="string">"Predicted Result RL: %s"</span> (clusterIdToPrediction clusterClassification predictionReloaded.SelectedClusterId)</span><br><span class="line">printfn <span class="string">"Actual Result RL   : 1 (Malignant)"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>As expected, the prediction results are the same with the reloaded model.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result: (model reloaded):</span><br><span class="line">Predicted ClusterId: 1</span><br><span class="line">Predicted Distances: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>Throughout the post, portions of the output have been provided out of band.  Here is how the whole thing looks when run with <code>dotnet run</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Train Data:</span><br><span class="line">Avg Min Score: 31.872808</span><br><span class="line">DBI          : 0.6556137903</span><br><span class="line"></span><br><span class="line">Test Data:</span><br><span class="line">Avg Min Score: 27.691496</span><br><span class="line">DBI          : 0.6635021486</span><br><span class="line"></span><br><span class="line">ClusterId 1u =&gt; Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">ClusterId 2u =&gt; Benign: 0.90 Malignant: 0.10 (95, 11)</span><br><span class="line">ClusterId 3u =&gt; Benign: 0.49 Malignant: 0.51 (151, 156)</span><br><span class="line">ClusterId 4u =&gt; Benign: 0.66 Malignant: 0.34 (141, 73)</span><br><span class="line"></span><br><span class="line">Predicted ClusterId: 1</span><br><span class="line">Predicted Distances: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br><span class="line"></span><br><span class="line">Predicted ClusterId RL: 1</span><br><span class="line">Predicted Distances RL: [|51.855957f; 1333.52344f; 63.1328125f; 449.377441f|]</span><br><span class="line">Predicted Result RL: Benign: 0.20 Malignant: 0.80 (40, 163)</span><br><span class="line">Actual Result RL   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>This has been a brief look into training and using an ML.NET k-means cluster model.  As seen with the other models, ML.NET is providing a nice consistent interface and has some good components.  It is a framework that continues to grow in a positive direction.  Kudos and thanks to all the people making this a reality.  That’s all for now.  Until next time.</p><p><img src="/images/mlnet3/320px-Abnormal_mammogram.jpg" alt=""></p><!-- Mammogram image is in the public domain: https://commons.wikimedia.org/wiki/File:Abnormal_mammogram.jpg -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With the release of v0.7.0, it is time to revisit K-means clustering using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and Microsoft’s new &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt; framework.  The api has changed enough to warrant a minor rework.  This post is a re-examination of a previous post &lt;a href=&quot;/2018/07/07/F-and-MLNet-Clustering/&quot;&gt;F# and ML.NET Clustering&lt;/a&gt;.  The use case will be to use examination attributes to classify mammogram results.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>F# and Elasticsearch</title>
    <link href="http://codesuji.com/2018/10/10/F-and-Elasticsearch/"/>
    <id>http://codesuji.com/2018/10/10/F-and-Elasticsearch/</id>
    <published>2018-10-11T00:51:50.000Z</published>
    <updated>2018-10-11T02:35:34.034Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I was working on a project using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and <a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="noopener">Elasticsearch</a>.  I thought it would be fun to post a light introduction.  Nicely enough, Elastic provides a .NET client, two actually <a href="https://www.elastic.co/guide/en/elasticsearch/client/net-api/current/index.html" target="_blank" rel="noopener">here</a>.  They are a combination of low level and high level interfaces.  As is sometimes the case, using F# and C#-style libraries requires some clever navigation of the interface.  For this post I will only focus on the high level interface (NEST).</p><a id="more"></a><p>Before getting into the code, an Elasticsearch server is needed.  This isn’t a tutorial on Elasticsearch, so I won’t go into a lot of setup and configuration detail; here are the <a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">instructions</a>.  Its a quick install, and here is what I did below.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># Download</span><br><span class="line">curl -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.0.deb</span><br><span class="line"></span><br><span class="line"># Install</span><br><span class="line">sudo dpkg -i elasticsearch-6.4.0.deb</span><br><span class="line"></span><br><span class="line"># Configure: Edit /etc/elasticsearch/elasticsearch.yml</span><br><span class="line">cluster.name: simple-search</span><br><span class="line">node.name: node-1</span><br><span class="line"></span><br><span class="line"># Start service</span><br><span class="line">sudo systemctl start elasticsearch.service</span><br><span class="line"></span><br><span class="line"># Quick test</span><br><span class="line">curl -X GET &apos;http://localhost:9200&apos;</span><br><span class="line"></span><br><span class="line"># Results:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;node-1&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;simple-search&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;qAfHvbAgTC6O-r_jKS6qmA&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;6.4.0&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;deb&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;595516e&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-10-07T23:18:47.308994Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;7.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That was easy.  Continuing with the other prerequisites, I used <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.1</a>.  Select <strong>SDK</strong> for your platform.  After that, create a console F# project, then add the NEST package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name SimpleSearch</span><br><span class="line">cd SimpleSearch</span><br><span class="line">dotnet add package NEST --version 6.3.1 </span><br><span class="line"></span><br><span class="line"># Not required, but here is the other (low-level) .NET package</span><br><span class="line">dotnet add package Elasticsearch.Net --version=6.3.1</span><br></pre></td></tr></table></figure><p>There are a couple things to construct prior to the interesting things.  Include necessary namespaces.  The example will index files, and Elasticsearch needs a datatype.  <code>FileData</code> is a good structure to use for indexing.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Globalization</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> System.Security.Cryptography</span><br><span class="line"><span class="keyword">open</span> System.Text</span><br><span class="line"><span class="keyword">open</span> Nest</span><br><span class="line"></span><br><span class="line"><span class="comment">/// elasticsearch index name</span></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> SearchIndex = <span class="string">"simple-search"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Datatype for indexing</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">FileData</span> </span>= &#123;</span><br><span class="line">  Id: string;</span><br><span class="line">  Directoryname: string;</span><br><span class="line">  Filename: string;</span><br><span class="line">  Filetype: string;</span><br><span class="line">  Contents: string;</span><br><span class="line">  CreateDate: DateTime;</span><br><span class="line">  ModifyDate: DateTime;</span><br><span class="line">  IndexDate: DateTime &#125;</span><br></pre></td></tr></table></figure><p>There are a couple supporting functions to support the process.  <code>nullable</code> is used to support the NEST interface.  To create document ids I use a hash of the filename.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Convert int to Nullable int</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">inline</span> nullable (a:int) :Nullable&lt;int&gt; = System.Nullable&lt;int&gt;(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Hashing algorithm</span></span><br><span class="line"><span class="keyword">let</span> hashAlgorithm= <span class="keyword">new</span> SHA1Managed()</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Hash a string</span></span><br><span class="line"><span class="keyword">let</span> hash (s:string) =</span><br><span class="line">  <span class="keyword">let</span> bytes = Encoding.Unicode.GetBytes(s)</span><br><span class="line">  hashAlgorithm.ComputeHash(bytes)</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> x -&gt; String.Format(<span class="string">"&#123;0:x2&#125;"</span>, x))</span><br><span class="line">  |&gt; String.concat <span class="string">""</span></span><br></pre></td></tr></table></figure><p>Now to the interesting part.  It turns out connecting to the Elasticsearch service is straight forward.  Setting up a default index makes later calls more convenient.  There are more defaults that could be setup here as well.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">  <span class="comment">// Configuration</span></span><br><span class="line">  <span class="keyword">let</span> node = <span class="keyword">new</span> Uri(<span class="string">"http://127.0.0.1:9200"</span>)</span><br><span class="line">  <span class="keyword">let</span> settings = <span class="keyword">new</span> ConnectionSettings(node)</span><br><span class="line">  settings.DefaultIndex(SearchIndex) |&gt; ignore</span><br><span class="line">  <span class="keyword">let</span> client = <span class="keyword">new</span> ElasticClient(settings)</span><br></pre></td></tr></table></figure><p>Adding a document to the index can be done using an F# record.  For this case I’ll take my <code>Program.fs</code> file and add it to the document index.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> filename = <span class="string">"Program.fs"</span></span><br><span class="line"><span class="keyword">let</span> data = &#123; </span><br><span class="line">  FileData.Id = (hash filename); </span><br><span class="line">  Directoryname = Path.GetDirectoryName(filename);</span><br><span class="line">  Filename = Path.GetFileName(filename);</span><br><span class="line">  Filetype = Path.GetExtension(filename);</span><br><span class="line">  Contents = File.ReadAllText(filename);</span><br><span class="line">  CreateDate = File.GetCreationTime(filename);</span><br><span class="line">  ModifyDate = File.GetLastWriteTime(filename);</span><br><span class="line">  IndexDate = DateTime.Now &#125;</span><br><span class="line"></span><br><span class="line">client.Index&lt;FileData&gt;(</span><br><span class="line">  <span class="keyword">new</span> IndexRequest&lt;FileData&gt;(</span><br><span class="line">    <span class="keyword">new</span> DocumentPath&lt;FileData&gt;(data)))</span><br></pre></td></tr></table></figure><p>Once the document is indexed, it can be displayed by showing all documents in the index.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> showContents = <span class="keyword">true</span></span><br><span class="line"><span class="keyword">let</span> searchResults = client.Search&lt;FileData&gt;(<span class="keyword">new</span> SearchRequest&lt;FileData&gt;())</span><br><span class="line">searchResults.Documents</span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> doc -&gt; </span><br><span class="line">  printfn <span class="string">"%s (%A)"</span> (Path.Combine(doc.Directoryname, doc.Filename)) (doc.ModifyDate)</span><br><span class="line">  <span class="keyword">if</span> showContents <span class="keyword">then</span> printfn <span class="string">"%s"</span> doc.Contents <span class="keyword">else</span> ())</span><br></pre></td></tr></table></figure><p>Showing all documents is fine, but not very interesting.  Here is a more useful example, performing a boolean search for text in either the <code>filename</code> or <code>contents</code> attributes of the document.  A couple notes here, constructing the search is a bit more involved.  When building the <code>SearchRequest</code> additional attributes can be set, like <code>Size</code> (the number of records to return).  It must also be upcast to <code>ISearchRequest</code> to be consumed.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Search and display results</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">"fsharp"</span></span><br><span class="line"><span class="keyword">let</span> result = client.Search&lt;FileData&gt;(<span class="keyword">fun</span> (s:SearchDescriptor&lt;FileData&gt;) -&gt;</span><br><span class="line">  <span class="keyword">new</span> SearchRequest(</span><br><span class="line">    Size = (nullable <span class="number">1000</span>), </span><br><span class="line">    Query = <span class="keyword">new</span> QueryContainer(query = BoolQuery(Should = [</span><br><span class="line">      <span class="keyword">new</span> QueryContainer(query = <span class="keyword">new</span> TermQuery(Field = <span class="keyword">new</span> Field(<span class="string">"filename"</span>), Value = text));</span><br><span class="line">      <span class="keyword">new</span> QueryContainer(query = <span class="keyword">new</span> TermQuery(Field = <span class="keyword">new</span> Field(<span class="string">"contents"</span>), Value = text))</span><br><span class="line">    ]))</span><br><span class="line">  ) :&gt; ISearchRequest)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"MaxScore: %f"</span> result.MaxScore</span><br><span class="line">result.Documents</span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> doc -&gt; </span><br><span class="line">  printfn <span class="string">"%s (%A)"</span> (Path.Combine(doc.Directoryname, doc.Filename)) (doc.ModifyDate)</span><br><span class="line">  <span class="keyword">if</span> showContents <span class="keyword">then</span> printfn <span class="string">"%s"</span> doc.Contents <span class="keyword">else</span> ())</span><br></pre></td></tr></table></figure><p>The above approach is typical.  But in the spirit of there-is-more-than-one-way-to-do-it, queries can be created in raw form.  Below is the same query.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Search and display results (use raw query)</span></span><br><span class="line"><span class="keyword">let</span> result = client.Search&lt;FileData&gt;(<span class="keyword">fun</span> (s:SearchDescriptor&lt;FileData&gt;) -&gt;</span><br><span class="line">  <span class="keyword">let</span> sr = <span class="keyword">new</span> Nest.SearchRequest(Size = (nullable <span class="number">1000</span>))</span><br><span class="line">  <span class="keyword">let</span> query = <span class="keyword">new</span> QueryContainerDescriptor&lt;FileData&gt;()</span><br><span class="line">  <span class="comment">// query.Raw((sprintf "&#123; \"match\": &#123; \"contents\": \"%s\"&#125; &#125;" text)) |&gt; ignore</span></span><br><span class="line">  <span class="keyword">let</span> queryString =</span><br><span class="line">    sprintf <span class="string">"</span></span><br><span class="line"><span class="string">              &#123;</span></span><br><span class="line"><span class="string">                \"bool\": &#123;</span></span><br><span class="line"><span class="string">                  \"should\": [</span></span><br><span class="line"><span class="string">                    &#123; \"term\": &#123; \"filename\": \"%s\" &#125;&#125;,</span></span><br><span class="line"><span class="string">                    &#123; \"term\": &#123; \"contents\": \"%s\" &#125;&#125; ] &#125; &#125;"</span> </span><br><span class="line">            text text</span><br><span class="line"></span><br><span class="line">  query.Raw(queryString) |&gt; ignore</span><br><span class="line">  sr.Query &lt;- query</span><br><span class="line">  sr :&gt; ISearchRequest)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"MaxScore: %f"</span> result.MaxScore</span><br><span class="line">result.Documents</span><br><span class="line">|&gt; Seq.iter (<span class="keyword">fun</span> doc -&gt; </span><br><span class="line">  printfn <span class="string">"%s (%A)"</span> (Path.Combine(doc.Directoryname, doc.Filename)) (doc.ModifyDate)</span><br><span class="line">  <span class="keyword">if</span> showContents <span class="keyword">then</span> printfn <span class="string">"%s"</span> doc.Contents <span class="keyword">else</span> ())</span><br></pre></td></tr></table></figure><p>Now that I’ve shown an insert and searches, here is how to delete an index.  Deleting an index is easy enough, but it doesn’t take an index name as a string directly.  So an <code>Indices</code> object needs created from the index name string.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = client.DeleteIndex(<span class="keyword">new</span> DeleteIndexRequest(Indices.Parse(SearchIndex)))</span><br><span class="line">printfn <span class="string">"%A"</span> result</span><br></pre></td></tr></table></figure><p>There you have it.  This has been a short introduction into using F# with the Elasticsearch NEST library.  There is certainly more, but most of interesting composition exists in constructing custom searches.  The above patterns should be enough to guide the rest of the way.  One way this process could improve is to use discriminated and records.  To that end, a quick search found some projects in various states of completeness. I certainly enjoy finding these, since coding the F#-way is often more pleasant.  That puts these on my list for future evaluation.  That is all for today, until next time.  Thanks.</p><p><img src="/images/es1/es1.png" alt="Elasticsearch Client"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I was working on a project using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;https://www.elastic.co/products/elasticsearch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Elasticsearch&lt;/a&gt;.  I thought it would be fun to post a light introduction.  Nicely enough, Elastic provides a .NET client, two actually &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/net-api/current/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.  They are a combination of low level and high level interfaces.  As is sometimes the case, using F# and C#-style libraries requires some clever navigation of the interface.  For this post I will only focus on the high level interface (NEST).&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Text" scheme="http://codesuji.com/tags/Text/"/>
    
      <category term="Search" scheme="http://codesuji.com/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.NET Clustering</title>
    <link href="http://codesuji.com/2018/07/07/F-and-MLNet-Clustering/"/>
    <id>http://codesuji.com/2018/07/07/F-and-MLNet-Clustering/</id>
    <published>2018-07-07T11:41:19.000Z</published>
    <updated>2019-09-16T23:48:02.946Z</updated>
    
    <content type="html"><![CDATA[<p>The discovering ML.NET series continues.  With the release of v0.3.0, it is time to look at performing K-means clustering using <a href="https://fsharp.org" target="_blank" rel="noopener">F#</a> and Microsoft’s new <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a> framework.  The use case will be to use examination attributes to classify mammogram results.</p><a id="more"></a><p><strong>NOTE: Due to ML.NET changes, this post is superceded by the post <a href="/2018/11/30/F-and-MLNet-Clustering-V2/">Clustering-V2</a>.</strong></p><p>For reference, previous ML.NET series posts are below:</p><ul><li><a href="/2018/06/09/F-and-MLNet-Regression">F# and ML.NET Regression</a> </li><li><a href="/2018/06/23/F-and-MLNet-Classification">F# and ML.NET Classification</a></li></ul><p>As I mentioned in the previous posts, there is a disclaimer: ML.NET is in its early stages.  I found a couple interface idiosyncrasies I suspect will change over time.  Just keep that in mind.  I am happy with what I have seen so far, and I’m excited to see it grow and mature.</p><p><i>Note: The post was written using Microsoft.ML v0.3.0.</i></p><p>Make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.1</a> installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>First, create a console F# project, then add the ML.NET package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-Mammogram</span><br><span class="line">cd MLNet-Mammogram</span><br><span class="line">dotnet add package Microsoft.ML</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source I used for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Mammographic+Mass" target="_blank" rel="noopener">UCI</a>.  The datafile can be found [here] (<a href="https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data" target="_blank" rel="noopener">https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/mammographic-masses/mammographic_masses.data</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is no header row.  The columns represent 5 features and 1 classification column:</p><ul><li>BI-RADS assessment (1-5)</li><li>Age (Patient’s age)</li><li>Shape (mass shape: round=1 oval=2 lobular=3 irregular=4 (nominal))</li><li>Margin (mass margin: circumscribed=1 microlobulated=2 obscured=3 ill-defined=4 spiculated=5 (nominal))</li><li>Density: (mass density high=1 iso=2 low=3 fat-containing=4 (ordinal))</li><li>Severity: (benign=0 or malignant=1)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">5,67,3,5,3,1</span><br><span class="line">4,43,1,1,?,1</span><br><span class="line">5,58,4,5,3,1</span><br><span class="line">4,28,1,1,3,0</span><br><span class="line">5,57,1,5,3,1</span><br></pre></td></tr></table></figure><p>Now that the project is setup and data is local, we can get to the code.  Time to open up the already created <code>Program.fs</code>.  First, add the necessary namespaces.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Api</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Trainers</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Transforms</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Models</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br></pre></td></tr></table></figure><p>The ML.NET pipeline expects the data in a specific format.  In the C# world, this is a class, for F# we can use a type.  Below are the required types; <code>MammogramData</code> is the input data, <code>MammogramPrediction</code> is the output prediction.  For <code>MammogramData</code>, this is basically a a map of columns to member variables.  There are a couple notable points to ensure the pipeline can properly consume the data.  Each attribute must be <code>mutable public</code>, it also requires the <code>[&lt;Column(&quot;#&quot;)&gt;]</code> to specify it’s column position, and <code>[&lt;DefaultValue&gt;]</code> attributes.  For <code>MammogramPrediction</code>, <code>PredictionLabel</code> for the cluster id, and <code>Score</code> for calculated distances from all clusters is required.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MammogramPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;Column("0")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> BiRads:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("1")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Age:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("2")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Shape:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("3")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Margin:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("4")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Density:float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;Column("5")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label :float32</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MammogramPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;ColumnName("PredictedLabel")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SelectedClusterId:uint32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;ColumnName("Score")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Distance: float32[]</span><br></pre></td></tr></table></figure><p>As the other examples, building the pipeline structure is intuitive.  First, create a pipeline.  Then, add components to the pipeline in the order to be executed.  So first, load the data with a <code>TextLoader</code>.  This data is comma delimited and has a header row.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pipeline = <span class="keyword">new</span> LearningPipeline()</span><br><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"./data/mammographic_masses.data"</span></span><br><span class="line">pipeline.Add((<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;MammogramData&gt;(separator = ',', useHeader = <span class="keyword">false</span>))</span><br></pre></td></tr></table></figure><p>After the data is loaded, feature columns need to be added to the pipeline.  I’m going to use all feature columns from the file, and exclude severity.  The clustering model requires features to be numeric, which if fine here.  As the other posts show, you can convert text to numeric mappings if necessary.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> ColumnConcatenator(<span class="string">"Features"</span>, <span class="string">"BiRads"</span>, <span class="string">"Age"</span>, <span class="string">"Shape"</span>, <span class="string">"Margin"</span>, <span class="string">"Density"</span>))</span><br></pre></td></tr></table></figure><p>Now that the features are defined, it is time to define the training method.  This will be <code>KMeansPlusPlusClusterer</code>.  Similar to the other trainers, custom parameters can be defined, I have decided to use <code>K = 4</code>.  It also has other options as as <code>MaxIterations</code>, <code>OptTol</code> (convergence tolerance), and <code>NormalizeFeatures</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> KMeansPlusPlusClusterer(K = <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>The last part, train the model.  Note the <code>MammogramData</code> and <code>MammogramPrediction</code> types as part of the <code>Train</code> call.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> model = pipeline.Train&lt;MammogramData, MammogramPrediction&gt;()</span><br></pre></td></tr></table></figure><p>Validation of any model is important.  For a real case, I would train on one dataset and validate against a previously unseen dataset.  Since this is just an example, I validate against the training data.  As a result, I expect the predictions to be really accurate.  ML.NET offers multiple Evaluator classes, based on specific needs.  For this, the obvious choice is <code>ClusterEvaluator</code>, it takes a trained model and a dataset, and produces critical metrics.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Evaluate results</span></span><br><span class="line"><span class="keyword">let</span> testData = (<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;MammogramData&gt;(separator = ',', useHeader = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">let</span> evaluator = <span class="keyword">new</span> ClusterEvaluator()</span><br><span class="line"><span class="keyword">let</span> metrics = evaluator.Evaluate(model, testData)</span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Avg Min Score: %f"</span> &lt;| metrics.AvgMinScore</span><br><span class="line"><span class="comment">// Davies-Bouldin Index</span></span><br><span class="line">printfn <span class="string">"DBI          : %A"</span> &lt;| metrics.Dbi</span><br><span class="line"><span class="comment">// Normalized Mutual Information</span></span><br><span class="line">printfn <span class="string">"NMI          : %A"</span> &lt;| metrics.Nmi</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Automatically adding a MinMax normalization transform, <span class="keyword">use</span> 'norm=Warn' <span class="keyword">or</span> 'norm=No' <span class="keyword">to</span> turn this behavior off.</span><br><span class="line">Initializing centroids</span><br><span class="line">Centroids initialized, starting main trainer</span><br><span class="line">Model trained successfully on <span class="number">829</span> instances</span><br><span class="line">Not training a calibrator because it is not needed.</span><br><span class="line"></span><br><span class="line">Avg Min Score: <span class="number">0.049841</span></span><br><span class="line">DBI          : <span class="number">0.0</span></span><br><span class="line">NMI          : <span class="number">0.3012495931</span></span><br></pre></td></tr></table></figure><p>With the initial evaluation out of the way, it is time to move onto individual predictions.  I want to create aggregate classification percentages for each cluster.  To do this I take the predictive model and apply it against the the training file.  Using the predicted cluster and the training label, I create a mapping for detailed predictions.  Each cluster gets its own raw benign/malignant count, which can be converted into percentage likelihood for each classification.  I have the details annotated in comments, to make it easier to follow.  Honestly, this is the most labor-intensive part of the process.  I’d love to be able to pass an cluster-aggregate-score function in as part of the trainer to eliminate this work or reprocessing the data.  Once I have these results as a <code>Map</code>, I can query results easy enough.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Create classifications by cluster </span></span><br><span class="line">  <span class="keyword">let</span> clusterClassification = </span><br><span class="line">    <span class="comment">// Read file</span></span><br><span class="line">    System.IO.File.ReadAllLines(dataPath)</span><br><span class="line">    <span class="comment">// Filter incomplete rows</span></span><br><span class="line">    |&gt; Array.filter (<span class="keyword">fun</span> line -&gt; not (line.Contains(<span class="string">"?"</span>)))</span><br><span class="line">    <span class="comment">// Run predictions </span></span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> line -&gt; </span><br><span class="line">      <span class="comment">// Convert line to float array</span></span><br><span class="line">      <span class="keyword">let</span> row = line.Split(',') |&gt; Array.map float32</span><br><span class="line">      <span class="comment">// Predict the clusterId of the row</span></span><br><span class="line">      <span class="keyword">let</span> predictedCluster = </span><br><span class="line">        model.Predict(</span><br><span class="line">          MammogramData(</span><br><span class="line">            BiRads = row.[<span class="number">0</span>],</span><br><span class="line">            Age = row.[<span class="number">1</span>],</span><br><span class="line">            Shape = row.[<span class="number">2</span>],</span><br><span class="line">            Margin = row.[<span class="number">3</span>],</span><br><span class="line">            Density = row.[<span class="number">4</span>])) </span><br><span class="line">      <span class="comment">// Populate benign/maligant counter for cluster (0=benign, 1=malignant)</span></span><br><span class="line">      <span class="keyword">if</span> int row.[<span class="number">5</span>] = <span class="number">0</span> </span><br><span class="line">      <span class="keyword">then</span> (predictedCluster.SelectedClusterId, [| <span class="number">1</span>; <span class="number">0</span> |])</span><br><span class="line">      <span class="keyword">else</span> (predictedCluster.SelectedClusterId, [| <span class="number">0</span>; <span class="number">1</span> |]))</span><br><span class="line">    <span class="comment">// Group by ClusterId</span></span><br><span class="line">    |&gt; Array.groupBy (<span class="keyword">fun</span> (clusterId, _) -&gt; clusterId)</span><br><span class="line">    <span class="comment">// Sum each cluster's classification counts</span></span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> (clusterId, data) -&gt; </span><br><span class="line">      <span class="keyword">let</span> countSums = </span><br><span class="line">        data</span><br><span class="line">        |&gt; Array.map (<span class="keyword">fun</span> (_, z) -&gt; z)</span><br><span class="line">        |&gt; Array.fold (<span class="keyword">fun</span> a (x:int []) -&gt; </span><br><span class="line">            [| a.[<span class="number">0</span>] + x.[<span class="number">0</span>]; a.[<span class="number">1</span>] + x.[<span class="number">1</span>] |]) [| <span class="number">0</span>; <span class="number">0</span> |] </span><br><span class="line">      (clusterId, countSums))</span><br><span class="line">    |&gt; Map.ofArray</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Provide a prediction based on cluster id</span></span><br><span class="line"><span class="keyword">let</span> clusterIdToPrediction (clusterClassification:Map&lt;uint32, int[]&gt;) (clusterId:uint32) =</span><br><span class="line">  <span class="keyword">let</span> classifications = clusterClassification.Item clusterId</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> total = classifications |&gt; Array.sum |&gt; float</span><br><span class="line">  <span class="keyword">let</span> benignPct = float classifications.[<span class="number">0</span>] / total</span><br><span class="line">  <span class="keyword">let</span> malignantPct = float classifications.[<span class="number">1</span>] / total</span><br><span class="line"></span><br><span class="line">  sprintf <span class="string">"Benign: %0.2f Malignant: %0.2f (%d, %d)"</span> </span><br><span class="line">    benignPct </span><br><span class="line">    malignantPct </span><br><span class="line">    classifications.[<span class="number">0</span>] </span><br><span class="line">    classifications.[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>Now that the <code>clusterIdToPrediction</code> is defined, I can pair the ML.NET cluster prediction with the aggregated cluster classification percentages.  First, create a <code>MammogramData</code> object and provide it to the <code>Predict</code> method.  Second, use the predicted clusterId with the aggregated cluster classification percentages to get a classification result.  For this example, I pull one of those rows from the training data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = MammogramData()</span><br><span class="line">test1.BiRads &lt;- <span class="number">5.</span>f</span><br><span class="line">test1.Age &lt;- <span class="number">67.</span>f</span><br><span class="line">test1.Shape &lt;- <span class="number">3.</span>f</span><br><span class="line">test1.Margin &lt;- <span class="number">5.</span>f</span><br><span class="line">test1.Density &lt;- <span class="number">3.</span>f</span><br><span class="line"><span class="comment">// Actual: 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionTest1 = model.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted ClusterId: %d"</span> predictionTest1.SelectedClusterId</span><br><span class="line">printfn <span class="string">"Predicted Distances: %A"</span> predictionTest1.Distance</span><br><span class="line">printfn <span class="string">"Predicted Result: %s"</span> (clusterIdToPrediction clusterClassification predictionTest1.SelectedClusterId)</span><br><span class="line">printfn <span class="string">"Actual Result   : 1 (Malignant)"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>The results show the prediction falls into cluster 3, which has a 84% likelihood it is malignant, which matches the actual value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result:</span><br><span class="line">Predicted ClusterId: 3</span><br><span class="line">Predicted Distances: [|0.128789425f; 0.166862488f; 0.0578770638f; 0.80590868f|]</span><br><span class="line">Predicted Result: Benign: 0.16 Malignant: 0.84 (19, 99)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>Like the other models before it, the cluster model can be saved to a file and reloaded later.  This is supported by the <code>WriteAsync</code> and <code>ReadAsync</code> methods of a model.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line">model.WriteAsync(<span class="string">"test-model"</span>)</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; ignore</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file and run a prediction</span></span><br><span class="line"><span class="keyword">let</span> modelReloaded =</span><br><span class="line">  PredictionModel.ReadAsync&lt;MammogramData, MammogramPrediction&gt;(<span class="string">"test-model"</span>) </span><br><span class="line">  |&gt; Async.AwaitTask </span><br><span class="line">  |&gt; Async.RunSynchronously</span><br><span class="line"><span class="keyword">let</span> predictionReloaded = modelReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted ClusterId RL: %d"</span> predictionReloaded.SelectedClusterId</span><br><span class="line">printfn <span class="string">"Predicted Distances RL: %A"</span> predictionReloaded.Distance</span><br><span class="line">printfn <span class="string">"Predicted Result RL: %s"</span> (clusterIdToPrediction clusterClassification predictionReloaded.SelectedClusterId)</span><br><span class="line">printfn <span class="string">"Actual Result RL   : 1 (Malignant)"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><p>As expected, the prediction results are the same with the reloaded model.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result: (model reloaded):</span><br><span class="line">Predicted ClusterId RL: 3</span><br><span class="line">Predicted Distances RL: [|0.128789425f; 0.166862488f; 0.0578770638f; 0.80590868f|]</span><br><span class="line">Predicted Result RL: Benign: 0.16 Malignant: 0.84 (19, 99)</span><br><span class="line">Actual Result RL   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>Throughout the post, portions of the output have been provided out of band.  Here is how the whole thing looks when run with <code>dotnet run</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Automatically adding a MinMax normalization transform, use &apos;norm=Warn&apos; or &apos;norm=No&apos; to turn this behavior off.</span><br><span class="line">Initializing centroids</span><br><span class="line">Centroids initialized, starting main trainer</span><br><span class="line">Model trained successfully on 829 instances</span><br><span class="line">Not training a calibrator because it is not needed.</span><br><span class="line"></span><br><span class="line">Avg Min Score: 0.049841</span><br><span class="line">DBI          : 0.0</span><br><span class="line">NMI          : 0.3012495931</span><br><span class="line"></span><br><span class="line">ClusterId 1u =&gt; Benign: 0.26 Malignant: 0.74 (83, 236)</span><br><span class="line">ClusterId 2u =&gt; Benign: 0.59 Malignant: 0.41 (41, 29)</span><br><span class="line">ClusterId 3u =&gt; Benign: 0.16 Malignant: 0.84 (19, 99)</span><br><span class="line">ClusterId 4u =&gt; Benign: 0.88 Malignant: 0.12 (284, 39)</span><br><span class="line"></span><br><span class="line">Predicted ClusterId: 3</span><br><span class="line">Predicted Distances: [|0.128789425f; 0.166862488f; 0.0578770638f; 0.80590868f|]</span><br><span class="line">Predicted Result: Benign: 0.16 Malignant: 0.84 (19, 99)</span><br><span class="line">Actual Result   : 1 (Malignant)</span><br><span class="line"></span><br><span class="line">Predicted ClusterId RL: 3</span><br><span class="line">Predicted Distances RL: [|0.128789425f; 0.166862488f; 0.0578770638f; 0.80590868f|]</span><br><span class="line">Predicted Result RL: Benign: 0.16 Malignant: 0.84 (19, 99)</span><br><span class="line">Actual Result RL   : 1 (Malignant)</span><br></pre></td></tr></table></figure><p>This has been a brief look into training and using an ML.NET k-means cluster model.  As seen with the other models, ML.NET is providing a nice consistent interface and has some good components.  It is a framework that continues to grow in a positive direction.  Kudos and thanks to all the people making this a reality.  That’s all for now.  Until next time.</p><p><img src="/images/mlnet3/320px-Abnormal_mammogram.jpg" alt=""></p><!-- Mammogram image is in the public domain: https://commons.wikimedia.org/wiki/File:Abnormal_mammogram.jpg -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The discovering ML.NET series continues.  With the release of v0.3.0, it is time to look at performing K-means clustering using &lt;a href=&quot;https://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; and Microsoft’s new &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt; framework.  The use case will be to use examination attributes to classify mammogram results.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.NET Classification</title>
    <link href="http://codesuji.com/2018/06/23/F-and-MLNet-Classification/"/>
    <id>http://codesuji.com/2018/06/23/F-and-MLNet-Classification/</id>
    <published>2018-06-23T12:34:25.000Z</published>
    <updated>2019-09-16T23:48:37.531Z</updated>
    
    <content type="html"><![CDATA[<p>Expanding on my previous post, <a href="/2018/06/09/F-and-MLNet-Regression">F# and ML.NET Regression</a>, the current post will take a look at performing classification using Microsoft’s new <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a> framework.  The task at hand will be to use biomechanical attributes to classify patient vertebra conditions into normal (NO), disk hernia (DH), or spondilolysthesis (SL) categories.</p><a id="more"></a><p>As I mentioned in the previous post, there is a disclaimer: ML.NET is in its early stages.  I found a couple implementation and interface idiosyncrasies I suspect will change over time.  Just keep that in mind moving forward.  But knowing that, I’ve been pleased with what I’ve seen so far. </p><p><i>Update: The post was written using Microsoft.ML v0.1.0, and v0.2.0 has since been released.  I have noted interfaces changes below, for the example it is just TextLoader.</i></p><p>Make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.1</a> installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>First, create a console F# project, then add the ML.NET package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-Vertebral</span><br><span class="line">cd MLNet-Vertebral</span><br><span class="line">dotnet add package Microsoft.ML</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source I used for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Vertebral+Column" target="_blank" rel="noopener">UCI</a>.  The datafile can be found <a href="https://archive.ics.uci.edu/ml/machine-learning-databases/00212/vertebral_column_data.zip" target="_blank" rel="noopener">here</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/00212/vertebral_column_data.zip</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is no header row.  The columns represent 6 features and 1 classification column:</p><ul><li>pelvic_incidence</li><li>pelvic_tilt</li><li>lumbar_lordosis_angle</li><li>sacral_slope</li><li>pelvic_radius</li><li>degree_spondylolisthesis</li><li>class</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">63.03,22.55,39.61,40.48,98.67,-0.25,DH</span><br><span class="line">39.06,10.06,25.02,29,114.41,4.56,DH</span><br><span class="line">68.83,22.22,50.09,46.61,105.99,-3.53,DH</span><br><span class="line">69.3,24.65,44.31,44.64,101.87,11.21,DH</span><br></pre></td></tr></table></figure><p>Now that the project is setup and data is local, we can get to the code.  Time to open up the already created <code>Program.fs</code>.  First, add the necessary namespaces.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Api</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Trainers</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Transforms</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Models</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Learners</span><br><span class="line"></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br></pre></td></tr></table></figure><p>The ML.NET pipeline expects the data in a specific format.  In the C# world, this is a class, for F# we can use a type.  Below are the required types; <code>VertebralData</code> is the input data, <code>VertebralPrediction</code> is the output prediction.  For <code>VertebralData</code>, this is basically a a map of columns to member variables.  There are a couple notable points to ensure the pipeline can properly consume the data.  Each attribute must be <code>mutable public</code>, it also requires the <code>[&lt;Column(&quot;#&quot;)&gt;]</code> to specify it’s column position, and <code>[&lt;DefaultValue&gt;]</code> attributes.  For <code>VertebralPrediction</code>, a single attribute is required, the prediction value.  For the input data, the label variable must be named <code>Label</code>.  For the prediction type, the variable must be labeled <code>PredictedLabel</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">VertebralData</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;Column("0")&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> PelvicIncidence :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("1")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> PelvicTilt :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("2")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> LumbarLordosisAngle :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("3")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> SacralSlope :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("4")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> PelvicRadius :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("5")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> DegreeSpondylolisthesis :float32</span><br><span class="line"></span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="meta">[&lt;Column("6")&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label:string</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">VertebralPrediction</span></span>() =</span><br><span class="line">    <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> PredictedLabel:string</span><br></pre></td></tr></table></figure><p>Building the pipeline structure is reasonably intuitive.  First, create a pipeline.  Then, add components to the pipeline in the order to be executed.  So first, load the data with a <code>TextLoader</code>.  This data is comma delimited and has a header row.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pipeline = <span class="keyword">new</span> LearningPipeline()</span><br><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"./data/column_3C.dat"</span></span><br><span class="line"><span class="comment">// v0.1.0 </span></span><br><span class="line"><span class="comment">// pipeline.Add(new TextLoader&lt;VertebralData&gt;(dataPath, separator = ",", useHeader = false))</span></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line">pipeline.Add((<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;VertebralData&gt;(separator = ',', useHeader = <span class="keyword">false</span>))</span><br></pre></td></tr></table></figure><p>After the data is loaded, feature columns need to be added to the pipeline.  I’m going to use all feature columns from the file, but I don’t have to.  The classification model requires features to be numeric.  The features don’t need anything special done to them, but the class does need converted to numeric values.  For this I use <code>Dictionarizer</code>.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> Dictionarizer(<span class="string">"Label"</span>))</span><br><span class="line">pipeline.Add(<span class="keyword">new</span> ColumnConcatenator(<span class="string">"Features"</span>, <span class="string">"PelvicIncidence"</span>, <span class="string">"PelvicTilt"</span>, <span class="string">"LumbarLordosisAngle"</span>, <span class="string">"SacralSlope"</span>, <span class="string">"PelvicRadius"</span>, <span class="string">"DegreeSpondylolisthesis"</span>))</span><br></pre></td></tr></table></figure><p>Now that the features are defined, it is time to determine what training method to use.  For this post <code>StochasticDualCoordinateAscentClassifier</code> is used.  Custom hyperparameters can also be defined.  I have a commented out example that changes bias and convergence tolerance.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> StochasticDualCoordinateAscentClassifier())</span><br><span class="line"><span class="comment">// pipeline.Add(new StochasticDualCoordinateAscentClassifier(BiasLearningRate = 0.1f, ConvergenceTolerance = 0.3f))</span></span><br></pre></td></tr></table></figure><p>For the dataset in question, the <code>StochasticDualCoordinateAscentClassifier</code> worked well, but I could’ve used a <code>NaiveBayesClassifier</code> as well.  Since this is multiclass, I had less options, but ML.NET seems to have a fair amount of binary classifiers, when that is the desired use case.</p><p>The last part, train the model.  Note the <code>VertebralData</code> and <code>VertebralPrediction</code> types as part of the <code>Train</code> call.  I also need to define the prediction label column name.  Unfortunantly the function name is really long, but it is at least descriptive…</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> PredictedLabelColumnOriginalValueConverter(PredictedLabelColumn = <span class="string">"PredictedLabel"</span>) )    </span><br><span class="line"><span class="keyword">let</span> model = pipeline.Train&lt;VertebralData, VertebralPrediction&gt;()</span><br></pre></td></tr></table></figure><p>Validation of any model is important.  For a real case, I would train on one dataset and validate against a previously unseen dataset.  Since this is just an example, I validate against the training data.  As a result, I expect the results to be very good, and they are.  ML.NET offers multiple Evaluator classes, based on specific needs. This makes getting some of those crucial high-level numbers pretty easy.  It takes a trained model and a dataset, and produces critical metrics.  One specific call-out I will make is to the <code>TopKAccuracy</code>.  The evaluator allows an additional accuracy result based on if the correct class was in the top <code>k</code> rankings for a prediction.  Here I have choosen <code>2</code>, which is a little silly in a 3 class problem, but obviously in larger problems this is a valuable analysis tool.  The confusion matrix takes a bit of coercing to print nicely, but at least the data is there.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Evaluate results</span></span><br><span class="line"><span class="comment">// v0.1.0</span></span><br><span class="line"><span class="comment">// let testData = new TextLoader&lt;VertebralData&gt;(dataPath, separator = ",", useHeader = false)</span></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line"><span class="keyword">let</span> testData = (<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;VertebralData&gt;(separator = ',', useHeader = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">let</span> evaluator = <span class="keyword">new</span> ClassificationEvaluator()</span><br><span class="line">evaluator.OutputTopKAcc &lt;- Option.toNullable(Some(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">let</span> metrics = evaluator.Evaluate(model, testData) </span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"Macro-Average Accuracy : %f"</span> &lt;| metrics.AccuracyMacro</span><br><span class="line">printfn <span class="string">"Micro-Average Accuracy : %f"</span> &lt;| metrics.AccuracyMicro</span><br><span class="line">printfn <span class="string">"Average Log-loss       : %f"</span> &lt;| metrics.LogLoss</span><br><span class="line">printfn <span class="string">"Relative Log-loss      : %f"</span> &lt;| metrics.LogLossReduction</span><br><span class="line">printfn <span class="string">"Classes                : %A"</span> &lt;| metrics.ConfusionMatrix.ClassNames</span><br><span class="line">printfn <span class="string">"Log-loss by class      : %A"</span> &lt;| metrics.PerClassLogLoss</span><br><span class="line">printfn <span class="string">"Top-k Accuracy         : %f"</span> &lt;| metrics.TopKAccuracy</span><br><span class="line"></span><br><span class="line"><span class="comment">// Confusion Matrix Header</span></span><br><span class="line">printfn <span class="string">"Confusion Matrix       :"</span></span><br><span class="line">[<span class="number">0.</span>.metrics.ConfusionMatrix.Order - <span class="number">1</span>]</span><br><span class="line">|&gt; List.map (<span class="keyword">fun</span> a -&gt; sprintf <span class="string">"%4s "</span> (metrics.ConfusionMatrix.ClassNames.[a]))</span><br><span class="line">|&gt; List.fold (+) <span class="string">"     "</span></span><br><span class="line">|&gt; printfn <span class="string">"%s"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Confusion Matrix Data </span></span><br><span class="line">[<span class="number">0.</span>.metrics.ConfusionMatrix.Order - <span class="number">1</span>]</span><br><span class="line">|&gt; List.iter (<span class="keyword">fun</span> a -&gt; </span><br><span class="line">  [<span class="number">0.</span>.metrics.ConfusionMatrix.Order - <span class="number">1</span>]</span><br><span class="line">  |&gt; List.map (<span class="keyword">fun</span> b -&gt; sprintf <span class="string">"%4d "</span> (int (metrics.ConfusionMatrix.Item(a,b))))</span><br><span class="line">  |&gt; List.fold (+) (sprintf <span class="string">"%4s "</span> (metrics.ConfusionMatrix.ClassNames.[a]))</span><br><span class="line">  |&gt; printfn <span class="string">"%s"</span></span><br><span class="line">)</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Evaluator Results:</span><br><span class="line">Macro-Average Accuracy : 0.817778</span><br><span class="line">Micro-Average Accuracy : 0.858065</span><br><span class="line">Average Log-loss       : 0.313334</span><br><span class="line">Relative Log-loss      : 69.699239</span><br><span class="line">Classes                : [|&quot;DH&quot;; &quot;SL&quot;; &quot;NO&quot;|]</span><br><span class="line">Log-loss by class      : [|0.5853304274; 0.1233100547; 0.4351712598|]</span><br><span class="line">Top-k Accuracy         : 0.996774</span><br><span class="line"></span><br><span class="line">Confusion Matrix       :</span><br><span class="line">       DH   SL   NO </span><br><span class="line">  DH   40    1   19 </span><br><span class="line">  SL    3  142    5 </span><br><span class="line">  NO   13    3   84 </span><br></pre></td></tr></table></figure><p>With the initial evaluation out of the way, here is an example of how individual predictions can be made.  Create a <code>VertebralData</code> object and provide it to the <code>Predict</code> method.  For this example, I pull one of those rows from the training data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = VertebralData()</span><br><span class="line">test1.PelvicTilt &lt;- <span class="number">63.03</span>f</span><br><span class="line">test1.LumbarLordosisAngle &lt;- <span class="number">22.55</span>f</span><br><span class="line">test1.SacralSlope &lt;- <span class="number">39.61</span>f</span><br><span class="line">test1.PelvicRadius &lt;- <span class="number">40.48</span>f</span><br><span class="line">test1.DegreeSpondylolisthesis &lt;- <span class="number">-0.25</span>f</span><br><span class="line"><span class="keyword">let</span> prediction = model.Predict(test1)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"Predicted Category: %s"</span> prediction.PredictedLabel</span><br><span class="line">printfn <span class="string">"Actual Category   : DH"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result:</span><br><span class="line">Predicted Category: DH</span><br><span class="line">Actual Category   : DH</span><br></pre></td></tr></table></figure><p>Once a model is trained, it can also be saved to a file a reloaded at a later time.  This is supported by the <code>WriteAsync</code> and <code>ReadAsync</code> methods of a model.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file </span></span><br><span class="line">model.WriteAsync(<span class="string">"test-model"</span>)</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; ignore</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file and run a prediction</span></span><br><span class="line"><span class="keyword">let</span> modelReloaded =</span><br><span class="line">  PredictionModel.ReadAsync&lt;VertebralData, VertebralPrediction&gt;(<span class="string">"test-model"</span>) </span><br><span class="line">  |&gt; Async.AwaitTask </span><br><span class="line">  |&gt; Async.RunSynchronously</span><br><span class="line"><span class="keyword">let</span> predictionReloaded = modelReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted Category (Reloaded): %s"</span> predictionReloaded.PredictedLabel</span><br><span class="line">printfn <span class="string">"Actual Category (Reloaded)   : DH"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result: (model reloaded):</span><br><span class="line">Predicted Category (Reloaded): DH</span><br><span class="line">Actual Category (Reloaded)   : DH</span><br></pre></td></tr></table></figure><p>Throughout the post, portions of the output have been provided out of band.  Here is how the whole thing looks when run with <code>dotnet run</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Automatically adding a MinMax normalization transform, use &apos;norm=Warn&apos; or &apos;norm=No&apos; to turn this behavior off.</span><br><span class="line">Using 2 threads to train.</span><br><span class="line">Automatically choosing a check frequency of 2.</span><br><span class="line">Auto-tuning parameters: maxIterations = 4836.</span><br><span class="line">Auto-tuning parameters: L2 = 2.668161E-05.</span><br><span class="line">Auto-tuning parameters: L1Threshold (L1/L2) = 0.</span><br><span class="line">Using best model from iteration 448.</span><br><span class="line">Not training a calibrator because it is not needed.</span><br><span class="line"></span><br><span class="line">Macro-Average Accuracy : 0.817778</span><br><span class="line">Micro-Average Accuracy : 0.858065</span><br><span class="line">Average Log-loss       : 0.313334</span><br><span class="line">Relative Log-loss      : 69.699239</span><br><span class="line">Classes                : [|&quot;DH&quot;; &quot;SL&quot;; &quot;NO&quot;|]</span><br><span class="line">Log-loss by class      : [|0.5853304274; 0.1233100547; 0.4351712598|]</span><br><span class="line">Top-k Accuracy         : 0.996774</span><br><span class="line">Confusion Matrix       :</span><br><span class="line">       DH   SL   NO </span><br><span class="line">  DH   40    1   19 </span><br><span class="line">  SL    3  142    5 </span><br><span class="line">  NO   13    3   84 </span><br><span class="line"></span><br><span class="line">Predicted Category: DH</span><br><span class="line">Actual Category   : DH</span><br><span class="line"></span><br><span class="line">Predicted Category (Reloaded): DH</span><br><span class="line">Actual Category (Reloaded)   : DH</span><br></pre></td></tr></table></figure><p>This has been a brief look into training and using an ML.NET classification model.  There were two interesting takeaways for me.  The first is just how to interact with the framework for classification.  The second, and more interesting, is how little is different between the regressor and classification pipelines.  I really appreciate a consistent framework where I can leverage a similar pipeline for most of my projects, and only really need to change out the appropriate logic bits for my specfic current problem.  ML.NET has some really good components, and it will be interesting to see it grows, hopefully with more F#-centric support as well. Until next time.</p><p><img src="/images/mlnet2/184px-SpondylolisthesisL5S1.jpg" alt=""></p><!-- Image available under the Creative Commons license.  Source: https://commons.wikimedia.org/wiki/File:SpondylolisthesisL5S1.jpg Author: Lucien Monfils -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Expanding on my previous post, &lt;a href=&quot;/2018/06/09/F-and-MLNet-Regression&quot;&gt;F# and ML.NET Regression&lt;/a&gt;, the current post will take a look at performing classification using Microsoft’s new &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt; framework.  The task at hand will be to use biomechanical attributes to classify patient vertebra conditions into normal (NO), disk hernia (DH), or spondilolysthesis (SL) categories.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>F# and ML.NET Regression</title>
    <link href="http://codesuji.com/2018/06/09/F-and-MLNet-Regression/"/>
    <id>http://codesuji.com/2018/06/09/F-and-MLNet-Regression/</id>
    <published>2018-06-09T12:48:41.000Z</published>
    <updated>2019-09-16T23:47:32.742Z</updated>
    
    <content type="html"><![CDATA[<p>Recently Microsoft announced <a href="https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet" target="_blank" rel="noopener">ML.NET</a>, a machine learning framework for .NET.  This is exciting news.  So my mind immediately goes to: how does this look with <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>?  The current post will take a look at using ML.NET’s regression module to predict concrete compressive strength based on its composite ingredients.</p><a id="more"></a><p><i>Update: This post is here for posterity sake, a rework of this post is <a href="/2019/09/14/F-and-MLNet-Regression-V2/">here</a> using ML.NET version 1.3.</i></p><p>Before jumping in too far, there is a disclaimer: ML.NET is in its early stages.  I found a couple implementation and interface idiosyncrasies I suspect will change over time.  Just keep that in mind moving forward.  The short version is, I’ve been pleased with what I’ve seen so far.  There is some room for improvement, especially having more F#-centric support for calling methods.  It will be an interesting journey as the framework matures.</p><p><i>Update: The post was written using Microsoft.ML v0.1.0, and v0.2.0 has since been released.  I have noted interfaces changes below, for the example it is just TextLoader.</i></p><p>With that out of the way, make sure you have <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core version 2.0</a> installed.  If you don’t, head out to the <a href="https://www.microsoft.com/net/download/core" target="_blank" rel="noopener">.NET Core Downloads</a> page.  Select <strong>SDK</strong> for your platform.  Tangential, but you can also get here by going to <a href="https://dot.net" target="_blank" rel="noopener">dot.net</a>, then navigating to <code>Downloads</code> and <code>.NET Core</code>.</p><p>First, create the project and add the ML.NET package.  This will be a console app in F# (obviously).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console --language F# --name MLNet-Concrete</span><br><span class="line">cd MLNet-Concrete</span><br><span class="line">dotnet add package Microsoft.ML</span><br></pre></td></tr></table></figure><p>Next, it is time to get the data.  The source I used for this post is from <a href="https://archive.ics.uci.edu/ml/datasets/Concrete+Compressive+Strength" target="_blank" rel="noopener">UCI</a>.  The dataset is an Excel file (xls), and I need it as a csv.  I used <code>ssource</code> (from <code>apt install gnumeric</code>) to convert from Excel to CSV, but feel free to use whatever works for you.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir data &amp;&amp; cd data</span><br><span class="line">curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls</span><br><span class="line">ssource Concrete_Data.xls Concrete_Data.csv</span><br></pre></td></tr></table></figure><p>Here is a sample of what the data looks like.  There is a header row, I’ve transposed this to a vertical list for readablity.  The first 8 columns are features, the last is the concrete compressive strength.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Header Row</span><br><span class="line">Cement (component 1)(kg in a m^3 mixture)</span><br><span class="line">Blast Furnace Slag (component 2)(kg in a m^3 mixture)</span><br><span class="line">Fly Ash (component 3)(kg in a m^3 mixture)</span><br><span class="line">Water  (component 4)(kg in a m^3 mixture)</span><br><span class="line">Superplasticizer (component 5)(kg in a m^3 mixture)</span><br><span class="line">Coarse Aggregate  (component 6)(kg in a m^3 mixture)</span><br><span class="line">Fine Aggregate (component 7)(kg in a m^3 mixture)</span><br><span class="line">Age (day)</span><br><span class="line">Concrete compressive strength(MPa, megapascals)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Data Rows</span><br><span class="line">540,0,0,162,2.5,1040,676,28,79.98611076</span><br><span class="line">540,0,0,162,2.5,1055,676,28,61.887365759999994</span><br><span class="line">332.5,142.5,0,228,0,932,594,270,40.269535256000005</span><br><span class="line">332.5,142.5,0,228,0,932,594,365,41.052779992</span><br></pre></td></tr></table></figure><p>Now that the project is setup and data is local, we can get to the code.  Time to open up the already created <code>Program.fs</code>.  First, add the necessary namespaces.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Runtime.Api</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Trainers</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Transforms</span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Models</span><br><span class="line"></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line"><span class="keyword">open</span> Microsoft.ML.Data</span><br></pre></td></tr></table></figure><p>The ML.NET pipeline expects the data in a specific format.  In the C# world, this is a class, for F# we can use a type.  Below are the required types; <code>ConcreteData</code> is the input data, <code>ConcretePrediction</code> is the output prediction.  For <code>ConcreteData</code>, this is basically a a map of columns to member variables.  There are a couple notable points to ensure the pipeline can properly consume the data.  Each attribute must be <code>mutable public</code>, it also requires the <code>[&lt;Column(&quot;#&quot;)&gt;]</code> to specify it’s column position, and <code>[&lt;DefaultValue&gt;]</code> attributes.  For <code>ConcretePrediction</code>, a single attribute is required, the prediction value.  For the input data, the label variable must be named <code>Label</code>.  For the prediction type, the variable must be labeled <code>Score</code>.  There are methods where you are supposed to be able to define a <code>ColumnName</code> attribute, or copy a label column into the pipeline.  But frankly they didn’t work for me.  I’m unclear if I was doing something wrong if its a current early-state problem.  Over time I expect this will be resolved, but for now I don’t mind working within tighter constraints.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ConcreteData</span></span>() =</span><br><span class="line">  <span class="meta">[&lt;Column("0")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Cement:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("1")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Slag:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("2")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Ash:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("3")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Water:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("4")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Superplasticizer:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("5")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> CoarseAggregate:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("6")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> FineAggregate:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("7")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Age:float32</span><br><span class="line"></span><br><span class="line">  <span class="meta">[&lt;Column("8")&gt;]</span></span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Label :float32</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ConcretePrediction</span></span>() =</span><br><span class="line">  <span class="meta">[&lt;DefaultValue&gt;]</span></span><br><span class="line">  <span class="keyword">val</span> <span class="keyword">mutable</span> <span class="keyword">public</span> Score:float32</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The structure of building a pipeline is pretty intuitive.  First, create a pipeline.  Then, add components to the pipeline in the order to be executed.  So first, load the data with a <code>TextLoader</code>.  This data is comma delimited and has a header row.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pipeline = <span class="keyword">new</span> LearningPipeline()</span><br><span class="line"><span class="keyword">let</span> dataPath = <span class="string">"./data/Concrete_Data.csv"</span></span><br><span class="line"><span class="comment">// v0.1.0 </span></span><br><span class="line"><span class="comment">// pipeline.Add(new TextLoader&lt;ConcreteData&gt;(dataPath, separator = ",", useHeader = true))</span></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line">pipeline.Add((<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;ConcreteData&gt;(separator = ',', useHeader = <span class="keyword">true</span>))</span><br></pre></td></tr></table></figure><p>After the data is loaded, feature columns need to be added to the pipeline.  I’m going to use all feature columns from the file, but I don’t have to.  The regressor model requires features to be numeric. In this example, that is the case and nothing special needs to be done.  In cases where columns are strings, the <code>CategoricalOneHotVectorizer()</code> will convert string columns to numeric mappings.  I’ve provided an example line below.  Even though I don’t need it, its a handy reference to have.  Note the order, since it is a pipeline, the string to numeric column conversion needs to happen prior to adding the feature columns.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example how to convert text to numeric</span></span><br><span class="line"><span class="comment">// pipeline.Add(new CategoricalOneHotVectorizer("CementBrandName", "SlagBrandName"));</span></span><br><span class="line">pipeline.Add(<span class="keyword">new</span> ColumnConcatenator(<span class="string">"Features"</span>, <span class="string">"Cement"</span>, <span class="string">"Slag"</span>, <span class="string">"Ash"</span>, <span class="string">"Water"</span>, <span class="string">"Superplasticizer"</span>, <span class="string">"CoarseAggregate"</span>, <span class="string">"FineAggregate"</span>, <span class="string">"Age"</span>))</span><br></pre></td></tr></table></figure><p>Now that the features are defined, it is time to determine what training method to use.  For this post <code>FastTreeRegressor</code> is used.  This is a boosted decision tree and generally offers pretty good results.  Custom hyperparameters can also be defined.  I found the defaults to be fine, but its good to see the option to tweak those values.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pipeline.Add(<span class="keyword">new</span> FastTreeRegressor())</span><br><span class="line"></span><br><span class="line"><span class="comment">// FastTreeRegressor with hyperparameters</span></span><br><span class="line"><span class="comment">// pipeline.Add(new FastTreeRegressor(NumTrees = 500, DropoutRate = 0.2))</span></span><br></pre></td></tr></table></figure><p>For the dataset in question, the <code>FastTreeRegressor</code> worked the best, but there are alternatives.  I’ve listed them below.  Most had worst performance, with the <code>FastTreeTweedieRegressor</code> being similar.  As will anything, it is good to investigate options.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Similar performance</span></span><br><span class="line"><span class="comment">// pipeline.Add(new FastTreeTweedieRegressor())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Worse performance</span></span><br><span class="line"><span class="comment">// pipeline.Add(new PoissonRegressor())</span></span><br><span class="line"><span class="comment">// pipeline.Add(new StochasticDualCoordinateAscentRegressor())</span></span><br><span class="line"><span class="comment">// pipeline.Add(new FastForestRegressor())</span></span><br><span class="line"><span class="comment">// pipeline.Add(new OnlineGradientDescentRegressor())</span></span><br></pre></td></tr></table></figure><p>The last part, train the model.  Note the <code>ConcreteData</code> and <code>ConcretePrediction</code> types as part of the <code>Train</code> call. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> model = pipeline.Train&lt;ConcreteData, ConcretePrediction&gt;()  </span><br></pre></td></tr></table></figure><p>Validation of any model is important.  For a real case, I would train on one dataset and validate against a previously unseen dataset.  Since this is just an example, I validate against the training data.  As a result, I expect the results to be very good, and they are.  ML.NET offers an Evaluator class, which makes getting some of those crucial high-level numbers pretty easy.  It takes a trained model and a dataset, and produces critical metrics.  Again, this is one of those components that is crucial to an ML framework and I’m glad to see it here.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Evaluate results</span></span><br><span class="line"><span class="comment">// v0.1.0 </span></span><br><span class="line"><span class="comment">// let testData = new TextLoader&lt;ConcreteData&gt;(dataPath, separator = ",", useHeader = true)</span></span><br><span class="line"><span class="comment">// New for v0.2.0</span></span><br><span class="line"><span class="keyword">let</span> testData = (<span class="keyword">new</span> TextLoader(dataPath)).CreateFrom&lt;ConcreteData&gt;(separator = ',', useHeader = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">let</span> evaluator = <span class="keyword">new</span> RegressionEvaluator()</span><br><span class="line"><span class="keyword">let</span> metrics = evaluator.Evaluate(model, testData) </span><br><span class="line">printfn <span class="string">""</span></span><br><span class="line">printfn <span class="string">"R-Squared: %f"</span> &lt;| metrics.RSquared</span><br><span class="line">printfn <span class="string">"RMS      : %f"</span> &lt;| metrics.Rms</span><br><span class="line">printfn <span class="string">"L1       : %f"</span> &lt;| metrics.L1</span><br><span class="line">printfn <span class="string">"L2       : %f"</span> &lt;| metrics.L2</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Evaluator Results:</span><br><span class="line">R-Squared: 0.988533</span><br><span class="line">RMS      : 1.788017</span><br><span class="line">L1       : 1.139818</span><br><span class="line">L2       : 3.197006</span><br></pre></td></tr></table></figure><p>Backtracking to the hyperparameter example, here are those results.  As you can tell, my randomly picked hyperparameter choices were not better.  Certainly it seems like a fun opportunity to pair some optimization searches with the pipeline to see how methods can be improved. Of course, this is more meaningful if it is not validating against the training data, there is already a risk of overfitting that we’re not seeing.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Evaluator Results (with hyperparameters):</span><br><span class="line">R-Squared: 0.947057</span><br><span class="line">RMS      : 3.841995</span><br><span class="line">L1       : 2.846822</span><br><span class="line">L2       : 14.760922</span><br></pre></td></tr></table></figure><p>Here is an example of how individual predictions can be made.  Create a <code>ConcreteData</code> object and provide it to the <code>Predict</code> method.  For this example, I pull one of those rows from the training data.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = ConcreteData()</span><br><span class="line">test1.Cement &lt;- <span class="number">198.6</span>f</span><br><span class="line">test1.Slag &lt;- <span class="number">132.4</span>f</span><br><span class="line">test1.Ash &lt;- <span class="number">0.</span>f</span><br><span class="line">test1.Water &lt;- <span class="number">192.</span>f</span><br><span class="line">test1.Superplasticizer &lt;- <span class="number">0.</span>f</span><br><span class="line">test1.CoarseAggregate &lt;- <span class="number">978.4</span>f</span><br><span class="line">test1.FineAggregate &lt;- <span class="number">825.5</span>f</span><br><span class="line">test1.Age &lt;- <span class="number">90.</span>f</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionTest1 = model.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted Strength: %f"</span> predictionTest1.Score</span><br><span class="line">printfn <span class="string">"Actual Strength   : 38.074243671999994"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result:</span><br><span class="line">Predicted Strength: 38.882920</span><br><span class="line">Actual Strength   : 38.074243671999994</span><br></pre></td></tr></table></figure><p>On a lark, let’s see what happens if slag is increased, and the water content is reduced.  It looks like compressive strength gets stronger.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test2 = ConcreteData()</span><br><span class="line">test2.Cement &lt;- <span class="number">198.6</span>f</span><br><span class="line">test2.Slag &lt;- <span class="number">150.0</span>f</span><br><span class="line">test2.Ash &lt;- <span class="number">0.</span>f</span><br><span class="line">test2.Water &lt;- <span class="number">172.</span>f</span><br><span class="line">test2.Superplasticizer &lt;- <span class="number">0.</span>f</span><br><span class="line">test2.CoarseAggregate &lt;- <span class="number">978.4</span>f</span><br><span class="line">test2.FineAggregate &lt;- <span class="number">825.5</span>f</span><br><span class="line">test2.Age &lt;- <span class="number">90.</span>f</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionTest2 = model.Predict(test2)</span><br><span class="line">printfn <span class="string">"Predicted Strength: %f"</span> predictionTest2.Score</span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result:</span><br><span class="line">Predicted Strength: 45.623180</span><br></pre></td></tr></table></figure><p>Once a model is trained, it can also be saved to a file a reloaded at a later time.  This is supported by the <code>WriteAsync</code> and <code>ReadAsync</code> methods of a model.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save model to file</span></span><br><span class="line">model.WriteAsync(<span class="string">"test-model"</span>)</span><br><span class="line">|&gt; Async.AwaitTask</span><br><span class="line">|&gt; ignore</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load model from file and run a prediction</span></span><br><span class="line"><span class="keyword">let</span> modelReloaded =</span><br><span class="line">  PredictionModel.ReadAsync&lt;ConcreteData, ConcretePrediction&gt;(<span class="string">"test-model"</span>) </span><br><span class="line">  |&gt; Async.AwaitTask </span><br><span class="line">  |&gt; Async.RunSynchronously</span><br><span class="line"><span class="keyword">let</span> predictionReloaded = modelReloaded.Predict(test1)</span><br><span class="line">printfn <span class="string">"Predicted Strength RL: %f"</span> predictionReloaded.Score</span><br><span class="line">printfn <span class="string">"Actual Strength      : 38.074243671999994"</span></span><br><span class="line">printfn <span class="string">""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Prediction Result (model reloaded):</span><br><span class="line">Predicted Strength RL: 38.882920</span><br><span class="line">Actual Strength      : 38.074243671999994</span><br></pre></td></tr></table></figure><p>Throughout the post, portions of the output have been provided out of band.  Here is how the whole thing looks when run with <code>dotnet run</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Not adding a normalizer.</span><br><span class="line">Making per-feature arrays</span><br><span class="line">Changing data from row-wise to column-wise</span><br><span class="line">Processed 1030 instances</span><br><span class="line">Binning and forming Feature objects</span><br><span class="line">Reserved memory for tree learner: 234780 bytes</span><br><span class="line">Starting to train ...</span><br><span class="line">Not training a calibrator because it is not needed.</span><br><span class="line"></span><br><span class="line">R-Squared: 0.988533</span><br><span class="line">RMS      : 1.788017</span><br><span class="line">L1       : 1.139818</span><br><span class="line">L2       : 3.197006</span><br><span class="line"></span><br><span class="line">Predicted Strength: 38.882920</span><br><span class="line">Actual Strength   : 38.074243671999994</span><br><span class="line"></span><br><span class="line">Predicted Strength: 45.623180</span><br><span class="line"></span><br><span class="line">Predicted Strength RL: 38.882920</span><br><span class="line">Actual Strength      : 38.074243671999994</span><br></pre></td></tr></table></figure><p>There you have it.  A brief look into training and using an ML.NET regressor model.  Although there are a couple quirks, I’m excited to see this released.  This will only get better over time and if F# can be a part of that, even better.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently Microsoft announced &lt;a href=&quot;https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ML.NET&lt;/a&gt;, a machine learning framework for .NET.  This is exciting news.  So my mind immediately goes to: how does this look with &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;?  The current post will take a look at using ML.NET’s regression module to predict concrete compressive strength based on its composite ingredients.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="MLNet" scheme="http://codesuji.com/tags/MLNet/"/>
    
      <category term=".NET Core" scheme="http://codesuji.com/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>F# and Word Stems</title>
    <link href="http://codesuji.com/2018/04/24/FSharp-and-Word-Stems/"/>
    <id>http://codesuji.com/2018/04/24/FSharp-and-Word-Stems/</id>
    <published>2018-04-25T03:01:12.000Z</published>
    <updated>2018-04-26T01:08:36.534Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s post discusses performing word stemming with <a href="http://fsharp.org" target="_blank" rel="noopener">F#</a>.  This will be an expansion on a <a href="/2018/01/06/Tackling-Kaggle-FSharp-XGBoost/">previous post</a>, <a href="https://www.kaggle.com/c/quora-question-pairs" target="_blank" rel="noopener">Comparing Quora question intent</a>.  As a result, it will also address some feature engineering.  </p><a id="more"></a><p>For those not familar with word stems, in this context it basically refers to word bases, excluding suffixes.  Stems are helpful when doing text compares, especially when dealing with data of a content-based nature.  This aligns well with the Quora question comparisons.  The <code>Annytab.Stemmer</code> library meets the needs well.</p><p>Before getting started, everything here will be an enhancement of existing code from the Kaggle Quora duplicate questions post.</p><p>First, add the <code>Annytab.Stemmer</code> package to the project by adding  it to <code>paket.dependencies</code>.  Then open the namespaces and create a stemmer object.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget Annytab.Stemmer</span><br></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"../packages/Annytab.Stemmer/lib/netstandard1.4/Annytab.Stemmer.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> Annytab</span><br><span class="line"><span class="keyword">open</span> Annytab.Stemmer</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stemmer = EnglishStemmer()</span><br></pre></td></tr></table></figure><p>Now that the basic components are in place, I can provide a simple stem example.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sentence1 = <span class="string">"When birds fly, they are soaring above the trees while people are watching and talking"</span></span><br><span class="line"><span class="keyword">let</span> sentence2 = <span class="string">"When birds are flying, they soar above the trees while people watch and talk"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sentenceToWords (s:string) = s.Split([|' '|]) </span><br><span class="line"><span class="keyword">let</span> sentence1Words = sentenceToWords sentence1</span><br><span class="line"><span class="keyword">let</span> sentence2Words = sentenceToWords sentence2</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matches = Set.intersect (set sentence1Words) (set sentence2Words)</span><br><span class="line">printfn <span class="string">"Matches: %A"</span> (Set.count matches)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sentenceToStemWords (s:string) = </span><br><span class="line">  sentenceToWords s</span><br><span class="line">  |&gt; stemmer.GetSteamWords</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sentence1StemWords = sentenceToStemWords sentence1</span><br><span class="line"><span class="keyword">let</span> sentence2StemWords = sentenceToStemWords sentence2</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stemMatches = Set.intersect (set sentence1StemWords) (set sentence2StemWords)</span><br><span class="line">printfn <span class="string">"Stem Matches: %A"</span> (Set.count stemMatches)</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"sentence1: %A"</span> sentence1StemWords</span><br><span class="line">printfn <span class="string">"sentence2: %A"</span> sentence2StemWords</span><br><span class="line">printfn <span class="string">"Matches     : %d\nStem Matches: %d"</span> (Set.count matches) (Set.count stemMatches)</span><br></pre></td></tr></table></figure><p>Here are the results.  Notice in the stemmed word list only the bases are listed <code>birds</code> -&gt; <code>bird</code> and <code>watching</code> to <code>watch</code>, etc.  This allows for concepts to be matched better.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stem words:</span></span><br><span class="line">sentence1: [|<span class="string">"when"</span>; <span class="string">"bird"</span>; <span class="string">"fly,"</span>; <span class="string">"they"</span>; <span class="string">"are"</span>; <span class="string">"soar"</span>; <span class="string">"abov"</span>; <span class="string">"the"</span>; <span class="string">"tree"</span>; <span class="string">"while"</span>;</span><br><span class="line">  <span class="string">"peopl"</span>; <span class="string">"are"</span>; <span class="string">"watch"</span>; <span class="string">"and"</span>; <span class="string">"talk"</span>|]</span><br><span class="line">sentence2: [|<span class="string">"when"</span>; <span class="string">"bird"</span>; <span class="string">"are"</span>; <span class="string">"flying,"</span>; <span class="string">"they"</span>; <span class="string">"soar"</span>; <span class="string">"abov"</span>; <span class="string">"the"</span>; <span class="string">"tree"</span>;</span><br><span class="line">  <span class="string">"while"</span>; <span class="string">"peopl"</span>; <span class="string">"watch"</span>; <span class="string">"and"</span>; <span class="string">"talk"</span>|]</span><br><span class="line"></span><br><span class="line">&gt; printfn <span class="string">"Matches     : %d\nStem Matches: %d"</span> (Set.count matches) (Set.count stemMatches)</span><br><span class="line">Matches     : <span class="number">10</span></span><br><span class="line">Stem Matches: <span class="number">13</span></span><br></pre></td></tr></table></figure><p>Time to update the feature generation.  A valuable reminder is that feature generation is part art, part science.  Often it is an iterative, and experimental, process.  Don’t worry, intuition of what a good feature might be grows with time and experience.  Using the now defined <code>sentenceToStemWords</code> to extract words from the questions, a comparison can be doing using a <code>Set.intersect</code>.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rowFeatures (metadata:Metadata) (input:CsvProvider&lt;TrainFilename&gt;.Row) =</span><br><span class="line">  <span class="keyword">let</span> question1Words = sentenceToStemWords input.Question1</span><br><span class="line">  <span class="keyword">let</span> question2Words = sentenceToStemWords input.Question2</span><br><span class="line">  <span class="keyword">let</span> wordShareCount = </span><br><span class="line">    Set.intersect (set question1Words) (set question2Words) </span><br><span class="line">    |&gt; Set.count</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> wordShareFeature = ((float32 wordShareCount) * <span class="number">2.</span>f) / (float32 question1Words.Length + float32 question2Words.Length)</span><br><span class="line"></span><br><span class="line">  [|</span><br><span class="line">    float32 input.Question1.Length;</span><br><span class="line">    float32 input.Question2.Length;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question1;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question2;</span><br><span class="line">    (abs &gt;&gt; float32) (wordCount input.Question1 - wordCount input.Question2);</span><br><span class="line">    wordShareFeature</span><br><span class="line">  |]</span><br></pre></td></tr></table></figure><p>Add matching word stems between questions as a feature has improved the accuracy by about 8%.  That is a decent ROI for adding a feature.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; evaluatePredictionResults finalModel trainInput trainOutput</span><br><span class="line">Accuracy: <span class="number">0.755652</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">84299</span>  <span class="number">43153</span></span><br><span class="line">F     <span class="number">35877</span> <span class="number">160103</span></span><br><span class="line"></span><br><span class="line">&gt; evaluatePredictionResults finalModel validationInput validationOutput</span><br><span class="line">Accuracy: <span class="number">0.704828</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">18281</span>  <span class="number">13061</span></span><br><span class="line">F     <span class="number">10806</span>  <span class="number">38710</span></span><br></pre></td></tr></table></figure><p>There is one downside to this approach, common words like “a”, “and”, “the” are included in the matching word feature.  This can result in a deceptively high percentage word match.  To get a more representative match, these “stop words” can be excluded.  Time to make another feature change.  I built a stopwords list, here is a sample.  The full file is <a href="/data/stopwords.txt">here</a>. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i</span><br><span class="line">a</span><br><span class="line">about</span><br><span class="line">after</span><br><span class="line">all</span><br><span class="line">also</span><br><span class="line">an</span><br></pre></td></tr></table></figure><p>Then alter <code>sentenceToFilteredStemWords</code> to be <code>sentenceToFilteredStemWords</code> that excludes stop words.  This will get me to where I want to be. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> StopWordsFilename = <span class="string">"../data/stopwords.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stopWords = </span><br><span class="line">  File.ReadAllLines StopWordsFilename</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> x -&gt; (x, <span class="number">1</span>))</span><br><span class="line">  |&gt; Map.ofArray</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sentenceToFilteredStemWords s =</span><br><span class="line">  sentenceToStemWords s</span><br><span class="line">  |&gt; Array.filter (<span class="keyword">fun</span> w -&gt; not (Map.containsKey w stopWords))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rowFeatures (metadata:Metadata) (input:CsvProvider&lt;TrainFilename&gt;.Row) =</span><br><span class="line">  <span class="keyword">let</span> question1Words = sentenceToFilteredStemWords input.Question1</span><br><span class="line">  <span class="keyword">let</span> question2Words = sentenceToFilteredStemWords input.Question2</span><br><span class="line">  <span class="keyword">let</span> wordShareCount = </span><br><span class="line">    Set.intersect (set question1Words) (set question2Words) </span><br><span class="line">    |&gt; Set.count</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> wordShareFeature =</span><br><span class="line">    <span class="keyword">if</span> question1Words.Length + question2Words.Length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">then</span> <span class="number">0.</span>f</span><br><span class="line">    <span class="keyword">else</span> ((float32 wordShareCount) * <span class="number">2.</span>f) / (float32 question1Words.Length + float32 question2Words.Length)</span><br><span class="line"></span><br><span class="line">  [|</span><br><span class="line">    float32 input.Question1.Length;</span><br><span class="line">    float32 input.Question2.Length;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question1;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question2;</span><br><span class="line">    (abs &gt;&gt; float32) (wordCount input.Question1 - wordCount input.Question2);</span><br><span class="line">    wordShareFeature;</span><br><span class="line">  |]</span><br></pre></td></tr></table></figure><p>Filtering out stop words gained another 3%.  Admittedly I expected a bit more, but still upwards.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; evaluatePredictionResults finalModel trainInput trainOutput</span><br><span class="line">Accuracy: <span class="number">0.777598</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">88157</span>  <span class="number">39913</span></span><br><span class="line">F     <span class="number">32019</span> <span class="number">163343</span></span><br><span class="line"></span><br><span class="line">&gt; evaluatePredictionResults finalModel validationInput validationOutput</span><br><span class="line">Accuracy: <span class="number">0.730577</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">19373</span>  <span class="number">12071</span></span><br><span class="line">F      <span class="number">9714</span>  <span class="number">39700</span></span><br></pre></td></tr></table></figure><p>As you can see, using word stems and stop words to extend the features can be a useful tactic.  This also serves as a good reminder that F# has the tools for interesting analysis.  I hope you found this post useful.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s post discusses performing word stemming with &lt;a href=&quot;http://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  This will be an expansion on a &lt;a href=&quot;/2018/01/06/Tackling-Kaggle-FSharp-XGBoost/&quot;&gt;previous post&lt;/a&gt;, &lt;a href=&quot;https://www.kaggle.com/c/quora-question-pairs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Comparing Quora question intent&lt;/a&gt;.  As a result, it will also address some feature engineering.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Kaggle" scheme="http://codesuji.com/tags/Kaggle/"/>
    
      <category term="Text" scheme="http://codesuji.com/tags/Text/"/>
    
      <category term="Analytics" scheme="http://codesuji.com/tags/Analytics/"/>
    
  </entry>
  
  <entry>
    <title>F# and DotEnv</title>
    <link href="http://codesuji.com/2018/02/28/F-and-DotEnv/"/>
    <id>http://codesuji.com/2018/02/28/F-and-DotEnv/</id>
    <published>2018-03-01T01:03:12.000Z</published>
    <updated>2018-03-01T02:33:22.317Z</updated>
    
    <content type="html"><![CDATA[<p>Often the question arises, what is the best way to manage environment variables for a project.  Many languages have libaries precisely for this issue.  A common approach is the use of a <code>.env</code> file, .NET and <a href="http://fsharp.org" target="_blank" rel="noopener">F#</a> are no different.  In today’s post I’ll take a brief look at leveraging DotEnv in an F# application.</p><a id="more"></a><p>For those not familiar with the concept, an application’s configuration is managed through environment variables.  Although great for deployment, manually setting them locally and/or passing them to other developers can be a pain.  For development, management of environment variables can be easily done using a <code>.env</code> file.  This file resides in the project root.  The DotEnv library loads those environment variables into the executing process.  This allows for the ability to easily share application configuration.  It depends on the library implementation, but often a bonus is that comments are permitted in this file as well.  </p><p>There are several packages available that meet this need, I will specifically be looking at <a href="https://www.nuget.org/packages/dotenv.net/" target="_blank" rel="noopener">dotenv.net</a>.</p><p>Step one, setup a <code>.env</code> file.  This is simply a list of <code>&lt;key&gt;=&lt;value&gt;</code> pairs.  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># My custom environment variables</span><br><span class="line">FOO=myfoo</span><br><span class="line">BAR=mybar</span><br></pre></td></tr></table></figure><p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is the paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget dotenv.net </span><br></pre></td></tr></table></figure><p>Below is sample code, along with a sample execution.  Honestly, as an example there isn’t much to look at.  But that is kind of the point.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#r <span class="string">"./packages/dotenv.net/lib/netstandard2.0/dotenv.net.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> dotenv.net</span><br><span class="line"></span><br><span class="line">DotEnv.Config()</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"foo: %A"</span> (Environment.GetEnvironmentVariable(<span class="string">"FOO"</span>))</span><br><span class="line">printfn <span class="string">"bar: %A"</span> (Environment.GetEnvironmentVariable(<span class="string">"BAR"</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/dotenv1/dotenv_1.png" alt="Execution Results"></p><p>Including packages makes life easy, especially for quick proof-of-concepting.  With that said, the basics of <code>.env</code> are pretty simple to implement.  Below is an F# version.  I’m going to pick on C# a bit too.  I looked at a couple of the implemenations available through nuget.  They share a common theme, they are all drastically longer than the code below.  This is one of the reasons I enjoy F#, it allows me to quickly execute on ideas and not get bogged down in syntax.  As an aside, one notable difference is that my version doesn’t overwrite existing environment variables.  This may be personal preference, but I like the ability to override <code>.env</code> values by explicitly setting environment values.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.Text.RegularExpressions</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Load .env file</span></span><br><span class="line"><span class="keyword">let</span> loadDotEnv() = </span><br><span class="line">  <span class="keyword">let</span> envFile = <span class="string">".env"</span></span><br><span class="line">  <span class="keyword">if</span> IO.File.Exists(envFile)</span><br><span class="line">  <span class="keyword">then</span> </span><br><span class="line">    IO.File.ReadAllLines(envFile)</span><br><span class="line">    |&gt; Array.iter (<span class="keyword">fun</span> line -&gt;</span><br><span class="line">      <span class="comment">// Remove comments</span></span><br><span class="line">      <span class="keyword">let</span> line' = Regex.Replace(line, <span class="string">"#.*"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Split into &lt;key&gt;=&lt;value&gt;</span></span><br><span class="line">      <span class="keyword">let</span> parts = line'.Split([|'='|]) |&gt; Array.map (<span class="keyword">fun</span> x -&gt; x.Trim())</span><br><span class="line">      <span class="keyword">if</span> Array.length parts = <span class="number">2</span> </span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">let</span> (key, value) = (parts.[<span class="number">0</span>], parts.[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Only add key if not already there</span></span><br><span class="line">        <span class="keyword">if</span> String.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable(key))</span><br><span class="line">        <span class="keyword">then</span> Environment.SetEnvironmentVariable(key, value)</span><br><span class="line">        <span class="keyword">else</span> ()</span><br><span class="line">      <span class="keyword">else</span> ())</span><br><span class="line"></span><br><span class="line">loadDotEnv()</span><br><span class="line"></span><br><span class="line">printfn <span class="string">"foo: %A"</span> (Environment.GetEnvironmentVariable(<span class="string">"FOO"</span>))</span><br><span class="line">printfn <span class="string">"bar: %A"</span> (Environment.GetEnvironmentVariable(<span class="string">"BAR"</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/dotenv1/dotenv_2.png" alt="Execution Results"></p><p>As you can see, the environment variables now populated as desired.  That’s all for today.  Hopefully at least some found this short post useful.  Until next time… </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Often the question arises, what is the best way to manage environment variables for a project.  Many languages have libaries precisely for this issue.  A common approach is the use of a &lt;code&gt;.env&lt;/code&gt; file, .NET and &lt;a href=&quot;http://fsharp.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt; are no different.  In today’s post I’ll take a brief look at leveraging DotEnv in an F# application.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
  </entry>
  
  <entry>
    <title>Coding with Color</title>
    <link href="http://codesuji.com/2018/02/10/Coding-with-Color/"/>
    <id>http://codesuji.com/2018/02/10/Coding-with-Color/</id>
    <published>2018-02-10T16:42:52.000Z</published>
    <updated>2018-02-11T14:04:34.648Z</updated>
    
    <content type="html"><![CDATA[<p>Code comes in many shapes and sizes.  Often this means differing paradigms with text or gui workflow tools, but there are other ways.  Enter <a href="https://ozobot.com/products/ozobot-evo" target="_blank" rel="noopener">Evo</a>, a robot that leverages coding in the form of color.  I recently had the opportunity to play with one of the little bots.  It is intended as an educational toy for kids, and it fits the bill perfectly.  More than that, it is an interesting case study in seeing the world differently.  Take code beyond text, and into a realm that can easily appeal to kids (young and old).</p><a id="more"></a><p>Although the Evo has multiple levels of functionality, the one of interest here is the sensor on its underside.  The intended interaction with the bot is to draw black lines on a white piece of paper, the Evo will follow the lines.  Where it really gets interesting is using markers other than black.  The Evo responds to patterns of black, red, green, and blue.  It is an elegant method of code, instead of thinking in binary, it uses a quaternary system. Using patterns of these 4 colors, the Evo can be programmed to perform actions.  A program looks like a series of lines with dots of color.  </p><p><img src="/images/evo1/colorcodes.png" alt="Color Codes"></p><p><a href="http://play.ozobot.com/print/guides/ozobot-ozocodes-reference.pdf" target="_blank" rel="noopener">Color Codes PDF</a></p><p>Here is an example program.</p><p><img src="/images/evo1/example.png" alt="Example"></p><p>Do you see the bug?  <em>Hint: Green-Red-Green jumps to the next line on the robot’s left. Go the wrong way at the top and he’ll run off the paper</em><br>This isn’t just about play, but it is about diagnosising bugs and figuring out solutions to them.</p><p>These codes provide a fun way for the bot to interact with the world, and allow kids to program with tools, and in a way, they feel comfortable.  This alone is enough, but I appreciate the forethought into some of the codes.  Knowing the Evo could run in either direction on a line, many of the codes work in both directions.  </p><p>When coding with markers isn’t enough, <a href="http://ozoblockly.com/" target="_blank" rel="noopener">Blockly</a> is available.  For those not familiar with Blockly, it is meant to be a kid-friendly drag-and-drop coding experience.  It is a great option for taking the next step.  They also offer a clever program upload method.  The Evo can be placed against the screen as the program uploads to the Evo using flashes of color. Again, data encoding and transfer can happen in cool and interesting ways.</p><p>The Evo is fascinating, and a great reminder how code comes in many forms.  Keep a lookout for different approaches to coding, you may be surprised what you find.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Code comes in many shapes and sizes.  Often this means differing paradigms with text or gui workflow tools, but there are other ways.  Enter &lt;a href=&quot;https://ozobot.com/products/ozobot-evo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Evo&lt;/a&gt;, a robot that leverages coding in the form of color.  I recently had the opportunity to play with one of the little bots.  It is intended as an educational toy for kids, and it fits the bill perfectly.  More than that, it is an interesting case study in seeing the world differently.  Take code beyond text, and into a realm that can easily appeal to kids (young and old).&lt;/p&gt;
    
    </summary>
    
    
      <category term="Robotics" scheme="http://codesuji.com/tags/Robotics/"/>
    
  </entry>
  
  <entry>
    <title>Tackling Kaggle with F# and XGBoost</title>
    <link href="http://codesuji.com/2018/01/06/Tackling-Kaggle-FSharp-XGBoost/"/>
    <id>http://codesuji.com/2018/01/06/Tackling-Kaggle-FSharp-XGBoost/</id>
    <published>2018-01-06T15:06:32.000Z</published>
    <updated>2018-01-05T02:53:07.683Z</updated>
    
    <content type="html"><![CDATA[<p>Today’s topic will be to demonstrate tackling a <a href="https://www.kaggle.com/" target="_blank" rel="noopener">Kaggle</a> problem with <a href="https://github.com/dmlc/xgboost" target="_blank" rel="noopener">XGBoost</a> and <a href="http://fsharp.org/" target="_blank" rel="noopener">F#</a>.  <a href="https://www.kaggle.com/c/quora-question-pairs" target="_blank" rel="noopener">Comparing Quora question intent</a> offers a perfect opportunity to work with XGBoost, a common tool used in Kaggle competitions.  Luckily there is a .NET wrapper around the XGBoost library, <a href="https://github.com/PicNet/XGBoost.Net" target="_blank" rel="noopener">XGBoost.Net</a>.</p><a id="more"></a><p>Before going too far, let’s break down the data formats.  First, Kaggle provides a <code>train.csv</code> which is used for training models.  This contains question pairs and the ground truth regarding their duplicated-ness.  Second, <code>test.csv</code> is questions pairs with no ground truth.  This is used for generating the submission file to Kaggle.  Third, <code>submission.csv</code> are the results to submit to Kaggle for judging. <code>is_duplicate</code> represents a percentage likelihood of being a duplicate.  Below are example rows from each dataset.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// train.csv</span><br><span class="line">&quot;id&quot;,&quot;qid1&quot;,&quot;qid2&quot;,&quot;question1&quot;,&quot;question2&quot;,&quot;is_duplicate&quot;                                                                </span><br><span class="line">&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;What is the step by step guide to invest in share market in india?&quot;,&quot;What is the step by step guide to inves</span><br><span class="line">t in share market?&quot;,&quot;0&quot;                                                                                                  </span><br><span class="line">&quot;1&quot;,&quot;3&quot;,&quot;4&quot;,&quot;What is the story of Kohinoor (Koh-i-Noor) Diamond?&quot;,&quot;What would happen if the Indian government stole the K</span><br><span class="line">ohinoor (Koh-i-Noor) diamond back?&quot;,&quot;0&quot;                                                                                  </span><br><span class="line"></span><br><span class="line">// test.csv</span><br><span class="line">&quot;test_id&quot;,&quot;question1&quot;,&quot;question2&quot;</span><br><span class="line">0,&quot;How does the Surface Pro himself 4 compare with iPad Pro?&quot;,&quot;Why did Microsoft choose core m3 and not core i3 home Surface Pro 4?&quot;</span><br><span class="line">1,&quot;Should I have a hair transplant at age 24? How much would it cost?&quot;,&quot;How much cost does hair transplant require?&quot;</span><br><span class="line"></span><br><span class="line">// submission.csv</span><br><span class="line">test_id,is_duplicate</span><br><span class="line">0,0.425764</span><br><span class="line">1,0.212075</span><br></pre></td></tr></table></figure><p>Now that the data is out of the way, time to get started.  Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="noopener">Paket</a>, here is a sample paket.dependencies file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source https:<span class="comment">//nuget.org/api/v2</span></span><br><span class="line"></span><br><span class="line">nuget FSharp.Data</span><br><span class="line">nuget PicNet.XGBoost</span><br></pre></td></tr></table></figure><p>Here is the boilerplate and initial variables.  Most of this is self-explanatory, although I want to call out a couple things specifically.  As expected, TypeProviders will be used to load the csv datasets.  When I get to the model training section, there will be hyperparameters.  This object will be managed by <code>ModelParameterType</code> and <code>ModelParameter</code>.  Feature extraction will use dataset-level metadata.  Since this is meant to be a simple example, the only metadata will be the average number of words in a question.  As shown above, the train and test files are slightly different formats.  Whatever method I use, I want to be able to run the same code against train and test.  <code>StandardRow</code> enables this by standardizing the input row format for transformation.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">System.IO.Directory.SetCurrentDirectory(__SOURCE_DIRECTORY__)</span><br><span class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></span><br><span class="line">#r <span class="string">"../packages/PicNet.XGBoost/lib/net40/XGBoost.dll"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"><span class="keyword">open</span> FSharp.Data</span><br><span class="line"><span class="keyword">open</span> XGBoost</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Percent of training dataset to use for training</span></span><br><span class="line"><span class="comment">/// Note: ValidationPct = 1. - TrainPct</span></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> TrainPct = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Training filename</span></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> TrainFilename = <span class="string">"../data/train.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Kaggle test filename (used to generate submission)</span></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> TestFilename = <span class="string">"../data/test.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Kaggle submission filename</span></span><br><span class="line"><span class="meta">[&lt;Literal&gt;]</span></span><br><span class="line"><span class="keyword">let</span> SubmissionFilename = <span class="string">"../data/submission.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Type of hyperparameter value</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ModelParameterType</span> </span>= | Int | Float32 </span><br><span class="line"><span class="comment">/// Model hyperparameter</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">ModelParameter</span> </span>= &#123; Name: string; Type: ModelParameterType; Value: float &#125;</span><br><span class="line"><span class="comment">/// Dataset Metadata (Used for feature calculation)</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Metadata</span> </span>= &#123; AverageWordCount: float32 &#125;</span><br><span class="line"><span class="comment">// Standarized row</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">StandardRow</span> </span>= &#123; QuestionId: int; Label: float32; Features: float32[] &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Training dataset</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">TrainData</span> </span>= CsvProvider&lt;TrainFilename&gt;</span><br><span class="line"><span class="comment">/// Test/Submission dataset</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">TestData</span> </span>= CsvProvider&lt;TestFilename&gt;</span><br></pre></td></tr></table></figure><p>To ensure proper model training, the provided train.csv will be broken into a train and validation set.  This method could be more advanced, but take the first x% for training and 100-x% for validation works well enough in this case. Since the train and test files are different, a conversion function is needed.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Sample dataset into train and validation datasets</span></span><br><span class="line"><span class="keyword">let</span> sample (input:CsvProvider&lt;TrainFilename&gt;) trainPct = </span><br><span class="line">  <span class="keyword">let</span> trainRows = int (float (input.Rows |&gt; Seq.length) * trainPct) </span><br><span class="line">  <span class="keyword">let</span> trainData = input.Rows |&gt; Seq.take trainRows |&gt; Seq.toArray</span><br><span class="line">  <span class="keyword">let</span> validatationData = input.Rows |&gt; Seq.skip trainRows |&gt; Seq.toArray</span><br><span class="line">  (trainData, validatationData)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Convert the test data format to train data format</span></span><br><span class="line"><span class="comment">/// Note: This is necessary because their train and test datasets differ slightly</span></span><br><span class="line"><span class="keyword">let</span> convertTestToTrainFormat (input:CsvProvider&lt;TestFilename&gt;.Row []) :(CsvProvider&lt;TrainFilename&gt;.Row []) =</span><br><span class="line">  input</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> x -&gt; <span class="keyword">new</span> CsvProvider&lt;TrainFilename&gt;.Row(x.Test_id, <span class="number">0</span>, <span class="number">0</span>, x.Question1, x.Question2, <span class="keyword">false</span>))</span><br></pre></td></tr></table></figure><p>Here are the feature generating, and supporting, functions.  For pedagogical reasons the feature set is going to be overly simplistic.  This won’t result in a great prediction result, but proper feature creation can be involved.  More advanced feature extraction will be addressed in a later post.  For now, this will be enough to get some results, without losing the primary goal in a forest of feature extraction code.</p><p>Some features will/may need aggregate information about the dataset.  This is commonly used to for scaling or comparison for averages.  This will be stored in a dataset metadata object that all rows will have access to during row transformation and feature extraction.  The row-specific features are length and wordcount for the two questions being compared.  In addition, the difference in wordcount between the questions is considered.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Number of words in sentence</span></span><br><span class="line"><span class="keyword">let</span> wordCount (s:string) = Array.length (s.Split([| ' ' |])) </span><br><span class="line"></span><br><span class="line"><span class="comment">/// Absolute value</span></span><br><span class="line"><span class="keyword">let</span> abs (x:int) = Math.Abs(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Calculate dataset metadata for feature calculation</span></span><br><span class="line"><span class="keyword">let</span> metadata (input:CsvProvider&lt;TrainFilename&gt;.Row []) =</span><br><span class="line">  <span class="keyword">let</span> averageWordCount = </span><br><span class="line">    input</span><br><span class="line">    |&gt; Array.collect (<span class="keyword">fun</span> row -&gt; [|</span><br><span class="line">      Array.length (row.Question1.Split([| ' ' |])); </span><br><span class="line">      Array.length (row.Question2.Split([| ' ' |])) |])</span><br><span class="line">    |&gt; Array.sum</span><br><span class="line">    |&gt; (<span class="keyword">fun</span> total -&gt; float32 total / float32 (input.Length * <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">  &#123; Metadata.AverageWordCount = averageWordCount &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Calculate features for a row</span></span><br><span class="line"><span class="keyword">let</span> rowFeatures (metadata:Metadata) (input:CsvProvider&lt;TrainFilename&gt;.Row) =</span><br><span class="line">  [|</span><br><span class="line">    float32 input.Question1.Length;</span><br><span class="line">    float32 input.Question2.Length;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question1;</span><br><span class="line">    (wordCount &gt;&gt; float32) input.Question2;</span><br><span class="line">    (abs &gt;&gt; float32) (wordCount input.Question1 - wordCount input.Question2);</span><br><span class="line">  |]</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Transform csv row into label + features</span></span><br><span class="line"><span class="keyword">let</span> transform (metadata:Metadata) (input:CsvProvider&lt;TrainFilename&gt;.Row []) =</span><br><span class="line">  input</span><br><span class="line">  |&gt; Array.map(<span class="keyword">fun</span> row -&gt; </span><br><span class="line">    &#123;</span><br><span class="line">      StandardRow.QuestionId = row.Id;</span><br><span class="line">      Label = <span class="keyword">if</span> row.Is_duplicate <span class="keyword">then</span> float32 <span class="number">1.</span> <span class="keyword">else</span> float32 <span class="number">0.</span>;</span><br><span class="line">      Features = rowFeatures metadata row</span><br><span class="line">    &#125;  </span><br><span class="line">  )  </span><br></pre></td></tr></table></figure><p>Now it is time to look at the XGBoost functionality.  Generating a model is as simple as creating a classifier, applying a hyperparameter set, and then running <code>.Fit</code> using the training data (features, and labels).  One small mention, as can be seen, the library uses <code>float32[]</code> for most of it’s numeric interations.</p><p>Once the model is trained, it can be applied using <code>PredictProba</code> against an array of features (that match the structure of the training data).  The result is an array of probabilities per class.  Since this is a binary classification, <code>[0.34, 0.66]</code> means there is a 34% chance the result is false, and 66% chance the result is true.  For the final submission, a percentage is desired, but for training, it is useful to know the binary true/false regarding duplicate question status.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Given training data and hyperparameters, create an xgboost classification model</span></span><br><span class="line"><span class="keyword">let</span> buildXgClassModel (trainInput:float32[][]) (trainOutput:float32[]) (parameters:ModelParameter list) = </span><br><span class="line">    <span class="keyword">let</span> model = XGBClassifier()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// To handle xgboost types, I carry along the type with parameter values, </span></span><br><span class="line">    <span class="comment">// and cast accordingly when I set the values</span></span><br><span class="line">    parameters </span><br><span class="line">    |&gt; List.iter (<span class="keyword">fun</span> parameter -&gt; </span><br><span class="line">        <span class="keyword">match</span> parameter.Type <span class="keyword">with</span></span><br><span class="line">        | Int     -&gt; model.SetParameter(parameter.Name, (int parameter.Value))</span><br><span class="line">        | Float32 -&gt; model.SetParameter(parameter.Name, (float32 parameter.Value)))</span><br><span class="line"></span><br><span class="line">    model.Fit(trainInput, trainOutput)</span><br><span class="line">    model</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionProbabilities (model:XGBClassifier) (inputs:float32[][]) =</span><br><span class="line">    <span class="comment">// Note, provides prob for each class (ex: 0=0.67, 1=0.33)</span></span><br><span class="line">    model.PredictProba(inputs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predictionValues (model:XGBClassifier) (inputs:float32[][]) =</span><br><span class="line">    <span class="comment">// Note, provides prob for each class (ex: 0=0.67, 1=0.33)</span></span><br><span class="line">    <span class="comment">// Higher probability is the class that "wins"</span></span><br><span class="line">    predictionProbabilities model inputs</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> x -&gt; <span class="keyword">if</span> x.[<span class="number">0</span>] &gt; x.[<span class="number">1</span>] <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>To faciliate debugging and improvement, a confusion matrix is very useful.  This, along with an overall accuracy reporting will assign in future developmental interations.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Compares target vs. predicted values</span></span><br><span class="line"><span class="keyword">let</span> comparePredictions (target:float32[]) predicted = </span><br><span class="line">  (target, predicted)</span><br><span class="line">  ||&gt; Array.zip</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> (t, p) -&gt; ((int t) - p) = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Create confusion matrix of results (represented as an array of arrays)</span></span><br><span class="line"><span class="comment">/// Result:</span></span><br><span class="line"><span class="comment">/// [ </span></span><br><span class="line"><span class="comment">///  T=1,P=1  T=1,P=0</span></span><br><span class="line"><span class="comment">///  T=0,P=1  T=0,P=0</span></span><br><span class="line"><span class="comment">/// ]</span></span><br><span class="line"><span class="keyword">let</span> createConfusionMatrix (target:int[]) (predict:int[]) =</span><br><span class="line">  <span class="keyword">let</span> combined = (target, predict) ||&gt; Array.zip</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> aggregateRow combined filter = </span><br><span class="line">    combined</span><br><span class="line">    |&gt; Array.filter (<span class="keyword">fun</span> (_,p) -&gt; p=filter)</span><br><span class="line">    |&gt; Array.map (<span class="keyword">fun</span> (t,p) -&gt; ((<span class="keyword">if</span> t=<span class="number">1</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>), (<span class="keyword">if</span> t=<span class="number">0</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>)))</span><br><span class="line">    |&gt; Array.fold (<span class="keyword">fun</span> (a,b) (x,y) -&gt; (a+x, b+y)) (<span class="number">0</span>,<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pTrue = aggregateRow combined <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> pFalse = aggregateRow combined <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  [|</span><br><span class="line">    [| fst pTrue; snd pTrue |];</span><br><span class="line">    [| fst pFalse; snd pFalse |]</span><br><span class="line">  |]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Print confusion matrix</span></span><br><span class="line"><span class="keyword">let</span> printConfusionMatrix targetValues predictedValues =</span><br><span class="line">  createConfusionMatrix targetValues predictedValues </span><br><span class="line">  |&gt; (<span class="keyword">fun</span> m -&gt; </span><br><span class="line">    printfn <span class="string">"T\P  %6s %6s"</span> <span class="string">"T"</span> <span class="string">"F"</span></span><br><span class="line">    printfn <span class="string">"T    %6d %6d"</span> (m.[<span class="number">0</span>].[<span class="number">0</span>]) (m.[<span class="number">0</span>].[<span class="number">1</span>])</span><br><span class="line">    printfn <span class="string">"F    %6d %6d"</span> (m.[<span class="number">1</span>].[<span class="number">0</span>]) (m.[<span class="number">1</span>].[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Use a model to create predictions from input values, </span></span><br><span class="line"><span class="comment">/// then compare target output to predicted output </span></span><br><span class="line"><span class="keyword">let</span> evaluatePredictionResults model input targetOutput = </span><br><span class="line">  <span class="keyword">let</span> predictedValidationValues = predictionValues model input </span><br><span class="line">  <span class="keyword">let</span> predictedValidationMatches = comparePredictions targetOutput predictedValidationValues</span><br><span class="line">  <span class="keyword">let</span> pctValidationMatches = float (predictedValidationMatches |&gt; Array.filter id |&gt; Array.length) / float (predictedValidationMatches |&gt; Array.length)</span><br><span class="line"></span><br><span class="line">  printfn <span class="string">"Accuracy: %f"</span> pctValidationMatches</span><br><span class="line">  printConfusionMatrix (targetOutput |&gt; Array.map int) predictedValidationValues </span><br></pre></td></tr></table></figure><p>Since the submission file has specific criteria, there are some functions to create the submission file. This is primarily formatting the percents as Kaggle expects and then writing the dataset to a file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Convert probabilities per classification to a single probability</span></span><br><span class="line"><span class="comment">/// Note: if class 0 "wins", invert its percent, since the final result expects low percents to map to class 0.</span></span><br><span class="line"><span class="keyword">let</span> convertPredictionToProbability (probabilities: float32[]) = </span><br><span class="line">  <span class="keyword">if</span> probabilities.[<span class="number">0</span>] &gt; probabilities.[<span class="number">1</span>] </span><br><span class="line">  <span class="keyword">then</span> <span class="number">1.</span>f - probabilities.[<span class="number">0</span>] </span><br><span class="line">  <span class="keyword">else</span> probabilities.[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Combine question ids with prediction results</span></span><br><span class="line"><span class="keyword">let</span> formatSubmissionData (rows:StandardRow[]) (predictions:float32[][]) = </span><br><span class="line">  (rows, predictions)</span><br><span class="line">  ||&gt; Array.zip</span><br><span class="line">  |&gt; Array.map (<span class="keyword">fun</span> (input, prediction) -&gt;</span><br><span class="line">    <span class="keyword">let</span> questionId = input.QuestionId</span><br><span class="line">    <span class="keyword">let</span> probability = convertPredictionToProbability prediction</span><br><span class="line">    (questionId, probability))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write submission data to file</span></span><br><span class="line"><span class="keyword">let</span> writeSubmissionFile (submissionFilename:string) (submissionData: (int * float32)[]) =</span><br><span class="line">    <span class="keyword">let</span> fileStream = <span class="keyword">new</span> StreamWriter(submissionFilename)</span><br><span class="line">    fileStream.WriteLine(<span class="string">"test_id,is_duplicate"</span>)</span><br><span class="line">    submissionData </span><br><span class="line">    |&gt; Array.iter(<span class="keyword">fun</span> (id, probability) -&gt;</span><br><span class="line">        <span class="keyword">let</span> line = sprintf <span class="string">"%d,%f"</span> id probability</span><br><span class="line">        fileStream.WriteLine(line)) </span><br><span class="line">    fileStream.Flush()</span><br><span class="line">    fileStream.Close()</span><br></pre></td></tr></table></figure><p>Now that all the hard work is done, it is time to put it all together.  The first step is data preparation.  First, load the training data and split into train and validation sets.  Second, build dataset level metadata.  Third, run transformations (feature creation) against the datasets.  Fourth, structure the data for model training by generating the appropriate label and features arrays. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Training data</span></span><br><span class="line"><span class="keyword">let</span> allData = TrainData.Load(TrainFilename)</span><br><span class="line"><span class="keyword">let</span> (trainData, validationData) = sample allData TrainPct</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> trainMetadata = metadata trainData </span><br><span class="line"><span class="keyword">let</span> transformedTrainData = transform trainMetadata trainData</span><br><span class="line"><span class="keyword">let</span> transformedValidationData = transform trainMetadata validationData</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> trainInput = transformedTrainData |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.Features)</span><br><span class="line"><span class="keyword">let</span> trainOutput = transformedTrainData |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.Label)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> validationInput = transformedValidationData |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.Features)</span><br><span class="line"><span class="keyword">let</span> validationOutput = transformedValidationData |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.Label)</span><br></pre></td></tr></table></figure><p>Time to train the model.  XGBoost supports the below parameters.  The values shown are populated with some reasonable values for the dataset in question.  Out of scope for this post, but hyperparameter optimization should be leveraged here to find the best training model. In a later post I’ll discuss a simple method to approach this topic.  </p><p>Once trained, report on prediction capability against the original training set as well as the validation set (which the model hasn’t seen).  </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Model training parameters</span></span><br><span class="line"><span class="keyword">let</span> modelParameters =  [</span><br><span class="line">  &#123; Name = <span class="string">"max_depth"</span>;        Type = ModelParameterType.Int;     Value = <span class="number">10.</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"learning_rate"</span>;    Type = ModelParameterType.Float32; Value = <span class="number">0.76</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"gamma"</span>;            Type = ModelParameterType.Float32; Value = <span class="number">1.9</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"min_child_weight"</span>; Type = ModelParameterType.Int;     Value = <span class="number">5.</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"max_delta_step"</span>;   Type = ModelParameterType.Int;     Value = <span class="number">0.</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"subsample"</span>;        Type = ModelParameterType.Float32; Value = <span class="number">0.75</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"colsample"</span>;        Type = ModelParameterType.Float32; Value = <span class="number">0.75</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"reg_lambda"</span>;       Type = ModelParameterType.Float32; Value = <span class="number">4.</span> &#125;;</span><br><span class="line">  &#123; Name = <span class="string">"reg_alpha"</span>;        Type = ModelParameterType.Float32; Value = <span class="number">1.</span> &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Trained model</span></span><br><span class="line"><span class="keyword">let</span> finalModel = buildXgClassModel trainInput trainOutput modelParameters </span><br><span class="line"></span><br><span class="line"><span class="comment">// Predict train values</span></span><br><span class="line">evaluatePredictionResults finalModel trainInput trainOutput</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validate Step</span></span><br><span class="line">evaluatePredictionResults finalModel validationInput validationOutput</span><br></pre></td></tr></table></figure><p>Here are the prediction results of train and test.  The prediction capability isn’t great, but the validation set holds up comparatively well.  At least overfitting isn’t a concern (for now).  This also shows how more and better features have plenty of room for improvement. </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; evaluatePredictionResults finalModel trainInput trainOutput</span><br><span class="line">Accuracy: <span class="number">0.680396</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">53352</span>  <span class="number">36546</span></span><br><span class="line">F     <span class="number">66824</span> <span class="number">166710</span></span><br><span class="line"></span><br><span class="line">&gt; evaluatePredictionResults finalModel validationInput validationOutput</span><br><span class="line">Accuracy: <span class="number">0.651030</span></span><br><span class="line">T\P       T      F</span><br><span class="line">T     <span class="number">11625</span>  <span class="number">10755</span></span><br><span class="line">F     <span class="number">17462</span>  <span class="number">41016</span></span><br></pre></td></tr></table></figure><p>Now it is time to create the final predictions and submission file for Kaggle.  To do this, replicate the validate workflow, with a couple caveats.  First, the test dataset is formatted slightly differently.  Since this is data with no known classificaions, there is no class in the file.  So I need to load the test data, then run the convert so the test data matches the format of the training data.  Second, the submission file needs to be populated with a percent likelihood of the questions being duplicates (not with a straight classification).  Lastly, write the id along with the result to the submission file.</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testData = TestData.Load(TestFilename).Rows |&gt; Seq.toArray</span><br><span class="line"><span class="keyword">let</span> transformedTestData = transform trainMetadata (convertTestToTrainFormat testData)</span><br><span class="line"><span class="keyword">let</span> testInput = transformedTestData |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.Features)</span><br><span class="line"><span class="keyword">let</span> testPredictions = predictionProbabilities finalModel testInput </span><br><span class="line"><span class="keyword">let</span> submissionData = formatSubmissionData transformedTestData testPredictions</span><br><span class="line">writeSubmissionFile SubmissionFilename submissionData</span><br></pre></td></tr></table></figure><p>All that is left to do is submit the file for judging.  Spolier alert, because this is an overly simplified model, it faired poorly.  Like I mentioned in the beginning, the current feature set isn’t good.  In addition, the hyper-parameters could benefit from some search of their own.  These are both topics I plan on discussing in future posts.  F# and .NET still have a couple more tricks up their sleeves to get these results even better.  Hopefully this has provided a bit of inspiration to try F# in your own projects, perhaps even a Kaggle.  Until next time.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today’s topic will be to demonstrate tackling a &lt;a href=&quot;https://www.kaggle.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kaggle&lt;/a&gt; problem with &lt;a href=&quot;https://github.com/dmlc/xgboost&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XGBoost&lt;/a&gt; and &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;F#&lt;/a&gt;.  &lt;a href=&quot;https://www.kaggle.com/c/quora-question-pairs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Comparing Quora question intent&lt;/a&gt; offers a perfect opportunity to work with XGBoost, a common tool used in Kaggle competitions.  Luckily there is a .NET wrapper around the XGBoost library, &lt;a href=&quot;https://github.com/PicNet/XGBoost.Net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XGBoost.Net&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://codesuji.com/tags/F/"/>
    
      <category term="FSharp" scheme="http://codesuji.com/tags/FSharp/"/>
    
      <category term="Machine Learning" scheme="http://codesuji.com/tags/Machine-Learning/"/>
    
      <category term="Kaggle" scheme="http://codesuji.com/tags/Kaggle/"/>
    
      <category term="Analytics" scheme="http://codesuji.com/tags/Analytics/"/>
    
  </entry>
  
</feed>
